

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Sep  7 16:06:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1939
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,delta=2
    83                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text71,local,class=CODE,merge=1,delta=2
    85                           	psect	text72,local,class=CODE,merge=1,delta=2
    86                           	psect	text73,local,class=CODE,merge=1,delta=2
    87                           	psect	text74,local,class=CODE,merge=1,delta=2
    88                           	psect	text75,local,class=CODE,merge=1,delta=2
    89                           	psect	text76,local,class=CODE,merge=1,delta=2
    90                           	psect	text77,local,class=CODE,merge=1,delta=2
    91                           	psect	text78,local,class=CODE,merge=1,delta=2
    92                           	psect	text79,local,class=CODE,merge=1,delta=2
    93                           	psect	text80,local,class=CODE,merge=1,delta=2
    94                           	psect	text81,local,class=CODE,merge=1,delta=2
    95                           	psect	text82,local,class=CODE,merge=1,delta=2
    96                           	psect	text83,local,class=CODE,merge=1,delta=2
    97                           	psect	text84,local,class=CODE,merge=1,delta=2
    98                           	psect	text85,local,class=CODE,merge=1,delta=2
    99                           	psect	text86,local,class=CODE,merge=1,delta=2
   100                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text94,local,class=CODE,merge=1,delta=2
   108                           	psect	text95,local,class=CODE,merge=1,delta=2
   109                           	psect	text96,local,class=CODE,merge=1,delta=2
   110                           	psect	text97,local,class=CODE,merge=1,delta=2
   111                           	psect	text98,local,class=CODE,merge=1,delta=2
   112                           	psect	text99,local,class=CODE,merge=1,delta=2
   113                           	psect	text100,local,class=CODE,merge=1,delta=2
   114                           	psect	text101,local,class=CODE,merge=1,delta=2
   115                           	psect	text102,local,class=CODE,merge=1,delta=2
   116                           	psect	text103,local,class=CODE,merge=1,delta=2
   117                           	psect	text104,local,class=CODE,merge=1,delta=2
   118                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text108,local,class=CODE,merge=1,delta=2
   122                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text110,local,class=CODE,merge=1,delta=2
   124                           	psect	text111,local,class=CODE,merge=1,delta=2
   125                           	psect	text112,local,class=CODE,merge=1,delta=2
   126                           	psect	text113,local,class=CODE,merge=1,delta=2
   127                           	psect	text114,local,class=CODE,merge=1,delta=2
   128                           	psect	text115,local,class=CODE,merge=1,delta=2
   129                           	psect	text116,local,class=CODE,merge=1,delta=2
   130                           	psect	text117,local,class=CODE,merge=1,delta=2
   131                           	dabs	1,0x7E,2
   132  0000                     
   133                           ; Version 2.05
   134                           ; Generated 20/12/2018 GMT
   135                           ; 
   136                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   137                           ; All rights reserved.
   138                           ; 
   139                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   140                           ; 
   141                           ; Redistribution and use in source and binary forms, with or without modification, are
   142                           ; permitted provided that the following conditions are met:
   143                           ; 
   144                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   145                           ;        conditions and the following disclaimer.
   146                           ; 
   147                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   148                           ;        of conditions and the following disclaimer in the documentation and/or other
   149                           ;        materials provided with the distribution.
   150                           ; 
   151                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   152                           ;        software without specific prior written permission.
   153                           ; 
   154                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   155                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   156                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   157                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   158                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   159                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   160                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   161                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   162                           ; 
   163                           ; 
   164                           ; Code-generator required, PIC16F1939 Definitions
   165                           ; 
   166                           ; SFR Addresses
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0013                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001E                     	;# 
   197  001F                     	;# 
   198  008C                     	;# 
   199  008D                     	;# 
   200  008E                     	;# 
   201  008F                     	;# 
   202  0090                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0093                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0098                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0110                     	;# 
   222  0111                     	;# 
   223  0112                     	;# 
   224  0113                     	;# 
   225  0114                     	;# 
   226  0115                     	;# 
   227  0116                     	;# 
   228  0117                     	;# 
   229  0118                     	;# 
   230  0119                     	;# 
   231  011A                     	;# 
   232  011B                     	;# 
   233  011D                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  018F                     	;# 
   237  0190                     	;# 
   238  0191                     	;# 
   239  0191                     	;# 
   240  0192                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0193                     	;# 
   244  0194                     	;# 
   245  0195                     	;# 
   246  0196                     	;# 
   247  0199                     	;# 
   248  019A                     	;# 
   249  019B                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019C                     	;# 
   254  019C                     	;# 
   255  019D                     	;# 
   256  019E                     	;# 
   257  019F                     	;# 
   258  020D                     	;# 
   259  0210                     	;# 
   260  0211                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0214                     	;# 
   264  0215                     	;# 
   265  0215                     	;# 
   266  0216                     	;# 
   267  0217                     	;# 
   268  0291                     	;# 
   269  0291                     	;# 
   270  0292                     	;# 
   271  0293                     	;# 
   272  0294                     	;# 
   273  0295                     	;# 
   274  0295                     	;# 
   275  0296                     	;# 
   276  0298                     	;# 
   277  0298                     	;# 
   278  0299                     	;# 
   279  029A                     	;# 
   280  029B                     	;# 
   281  029C                     	;# 
   282  029C                     	;# 
   283  029D                     	;# 
   284  029E                     	;# 
   285  029F                     	;# 
   286  0311                     	;# 
   287  0311                     	;# 
   288  0312                     	;# 
   289  0313                     	;# 
   290  0314                     	;# 
   291  0315                     	;# 
   292  0315                     	;# 
   293  0316                     	;# 
   294  0318                     	;# 
   295  0318                     	;# 
   296  0319                     	;# 
   297  031A                     	;# 
   298  031C                     	;# 
   299  031C                     	;# 
   300  031D                     	;# 
   301  031E                     	;# 
   302  0394                     	;# 
   303  0395                     	;# 
   304  0396                     	;# 
   305  0415                     	;# 
   306  0416                     	;# 
   307  0417                     	;# 
   308  041C                     	;# 
   309  041D                     	;# 
   310  041E                     	;# 
   311  0791                     	;# 
   312  0792                     	;# 
   313  0793                     	;# 
   314  0794                     	;# 
   315  0795                     	;# 
   316  0798                     	;# 
   317  0799                     	;# 
   318  079A                     	;# 
   319  07A0                     	;# 
   320  07A1                     	;# 
   321  07A2                     	;# 
   322  07A3                     	;# 
   323  07A4                     	;# 
   324  07A5                     	;# 
   325  07A6                     	;# 
   326  07A7                     	;# 
   327  07A8                     	;# 
   328  07A9                     	;# 
   329  07AA                     	;# 
   330  07AB                     	;# 
   331  0FE4                     	;# 
   332  0FE5                     	;# 
   333  0FE6                     	;# 
   334  0FE7                     	;# 
   335  0FE8                     	;# 
   336  0FE9                     	;# 
   337  0FEA                     	;# 
   338  0FEB                     	;# 
   339  0FED                     	;# 
   340  0FEE                     	;# 
   341  0FEF                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0015                     	;# 
   363  0016                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001C                     	;# 
   371  001E                     	;# 
   372  001F                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  008F                     	;# 
   377  0090                     	;# 
   378  0091                     	;# 
   379  0092                     	;# 
   380  0093                     	;# 
   381  0095                     	;# 
   382  0096                     	;# 
   383  0097                     	;# 
   384  0098                     	;# 
   385  0099                     	;# 
   386  009A                     	;# 
   387  009B                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0110                     	;# 
   397  0111                     	;# 
   398  0112                     	;# 
   399  0113                     	;# 
   400  0114                     	;# 
   401  0115                     	;# 
   402  0116                     	;# 
   403  0117                     	;# 
   404  0118                     	;# 
   405  0119                     	;# 
   406  011A                     	;# 
   407  011B                     	;# 
   408  011D                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  018F                     	;# 
   412  0190                     	;# 
   413  0191                     	;# 
   414  0191                     	;# 
   415  0192                     	;# 
   416  0193                     	;# 
   417  0193                     	;# 
   418  0193                     	;# 
   419  0194                     	;# 
   420  0195                     	;# 
   421  0196                     	;# 
   422  0199                     	;# 
   423  019A                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019C                     	;# 
   429  019C                     	;# 
   430  019D                     	;# 
   431  019E                     	;# 
   432  019F                     	;# 
   433  020D                     	;# 
   434  0210                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0291                     	;# 
   444  0291                     	;# 
   445  0292                     	;# 
   446  0293                     	;# 
   447  0294                     	;# 
   448  0295                     	;# 
   449  0295                     	;# 
   450  0296                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  029B                     	;# 
   456  029C                     	;# 
   457  029C                     	;# 
   458  029D                     	;# 
   459  029E                     	;# 
   460  029F                     	;# 
   461  0311                     	;# 
   462  0311                     	;# 
   463  0312                     	;# 
   464  0313                     	;# 
   465  0314                     	;# 
   466  0315                     	;# 
   467  0315                     	;# 
   468  0316                     	;# 
   469  0318                     	;# 
   470  0318                     	;# 
   471  0319                     	;# 
   472  031A                     	;# 
   473  031C                     	;# 
   474  031C                     	;# 
   475  031D                     	;# 
   476  031E                     	;# 
   477  0394                     	;# 
   478  0395                     	;# 
   479  0396                     	;# 
   480  0415                     	;# 
   481  0416                     	;# 
   482  0417                     	;# 
   483  041C                     	;# 
   484  041D                     	;# 
   485  041E                     	;# 
   486  0791                     	;# 
   487  0792                     	;# 
   488  0793                     	;# 
   489  0794                     	;# 
   490  0795                     	;# 
   491  0798                     	;# 
   492  0799                     	;# 
   493  079A                     	;# 
   494  07A0                     	;# 
   495  07A1                     	;# 
   496  07A2                     	;# 
   497  07A3                     	;# 
   498  07A4                     	;# 
   499  07A5                     	;# 
   500  07A6                     	;# 
   501  07A7                     	;# 
   502  07A8                     	;# 
   503  07A9                     	;# 
   504  07AA                     	;# 
   505  07AB                     	;# 
   506  0FE4                     	;# 
   507  0FE5                     	;# 
   508  0FE6                     	;# 
   509  0FE7                     	;# 
   510  0FE8                     	;# 
   511  0FE9                     	;# 
   512  0FEA                     	;# 
   513  0FEB                     	;# 
   514  0FED                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000D                     	;# 
   531  000E                     	;# 
   532  000F                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0015                     	;# 
   538  0016                     	;# 
   539  0016                     	;# 
   540  0017                     	;# 
   541  0018                     	;# 
   542  0019                     	;# 
   543  001A                     	;# 
   544  001B                     	;# 
   545  001C                     	;# 
   546  001E                     	;# 
   547  001F                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  008F                     	;# 
   552  0090                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0093                     	;# 
   556  0095                     	;# 
   557  0096                     	;# 
   558  0097                     	;# 
   559  0098                     	;# 
   560  0099                     	;# 
   561  009A                     	;# 
   562  009B                     	;# 
   563  009B                     	;# 
   564  009C                     	;# 
   565  009D                     	;# 
   566  009E                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0110                     	;# 
   572  0111                     	;# 
   573  0112                     	;# 
   574  0113                     	;# 
   575  0114                     	;# 
   576  0115                     	;# 
   577  0116                     	;# 
   578  0117                     	;# 
   579  0118                     	;# 
   580  0119                     	;# 
   581  011A                     	;# 
   582  011B                     	;# 
   583  011D                     	;# 
   584  018C                     	;# 
   585  018D                     	;# 
   586  018F                     	;# 
   587  0190                     	;# 
   588  0191                     	;# 
   589  0191                     	;# 
   590  0192                     	;# 
   591  0193                     	;# 
   592  0193                     	;# 
   593  0193                     	;# 
   594  0194                     	;# 
   595  0195                     	;# 
   596  0196                     	;# 
   597  0199                     	;# 
   598  019A                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019C                     	;# 
   604  019C                     	;# 
   605  019D                     	;# 
   606  019E                     	;# 
   607  019F                     	;# 
   608  020D                     	;# 
   609  0210                     	;# 
   610  0211                     	;# 
   611  0212                     	;# 
   612  0213                     	;# 
   613  0214                     	;# 
   614  0215                     	;# 
   615  0215                     	;# 
   616  0216                     	;# 
   617  0217                     	;# 
   618  0291                     	;# 
   619  0291                     	;# 
   620  0292                     	;# 
   621  0293                     	;# 
   622  0294                     	;# 
   623  0295                     	;# 
   624  0295                     	;# 
   625  0296                     	;# 
   626  0298                     	;# 
   627  0298                     	;# 
   628  0299                     	;# 
   629  029A                     	;# 
   630  029B                     	;# 
   631  029C                     	;# 
   632  029C                     	;# 
   633  029D                     	;# 
   634  029E                     	;# 
   635  029F                     	;# 
   636  0311                     	;# 
   637  0311                     	;# 
   638  0312                     	;# 
   639  0313                     	;# 
   640  0314                     	;# 
   641  0315                     	;# 
   642  0315                     	;# 
   643  0316                     	;# 
   644  0318                     	;# 
   645  0318                     	;# 
   646  0319                     	;# 
   647  031A                     	;# 
   648  031C                     	;# 
   649  031C                     	;# 
   650  031D                     	;# 
   651  031E                     	;# 
   652  0394                     	;# 
   653  0395                     	;# 
   654  0396                     	;# 
   655  0415                     	;# 
   656  0416                     	;# 
   657  0417                     	;# 
   658  041C                     	;# 
   659  041D                     	;# 
   660  041E                     	;# 
   661  0791                     	;# 
   662  0792                     	;# 
   663  0793                     	;# 
   664  0794                     	;# 
   665  0795                     	;# 
   666  0798                     	;# 
   667  0799                     	;# 
   668  079A                     	;# 
   669  07A0                     	;# 
   670  07A1                     	;# 
   671  07A2                     	;# 
   672  07A3                     	;# 
   673  07A4                     	;# 
   674  07A5                     	;# 
   675  07A6                     	;# 
   676  07A7                     	;# 
   677  07A8                     	;# 
   678  07A9                     	;# 
   679  07AA                     	;# 
   680  07AB                     	;# 
   681  0FE4                     	;# 
   682  0FE5                     	;# 
   683  0FE6                     	;# 
   684  0FE7                     	;# 
   685  0FE8                     	;# 
   686  0FE9                     	;# 
   687  0FEA                     	;# 
   688  0FEB                     	;# 
   689  0FED                     	;# 
   690  0FEE                     	;# 
   691  0FEF                     	;# 
   692  0000                     	;# 
   693  0001                     	;# 
   694  0002                     	;# 
   695  0003                     	;# 
   696  0004                     	;# 
   697  0005                     	;# 
   698  0006                     	;# 
   699  0007                     	;# 
   700  0008                     	;# 
   701  0009                     	;# 
   702  000A                     	;# 
   703  000B                     	;# 
   704  000C                     	;# 
   705  000D                     	;# 
   706  000E                     	;# 
   707  000F                     	;# 
   708  0010                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0013                     	;# 
   712  0015                     	;# 
   713  0016                     	;# 
   714  0016                     	;# 
   715  0017                     	;# 
   716  0018                     	;# 
   717  0019                     	;# 
   718  001A                     	;# 
   719  001B                     	;# 
   720  001C                     	;# 
   721  001E                     	;# 
   722  001F                     	;# 
   723  008C                     	;# 
   724  008D                     	;# 
   725  008E                     	;# 
   726  008F                     	;# 
   727  0090                     	;# 
   728  0091                     	;# 
   729  0092                     	;# 
   730  0093                     	;# 
   731  0095                     	;# 
   732  0096                     	;# 
   733  0097                     	;# 
   734  0098                     	;# 
   735  0099                     	;# 
   736  009A                     	;# 
   737  009B                     	;# 
   738  009B                     	;# 
   739  009C                     	;# 
   740  009D                     	;# 
   741  009E                     	;# 
   742  010C                     	;# 
   743  010D                     	;# 
   744  010E                     	;# 
   745  010F                     	;# 
   746  0110                     	;# 
   747  0111                     	;# 
   748  0112                     	;# 
   749  0113                     	;# 
   750  0114                     	;# 
   751  0115                     	;# 
   752  0116                     	;# 
   753  0117                     	;# 
   754  0118                     	;# 
   755  0119                     	;# 
   756  011A                     	;# 
   757  011B                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018F                     	;# 
   762  0190                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0193                     	;# 
   769  0194                     	;# 
   770  0195                     	;# 
   771  0196                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0213                     	;# 
   788  0214                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0216                     	;# 
   792  0217                     	;# 
   793  0291                     	;# 
   794  0291                     	;# 
   795  0292                     	;# 
   796  0293                     	;# 
   797  0294                     	;# 
   798  0295                     	;# 
   799  0295                     	;# 
   800  0296                     	;# 
   801  0298                     	;# 
   802  0298                     	;# 
   803  0299                     	;# 
   804  029A                     	;# 
   805  029B                     	;# 
   806  029C                     	;# 
   807  029C                     	;# 
   808  029D                     	;# 
   809  029E                     	;# 
   810  029F                     	;# 
   811  0311                     	;# 
   812  0311                     	;# 
   813  0312                     	;# 
   814  0313                     	;# 
   815  0314                     	;# 
   816  0315                     	;# 
   817  0315                     	;# 
   818  0316                     	;# 
   819  0318                     	;# 
   820  0318                     	;# 
   821  0319                     	;# 
   822  031A                     	;# 
   823  031C                     	;# 
   824  031C                     	;# 
   825  031D                     	;# 
   826  031E                     	;# 
   827  0394                     	;# 
   828  0395                     	;# 
   829  0396                     	;# 
   830  0415                     	;# 
   831  0416                     	;# 
   832  0417                     	;# 
   833  041C                     	;# 
   834  041D                     	;# 
   835  041E                     	;# 
   836  0791                     	;# 
   837  0792                     	;# 
   838  0793                     	;# 
   839  0794                     	;# 
   840  0795                     	;# 
   841  0798                     	;# 
   842  0799                     	;# 
   843  079A                     	;# 
   844  07A0                     	;# 
   845  07A1                     	;# 
   846  07A2                     	;# 
   847  07A3                     	;# 
   848  07A4                     	;# 
   849  07A5                     	;# 
   850  07A6                     	;# 
   851  07A7                     	;# 
   852  07A8                     	;# 
   853  07A9                     	;# 
   854  07AA                     	;# 
   855  07AB                     	;# 
   856  0FE4                     	;# 
   857  0FE5                     	;# 
   858  0FE6                     	;# 
   859  0FE7                     	;# 
   860  0FE8                     	;# 
   861  0FE9                     	;# 
   862  0FEA                     	;# 
   863  0FEB                     	;# 
   864  0FED                     	;# 
   865  0FEE                     	;# 
   866  0FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000D                     	;# 
   881  000E                     	;# 
   882  000F                     	;# 
   883  0010                     	;# 
   884  0011                     	;# 
   885  0012                     	;# 
   886  0013                     	;# 
   887  0015                     	;# 
   888  0016                     	;# 
   889  0016                     	;# 
   890  0017                     	;# 
   891  0018                     	;# 
   892  0019                     	;# 
   893  001A                     	;# 
   894  001B                     	;# 
   895  001C                     	;# 
   896  001E                     	;# 
   897  001F                     	;# 
   898  008C                     	;# 
   899  008D                     	;# 
   900  008E                     	;# 
   901  008F                     	;# 
   902  0090                     	;# 
   903  0091                     	;# 
   904  0092                     	;# 
   905  0093                     	;# 
   906  0095                     	;# 
   907  0096                     	;# 
   908  0097                     	;# 
   909  0098                     	;# 
   910  0099                     	;# 
   911  009A                     	;# 
   912  009B                     	;# 
   913  009B                     	;# 
   914  009C                     	;# 
   915  009D                     	;# 
   916  009E                     	;# 
   917  010C                     	;# 
   918  010D                     	;# 
   919  010E                     	;# 
   920  010F                     	;# 
   921  0110                     	;# 
   922  0111                     	;# 
   923  0112                     	;# 
   924  0113                     	;# 
   925  0114                     	;# 
   926  0115                     	;# 
   927  0116                     	;# 
   928  0117                     	;# 
   929  0118                     	;# 
   930  0119                     	;# 
   931  011A                     	;# 
   932  011B                     	;# 
   933  011D                     	;# 
   934  018C                     	;# 
   935  018D                     	;# 
   936  018F                     	;# 
   937  0190                     	;# 
   938  0191                     	;# 
   939  0191                     	;# 
   940  0192                     	;# 
   941  0193                     	;# 
   942  0193                     	;# 
   943  0193                     	;# 
   944  0194                     	;# 
   945  0195                     	;# 
   946  0196                     	;# 
   947  0199                     	;# 
   948  019A                     	;# 
   949  019B                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019B                     	;# 
   953  019C                     	;# 
   954  019C                     	;# 
   955  019D                     	;# 
   956  019E                     	;# 
   957  019F                     	;# 
   958  020D                     	;# 
   959  0210                     	;# 
   960  0211                     	;# 
   961  0212                     	;# 
   962  0213                     	;# 
   963  0214                     	;# 
   964  0215                     	;# 
   965  0215                     	;# 
   966  0216                     	;# 
   967  0217                     	;# 
   968  0291                     	;# 
   969  0291                     	;# 
   970  0292                     	;# 
   971  0293                     	;# 
   972  0294                     	;# 
   973  0295                     	;# 
   974  0295                     	;# 
   975  0296                     	;# 
   976  0298                     	;# 
   977  0298                     	;# 
   978  0299                     	;# 
   979  029A                     	;# 
   980  029B                     	;# 
   981  029C                     	;# 
   982  029C                     	;# 
   983  029D                     	;# 
   984  029E                     	;# 
   985  029F                     	;# 
   986  0311                     	;# 
   987  0311                     	;# 
   988  0312                     	;# 
   989  0313                     	;# 
   990  0314                     	;# 
   991  0315                     	;# 
   992  0315                     	;# 
   993  0316                     	;# 
   994  0318                     	;# 
   995  0318                     	;# 
   996  0319                     	;# 
   997  031A                     	;# 
   998  031C                     	;# 
   999  031C                     	;# 
  1000  031D                     	;# 
  1001  031E                     	;# 
  1002  0394                     	;# 
  1003  0395                     	;# 
  1004  0396                     	;# 
  1005  0415                     	;# 
  1006  0416                     	;# 
  1007  0417                     	;# 
  1008  041C                     	;# 
  1009  041D                     	;# 
  1010  041E                     	;# 
  1011  0791                     	;# 
  1012  0792                     	;# 
  1013  0793                     	;# 
  1014  0794                     	;# 
  1015  0795                     	;# 
  1016  0798                     	;# 
  1017  0799                     	;# 
  1018  079A                     	;# 
  1019  07A0                     	;# 
  1020  07A1                     	;# 
  1021  07A2                     	;# 
  1022  07A3                     	;# 
  1023  07A4                     	;# 
  1024  07A5                     	;# 
  1025  07A6                     	;# 
  1026  07A7                     	;# 
  1027  07A8                     	;# 
  1028  07A9                     	;# 
  1029  07AA                     	;# 
  1030  07AB                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  000E                     	;# 
  1057  000F                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  001E                     	;# 
  1072  001F                     	;# 
  1073  008C                     	;# 
  1074  008D                     	;# 
  1075  008E                     	;# 
  1076  008F                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0093                     	;# 
  1081  0095                     	;# 
  1082  0096                     	;# 
  1083  0097                     	;# 
  1084  0098                     	;# 
  1085  0099                     	;# 
  1086  009A                     	;# 
  1087  009B                     	;# 
  1088  009B                     	;# 
  1089  009C                     	;# 
  1090  009D                     	;# 
  1091  009E                     	;# 
  1092  010C                     	;# 
  1093  010D                     	;# 
  1094  010E                     	;# 
  1095  010F                     	;# 
  1096  0110                     	;# 
  1097  0111                     	;# 
  1098  0112                     	;# 
  1099  0113                     	;# 
  1100  0114                     	;# 
  1101  0115                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  0118                     	;# 
  1105  0119                     	;# 
  1106  011A                     	;# 
  1107  011B                     	;# 
  1108  011D                     	;# 
  1109  018C                     	;# 
  1110  018D                     	;# 
  1111  018F                     	;# 
  1112  0190                     	;# 
  1113  0191                     	;# 
  1114  0191                     	;# 
  1115  0192                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0194                     	;# 
  1120  0195                     	;# 
  1121  0196                     	;# 
  1122  0199                     	;# 
  1123  019A                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019F                     	;# 
  1133  020D                     	;# 
  1134  0210                     	;# 
  1135  0211                     	;# 
  1136  0212                     	;# 
  1137  0213                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0294                     	;# 
  1148  0295                     	;# 
  1149  0295                     	;# 
  1150  0296                     	;# 
  1151  0298                     	;# 
  1152  0298                     	;# 
  1153  0299                     	;# 
  1154  029A                     	;# 
  1155  029B                     	;# 
  1156  029C                     	;# 
  1157  029C                     	;# 
  1158  029D                     	;# 
  1159  029E                     	;# 
  1160  029F                     	;# 
  1161  0311                     	;# 
  1162  0311                     	;# 
  1163  0312                     	;# 
  1164  0313                     	;# 
  1165  0314                     	;# 
  1166  0315                     	;# 
  1167  0315                     	;# 
  1168  0316                     	;# 
  1169  0318                     	;# 
  1170  0318                     	;# 
  1171  0319                     	;# 
  1172  031A                     	;# 
  1173  031C                     	;# 
  1174  031C                     	;# 
  1175  031D                     	;# 
  1176  031E                     	;# 
  1177  0394                     	;# 
  1178  0395                     	;# 
  1179  0396                     	;# 
  1180  0415                     	;# 
  1181  0416                     	;# 
  1182  0417                     	;# 
  1183  041C                     	;# 
  1184  041D                     	;# 
  1185  041E                     	;# 
  1186  0791                     	;# 
  1187  0792                     	;# 
  1188  0793                     	;# 
  1189  0794                     	;# 
  1190  0795                     	;# 
  1191  0798                     	;# 
  1192  0799                     	;# 
  1193  079A                     	;# 
  1194  07A0                     	;# 
  1195  07A1                     	;# 
  1196  07A2                     	;# 
  1197  07A3                     	;# 
  1198  07A4                     	;# 
  1199  07A5                     	;# 
  1200  07A6                     	;# 
  1201  07A7                     	;# 
  1202  07A8                     	;# 
  1203  07A9                     	;# 
  1204  07AA                     	;# 
  1205  07AB                     	;# 
  1206  0FE4                     	;# 
  1207  0FE5                     	;# 
  1208  0FE6                     	;# 
  1209  0FE7                     	;# 
  1210  0FE8                     	;# 
  1211  0FE9                     	;# 
  1212  0FEA                     	;# 
  1213  0FEB                     	;# 
  1214  0FED                     	;# 
  1215  0FEE                     	;# 
  1216  0FEF                     	;# 
  1217  0000                     	;# 
  1218  0001                     	;# 
  1219  0002                     	;# 
  1220  0003                     	;# 
  1221  0004                     	;# 
  1222  0005                     	;# 
  1223  0006                     	;# 
  1224  0007                     	;# 
  1225  0008                     	;# 
  1226  0009                     	;# 
  1227  000A                     	;# 
  1228  000B                     	;# 
  1229  000C                     	;# 
  1230  000D                     	;# 
  1231  000E                     	;# 
  1232  000F                     	;# 
  1233  0010                     	;# 
  1234  0011                     	;# 
  1235  0012                     	;# 
  1236  0013                     	;# 
  1237  0015                     	;# 
  1238  0016                     	;# 
  1239  0016                     	;# 
  1240  0017                     	;# 
  1241  0018                     	;# 
  1242  0019                     	;# 
  1243  001A                     	;# 
  1244  001B                     	;# 
  1245  001C                     	;# 
  1246  001E                     	;# 
  1247  001F                     	;# 
  1248  008C                     	;# 
  1249  008D                     	;# 
  1250  008E                     	;# 
  1251  008F                     	;# 
  1252  0090                     	;# 
  1253  0091                     	;# 
  1254  0092                     	;# 
  1255  0093                     	;# 
  1256  0095                     	;# 
  1257  0096                     	;# 
  1258  0097                     	;# 
  1259  0098                     	;# 
  1260  0099                     	;# 
  1261  009A                     	;# 
  1262  009B                     	;# 
  1263  009B                     	;# 
  1264  009C                     	;# 
  1265  009D                     	;# 
  1266  009E                     	;# 
  1267  010C                     	;# 
  1268  010D                     	;# 
  1269  010E                     	;# 
  1270  010F                     	;# 
  1271  0110                     	;# 
  1272  0111                     	;# 
  1273  0112                     	;# 
  1274  0113                     	;# 
  1275  0114                     	;# 
  1276  0115                     	;# 
  1277  0116                     	;# 
  1278  0117                     	;# 
  1279  0118                     	;# 
  1280  0119                     	;# 
  1281  011A                     	;# 
  1282  011B                     	;# 
  1283  011D                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018F                     	;# 
  1287  0190                     	;# 
  1288  0191                     	;# 
  1289  0191                     	;# 
  1290  0192                     	;# 
  1291  0193                     	;# 
  1292  0193                     	;# 
  1293  0193                     	;# 
  1294  0194                     	;# 
  1295  0195                     	;# 
  1296  0196                     	;# 
  1297  0199                     	;# 
  1298  019A                     	;# 
  1299  019B                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019B                     	;# 
  1303  019C                     	;# 
  1304  019C                     	;# 
  1305  019D                     	;# 
  1306  019E                     	;# 
  1307  019F                     	;# 
  1308  020D                     	;# 
  1309  0210                     	;# 
  1310  0211                     	;# 
  1311  0212                     	;# 
  1312  0213                     	;# 
  1313  0214                     	;# 
  1314  0215                     	;# 
  1315  0215                     	;# 
  1316  0216                     	;# 
  1317  0217                     	;# 
  1318  0291                     	;# 
  1319  0291                     	;# 
  1320  0292                     	;# 
  1321  0293                     	;# 
  1322  0294                     	;# 
  1323  0295                     	;# 
  1324  0295                     	;# 
  1325  0296                     	;# 
  1326  0298                     	;# 
  1327  0298                     	;# 
  1328  0299                     	;# 
  1329  029A                     	;# 
  1330  029B                     	;# 
  1331  029C                     	;# 
  1332  029C                     	;# 
  1333  029D                     	;# 
  1334  029E                     	;# 
  1335  029F                     	;# 
  1336  0311                     	;# 
  1337  0311                     	;# 
  1338  0312                     	;# 
  1339  0313                     	;# 
  1340  0314                     	;# 
  1341  0315                     	;# 
  1342  0315                     	;# 
  1343  0316                     	;# 
  1344  0318                     	;# 
  1345  0318                     	;# 
  1346  0319                     	;# 
  1347  031A                     	;# 
  1348  031C                     	;# 
  1349  031C                     	;# 
  1350  031D                     	;# 
  1351  031E                     	;# 
  1352  0394                     	;# 
  1353  0395                     	;# 
  1354  0396                     	;# 
  1355  0415                     	;# 
  1356  0416                     	;# 
  1357  0417                     	;# 
  1358  041C                     	;# 
  1359  041D                     	;# 
  1360  041E                     	;# 
  1361  0791                     	;# 
  1362  0792                     	;# 
  1363  0793                     	;# 
  1364  0794                     	;# 
  1365  0795                     	;# 
  1366  0798                     	;# 
  1367  0799                     	;# 
  1368  079A                     	;# 
  1369  07A0                     	;# 
  1370  07A1                     	;# 
  1371  07A2                     	;# 
  1372  07A3                     	;# 
  1373  07A4                     	;# 
  1374  07A5                     	;# 
  1375  07A6                     	;# 
  1376  07A7                     	;# 
  1377  07A8                     	;# 
  1378  07A9                     	;# 
  1379  07AA                     	;# 
  1380  07AB                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE9                     	;# 
  1387  0FEA                     	;# 
  1388  0FEB                     	;# 
  1389  0FED                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000D                     	;# 
  1406  000E                     	;# 
  1407  000F                     	;# 
  1408  0010                     	;# 
  1409  0011                     	;# 
  1410  0012                     	;# 
  1411  0013                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  001E                     	;# 
  1422  001F                     	;# 
  1423  008C                     	;# 
  1424  008D                     	;# 
  1425  008E                     	;# 
  1426  008F                     	;# 
  1427  0090                     	;# 
  1428  0091                     	;# 
  1429  0092                     	;# 
  1430  0093                     	;# 
  1431  0095                     	;# 
  1432  0096                     	;# 
  1433  0097                     	;# 
  1434  0098                     	;# 
  1435  0099                     	;# 
  1436  009A                     	;# 
  1437  009B                     	;# 
  1438  009B                     	;# 
  1439  009C                     	;# 
  1440  009D                     	;# 
  1441  009E                     	;# 
  1442  010C                     	;# 
  1443  010D                     	;# 
  1444  010E                     	;# 
  1445  010F                     	;# 
  1446  0110                     	;# 
  1447  0111                     	;# 
  1448  0112                     	;# 
  1449  0113                     	;# 
  1450  0114                     	;# 
  1451  0115                     	;# 
  1452  0116                     	;# 
  1453  0117                     	;# 
  1454  0118                     	;# 
  1455  0119                     	;# 
  1456  011A                     	;# 
  1457  011B                     	;# 
  1458  011D                     	;# 
  1459  018C                     	;# 
  1460  018D                     	;# 
  1461  018F                     	;# 
  1462  0190                     	;# 
  1463  0191                     	;# 
  1464  0191                     	;# 
  1465  0192                     	;# 
  1466  0193                     	;# 
  1467  0193                     	;# 
  1468  0193                     	;# 
  1469  0194                     	;# 
  1470  0195                     	;# 
  1471  0196                     	;# 
  1472  0199                     	;# 
  1473  019A                     	;# 
  1474  019B                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019B                     	;# 
  1478  019C                     	;# 
  1479  019C                     	;# 
  1480  019D                     	;# 
  1481  019E                     	;# 
  1482  019F                     	;# 
  1483  020D                     	;# 
  1484  0210                     	;# 
  1485  0211                     	;# 
  1486  0212                     	;# 
  1487  0213                     	;# 
  1488  0214                     	;# 
  1489  0215                     	;# 
  1490  0215                     	;# 
  1491  0216                     	;# 
  1492  0217                     	;# 
  1493  0291                     	;# 
  1494  0291                     	;# 
  1495  0292                     	;# 
  1496  0293                     	;# 
  1497  0294                     	;# 
  1498  0295                     	;# 
  1499  0295                     	;# 
  1500  0296                     	;# 
  1501  0298                     	;# 
  1502  0298                     	;# 
  1503  0299                     	;# 
  1504  029A                     	;# 
  1505  029B                     	;# 
  1506  029C                     	;# 
  1507  029C                     	;# 
  1508  029D                     	;# 
  1509  029E                     	;# 
  1510  029F                     	;# 
  1511  0311                     	;# 
  1512  0311                     	;# 
  1513  0312                     	;# 
  1514  0313                     	;# 
  1515  0314                     	;# 
  1516  0315                     	;# 
  1517  0315                     	;# 
  1518  0316                     	;# 
  1519  0318                     	;# 
  1520  0318                     	;# 
  1521  0319                     	;# 
  1522  031A                     	;# 
  1523  031C                     	;# 
  1524  031C                     	;# 
  1525  031D                     	;# 
  1526  031E                     	;# 
  1527  0394                     	;# 
  1528  0395                     	;# 
  1529  0396                     	;# 
  1530  0415                     	;# 
  1531  0416                     	;# 
  1532  0417                     	;# 
  1533  041C                     	;# 
  1534  041D                     	;# 
  1535  041E                     	;# 
  1536  0791                     	;# 
  1537  0792                     	;# 
  1538  0793                     	;# 
  1539  0794                     	;# 
  1540  0795                     	;# 
  1541  0798                     	;# 
  1542  0799                     	;# 
  1543  079A                     	;# 
  1544  07A0                     	;# 
  1545  07A1                     	;# 
  1546  07A2                     	;# 
  1547  07A3                     	;# 
  1548  07A4                     	;# 
  1549  07A5                     	;# 
  1550  07A6                     	;# 
  1551  07A7                     	;# 
  1552  07A8                     	;# 
  1553  07A9                     	;# 
  1554  07AA                     	;# 
  1555  07AB                     	;# 
  1556  0FE4                     	;# 
  1557  0FE5                     	;# 
  1558  0FE6                     	;# 
  1559  0FE7                     	;# 
  1560  0FE8                     	;# 
  1561  0FE9                     	;# 
  1562  0FEA                     	;# 
  1563  0FEB                     	;# 
  1564  0FED                     	;# 
  1565  0FEE                     	;# 
  1566  0FEF                     	;# 
  1567  0000                     	;# 
  1568  0001                     	;# 
  1569  0002                     	;# 
  1570  0003                     	;# 
  1571  0004                     	;# 
  1572  0005                     	;# 
  1573  0006                     	;# 
  1574  0007                     	;# 
  1575  0008                     	;# 
  1576  0009                     	;# 
  1577  000A                     	;# 
  1578  000B                     	;# 
  1579  000C                     	;# 
  1580  000D                     	;# 
  1581  000E                     	;# 
  1582  000F                     	;# 
  1583  0010                     	;# 
  1584  0011                     	;# 
  1585  0012                     	;# 
  1586  0013                     	;# 
  1587  0015                     	;# 
  1588  0016                     	;# 
  1589  0016                     	;# 
  1590  0017                     	;# 
  1591  0018                     	;# 
  1592  0019                     	;# 
  1593  001A                     	;# 
  1594  001B                     	;# 
  1595  001C                     	;# 
  1596  001E                     	;# 
  1597  001F                     	;# 
  1598  008C                     	;# 
  1599  008D                     	;# 
  1600  008E                     	;# 
  1601  008F                     	;# 
  1602  0090                     	;# 
  1603  0091                     	;# 
  1604  0092                     	;# 
  1605  0093                     	;# 
  1606  0095                     	;# 
  1607  0096                     	;# 
  1608  0097                     	;# 
  1609  0098                     	;# 
  1610  0099                     	;# 
  1611  009A                     	;# 
  1612  009B                     	;# 
  1613  009B                     	;# 
  1614  009C                     	;# 
  1615  009D                     	;# 
  1616  009E                     	;# 
  1617  010C                     	;# 
  1618  010D                     	;# 
  1619  010E                     	;# 
  1620  010F                     	;# 
  1621  0110                     	;# 
  1622  0111                     	;# 
  1623  0112                     	;# 
  1624  0113                     	;# 
  1625  0114                     	;# 
  1626  0115                     	;# 
  1627  0116                     	;# 
  1628  0117                     	;# 
  1629  0118                     	;# 
  1630  0119                     	;# 
  1631  011A                     	;# 
  1632  011B                     	;# 
  1633  011D                     	;# 
  1634  018C                     	;# 
  1635  018D                     	;# 
  1636  018F                     	;# 
  1637  0190                     	;# 
  1638  0191                     	;# 
  1639  0191                     	;# 
  1640  0192                     	;# 
  1641  0193                     	;# 
  1642  0193                     	;# 
  1643  0193                     	;# 
  1644  0194                     	;# 
  1645  0195                     	;# 
  1646  0196                     	;# 
  1647  0199                     	;# 
  1648  019A                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019C                     	;# 
  1654  019C                     	;# 
  1655  019D                     	;# 
  1656  019E                     	;# 
  1657  019F                     	;# 
  1658  020D                     	;# 
  1659  0210                     	;# 
  1660  0211                     	;# 
  1661  0212                     	;# 
  1662  0213                     	;# 
  1663  0214                     	;# 
  1664  0215                     	;# 
  1665  0215                     	;# 
  1666  0216                     	;# 
  1667  0217                     	;# 
  1668  0291                     	;# 
  1669  0291                     	;# 
  1670  0292                     	;# 
  1671  0293                     	;# 
  1672  0294                     	;# 
  1673  0295                     	;# 
  1674  0295                     	;# 
  1675  0296                     	;# 
  1676  0298                     	;# 
  1677  0298                     	;# 
  1678  0299                     	;# 
  1679  029A                     	;# 
  1680  029B                     	;# 
  1681  029C                     	;# 
  1682  029C                     	;# 
  1683  029D                     	;# 
  1684  029E                     	;# 
  1685  029F                     	;# 
  1686  0311                     	;# 
  1687  0311                     	;# 
  1688  0312                     	;# 
  1689  0313                     	;# 
  1690  0314                     	;# 
  1691  0315                     	;# 
  1692  0315                     	;# 
  1693  0316                     	;# 
  1694  0318                     	;# 
  1695  0318                     	;# 
  1696  0319                     	;# 
  1697  031A                     	;# 
  1698  031C                     	;# 
  1699  031C                     	;# 
  1700  031D                     	;# 
  1701  031E                     	;# 
  1702  0394                     	;# 
  1703  0395                     	;# 
  1704  0396                     	;# 
  1705  0415                     	;# 
  1706  0416                     	;# 
  1707  0417                     	;# 
  1708  041C                     	;# 
  1709  041D                     	;# 
  1710  041E                     	;# 
  1711  0791                     	;# 
  1712  0792                     	;# 
  1713  0793                     	;# 
  1714  0794                     	;# 
  1715  0795                     	;# 
  1716  0798                     	;# 
  1717  0799                     	;# 
  1718  079A                     	;# 
  1719  07A0                     	;# 
  1720  07A1                     	;# 
  1721  07A2                     	;# 
  1722  07A3                     	;# 
  1723  07A4                     	;# 
  1724  07A5                     	;# 
  1725  07A6                     	;# 
  1726  07A7                     	;# 
  1727  07A8                     	;# 
  1728  07A9                     	;# 
  1729  07AA                     	;# 
  1730  07AB                     	;# 
  1731  0FE4                     	;# 
  1732  0FE5                     	;# 
  1733  0FE6                     	;# 
  1734  0FE7                     	;# 
  1735  0FE8                     	;# 
  1736  0FE9                     	;# 
  1737  0FEA                     	;# 
  1738  0FEB                     	;# 
  1739  0FED                     	;# 
  1740  0FEE                     	;# 
  1741  0FEF                     	;# 
  1742                           
  1743                           	psect	stringtext1
  1744  05EA                     __pstringtext1:	
  1745  05EA                     _fsmStateTable:	
  1746  05EA  34A4               	retlw	low _do_I2C_IDLE
  1747  05EB  340F               	retlw	high _do_I2C_IDLE
  1748  05EC  34D8               	retlw	low _do_I2C_SEND_ADR_READ
  1749  05ED  3407               	retlw	high _do_I2C_SEND_ADR_READ
  1750  05EE  34EA               	retlw	low _do_I2C_SEND_ADR_WRITE
  1751  05EF  340F               	retlw	high _do_I2C_SEND_ADR_WRITE
  1752  05F0  3405               	retlw	low _do_I2C_TX
  1753  05F1  3402               	retlw	high _do_I2C_TX
  1754  05F2  34A4               	retlw	low _do_I2C_RX
  1755  05F3  3402               	retlw	high _do_I2C_RX
  1756  05F4  34C1               	retlw	low _do_I2C_RCEN
  1757  05F5  340F               	retlw	high _do_I2C_RCEN
  1758  05F6  34F0               	retlw	low _do_I2C_TX_EMPTY
  1759  05F7  3403               	retlw	high _do_I2C_TX_EMPTY
  1760  05F8  3463               	retlw	low _do_I2C_SEND_RESTART_READ
  1761  05F9  340F               	retlw	high _do_I2C_SEND_RESTART_READ
  1762  05FA  346B               	retlw	low _do_I2C_SEND_RESTART_WRITE
  1763  05FB  340F               	retlw	high _do_I2C_SEND_RESTART_WRITE
  1764  05FC  3473               	retlw	low _do_I2C_SEND_RESTART
  1765  05FD  340F               	retlw	high _do_I2C_SEND_RESTART
  1766  05FE  347B               	retlw	low _do_I2C_SEND_STOP
  1767  05FF  340F               	retlw	high _do_I2C_SEND_STOP
  1768  0600  3483               	retlw	low _do_I2C_DO_ACK
  1769  0601  340F               	retlw	high _do_I2C_DO_ACK
  1770  0602  348B               	retlw	low _do_I2C_DO_NACK_STOP
  1771  0603  340F               	retlw	high _do_I2C_DO_NACK_STOP
  1772  0604  3493               	retlw	low _do_I2C_DO_NACK_RESTART
  1773  0605  340F               	retlw	high _do_I2C_DO_NACK_RESTART
  1774  0606  34DF               	retlw	low _do_I2C_RESET
  1775  0607  340F               	retlw	high _do_I2C_RESET
  1776  0608  3455               	retlw	low _do_I2C_DO_ADDRESS_NACK
  1777  0609  3404               	retlw	high _do_I2C_DO_ADDRESS_NACK
  1778  060A                     __end_of_fsmStateTable:	
  1779                           
  1780                           	psect	stringtext2
  1781  1000                     __pstringtext2:	
  1782  1000                     _displayNum:	
  1783  1000  34FC               	retlw	252
  1784  1001  3460               	retlw	96
  1785  1002  34DA               	retlw	218
  1786  1003  34F2               	retlw	242
  1787  1004  3466               	retlw	102
  1788  1005  34B6               	retlw	182
  1789  1006  34BE               	retlw	190
  1790  1007  34E0               	retlw	224
  1791  1008  34FE               	retlw	254
  1792  1009  34F6               	retlw	246
  1793  100A                     __end_of_displayNum:	
  1794                           
  1795                           	psect	nvBANK0
  1796  006E                     __pnvBANK0:	
  1797  006E                     _IOCBF4_InterruptHandler:	
  1798  006E                     	ds	2
  1799  000D                     _PORTBbits	set	13
  1800  0015                     _TMR0	set	21
  1801  0011                     _PIR1bits	set	17
  1802  0012                     _PIR2bits	set	18
  1803  000B                     _INTCONbits	set	11
  1804  0095                     _OPTION_REG	set	149
  1805  0095                     _OPTION_REGbits	set	149
  1806  008F                     _TRISD	set	143
  1807  008E                     _TRISC	set	142
  1808  008D                     _TRISB	set	141
  1809  008C                     _TRISA	set	140
  1810  0090                     _TRISE	set	144
  1811  0097                     _WDTCON	set	151
  1812  0098                     _OSCTUNE	set	152
  1813  0099                     _OSCCON	set	153
  1814  0091                     _PIE1bits	set	145
  1815  0092                     _PIE2bits	set	146
  1816  04D6                     _PLLR	set	1238
  1817  010C                     _LATAbits	set	268
  1818  010E                     _LATCbits	set	270
  1819  0110                     _LATEbits	set	272
  1820  011D                     _APFCON	set	285
  1821  010E                     _LATC	set	270
  1822  010D                     _LATB	set	269
  1823  010C                     _LATA	set	268
  1824  010F                     _LATD	set	271
  1825  0110                     _LATE	set	272
  1826  0116                     _BORCON	set	278
  1827  018C                     _ANSELA	set	396
  1828  0190                     _ANSELE	set	400
  1829  018D                     _ANSELB	set	397
  1830  018F                     _ANSELD	set	399
  1831  0196                     _EECON2	set	406
  1832  0193                     _EEDATL	set	403
  1833  0194                     _EEDATH	set	404
  1834  0195                     _EECON1bits	set	405
  1835  0192                     _EEADRH	set	402
  1836  0191                     _EEADRL	set	401
  1837  0214                     _SSPSTATbits	set	532
  1838  0213                     _SSPMSK	set	531
  1839  0211                     _SSPBUF	set	529
  1840  0216                     _SSPCON2bits	set	534
  1841  0212                     _SSPADD	set	530
  1842  0216                     _SSPCON2	set	534
  1843  0215                     _SSPCON1	set	533
  1844  0214                     _SSPSTAT	set	532
  1845  0215                     _SSPCON1bits	set	533
  1846  020D                     _WPUB	set	525
  1847  0210                     _WPUE	set	528
  1848  0394                     _IOCBPbits	set	916
  1849  0395                     _IOCBNbits	set	917
  1850  0396                     _IOCBFbits	set	918
  1851                           
  1852                           ; #config settings
  1853  0000                     
  1854                           	psect	cinit
  1855  0031                     start_initialization:	
  1856  0031                     __initialization:	
  1857                           
  1858                           ; Clear objects allocated to COMMON
  1859  0031  01F8               	clrf	__pbssCOMMON& (0+127)
  1860  0032  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1861  0033  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1862  0034  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1863  0035  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1864  0036  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  1865                           
  1866                           ; Clear objects allocated to BANK0
  1867  0037  3020               	movlw	low __pbssBANK0
  1868  0038  0084               	movwf	4
  1869  0039  3000               	movlw	high __pbssBANK0
  1870  003A  0085               	movwf	5
  1871  003B  3037               	movlw	55
  1872  003C  318F  2738         	fcall	clear_ram0
  1873  003E                     end_of_initialization:	
  1874                           ;End of C runtime variable initialization code
  1875                           
  1876  003E                     __end_of__initialization:	
  1877  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1878  003F  0020               	movlb	0
  1879  0040  3180  2842         	ljmp	_main	;jump to C main() function
  1880                           
  1881                           	psect	bssCOMMON
  1882  0078                     __pbssCOMMON:	
  1883  0078                     _TMR0_InterruptHandler:	
  1884  0078                     	ds	2
  1885  007A                     _i2c_driver_busCollisionISR:	
  1886  007A                     	ds	2
  1887  007C                     displayRefreshISR@i:	
  1888  007C                     	ds	1
  1889  007D                     _timer0ReloadVal:	
  1890  007D                     	ds	1
  1891                           
  1892                           	psect	bssBANK0
  1893  0020                     __pbssBANK0:	
  1894  0020                     _i2c_status:	
  1895  0020                     	ds	29
  1896  003D                     _button_press_count:	
  1897  003D                     	ds	4
  1898  0041                     _flag_button_press_count:	
  1899  0041                     	ds	4
  1900  0045                     _displayBuff:	
  1901  0045                     	ds	4
  1902  0049                     _i2c_driver_i2cISR:	
  1903  0049                     	ds	2
  1904  004B                     _mode_timeout_count:	
  1905  004B                     	ds	1
  1906  004C                     _mode:	
  1907  004C                     	ds	1
  1908  004D                     _flag_time_display_update:	
  1909  004D                     	ds	1
  1910  004E                     _rtcData:	
  1911  004E                     	ds	9
  1912                           
  1913                           	psect	clrtext
  1914  0F38                     clear_ram0:	
  1915                           ;	Called with FSR0 containing the base address, and
  1916                           ;	WREG with the size to clear
  1917                           
  1918  0F38  0064               	clrwdt	;clear the watchdog before getting into this loop
  1919  0F39                     clrloop0:	
  1920  0F39  0180               	clrf	0	;clear RAM location pointed to by FSR
  1921  0F3A  3101               	addfsr 0,1
  1922  0F3B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1923  0F3C  2F39               	goto	clrloop0	;have we reached the end yet?
  1924  0F3D  3400               	retlw	0	;all done for this memory range, return
  1925                           
  1926                           	psect	cstackCOMMON
  1927  0070                     __pcstackCOMMON:	
  1928  0070                     ?_i2c_driver_open:	
  1929  0070                     ?_mssp_IRQisEnabled:	
  1930                           ; 1 bit 
  1931                           
  1932  0070                     ?_i2c_driver_isNACK:	
  1933                           ; 1 bit 
  1934                           
  1935  0070                     ?i1_i2c_driver_isNACK:	
  1936                           ; 1 bit 
  1937                           
  1938  0070                     ?_TMR0_ISR:	
  1939                           ; 1 bit 
  1940                           
  1941  0070                     ?_PIN_MANAGER_IOC:	
  1942                           ; 1 bytes @ 0x0
  1943                           
  1944  0070                     ??_PIN_MANAGER_IOC:	
  1945                           ; 1 bytes @ 0x0
  1946                           
  1947  0070                     ?_PIN_MANAGER_Initialize:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0070                     ?_OSCILLATOR_Initialize:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0070                     ?_WDT_Initialize:	
  1954                           ; 1 bytes @ 0x0
  1955                           
  1956  0070                     ?_TMR0_Initialize:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0070                     ?_IOCBF4_DefaultInterruptHandler:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ??_IOCBF4_DefaultInterruptHandler:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ?_IOCBF4_ISR:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ??_IOCBF4_ISR:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_TMR0_DefaultInterruptHandler:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ??_TMR0_DefaultInterruptHandler:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_TMR0_CallBack:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ?_secondISR:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ??_secondISR:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_displayRefreshISR:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ??_displayRefreshISR:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_mssp_clearIRQ:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_i2c_busCollisionISR:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ??_i2c_busCollisionISR:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_i2c_ISR:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_mssp_disableIRQ:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_i2c_driver_start:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_i2c_poller:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_mssp_waitForEvent:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_i2c_driver_resetBus:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_i2c_driver_restart:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_i2c_driver_stop:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_i2c_driver_TXData:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_i2c_driver_startRX:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_i2c_driver_sendACK:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_i2c_driver_sendNACK:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_i2c_driver_getRXData:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_mssp_setIRQ:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_i2c_driver_clearBusCollision:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ??_i2c_driver_clearBusCollision:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_INTERRUPT_InterruptManager:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ?_SYSTEM_Initialize:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_initRTC:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_bcdHourIncr:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_bcdHourDecr:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ?_bcdMinuteIncr:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?_bcdMinuteDecr:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?_main:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ?_i2c_open:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?_i2c_close:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_i2c_masterOperation:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_i2c_masterWrite:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085  0070                     ?_do_I2C_RESET:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088  0070                     ?_do_I2C_IDLE:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091  0070                     ?_do_I2C_SEND_RESTART_READ:	
  2092                           ; 1 bytes @ 0x0
  2093                           
  2094  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  0070                     ?_do_I2C_SEND_RESTART:	
  2098                           ; 1 bytes @ 0x0
  2099                           
  2100  0070                     ?_do_I2C_SEND_STOP:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ?_do_I2C_SEND_ADR_READ:	
  2104                           ; 1 bytes @ 0x0
  2105                           
  2106  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  2107                           ; 1 bytes @ 0x0
  2108                           
  2109  0070                     ?_do_I2C_RCEN:	
  2110                           ; 1 bytes @ 0x0
  2111                           
  2112  0070                     ?_do_I2C_DO_ACK:	
  2113                           ; 1 bytes @ 0x0
  2114                           
  2115  0070                     ?_do_I2C_DO_NACK_STOP:	
  2116                           ; 1 bytes @ 0x0
  2117                           
  2118  0070                     ?_do_I2C_DO_NACK_RESTART:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  2122                           ; 1 bytes @ 0x0
  2123                           
  2124  0070                     ?_do_I2C_TX:	
  2125                           ; 1 bytes @ 0x0
  2126                           
  2127  0070                     ?_do_I2C_RX:	
  2128                           ; 1 bytes @ 0x0
  2129                           
  2130  0070                     ?_do_I2C_TX_EMPTY:	
  2131                           ; 1 bytes @ 0x0
  2132                           
  2133  0070                     ?i1_i2c_setBuffer:	
  2134                           ; 1 bytes @ 0x0
  2135                           
  2136  0070                     ?i1_do_I2C_RESET:	
  2137                           ; 1 bytes @ 0x0
  2138                           
  2139  0070                     ??i1_do_I2C_RESET:	
  2140                           ; 1 bytes @ 0x0
  2141                           
  2142  0070                     ?i1_do_I2C_IDLE:	
  2143                           ; 1 bytes @ 0x0
  2144                           
  2145  0070                     ??i1_do_I2C_IDLE:	
  2146                           ; 1 bytes @ 0x0
  2147                           
  2148  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  2149                           ; 1 bytes @ 0x0
  2150                           
  2151  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  2152                           ; 1 bytes @ 0x0
  2153                           
  2154  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  2155                           ; 1 bytes @ 0x0
  2156                           
  2157  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  2158                           ; 1 bytes @ 0x0
  2159                           
  2160  0070                     ?i1_do_I2C_SEND_RESTART:	
  2161                           ; 1 bytes @ 0x0
  2162                           
  2163  0070                     ??i1_do_I2C_SEND_RESTART:	
  2164                           ; 1 bytes @ 0x0
  2165                           
  2166  0070                     ?i1_do_I2C_SEND_STOP:	
  2167                           ; 1 bytes @ 0x0
  2168                           
  2169  0070                     ??i1_do_I2C_SEND_STOP:	
  2170                           ; 1 bytes @ 0x0
  2171                           
  2172  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  2173                           ; 1 bytes @ 0x0
  2174                           
  2175  0070                     ??i1_do_I2C_SEND_ADR_READ:	
  2176                           ; 1 bytes @ 0x0
  2177                           
  2178  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  2179                           ; 1 bytes @ 0x0
  2180                           
  2181  0070                     ??i1_do_I2C_SEND_ADR_WRITE:	
  2182                           ; 1 bytes @ 0x0
  2183                           
  2184  0070                     ?i1_do_I2C_RCEN:	
  2185                           ; 1 bytes @ 0x0
  2186                           
  2187  0070                     ??i1_do_I2C_RCEN:	
  2188                           ; 1 bytes @ 0x0
  2189                           
  2190  0070                     ?i1_do_I2C_DO_ACK:	
  2191                           ; 1 bytes @ 0x0
  2192                           
  2193  0070                     ??i1_do_I2C_DO_ACK:	
  2194                           ; 1 bytes @ 0x0
  2195                           
  2196  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  2197                           ; 1 bytes @ 0x0
  2198                           
  2199  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  2200                           ; 1 bytes @ 0x0
  2201                           
  2202  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  2203                           ; 1 bytes @ 0x0
  2204                           
  2205  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  2212                           ; 1 bytes @ 0x0
  2213                           
  2214  0070                     ?i1_do_I2C_TX:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217  0070                     ??i1_do_I2C_TX:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220  0070                     ?i1_do_I2C_RX:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223  0070                     ??i1_do_I2C_RX:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226  0070                     ?i1_do_I2C_TX_EMPTY:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0070                     ??i1_do_I2C_TX_EMPTY:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0070                     ?i1_i2c_ISR:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0070                     ?i1_setCallBack:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0070                     ?i1_mssp_clearIRQ:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0070                     ??i1_mssp_clearIRQ:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0070                     ?i1_mssp_setIRQ:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0070                     ??i1_mssp_setIRQ:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ?i1_i2c_driver_resetBus:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0070                     ??i1_i2c_driver_resetBus:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0070                     ?i1_i2c_driver_restart:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0070                     ??i1_i2c_driver_restart:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0070                     ?i1_i2c_driver_stop:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0070                     ??i1_i2c_driver_stop:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0070                     ??i1_i2c_driver_isNACK:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     ?i1_i2c_driver_startRX:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     ??i1_i2c_driver_startRX:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     ?i1_i2c_driver_getRXData:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ??i1_i2c_driver_getRXData:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     ?i1_i2c_driver_TXData:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     ??i1_i2c_driver_TXData:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0070                     ?i1_i2c_driver_sendACK:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0070                     ??i1_i2c_driver_sendACK:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0070                     ?i1_i2c_driver_sendNACK:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0070                     ??i1_i2c_driver_sendNACK:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0070                     i1i2c_driver_TXData@d:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0070                     i1i2c_setBuffer@bufferSize:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0070                     i1setCallBack@cb:	
  2308                           ; 2 bytes @ 0x0
  2309                           
  2310                           
  2311                           ; 2 bytes @ 0x0
  2312  0070                     	ds	2
  2313  0072                     ??_TMR0_ISR:	
  2314  0072                     ??_TMR0_CallBack:	
  2315                           ; 1 bytes @ 0x2
  2316                           
  2317  0072                     ??i1_i2c_setBuffer:	
  2318                           ; 1 bytes @ 0x2
  2319                           
  2320  0072                     i1setCallBack@p:	
  2321                           ; 1 bytes @ 0x2
  2322                           
  2323                           
  2324                           ; 1 bytes @ 0x2
  2325  0072                     	ds	1
  2326  0073                     ??i1_i2c_ISR:	
  2327  0073                     ??i1_setCallBack:	
  2328                           ; 1 bytes @ 0x3
  2329                           
  2330  0073                     i1i2c_setBuffer@buffer:	
  2331                           ; 1 bytes @ 0x3
  2332                           
  2333                           
  2334                           ; 1 bytes @ 0x3
  2335  0073                     	ds	1
  2336  0074                     i1setCallBack@idx:	
  2337                           
  2338                           ; 1 bytes @ 0x4
  2339  0074                     	ds	1
  2340  0075                     ?i1_i2c_setDataCompleteCallback:	
  2341  0075                     i1i2c_setDataCompleteCallback@cb:	
  2342                           ; 1 bytes @ 0x5
  2343                           
  2344                           
  2345                           ; 2 bytes @ 0x5
  2346  0075                     	ds	1
  2347  0076                     ??_INTERRUPT_InterruptManager:	
  2348                           
  2349                           ; 1 bytes @ 0x6
  2350  0076                     	ds	1
  2351  0077                     i1i2c_setDataCompleteCallback@p:	
  2352                           
  2353                           ; 1 bytes @ 0x7
  2354  0077                     	ds	1
  2355  0078                     ??i1_returnStop:	
  2356  0078                     ??i1_returnReset:	
  2357                           ; 1 bytes @ 0x8
  2358                           
  2359  0078                     ??i1_wr1RegCompleteHandler:	
  2360                           ; 1 bytes @ 0x8
  2361                           
  2362  0078                     ??i1_rd1RegCompleteHandler:	
  2363                           ; 1 bytes @ 0x8
  2364                           
  2365  0078                     ??i1_rd2RegCompleteHandler:	
  2366                           ; 1 bytes @ 0x8
  2367                           
  2368  0078                     ??i1_wr2RegCompleteHandler:	
  2369                           ; 1 bytes @ 0x8
  2370                           
  2371  0078                     ??i1_rdBlkRegCompleteHandler:	
  2372                           ; 1 bytes @ 0x8
  2373                           
  2374  0078                     ??i1_i2c_restartWrite:	
  2375                           ; 1 bytes @ 0x8
  2376                           
  2377                           
  2378                           	psect	cstackBANK0
  2379  0057                     __pcstackBANK0:	
  2380                           ; 1 bytes @ 0x8
  2381                           
  2382  0057                     ??_OSCILLATOR_Initialize:	
  2383  0057                     ??_WDT_Initialize:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0057                     ?_IOCBF4_SetInterruptHandler:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0057                     ?_TMR0_SetInterruptHandler:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0057                     ?_setCallBack:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0057                     ??_i2c_driver_open:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0057                     ??_mssp_clearIRQ:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0057                     ?_i2c_driver_setBusCollisionISR:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0057                     ?_i2c_driver_setI2cISR:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0057                     ??_mssp_disableIRQ:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0057                     ??_i2c_driver_start:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0057                     ??_mssp_IRQisEnabled:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0057                     ??_mssp_waitForEvent:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0057                     ??_i2c_driver_resetBus:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0057                     ??_i2c_driver_restart:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0057                     ??_i2c_driver_stop:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0057                     ??_i2c_driver_TXData:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0057                     ??_i2c_driver_startRX:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0057                     ??_i2c_driver_sendACK:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0057                     ??_i2c_driver_sendNACK:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0057                     ??_i2c_driver_isNACK:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0057                     ??_i2c_driver_getRXData:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0057                     ??_mssp_setIRQ:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0057                     ??_bcdHourIncr:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0057                     ??_bcdHourDecr:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0057                     ??_bcdMinuteIncr:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0057                     ??_bcdMinuteDecr:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0057                     ??_i2c_close:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0057                     ?_i2c_setBuffer:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0057                     ??_do_I2C_RESET:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0057                     ??_do_I2C_IDLE:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0057                     ??_do_I2C_SEND_RESTART_READ:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0057                     ??_do_I2C_SEND_RESTART_WRITE:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0057                     ??_do_I2C_SEND_RESTART:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0057                     ??_do_I2C_SEND_STOP:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0057                     ??_do_I2C_SEND_ADR_READ:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0057                     ??_do_I2C_RCEN:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0057                     ??_do_I2C_DO_ACK:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0057                     ??_do_I2C_DO_NACK_STOP:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0057                     ??_do_I2C_DO_NACK_RESTART:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0057                     ??_do_I2C_DO_ADDRESS_NACK:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0057                     ??_do_I2C_RX:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0057                     ??_do_I2C_TX_EMPTY:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0057                     ??i1_i2c_setDataCompleteCallback:	
  2510                           ; 1 bytes @ 0x0
  2511                           
  2512  0057                     bcdHourIncr@hr:	
  2513                           ; 1 bytes @ 0x0
  2514                           
  2515  0057                     bcdHourDecr@hr:	
  2516                           ; 1 bytes @ 0x0
  2517                           
  2518  0057                     bcdMinuteIncr@mn:	
  2519                           ; 1 bytes @ 0x0
  2520                           
  2521  0057                     bcdMinuteDecr@mn:	
  2522                           ; 1 bytes @ 0x0
  2523                           
  2524  0057                     mssp_waitForEvent@timeout:	
  2525                           ; 1 bytes @ 0x0
  2526                           
  2527  0057                     i2c_driver_TXData@d:	
  2528                           ; 1 bytes @ 0x0
  2529                           
  2530  0057                     IOCBF4_SetInterruptHandler@InterruptHandler:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0057                     TMR0_SetInterruptHandler@InterruptHandler:	
  2534                           ; 2 bytes @ 0x0
  2535                           
  2536  0057                     i2c_setBuffer@bufferSize:	
  2537                           ; 2 bytes @ 0x0
  2538                           
  2539  0057                     setCallBack@cb:	
  2540                           ; 2 bytes @ 0x0
  2541                           
  2542  0057                     i2c_driver_setBusCollisionISR@handler:	
  2543                           ; 2 bytes @ 0x0
  2544                           
  2545  0057                     i2c_driver_setI2cISR@handler:	
  2546                           ; 2 bytes @ 0x0
  2547                           
  2548                           
  2549                           ; 2 bytes @ 0x0
  2550  0057                     	ds	1
  2551  0058                     ??_do_I2C_SEND_ADR_WRITE:	
  2552  0058                     ??_do_I2C_TX:	
  2553                           ; 1 bytes @ 0x1
  2554                           
  2555  0058                     ?i1_returnStop:	
  2556                           ; 1 bytes @ 0x1
  2557                           
  2558  0058                     ?i1_returnReset:	
  2559                           ; 1 bytes @ 0x1
  2560                           
  2561  0058                     ?i1_wr1RegCompleteHandler:	
  2562                           ; 1 bytes @ 0x1
  2563                           
  2564  0058                     ?i1_rd1RegCompleteHandler:	
  2565                           ; 1 bytes @ 0x1
  2566                           
  2567  0058                     ?i1_rd2RegCompleteHandler:	
  2568                           ; 1 bytes @ 0x1
  2569                           
  2570  0058                     ?i1_wr2RegCompleteHandler:	
  2571                           ; 1 bytes @ 0x1
  2572                           
  2573  0058                     ?i1_rdBlkRegCompleteHandler:	
  2574                           ; 1 bytes @ 0x1
  2575                           
  2576  0058                     ?i1_i2c_restartWrite:	
  2577                           ; 1 bytes @ 0x1
  2578                           
  2579  0058                     i2c_close@ret:	
  2580                           ; 1 bytes @ 0x1
  2581                           
  2582  0058                     i1returnStop@p:	
  2583                           ; 1 bytes @ 0x1
  2584                           
  2585  0058                     i1returnReset@p:	
  2586                           ; 1 bytes @ 0x1
  2587                           
  2588  0058                     i1wr1RegCompleteHandler@p:	
  2589                           ; 1 bytes @ 0x1
  2590                           
  2591  0058                     i1rd1RegCompleteHandler@p:	
  2592                           ; 1 bytes @ 0x1
  2593                           
  2594  0058                     i1rd2RegCompleteHandler@p:	
  2595                           ; 1 bytes @ 0x1
  2596                           
  2597  0058                     i1wr2RegCompleteHandler@p:	
  2598                           ; 1 bytes @ 0x1
  2599                           
  2600  0058                     i1rdBlkRegCompleteHandler@p:	
  2601                           ; 1 bytes @ 0x1
  2602                           
  2603  0058                     i1i2c_restartWrite@p:	
  2604                           ; 1 bytes @ 0x1
  2605                           
  2606                           
  2607                           ; 1 bytes @ 0x1
  2608  0058                     	ds	1
  2609  0059                     ??_PIN_MANAGER_Initialize:	
  2610  0059                     ??_TMR0_Initialize:	
  2611                           ; 1 bytes @ 0x2
  2612                           
  2613  0059                     ??_IOCBF4_SetInterruptHandler:	
  2614                           ; 1 bytes @ 0x2
  2615                           
  2616  0059                     ??_TMR0_SetInterruptHandler:	
  2617                           ; 1 bytes @ 0x2
  2618                           
  2619  0059                     ??_i2c_driver_setBusCollisionISR:	
  2620                           ; 1 bytes @ 0x2
  2621                           
  2622  0059                     ??_i2c_driver_setI2cISR:	
  2623                           ; 1 bytes @ 0x2
  2624                           
  2625  0059                     ??_i2c_open:	
  2626                           ; 1 bytes @ 0x2
  2627                           
  2628  0059                     ??_i2c_setBuffer:	
  2629                           ; 1 bytes @ 0x2
  2630                           
  2631  0059                     setCallBack@p:	
  2632                           ; 1 bytes @ 0x2
  2633                           
  2634                           
  2635                           ; 1 bytes @ 0x2
  2636  0059                     	ds	1
  2637  005A                     ??_setCallBack:	
  2638  005A                     ??_SYSTEM_Initialize:	
  2639                           ; 1 bytes @ 0x3
  2640                           
  2641  005A                     i2c_open@address:	
  2642                           ; 1 bytes @ 0x3
  2643                           
  2644  005A                     i2c_setBuffer@buffer:	
  2645                           ; 1 bytes @ 0x3
  2646                           
  2647                           
  2648                           ; 1 bytes @ 0x3
  2649  005A                     	ds	1
  2650  005B                     ??_i2c_ISR:	
  2651  005B                     i2c_open@ret:	
  2652                           ; 1 bytes @ 0x4
  2653                           
  2654  005B                     setCallBack@idx:	
  2655                           ; 1 bytes @ 0x4
  2656                           
  2657                           
  2658                           ; 1 bytes @ 0x4
  2659  005B                     	ds	1
  2660  005C                     ?_i2c_setDataCompleteCallback:	
  2661  005C                     ?_i2c_setAddressNACKCallback:	
  2662                           ; 1 bytes @ 0x5
  2663                           
  2664  005C                     i2c_setDataCompleteCallback@cb:	
  2665                           ; 1 bytes @ 0x5
  2666                           
  2667  005C                     i2c_setAddressNACKCallback@cb:	
  2668                           ; 2 bytes @ 0x5
  2669                           
  2670                           
  2671                           ; 2 bytes @ 0x5
  2672  005C                     	ds	2
  2673  005E                     ??_i2c_poller:	
  2674  005E                     ??_i2c_masterOperation:	
  2675                           ; 1 bytes @ 0x7
  2676                           
  2677  005E                     i2c_setDataCompleteCallback@p:	
  2678                           ; 1 bytes @ 0x7
  2679                           
  2680  005E                     i2c_setAddressNACKCallback@p:	
  2681                           ; 1 bytes @ 0x7
  2682                           
  2683                           
  2684                           ; 1 bytes @ 0x7
  2685  005E                     	ds	1
  2686  005F                     ??_i2c_setDataCompleteCallback:	
  2687  005F                     ??_i2c_setAddressNACKCallback:	
  2688                           ; 1 bytes @ 0x8
  2689                           
  2690  005F                     i2c_masterOperation@read:	
  2691                           ; 1 bytes @ 0x8
  2692                           
  2693                           
  2694                           ; 1 bytes @ 0x8
  2695  005F                     	ds	1
  2696  0060                     ?_returnStop:	
  2697  0060                     ?_returnReset:	
  2698                           ; 1 bytes @ 0x9
  2699                           
  2700  0060                     ?_i2c_restartWrite:	
  2701                           ; 1 bytes @ 0x9
  2702                           
  2703  0060                     ?_wr1RegCompleteHandler:	
  2704                           ; 1 bytes @ 0x9
  2705                           
  2706  0060                     ?_rd1RegCompleteHandler:	
  2707                           ; 1 bytes @ 0x9
  2708                           
  2709  0060                     ?_rd2RegCompleteHandler:	
  2710                           ; 1 bytes @ 0x9
  2711                           
  2712  0060                     ?_wr2RegCompleteHandler:	
  2713                           ; 1 bytes @ 0x9
  2714                           
  2715  0060                     ?_rdBlkRegCompleteHandler:	
  2716                           ; 1 bytes @ 0x9
  2717                           
  2718  0060                     i2c_masterOperation@ret:	
  2719                           ; 1 bytes @ 0x9
  2720                           
  2721  0060                     returnStop@p:	
  2722                           ; 1 bytes @ 0x9
  2723                           
  2724  0060                     returnReset@p:	
  2725                           ; 1 bytes @ 0x9
  2726                           
  2727  0060                     wr1RegCompleteHandler@p:	
  2728                           ; 1 bytes @ 0x9
  2729                           
  2730  0060                     rd1RegCompleteHandler@p:	
  2731                           ; 1 bytes @ 0x9
  2732                           
  2733  0060                     rd2RegCompleteHandler@p:	
  2734                           ; 1 bytes @ 0x9
  2735                           
  2736  0060                     wr2RegCompleteHandler@p:	
  2737                           ; 1 bytes @ 0x9
  2738                           
  2739  0060                     rdBlkRegCompleteHandler@p:	
  2740                           ; 1 bytes @ 0x9
  2741                           
  2742  0060                     i2c_restartWrite@p:	
  2743                           ; 1 bytes @ 0x9
  2744                           
  2745                           
  2746                           ; 1 bytes @ 0x9
  2747  0060                     	ds	1
  2748  0061                     ?_i2c_readDataBlock:	
  2749  0061                     ?_i2c_writeNBytes:	
  2750                           ; 1 bytes @ 0xA
  2751                           
  2752  0061                     ??_returnStop:	
  2753                           ; 1 bytes @ 0xA
  2754                           
  2755  0061                     ??_returnReset:	
  2756                           ; 1 bytes @ 0xA
  2757                           
  2758  0061                     ??_i2c_restartWrite:	
  2759                           ; 1 bytes @ 0xA
  2760                           
  2761  0061                     ??_i2c_masterWrite:	
  2762                           ; 1 bytes @ 0xA
  2763                           
  2764  0061                     ??_wr1RegCompleteHandler:	
  2765                           ; 1 bytes @ 0xA
  2766                           
  2767  0061                     ??_rd1RegCompleteHandler:	
  2768                           ; 1 bytes @ 0xA
  2769                           
  2770  0061                     ??_rd2RegCompleteHandler:	
  2771                           ; 1 bytes @ 0xA
  2772                           
  2773  0061                     ??_wr2RegCompleteHandler:	
  2774                           ; 1 bytes @ 0xA
  2775                           
  2776  0061                     ??_rdBlkRegCompleteHandler:	
  2777                           ; 1 bytes @ 0xA
  2778                           
  2779  0061                     i2c_writeNBytes@data:	
  2780                           ; 1 bytes @ 0xA
  2781                           
  2782  0061                     i2c_readDataBlock@reg:	
  2783                           ; 1 bytes @ 0xA
  2784                           
  2785                           
  2786                           ; 1 bytes @ 0xA
  2787  0061                     	ds	1
  2788  0062                     i2c_readDataBlock@data:	
  2789  0062                     i2c_writeNBytes@len:	
  2790                           ; 1 bytes @ 0xB
  2791                           
  2792                           
  2793                           ; 2 bytes @ 0xB
  2794  0062                     	ds	1
  2795  0063                     i2c_readDataBlock@len:	
  2796                           
  2797                           ; 2 bytes @ 0xC
  2798  0063                     	ds	1
  2799  0064                     ??_i2c_writeNBytes:	
  2800  0064                     i2c_writeNBytes@address:	
  2801                           ; 1 bytes @ 0xD
  2802                           
  2803                           
  2804                           ; 1 bytes @ 0xD
  2805  0064                     	ds	1
  2806  0065                     ??_i2c_readDataBlock:	
  2807  0065                     ?_updateRTC:	
  2808                           ; 1 bytes @ 0xE
  2809                           
  2810  0065                     updateRTC@bcdMinute:	
  2811                           ; 1 bytes @ 0xE
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0xE
  2815  0065                     	ds	1
  2816  0066                     ??_updateRTC:	
  2817  0066                     i2c_readDataBlock@address:	
  2818                           ; 1 bytes @ 0xF
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0xF
  2822  0066                     	ds	1
  2823  0067                     updateRTC@bcdHour:	
  2824  0067                     i2c_readDataBlock@d:	
  2825                           ; 1 bytes @ 0x10
  2826                           
  2827                           
  2828                           ; 3 bytes @ 0x10
  2829  0067                     	ds	3
  2830  006A                     ??_initRTC:	
  2831                           
  2832                           ; 1 bytes @ 0x13
  2833  006A                     	ds	2
  2834  006C                     ??_main:	
  2835                           
  2836                           ; 1 bytes @ 0x15
  2837  006C                     	ds	2
  2838                           
  2839                           	psect	maintext
  2840  0042                     __pmaintext:	
  2841 ;;
  2842 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2843 ;;
  2844 ;; *************** function _main *****************
  2845 ;; Defined at:
  2846 ;;		line 159 in file "main.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : B1F/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2862 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2864 ;;Total ram usage:        2 bytes
  2865 ;; Hardware stack levels required when called:   16
  2866 ;; This function calls:
  2867 ;;		_IOCBF4_SetInterruptHandler
  2868 ;;		_SYSTEM_Initialize
  2869 ;;		_TMR0_SetInterruptHandler
  2870 ;;		_bcdHourDecr
  2871 ;;		_bcdHourIncr
  2872 ;;		_bcdMinuteDecr
  2873 ;;		_bcdMinuteIncr
  2874 ;;		_i2c_readDataBlock
  2875 ;;		_initRTC
  2876 ;;		_updateRTC
  2877 ;; This function is called by:
  2878 ;;		Startup code after reset
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           
  2883                           ;psect for function _main
  2884  0042                     _main:	
  2885                           
  2886                           ;main.c: 162:     SYSTEM_Initialize();
  2887                           
  2888                           ;incstack = 0
  2889                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2890  0042  3187  27E4  3180   	fcall	_SYSTEM_Initialize
  2891  0045  0022               	movlb	2	; select bank2
  2892  0046  1090               	bcf	16,1	;volatile
  2893  0047  108E               	bcf	14,1	;volatile
  2894  0048  120C               	bcf	12,4	;volatile
  2895  0049  118C               	bcf	12,3	;volatile
  2896                           
  2897                           ;main.c: 170:     mode = MODE_NORMAL;
  2898  004A  0020               	movlb	0	; select bank0
  2899  004B  01CC               	clrf	_mode
  2900                           
  2901                           ;main.c: 172:     IOCBF4_SetInterruptHandler(&secondISR);
  2902  004C  3046               	movlw	low _secondISR
  2903  004D  00D7               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
  2904  004E  3006               	movlw	high _secondISR
  2905  004F  00D8               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
  2906  0050  318F  2708  3180   	fcall	_IOCBF4_SetInterruptHandler
  2907                           
  2908                           ;main.c: 173:     TMR0_SetInterruptHandler(&displayRefreshISR);
  2909  0053  30A5               	movlw	low _displayRefreshISR
  2910  0054  0020               	movlb	0	; select bank0
  2911  0055  00D7               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2912  0056  3001               	movlw	high _displayRefreshISR
  2913  0057  00D8               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2914  0058  318F  270E  3180   	fcall	_TMR0_SetInterruptHandler
  2915                           
  2916                           ;main.c: 178:     (INTCONbits.GIE = 1);
  2917  005B  178B               	bsf	11,7	;volatile
  2918                           
  2919                           ;main.c: 181:     (INTCONbits.PEIE = 1);
  2920  005C  170B               	bsf	11,6	;volatile
  2921                           
  2922                           ;main.c: 189:     initRTC();
  2923  005D  3183  237B  3180   	fcall	_initRTC
  2924  0060                     l5470:	
  2925                           
  2926                           ;main.c: 192:     {;main.c: 197:         if(PORTBbits.RB0 == 0){
  2927  0060  0020               	movlb	0	; select bank0
  2928  0061  180D               	btfsc	13,0	;volatile
  2929  0062  2866               	goto	l326
  2930                           
  2931                           ;main.c: 198:             flag_button_press_count[0] = 1;
  2932  0063  01C1               	clrf	_flag_button_press_count
  2933  0064  0AC1               	incf	_flag_button_press_count,f
  2934                           
  2935                           ;main.c: 199:         } else if(PORTBbits.RB1 == 0){
  2936  0065  2906               	goto	l5570
  2937  0066                     l326:	
  2938  0066  188D               	btfsc	13,1	;volatile
  2939  0067  286B               	goto	l328
  2940                           
  2941                           ;main.c: 200:             flag_button_press_count[1] = 1;
  2942  0068  01C2               	clrf	_flag_button_press_count+1
  2943  0069  0AC2               	incf	_flag_button_press_count+1,f
  2944                           
  2945                           ;main.c: 201:         } else if(PORTBbits.RB2 == 0){
  2946  006A  2906               	goto	l5570
  2947  006B                     l328:	
  2948  006B  190D               	btfsc	13,2	;volatile
  2949  006C  2870               	goto	l330
  2950                           
  2951                           ;main.c: 202:             flag_button_press_count[2] = 1;
  2952  006D  01C3               	clrf	_flag_button_press_count+2
  2953  006E  0AC3               	incf	_flag_button_press_count+2,f
  2954                           
  2955                           ;main.c: 203:         } else if(PORTBbits.RB3 == 0){
  2956  006F  2906               	goto	l5570
  2957  0070                     l330:	
  2958  0070  198D               	btfsc	13,3	;volatile
  2959  0071  2875               	goto	l5480
  2960                           
  2961                           ;main.c: 204:             flag_button_press_count[3] = 1;
  2962  0072  01C4               	clrf	_flag_button_press_count+3
  2963  0073  0AC4               	incf	_flag_button_press_count+3,f
  2964                           
  2965                           ;main.c: 205:         } else {
  2966  0074  2906               	goto	l5570
  2967  0075                     l5480:	
  2968                           
  2969                           ;main.c: 206:             if(flag_button_press_count[0] == 1){
  2970  0075  0341               	decf	_flag_button_press_count,w
  2971  0076  1D03               	btfss	3,2
  2972  0077  2897               	goto	l5502
  2973                           
  2974                           ;main.c: 207:                 if(button_press_count[0] > 5 && button_press_count[0] < 10
      +                          0){
  2975  0078  3006               	movlw	6
  2976  0079  023D               	subwf	_button_press_count,w
  2977  007A  1C03               	skipc
  2978  007B  2895               	goto	l335
  2979  007C  3064               	movlw	100
  2980  007D  023D               	subwf	_button_press_count,w
  2981  007E  1803               	skipnc
  2982  007F  2895               	goto	l335
  2983                           
  2984                           ;main.c: 208:                     if(mode == MODE_NORMAL){
  2985  0080  084C               	movf	_mode,w
  2986  0081  1D03               	btfss	3,2
  2987  0082  288C               	goto	l5494
  2988                           
  2989                           ;main.c: 209:                         mode = MODE_SET_HOUR;
  2990  0083  01CC               	clrf	_mode
  2991  0084  0ACC               	incf	_mode,f
  2992  0085                     L1:	
  2993                           
  2994                           ;main.c: 210:                         mode_timeout_count = 8;
  2995  0085  3008               	movlw	8
  2996  0086  00EC               	movwf	??_main
  2997  0087  086C               	movf	??_main,w
  2998  0088  00CB               	movwf	_mode_timeout_count
  2999                           
  3000                           ;main.c: 211:                         flag_time_display_update = 1;
  3001  0089  01CD               	clrf	_flag_time_display_update
  3002  008A  0ACD               	incf	_flag_time_display_update,f
  3003                           
  3004                           ;main.c: 212:                     } else if(mode == MODE_SET_HOUR){
  3005  008B  2895               	goto	l335
  3006  008C                     l5494:	
  3007  008C  034C               	decf	_mode,w
  3008  008D  1D03               	btfss	3,2
  3009  008E  2894               	goto	l5500
  3010                           
  3011                           ;main.c: 213:                         mode = MODE_SET_MINUTE;
  3012  008F  3002               	movlw	2
  3013  0090  00EC               	movwf	??_main
  3014  0091  086C               	movf	??_main,w
  3015  0092  00CC               	movwf	_mode
  3016  0093  2885               	goto	L1
  3017  0094                     l5500:	
  3018                           ;main.c: 214:                         mode_timeout_count = 8;
  3019                           
  3020                           
  3021                           ;main.c: 217:                         mode = MODE_NORMAL;
  3022  0094  01CC               	clrf	_mode
  3023  0095                     l335:	
  3024                           ;main.c: 220:                 }
  3025                           
  3026                           
  3027                           ;main.c: 221:                 button_press_count[0] = 0;
  3028  0095  01BD               	clrf	_button_press_count
  3029                           
  3030                           ;main.c: 222:                 flag_button_press_count[0] = 0;
  3031  0096  01C1               	clrf	_flag_button_press_count
  3032  0097                     l5502:	
  3033                           
  3034                           ;main.c: 225:             if(flag_button_press_count[1] == 1){
  3035  0097  0342               	decf	_flag_button_press_count+1,w
  3036  0098  1D03               	btfss	3,2
  3037  0099  28C2               	goto	l5528
  3038                           
  3039                           ;main.c: 226:                 if(button_press_count[1] > 5 && button_press_count[1] < 10
      +                          0){
  3040  009A  3006               	movlw	6
  3041  009B  023E               	subwf	_button_press_count+1,w
  3042  009C  1C03               	skipc
  3043  009D  28C0               	goto	l5524
  3044  009E  3064               	movlw	100
  3045  009F  023E               	subwf	_button_press_count+1,w
  3046  00A0  1803               	skipnc
  3047  00A1  28C0               	goto	l5524
  3048                           
  3049                           ;main.c: 228:                     if(mode == MODE_SET_HOUR){
  3050  00A2  034C               	decf	_mode,w
  3051  00A3  1D03               	btfss	3,2
  3052  00A4  28AE               	goto	l5516
  3053                           
  3054                           ;main.c: 229:                         rtcData[2] = bcdHourIncr(rtcData[2]);
  3055  00A5  0850               	movf	_rtcData+2,w
  3056  00A6  3186  2694  3180   	fcall	_bcdHourIncr
  3057  00A9  0020               	movlb	0	; select bank0
  3058  00AA  00EC               	movwf	??_main
  3059  00AB  086C               	movf	??_main,w
  3060  00AC  00D0               	movwf	_rtcData+2
  3061                           
  3062                           ;main.c: 232:                     } else if(mode == MODE_SET_MINUTE){
  3063  00AD  28BA               	goto	l5512
  3064  00AE                     l5516:	
  3065  00AE  3002               	movlw	2
  3066  00AF  064C               	xorwf	_mode,w
  3067  00B0  1D03               	btfss	3,2
  3068  00B1  28C0               	goto	l5524
  3069                           
  3070                           ;main.c: 233:                         rtcData[1] = bcdMinuteIncr(rtcData[1]);
  3071  00B2  084F               	movf	_rtcData+1,w
  3072  00B3  3185  2504  3180   	fcall	_bcdMinuteIncr
  3073  00B6  0020               	movlb	0	; select bank0
  3074  00B7  00EC               	movwf	??_main
  3075  00B8  086C               	movf	??_main,w
  3076  00B9  00CF               	movwf	_rtcData+1
  3077  00BA                     l5512:	
  3078                           
  3079                           ;main.c: 230:                         mode_timeout_count = 8;
  3080  00BA  3008               	movlw	8
  3081  00BB  00EC               	movwf	??_main
  3082  00BC  086C               	movf	??_main,w
  3083  00BD  00CB               	movwf	_mode_timeout_count
  3084                           
  3085                           ;main.c: 231:                         flag_time_display_update = 1;
  3086  00BE  01CD               	clrf	_flag_time_display_update
  3087  00BF  0ACD               	incf	_flag_time_display_update,f
  3088  00C0                     l5524:	
  3089                           
  3090                           ;main.c: 239:                 button_press_count[1] = 0;
  3091  00C0  01BE               	clrf	_button_press_count+1
  3092                           
  3093                           ;main.c: 240:                 flag_button_press_count[1] = 0;
  3094  00C1  01C2               	clrf	_flag_button_press_count+1
  3095  00C2                     l5528:	
  3096                           
  3097                           ;main.c: 243:             if(flag_button_press_count[2] == 1){
  3098  00C2  0343               	decf	_flag_button_press_count+2,w
  3099  00C3  1D03               	btfss	3,2
  3100  00C4  28ED               	goto	l5554
  3101                           
  3102                           ;main.c: 244:                 if(button_press_count[2] > 5 && button_press_count[2] < 10
      +                          0){
  3103  00C5  3006               	movlw	6
  3104  00C6  023F               	subwf	_button_press_count+2,w
  3105  00C7  1C03               	skipc
  3106  00C8  28EB               	goto	l5550
  3107  00C9  3064               	movlw	100
  3108  00CA  023F               	subwf	_button_press_count+2,w
  3109  00CB  1803               	skipnc
  3110  00CC  28EB               	goto	l5550
  3111                           
  3112                           ;main.c: 246:                     if(mode == MODE_SET_HOUR){
  3113  00CD  034C               	decf	_mode,w
  3114  00CE  1D03               	btfss	3,2
  3115  00CF  28D9               	goto	l5542
  3116                           
  3117                           ;main.c: 247:                         rtcData[2] = bcdHourDecr(rtcData[2]);
  3118  00D0  0850               	movf	_rtcData+2,w
  3119  00D1  3187  2719  3180   	fcall	_bcdHourDecr
  3120  00D4  0020               	movlb	0	; select bank0
  3121  00D5  00EC               	movwf	??_main
  3122  00D6  086C               	movf	??_main,w
  3123  00D7  00D0               	movwf	_rtcData+2
  3124                           
  3125                           ;main.c: 250:                     } else if(mode == MODE_SET_MINUTE){
  3126  00D8  28E5               	goto	l5538
  3127  00D9                     l5542:	
  3128  00D9  3002               	movlw	2
  3129  00DA  064C               	xorwf	_mode,w
  3130  00DB  1D03               	btfss	3,2
  3131  00DC  28EB               	goto	l5550
  3132                           
  3133                           ;main.c: 251:                         rtcData[1] = bcdMinuteDecr(rtcData[1]);
  3134  00DD  084F               	movf	_rtcData+1,w
  3135  00DE  3185  252D  3180   	fcall	_bcdMinuteDecr
  3136  00E1  0020               	movlb	0	; select bank0
  3137  00E2  00EC               	movwf	??_main
  3138  00E3  086C               	movf	??_main,w
  3139  00E4  00CF               	movwf	_rtcData+1
  3140  00E5                     l5538:	
  3141                           
  3142                           ;main.c: 248:                         mode_timeout_count = 8;
  3143  00E5  3008               	movlw	8
  3144  00E6  00EC               	movwf	??_main
  3145  00E7  086C               	movf	??_main,w
  3146  00E8  00CB               	movwf	_mode_timeout_count
  3147                           
  3148                           ;main.c: 249:                         flag_time_display_update = 1;
  3149  00E9  01CD               	clrf	_flag_time_display_update
  3150  00EA  0ACD               	incf	_flag_time_display_update,f
  3151  00EB                     l5550:	
  3152                           
  3153                           ;main.c: 256:                 button_press_count[2] = 0;
  3154  00EB  01BF               	clrf	_button_press_count+2
  3155                           
  3156                           ;main.c: 257:                 flag_button_press_count[2] = 0;
  3157  00EC  01C3               	clrf	_flag_button_press_count+2
  3158  00ED                     l5554:	
  3159                           
  3160                           ;main.c: 260:             if(flag_button_press_count[3] == 1){
  3161  00ED  0344               	decf	_flag_button_press_count+3,w
  3162  00EE  1D03               	btfss	3,2
  3163  00EF  2906               	goto	l5570
  3164                           
  3165                           ;main.c: 261:                 if(button_press_count[3] > 5 && button_press_count[3] < 10
      +                          0){
  3166  00F0  3006               	movlw	6
  3167  00F1  0240               	subwf	_button_press_count+3,w
  3168  00F2  1C03               	skipc
  3169  00F3  2904               	goto	l5566
  3170  00F4  3064               	movlw	100
  3171  00F5  0240               	subwf	_button_press_count+3,w
  3172  00F6  1803               	skipnc
  3173  00F7  2904               	goto	l5566
  3174                           
  3175                           ;main.c: 262:                     updateRTC(rtcData[2],rtcData[1]);
  3176  00F8  084F               	movf	_rtcData+1,w
  3177  00F9  00EC               	movwf	??_main
  3178  00FA  086C               	movf	??_main,w
  3179  00FB  00E5               	movwf	updateRTC@bcdMinute
  3180  00FC  0850               	movf	_rtcData+2,w
  3181  00FD  3186  2662  3180   	fcall	_updateRTC
  3182                           
  3183                           ;main.c: 264:                     mode = MODE_NORMAL;
  3184  0100  0020               	movlb	0	; select bank0
  3185  0101  01CC               	clrf	_mode
  3186                           
  3187                           ;main.c: 265:                     flag_time_display_update = 1;
  3188  0102  01CD               	clrf	_flag_time_display_update
  3189  0103  0ACD               	incf	_flag_time_display_update,f
  3190  0104                     l5566:	
  3191                           
  3192                           ;main.c: 267:                 button_press_count[3] = 0;
  3193  0104  01C0               	clrf	_button_press_count+3
  3194                           
  3195                           ;main.c: 268:                 flag_button_press_count[3] = 0;
  3196  0105  01C4               	clrf	_flag_button_press_count+3
  3197  0106                     l5570:	
  3198                           
  3199                           ;main.c: 272:         if(mode == MODE_NORMAL){
  3200  0106  084C               	movf	_mode,w
  3201  0107  1D03               	btfss	3,2
  3202  0108  2958               	goto	l5586
  3203                           
  3204                           ;main.c: 273:             if(flag_time_display_update == 1){
  3205  0109  034D               	decf	_flag_time_display_update,w
  3206  010A  1D03               	btfss	3,2
  3207  010B  2860               	goto	l5470
  3208                           
  3209                           ;main.c: 274:                 i2c_readDataBlock(0x68,0x00,rtcData,sizeof(rtcData));
  3210  010C  01E1               	clrf	i2c_readDataBlock@reg
  3211  010D  304E               	movlw	(low (_rtcData| 0))& (0+255)
  3212  010E  00EC               	movwf	??_main
  3213  010F  086C               	movf	??_main,w
  3214  0110  00E2               	movwf	i2c_readDataBlock@data
  3215  0111  3009               	movlw	9
  3216  0112  00E3               	movwf	i2c_readDataBlock@len
  3217  0113  3000               	movlw	0
  3218  0114  00E4               	movwf	i2c_readDataBlock@len+1
  3219  0115  3068               	movlw	104
  3220  0116  3183  23B6  3180   	fcall	_i2c_readDataBlock
  3221                           
  3222                           ;main.c: 276:                 displayBuff[0] = displayNum[((rtcData[2] >> 4) & 0x03)];
  3223  0119  0020               	movlb	0	; select bank0
  3224  011A  0850               	movf	_rtcData+2,w
  3225  011B  00EC               	movwf	??_main
  3226  011C  3004               	movlw	4
  3227  011D                     u3175:	
  3228  011D  36EC               	lsrf	??_main,f
  3229  011E  0B89               	decfsz	9,f
  3230  011F  291D               	goto	u3175
  3231  0120  086C               	movf	??_main,w
  3232  0121  3903               	andlw	3
  3233  0122  3E00               	addlw	low (_displayNum| (0+32768))
  3234  0123  0084               	movwf	4
  3235  0124  3090               	movlw	high (_displayNum| (0+32768))
  3236  0125  1803               	skipnc
  3237  0126  3E01               	addlw	1
  3238  0127  0085               	movwf	5
  3239  0128  0800               	movf	0,w	;code access
  3240  0129  00ED               	movwf	??_main+1
  3241  012A  086D               	movf	??_main+1,w
  3242  012B  00C5               	movwf	_displayBuff
  3243                           
  3244                           ;main.c: 277:                 displayBuff[1] = displayNum[(rtcData[2]& 0x0F)];
  3245  012C  0850               	movf	_rtcData+2,w
  3246  012D  390F               	andlw	15
  3247  012E  3E00               	addlw	low (_displayNum| (0+32768))
  3248  012F  0084               	movwf	4
  3249  0130  3090               	movlw	high (_displayNum| (0+32768))
  3250  0131  1803               	skipnc
  3251  0132  3E01               	addlw	1
  3252  0133  0085               	movwf	5
  3253  0134  0800               	movf	0,w	;code access
  3254  0135  00EC               	movwf	??_main
  3255  0136  086C               	movf	??_main,w
  3256  0137  00C6               	movwf	_displayBuff+1
  3257                           
  3258                           ;main.c: 278:                 displayBuff[2] = displayNum[((rtcData[1] >> 4) & 0x0F)];
  3259  0138  084F               	movf	_rtcData+1,w
  3260  0139  00EC               	movwf	??_main
  3261  013A  3004               	movlw	4
  3262  013B                     u3185:	
  3263  013B  36EC               	lsrf	??_main,f
  3264  013C  0B89               	decfsz	9,f
  3265  013D  293B               	goto	u3185
  3266  013E  086C               	movf	??_main,w
  3267  013F  390F               	andlw	15
  3268  0140  3E00               	addlw	low (_displayNum| (0+32768))
  3269  0141  0084               	movwf	4
  3270  0142  3090               	movlw	high (_displayNum| (0+32768))
  3271  0143  1803               	skipnc
  3272  0144  3E01               	addlw	1
  3273  0145  0085               	movwf	5
  3274  0146  0800               	movf	0,w	;code access
  3275  0147  00ED               	movwf	??_main+1
  3276  0148  086D               	movf	??_main+1,w
  3277  0149  00C7               	movwf	_displayBuff+2
  3278                           
  3279                           ;main.c: 279:                 displayBuff[3] = displayNum[(rtcData[1]& 0x0F)];
  3280  014A  084F               	movf	_rtcData+1,w
  3281  014B  390F               	andlw	15
  3282  014C  3E00               	addlw	low (_displayNum| (0+32768))
  3283  014D  0084               	movwf	4
  3284  014E  3090               	movlw	high (_displayNum| (0+32768))
  3285  014F  1803               	skipnc
  3286  0150  3E01               	addlw	1
  3287  0151  0085               	movwf	5
  3288  0152  0800               	movf	0,w	;code access
  3289  0153  00EC               	movwf	??_main
  3290  0154  086C               	movf	??_main,w
  3291  0155  00C8               	movwf	_displayBuff+3
  3292  0156                     l5584:	
  3293                           
  3294                           ;main.c: 281:                 flag_time_display_update = 0;
  3295  0156  01CD               	clrf	_flag_time_display_update
  3296  0157  2860               	goto	l5470
  3297  0158                     l5586:	
  3298                           
  3299                           ;main.c: 284:             if(flag_time_display_update == 1){
  3300  0158  034D               	decf	_flag_time_display_update,w
  3301  0159  1D03               	btfss	3,2
  3302  015A  2860               	goto	l5470
  3303                           
  3304                           ;main.c: 285:                 do { LATAbits.LATA7 = 1; } while(0);
  3305  015B  0022               	movlb	2	; select bank2
  3306  015C  178C               	bsf	12,7	;volatile
  3307                           
  3308                           ;main.c: 286:                 displayBuff[0] = displayNum[((rtcData[2] >> 4) & 0x03)];
  3309  015D  0020               	movlb	0	; select bank0
  3310  015E  0850               	movf	_rtcData+2,w
  3311  015F  00EC               	movwf	??_main
  3312  0160  3004               	movlw	4
  3313  0161                     u3205:	
  3314  0161  36EC               	lsrf	??_main,f
  3315  0162  0B89               	decfsz	9,f
  3316  0163  2961               	goto	u3205
  3317  0164  086C               	movf	??_main,w
  3318  0165  3903               	andlw	3
  3319  0166  3E00               	addlw	low (_displayNum| (0+32768))
  3320  0167  0084               	movwf	4
  3321  0168  3090               	movlw	high (_displayNum| (0+32768))
  3322  0169  1803               	skipnc
  3323  016A  3E01               	addlw	1
  3324  016B  0085               	movwf	5
  3325  016C  0800               	movf	0,w	;code access
  3326  016D  00ED               	movwf	??_main+1
  3327  016E  086D               	movf	??_main+1,w
  3328  016F  00C5               	movwf	_displayBuff
  3329                           
  3330                           ;main.c: 287:                 displayBuff[1] = displayNum[(rtcData[2]& 0x0F)];
  3331  0170  0850               	movf	_rtcData+2,w
  3332  0171  390F               	andlw	15
  3333  0172  3E00               	addlw	low (_displayNum| (0+32768))
  3334  0173  0084               	movwf	4
  3335  0174  3090               	movlw	high (_displayNum| (0+32768))
  3336  0175  1803               	skipnc
  3337  0176  3E01               	addlw	1
  3338  0177  0085               	movwf	5
  3339  0178  0800               	movf	0,w	;code access
  3340  0179  00EC               	movwf	??_main
  3341  017A  086C               	movf	??_main,w
  3342  017B  00C6               	movwf	_displayBuff+1
  3343                           
  3344                           ;main.c: 288:                 displayBuff[2] = displayNum[((rtcData[1] >> 4) & 0x0F)];
  3345  017C  084F               	movf	_rtcData+1,w
  3346  017D  00EC               	movwf	??_main
  3347  017E  3004               	movlw	4
  3348  017F                     u3215:	
  3349  017F  36EC               	lsrf	??_main,f
  3350  0180  0B89               	decfsz	9,f
  3351  0181  297F               	goto	u3215
  3352  0182  086C               	movf	??_main,w
  3353  0183  390F               	andlw	15
  3354  0184  3E00               	addlw	low (_displayNum| (0+32768))
  3355  0185  0084               	movwf	4
  3356  0186  3090               	movlw	high (_displayNum| (0+32768))
  3357  0187  1803               	skipnc
  3358  0188  3E01               	addlw	1
  3359  0189  0085               	movwf	5
  3360  018A  0800               	movf	0,w	;code access
  3361  018B  00ED               	movwf	??_main+1
  3362  018C  086D               	movf	??_main+1,w
  3363  018D  00C7               	movwf	_displayBuff+2
  3364                           
  3365                           ;main.c: 289:                 displayBuff[3] = displayNum[(rtcData[1]& 0x0F)];
  3366  018E  084F               	movf	_rtcData+1,w
  3367  018F  390F               	andlw	15
  3368  0190  3E00               	addlw	low (_displayNum| (0+32768))
  3369  0191  0084               	movwf	4
  3370  0192  3090               	movlw	high (_displayNum| (0+32768))
  3371  0193  1803               	skipnc
  3372  0194  3E01               	addlw	1
  3373  0195  0085               	movwf	5
  3374  0196  0800               	movf	0,w	;code access
  3375  0197  00EC               	movwf	??_main
  3376  0198  086C               	movf	??_main,w
  3377  0199  00C8               	movwf	_displayBuff+3
  3378                           
  3379                           ;main.c: 290:                 if(mode == MODE_SET_HOUR){
  3380  019A  034C               	decf	_mode,w
  3381  019B  1D03               	btfss	3,2
  3382  019C  299F               	goto	l5598
  3383                           
  3384                           ;main.c: 291:                     displayBuff[1] |= (1 << 0);
  3385  019D  1446               	bsf	_displayBuff+1,0
  3386                           
  3387                           ;main.c: 292:                 } else if(mode == MODE_SET_MINUTE){
  3388  019E  2956               	goto	l5584
  3389  019F                     l5598:	
  3390  019F  3002               	movlw	2
  3391  01A0  064C               	xorwf	_mode,w
  3392  01A1  1D03               	btfss	3,2
  3393  01A2  2956               	goto	l5584
  3394                           
  3395                           ;main.c: 293:                     displayBuff[3] |= (1 << 0);
  3396  01A3  1448               	bsf	_displayBuff+3,0
  3397  01A4  2956               	goto	l5584
  3398  01A5                     __end_of_main:	
  3399                           
  3400                           	psect	text1
  3401  0662                     __ptext1:	
  3402 ;; *************** function _updateRTC *****************
  3403 ;; Defined at:
  3404 ;;		line 101 in file "main.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  bcdHour         1    wreg     unsigned char 
  3407 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3419 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3423 ;;Total ram usage:        3 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:   15
  3426 ;; This function calls:
  3427 ;;		_i2c_writeNBytes
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           
  3434                           ;psect for function _updateRTC
  3435  0662                     _updateRTC:	
  3436                           
  3437                           ;incstack = 0
  3438                           ; Regs used in _updateRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3439                           ;updateRTC@bcdHour stored from wreg
  3440  0662  0020               	movlb	0	; select bank0
  3441  0663  00E7               	movwf	updateRTC@bcdHour
  3442                           
  3443                           ;main.c: 102:     rtcData[0] = 0x00;
  3444  0664  01CE               	clrf	_rtcData
  3445                           
  3446                           ;main.c: 103:     rtcData[1] = 0x00;
  3447  0665  01CF               	clrf	_rtcData+1
  3448                           
  3449                           ;main.c: 104:     rtcData[2] = bcdMinute & 0x7F;
  3450  0666  0865               	movf	updateRTC@bcdMinute,w
  3451  0667  397F               	andlw	127
  3452  0668  00E6               	movwf	??_updateRTC
  3453  0669  0866               	movf	??_updateRTC,w
  3454  066A  00D0               	movwf	_rtcData+2
  3455                           
  3456                           ;main.c: 105:     rtcData[3] = bcdHour & 0x3F;
  3457  066B  0867               	movf	updateRTC@bcdHour,w
  3458  066C  393F               	andlw	63
  3459  066D  00E6               	movwf	??_updateRTC
  3460  066E  0866               	movf	??_updateRTC,w
  3461  066F  00D1               	movwf	_rtcData+3
  3462                           
  3463                           ;main.c: 106:     i2c_writeNBytes(0x68,rtcData,4);
  3464  0670  304E               	movlw	(low (_rtcData| 0))& (0+255)
  3465  0671  00E6               	movwf	??_updateRTC
  3466  0672  0866               	movf	??_updateRTC,w
  3467  0673  00E1               	movwf	i2c_writeNBytes@data
  3468  0674  3004               	movlw	4
  3469  0675  00E2               	movwf	i2c_writeNBytes@len
  3470  0676  3000               	movlw	0
  3471  0677  00E3               	movwf	i2c_writeNBytes@len+1
  3472  0678  3068               	movlw	104
  3473  0679  3185  2555         	fcall	_i2c_writeNBytes
  3474  067B  0008               	return
  3475  067C                     __end_of_updateRTC:	
  3476                           
  3477                           	psect	text2
  3478  037B                     __ptext2:	
  3479 ;; *************** function _initRTC *****************
  3480 ;; Defined at:
  3481 ;;		line 79 in file "main.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3497 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3499 ;;Total ram usage:        2 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:   15
  3502 ;; This function calls:
  3503 ;;		_i2c_readDataBlock
  3504 ;;		_i2c_writeNBytes
  3505 ;; This function is called by:
  3506 ;;		_main
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           
  3511                           ;psect for function _initRTC
  3512  037B                     _initRTC:	
  3513                           
  3514                           ;main.c: 80:     _delay((unsigned long)((30)*(32000000/4000.0)));
  3515                           
  3516                           ;incstack = 0
  3517                           ; Regs used in _initRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3518  037B  3002               	movlw	2
  3519  037C  0020               	movlb	0	; select bank0
  3520  037D  00EB               	movwf	??_initRTC+1
  3521  037E  3038               	movlw	56
  3522  037F  00EA               	movwf	??_initRTC
  3523  0380  30AD               	movlw	173
  3524  0381                     u3367:	
  3525  0381  0B89               	decfsz	9,f
  3526  0382  2B81               	goto	u3367
  3527  0383  0BEA               	decfsz	??_initRTC,f
  3528  0384  2B81               	goto	u3367
  3529  0385  0BEB               	decfsz	??_initRTC+1,f
  3530  0386  2B81               	goto	u3367
  3531                           
  3532                           ;main.c: 84:     i2c_readDataBlock(0x68,0x00,rtcData,sizeof(rtcData));
  3533  0387  0020               	movlb	0	; select bank0
  3534  0388  01E1               	clrf	i2c_readDataBlock@reg
  3535  0389  304E               	movlw	(low (_rtcData| 0))& (0+255)
  3536  038A  00EA               	movwf	??_initRTC
  3537  038B  086A               	movf	??_initRTC,w
  3538  038C  00E2               	movwf	i2c_readDataBlock@data
  3539  038D  3009               	movlw	9
  3540  038E  00E3               	movwf	i2c_readDataBlock@len
  3541  038F  3000               	movlw	0
  3542  0390  00E4               	movwf	i2c_readDataBlock@len+1
  3543  0391  3068               	movlw	104
  3544  0392  3183  23B6  3183   	fcall	_i2c_readDataBlock
  3545                           
  3546                           ;main.c: 85:     if((rtcData[0] & 0x80) == 0x80){
  3547  0395  0020               	movlb	0	; select bank0
  3548  0396  1FCE               	btfss	_rtcData,7
  3549  0397  0008               	return
  3550                           
  3551                           ;main.c: 87:         rtcData[0] = 0x00;
  3552  0398  01CE               	clrf	_rtcData
  3553                           
  3554                           ;main.c: 88:         rtcData[1] = 0x00;
  3555  0399  01CF               	clrf	_rtcData+1
  3556                           
  3557                           ;main.c: 89:         rtcData[2] = 0x00;
  3558  039A  01D0               	clrf	_rtcData+2
  3559                           
  3560                           ;main.c: 90:         rtcData[3] = 0x00;
  3561  039B  01D1               	clrf	_rtcData+3
  3562                           
  3563                           ;main.c: 91:         rtcData[4] = 0x01;
  3564  039C  01D2               	clrf	_rtcData+4
  3565  039D  0AD2               	incf	_rtcData+4,f
  3566                           
  3567                           ;main.c: 92:         rtcData[5] = 0x01;
  3568  039E  01D3               	clrf	_rtcData+5
  3569  039F  0AD3               	incf	_rtcData+5,f
  3570                           
  3571                           ;main.c: 93:         rtcData[6] = 0x01;
  3572  03A0  01D4               	clrf	_rtcData+6
  3573  03A1  0AD4               	incf	_rtcData+6,f
  3574                           
  3575                           ;main.c: 94:         rtcData[7] = 0x19;
  3576  03A2  3019               	movlw	25
  3577  03A3  00EA               	movwf	??_initRTC
  3578  03A4  086A               	movf	??_initRTC,w
  3579  03A5  00D5               	movwf	_rtcData+7
  3580                           
  3581                           ;main.c: 95:         rtcData[8] = 0x10;
  3582  03A6  3010               	movlw	16
  3583  03A7  00EA               	movwf	??_initRTC
  3584  03A8  086A               	movf	??_initRTC,w
  3585  03A9  00D6               	movwf	_rtcData+8
  3586                           
  3587                           ;main.c: 97:         i2c_writeNBytes(0x68,rtcData,sizeof(rtcData));
  3588  03AA  304E               	movlw	(low (_rtcData| 0))& (0+255)
  3589  03AB  00EA               	movwf	??_initRTC
  3590  03AC  086A               	movf	??_initRTC,w
  3591  03AD  00E1               	movwf	i2c_writeNBytes@data
  3592  03AE  3009               	movlw	9
  3593  03AF  00E2               	movwf	i2c_writeNBytes@len
  3594  03B0  3000               	movlw	0
  3595  03B1  00E3               	movwf	i2c_writeNBytes@len+1
  3596  03B2  3068               	movlw	104
  3597  03B3  3185  2555         	fcall	_i2c_writeNBytes
  3598  03B5  0008               	return
  3599  03B6                     __end_of_initRTC:	
  3600                           
  3601                           	psect	text3
  3602  0555                     __ptext3:	
  3603 ;; *************** function _i2c_writeNBytes *****************
  3604 ;; Defined at:
  3605 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  address         1    wreg     unsigned char 
  3608 ;;  data            1   10[BANK0 ] PTR void 
  3609 ;;		 -> rtcData(9), 
  3610 ;;  len             2   11[BANK0 ] unsigned int 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  address         1   13[BANK0 ] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3622 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3626 ;;Total ram usage:        4 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:   14
  3629 ;; This function calls:
  3630 ;;		_i2c_close
  3631 ;;		_i2c_masterWrite
  3632 ;;		_i2c_open
  3633 ;;		_i2c_setAddressNACKCallback
  3634 ;;		_i2c_setBuffer
  3635 ;; This function is called by:
  3636 ;;		_initRTC
  3637 ;;		_updateRTC
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _i2c_writeNBytes
  3643  0555                     _i2c_writeNBytes:	
  3644                           
  3645                           ;incstack = 0
  3646                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3647                           ;i2c_writeNBytes@address stored from wreg
  3648  0555  0020               	movlb	0	; select bank0
  3649  0556  00E4               	movwf	i2c_writeNBytes@address
  3650  0557                     l5142:	
  3651                           ;mcc_generated_files/drivers/i2c_simple_master.c: 48: void i2c_writeNBytes(i2c_address_t
      +                           address, void* data, size_t len);mcc_generated_files/drivers/i2c_simple_master.c: 49: {
      +                          ;mcc_generated_files/drivers/i2c_simple_master.c: 50:     while(!i2c_open(address));
  3652                           
  3653  0557  0020               	movlb	0	; select bank0
  3654  0558  0864               	movf	i2c_writeNBytes@address,w
  3655  0559  3182  22EE  3185   	fcall	_i2c_open
  3656  055C  3A00               	xorlw	0
  3657  055D  1903               	skipnz
  3658  055E  2D57               	goto	l5142
  3659                           
  3660                           ;mcc_generated_files/drivers/i2c_simple_master.c: 51:     i2c_setBuffer(data,len);
  3661  055F  0020               	movlb	0	; select bank0
  3662  0560  0863               	movf	i2c_writeNBytes@len+1,w
  3663  0561  00D8               	movwf	i2c_setBuffer@bufferSize+1
  3664  0562  0862               	movf	i2c_writeNBytes@len,w
  3665  0563  00D7               	movwf	i2c_setBuffer@bufferSize
  3666  0564  0861               	movf	i2c_writeNBytes@data,w
  3667  0565  3187  2788  3185   	fcall	_i2c_setBuffer
  3668                           
  3669                           ;mcc_generated_files/drivers/i2c_simple_master.c: 52:     i2c_setAddressNACKCallback(i2c
      +                          _restartWrite,((void*)0));
  3670  0568  3020               	movlw	low _i2c_restartWrite
  3671  0569  0020               	movlb	0	; select bank0
  3672  056A  00DC               	movwf	i2c_setAddressNACKCallback@cb
  3673  056B  300F               	movlw	high _i2c_restartWrite
  3674  056C  00DD               	movwf	i2c_setAddressNACKCallback@cb+1
  3675  056D  01DE               	clrf	i2c_setAddressNACKCallback@p
  3676  056E  3187  27A4  3185   	fcall	_i2c_setAddressNACKCallback
  3677                           
  3678                           ;mcc_generated_files/drivers/i2c_simple_master.c: 53:     i2c_masterWrite();
  3679  0571  318E  26F3  3185   	fcall	_i2c_masterWrite
  3680  0574                     l5150:	
  3681                           ;mcc_generated_files/drivers/i2c_simple_master.c: 54:     while(I2C_BUSY == i2c_close())
      +                          ;
  3682                           
  3683  0574  3187  2703  3185   	fcall	_i2c_close
  3684  0577  3A01               	xorlw	1
  3685  0578  1D03               	btfss	3,2
  3686  0579  0008               	return
  3687  057A  2D74               	goto	l5150
  3688  057B                     __end_of_i2c_writeNBytes:	
  3689                           
  3690                           	psect	text4
  3691  03B6                     __ptext4:	
  3692 ;; *************** function _i2c_readDataBlock *****************
  3693 ;; Defined at:
  3694 ;;		line 141 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  address         1    wreg     unsigned char 
  3697 ;;  reg             1   10[BANK0 ] unsigned char 
  3698 ;;  data            1   11[BANK0 ] PTR void 
  3699 ;;		 -> rtcData(9), 
  3700 ;;  len             2   12[BANK0 ] unsigned int 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  address         1   15[BANK0 ] unsigned char 
  3703 ;;  d               3   16[BANK0 ] struct .
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3714 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3716 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3717 ;;Total ram usage:        9 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:   14
  3720 ;; This function calls:
  3721 ;;		_i2c_close
  3722 ;;		_i2c_masterWrite
  3723 ;;		_i2c_open
  3724 ;;		_i2c_setAddressNACKCallback
  3725 ;;		_i2c_setBuffer
  3726 ;;		_i2c_setDataCompleteCallback
  3727 ;; This function is called by:
  3728 ;;		_initRTC
  3729 ;;		_main
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _i2c_readDataBlock
  3735  03B6                     _i2c_readDataBlock:	
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in _i2c_readDataBlock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3739                           ;i2c_readDataBlock@address stored from wreg
  3740  03B6  0020               	movlb	0	; select bank0
  3741  03B7  00E6               	movwf	i2c_readDataBlock@address
  3742                           
  3743                           ;mcc_generated_files/drivers/i2c_simple_master.c: 141: void i2c_readDataBlock(i2c_addres
      +                          s_t address, uint8_t reg, void *data, size_t len);mcc_generated_files/drivers/i2c_simple
      +                          _master.c: 142: {;mcc_generated_files/drivers/i2c_simple_master.c: 144:     buf_t d;;mcc
      +                          _generated_files/drivers/i2c_simple_master.c: 145:     d.data = data;
  3744  03B8  0862               	movf	i2c_readDataBlock@data,w
  3745  03B9  00E5               	movwf	??_i2c_readDataBlock
  3746  03BA  0865               	movf	??_i2c_readDataBlock,w
  3747  03BB  00E9               	movwf	low ((i2c_readDataBlock@d| 0+2))
  3748                           
  3749                           ;mcc_generated_files/drivers/i2c_simple_master.c: 146:     d.len = len;
  3750  03BC  0864               	movf	i2c_readDataBlock@len+1,w
  3751  03BD  00E8               	movwf	i2c_readDataBlock@d+1
  3752  03BE  0863               	movf	i2c_readDataBlock@len,w
  3753  03BF  00E7               	movwf	i2c_readDataBlock@d
  3754  03C0                     l5128:	
  3755                           ;mcc_generated_files/drivers/i2c_simple_master.c: 148:     while(!i2c_open(address));
  3756                           
  3757  03C0  0020               	movlb	0	; select bank0
  3758  03C1  0866               	movf	i2c_readDataBlock@address,w
  3759  03C2  3182  22EE  3183   	fcall	_i2c_open
  3760  03C5  3A00               	xorlw	0
  3761  03C6  1903               	skipnz
  3762  03C7  2BC0               	goto	l5128
  3763                           
  3764                           ;mcc_generated_files/drivers/i2c_simple_master.c: 149:     i2c_setDataCompleteCallback(r
      +                          dBlkRegCompleteHandler,&d);
  3765  03C8  3029               	movlw	low _rdBlkRegCompleteHandler
  3766  03C9  0020               	movlb	0	; select bank0
  3767  03CA  00DC               	movwf	i2c_setDataCompleteCallback@cb
  3768  03CB  3006               	movlw	high _rdBlkRegCompleteHandler
  3769  03CC  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  3770  03CD  3067               	movlw	(low (i2c_readDataBlock@d| 0))& (0+255)
  3771  03CE  00E5               	movwf	??_i2c_readDataBlock
  3772  03CF  0865               	movf	??_i2c_readDataBlock,w
  3773  03D0  00DE               	movwf	i2c_setDataCompleteCallback@p
  3774  03D1  3187  27B1  3183   	fcall	_i2c_setDataCompleteCallback
  3775                           
  3776                           ;mcc_generated_files/drivers/i2c_simple_master.c: 150:     i2c_setBuffer(&reg,1);
  3777  03D4  3001               	movlw	1
  3778  03D5  0020               	movlb	0	; select bank0
  3779  03D6  00D7               	movwf	i2c_setBuffer@bufferSize
  3780  03D7  3000               	movlw	0
  3781  03D8  00D8               	movwf	i2c_setBuffer@bufferSize+1
  3782  03D9  3061               	movlw	(low (i2c_readDataBlock@reg| 0))& (0+255)
  3783  03DA  3187  2788  3183   	fcall	_i2c_setBuffer
  3784                           
  3785                           ;mcc_generated_files/drivers/i2c_simple_master.c: 151:     i2c_setAddressNACKCallback(i2
      +                          c_restartWrite,((void*)0));
  3786  03DD  3020               	movlw	low _i2c_restartWrite
  3787  03DE  0020               	movlb	0	; select bank0
  3788  03DF  00DC               	movwf	i2c_setAddressNACKCallback@cb
  3789  03E0  300F               	movlw	high _i2c_restartWrite
  3790  03E1  00DD               	movwf	i2c_setAddressNACKCallback@cb+1
  3791  03E2  01DE               	clrf	i2c_setAddressNACKCallback@p
  3792  03E3  3187  27A4  3183   	fcall	_i2c_setAddressNACKCallback
  3793                           
  3794                           ;mcc_generated_files/drivers/i2c_simple_master.c: 152:     i2c_masterWrite();
  3795  03E6  318E  26F3  3183   	fcall	_i2c_masterWrite
  3796  03E9                     l5138:	
  3797                           ;mcc_generated_files/drivers/i2c_simple_master.c: 153:     while(I2C_BUSY == i2c_close()
      +                          );
  3798                           
  3799  03E9  3187  2703  3183   	fcall	_i2c_close
  3800  03EC  3A01               	xorlw	1
  3801  03ED  1D03               	btfss	3,2
  3802  03EE  0008               	return
  3803  03EF  2BE9               	goto	l5138
  3804  03F0                     __end_of_i2c_readDataBlock:	
  3805                           
  3806                           	psect	text5
  3807  07A4                     __ptext5:	
  3808 ;; *************** function _i2c_setAddressNACKCallback *****************
  3809 ;; Defined at:
  3810 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  3813 ;;		 -> i2c_restartWrite(1), 
  3814 ;;  p               1    7[BANK0 ] PTR void 
  3815 ;;		 -> NULL(0), 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3827 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3830 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;Total ram usage:        4 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    7
  3834 ;; This function calls:
  3835 ;;		_setCallBack
  3836 ;; This function is called by:
  3837 ;;		_i2c_writeNBytes
  3838 ;;		_i2c_readDataBlock
  3839 ;;		_i2c_write1ByteRegister
  3840 ;;		_i2c_read1ByteRegister
  3841 ;;		_i2c_read2ByteRegister
  3842 ;;		_i2c_write2ByteRegister
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           
  3847                           ;psect for function _i2c_setAddressNACKCallback
  3848  07A4                     _i2c_setAddressNACKCallback:	
  3849                           
  3850                           ;mcc_generated_files/drivers/i2c_master.c: 99: void i2c_setAddressNACKCallback(i2c_callb
      +                          ack cb, void *p);mcc_generated_files/drivers/i2c_master.c: 100: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 101:     setCallBack(i2c_addressNACK,cb,p);
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3854  07A4  0020               	movlb	0	; select bank0
  3855  07A5  085D               	movf	i2c_setAddressNACKCallback@cb+1,w
  3856  07A6  00D8               	movwf	setCallBack@cb+1
  3857  07A7  085C               	movf	i2c_setAddressNACKCallback@cb,w
  3858  07A8  00D7               	movwf	setCallBack@cb
  3859  07A9  085E               	movf	i2c_setAddressNACKCallback@p,w
  3860  07AA  00DF               	movwf	??_i2c_setAddressNACKCallback
  3861  07AB  085F               	movf	??_i2c_setAddressNACKCallback,w
  3862  07AC  00D9               	movwf	setCallBack@p
  3863  07AD  3002               	movlw	2
  3864  07AE  3185  25A1         	fcall	_setCallBack
  3865  07B0  0008               	return
  3866  07B1                     __end_of_i2c_setAddressNACKCallback:	
  3867                           
  3868                           	psect	text6
  3869  02EE                     __ptext6:	
  3870 ;; *************** function _i2c_open *****************
  3871 ;; Defined at:
  3872 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  address         1    wreg     unsigned char 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  address         1    3[BANK0 ] unsigned char 
  3877 ;;  ret             1    4[BANK0 ] enum E3252
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      enum E3252
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0, pclath, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;Total ram usage:        3 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    7
  3894 ;; This function calls:
  3895 ;;		_i2c_driver_open
  3896 ;;		_i2c_driver_setBusCollisionISR
  3897 ;;		_i2c_driver_setI2cISR
  3898 ;;		_mssp_clearIRQ
  3899 ;; This function is called by:
  3900 ;;		_i2c_writeNBytes
  3901 ;;		_i2c_readDataBlock
  3902 ;;		_i2c_write1ByteRegister
  3903 ;;		_i2c_read1ByteRegister
  3904 ;;		_i2c_read2ByteRegister
  3905 ;;		_i2c_write2ByteRegister
  3906 ;;		_i2c_readNBytes
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           
  3911                           ;psect for function _i2c_open
  3912  02EE                     _i2c_open:	
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  3916                           ;i2c_open@address stored from wreg
  3917  02EE  0020               	movlb	0	; select bank0
  3918  02EF  00DA               	movwf	i2c_open@address
  3919                           
  3920                           ;mcc_generated_files/drivers/i2c_master.c: 116: i2c_error_t i2c_open(i2c_address_t addre
      +                          ss);mcc_generated_files/drivers/i2c_master.c: 117: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 118:     i2c_error_t ret = I2C_BUSY;
  3921  02F0  01DB               	clrf	i2c_open@ret
  3922  02F1  0ADB               	incf	i2c_open@ret,f
  3923                           
  3924                           ;mcc_generated_files/drivers/i2c_master.c: 120:     if(!i2c_status.inUse)
  3925  02F2  18A0               	btfsc	_i2c_status,1
  3926  02F3  2B34               	goto	l482
  3927                           
  3928                           ;mcc_generated_files/drivers/i2c_master.c: 121:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 122:         i2c_status.address = address;
  3929  02F4  085A               	movf	i2c_open@address,w
  3930  02F5  00D9               	movwf	??_i2c_open
  3931  02F6  0859               	movf	??_i2c_open,w
  3932  02F7  00A1               	movwf	_i2c_status+1
  3933                           
  3934                           ;mcc_generated_files/drivers/i2c_master.c: 123:         i2c_status.busy = 0;
  3935  02F8  1020               	bcf	_i2c_status,0
  3936                           
  3937                           ;mcc_generated_files/drivers/i2c_master.c: 124:         i2c_status.inUse = 1;
  3938  02F9  14A0               	bsf	_i2c_status,1
  3939                           
  3940                           ;mcc_generated_files/drivers/i2c_master.c: 125:         i2c_status.addressNACKCheck = 0;
  3941  02FA  11A0               	bcf	_i2c_status,3
  3942                           
  3943                           ;mcc_generated_files/drivers/i2c_master.c: 126:         i2c_status.state = I2C_RESET;
  3944  02FB  300E               	movlw	14
  3945  02FC  00D9               	movwf	??_i2c_open
  3946  02FD  0859               	movf	??_i2c_open,w
  3947  02FE  00A9               	movwf	_i2c_status+9
  3948                           
  3949                           ;mcc_generated_files/drivers/i2c_master.c: 127:         i2c_status.time_out_value = 500;
  3950  02FF  30F4               	movlw	244
  3951  0300  00A7               	movwf	_i2c_status+7
  3952  0301  3001               	movlw	1
  3953  0302  00A8               	movwf	_i2c_status+8
  3954                           
  3955                           ;mcc_generated_files/drivers/i2c_master.c: 128:         i2c_status.bufferFree = 1;
  3956  0303  1520               	bsf	_i2c_status,2
  3957                           
  3958                           ;mcc_generated_files/drivers/i2c_master.c: 131:         i2c_status.callbackTable[i2c_dat
      +                          aComplete]=returnStop;
  3959  0304  3014               	movlw	low _returnStop
  3960  0305  00AB               	movwf	low ((_i2c_status| 0+11))
  3961  0306  300F               	movlw	high _returnStop
  3962  0307  00AC               	movwf	(low ((_i2c_status| 0+11))+1)
  3963                           
  3964                           ;mcc_generated_files/drivers/i2c_master.c: 132:         i2c_status.callbackPayload[i2c_d
      +                          ataComplete] = ((void*)0);
  3965  0308  01B7               	clrf	low ((_i2c_status| 0+23))
  3966                           
  3967                           ;mcc_generated_files/drivers/i2c_master.c: 133:         i2c_status.callbackTable[i2c_wri
      +                          teCollision]=returnStop;
  3968  0309  3014               	movlw	low _returnStop
  3969  030A  00AD               	movwf	low ((_i2c_status| 0+13))
  3970  030B  300F               	movlw	high _returnStop
  3971  030C  00AE               	movwf	(low ((_i2c_status| 0+13))+1)
  3972                           
  3973                           ;mcc_generated_files/drivers/i2c_master.c: 134:         i2c_status.callbackPayload[i2c_w
      +                          riteCollision] = ((void*)0);
  3974  030D  01B8               	clrf	low ((_i2c_status| 0+24))
  3975                           
  3976                           ;mcc_generated_files/drivers/i2c_master.c: 135:         i2c_status.callbackTable[i2c_add
      +                          ressNACK]=returnStop;
  3977  030E  3014               	movlw	low _returnStop
  3978  030F  00AF               	movwf	low ((_i2c_status| 0+15))
  3979  0310  300F               	movlw	high _returnStop
  3980  0311  00B0               	movwf	(low ((_i2c_status| 0+15))+1)
  3981                           
  3982                           ;mcc_generated_files/drivers/i2c_master.c: 136:         i2c_status.callbackPayload[i2c_a
      +                          ddressNACK] = ((void*)0);
  3983  0312  01B9               	clrf	low ((_i2c_status| 0+25))
  3984                           
  3985                           ;mcc_generated_files/drivers/i2c_master.c: 137:         i2c_status.callbackTable[i2c_dat
      +                          aNACK]=returnStop;
  3986  0313  3014               	movlw	low _returnStop
  3987  0314  00B1               	movwf	low ((_i2c_status| 0+17))
  3988  0315  300F               	movlw	high _returnStop
  3989  0316  00B2               	movwf	(low ((_i2c_status| 0+17))+1)
  3990                           
  3991                           ;mcc_generated_files/drivers/i2c_master.c: 138:         i2c_status.callbackPayload[i2c_d
      +                          ataNACK] = ((void*)0);
  3992  0317  01BA               	clrf	low ((_i2c_status| 0+26))
  3993                           
  3994                           ;mcc_generated_files/drivers/i2c_master.c: 139:         i2c_status.callbackTable[i2c_tim
      +                          eOut]=returnReset;
  3995  0318  301A               	movlw	low _returnReset
  3996  0319  00B3               	movwf	low ((_i2c_status| 0+19))
  3997  031A  300F               	movlw	high _returnReset
  3998  031B  00B4               	movwf	(low ((_i2c_status| 0+19))+1)
  3999                           
  4000                           ;mcc_generated_files/drivers/i2c_master.c: 140:         i2c_status.callbackPayload[i2c_t
      +                          imeOut] = ((void*)0);
  4001  031C  01BB               	clrf	low ((_i2c_status| 0+27))
  4002                           
  4003                           ;mcc_generated_files/drivers/i2c_master.c: 142:         i2c_driver_open();
  4004  031D  318F  27D5  3182   	fcall	_i2c_driver_open
  4005                           
  4006                           ;mcc_generated_files/drivers/i2c_master.c: 143:         mssp_clearIRQ();
  4007  0320  318E  26AB  3182   	fcall	_mssp_clearIRQ
  4008                           
  4009                           ;mcc_generated_files/drivers/i2c_master.c: 145:         i2c_driver_setBusCollisionISR(i2
      +                          c_busCollisionISR);
  4010  0323  3096               	movlw	low _i2c_busCollisionISR
  4011  0324  0020               	movlb	0	; select bank0
  4012  0325  00D7               	movwf	i2c_driver_setBusCollisionISR@handler
  4013  0326  300E               	movlw	high _i2c_busCollisionISR
  4014  0327  00D8               	movwf	i2c_driver_setBusCollisionISR@handler+1
  4015  0328  318F  272C  3182   	fcall	_i2c_driver_setBusCollisionISR
  4016                           
  4017                           ;mcc_generated_files/drivers/i2c_master.c: 146:         i2c_driver_setI2cISR(i2c_ISR);
  4018  032B  30B0               	movlw	low _i2c_ISR
  4019  032C  0020               	movlb	0	; select bank0
  4020  032D  00D7               	movwf	i2c_driver_setI2cISR@handler
  4021  032E  3004               	movlw	high _i2c_ISR
  4022  032F  00D8               	movwf	i2c_driver_setI2cISR@handler+1
  4023  0330  318F  2732         	fcall	_i2c_driver_setI2cISR
  4024                           
  4025                           ;mcc_generated_files/drivers/i2c_master.c: 151:         ret = I2C_NOERR;
  4026  0332  0020               	movlb	0	; select bank0
  4027  0333  01DB               	clrf	i2c_open@ret
  4028  0334                     l482:	
  4029                           ;mcc_generated_files/drivers/i2c_master.c: 152:     }
  4030                           
  4031                           
  4032                           ;mcc_generated_files/drivers/i2c_master.c: 153:     return ret;
  4033  0334  085B               	movf	i2c_open@ret,w
  4034  0335  0008               	return
  4035  0336                     __end_of_i2c_open:	
  4036                           
  4037                           	psect	text7
  4038  0F32                     __ptext7:	
  4039 ;; *************** function _i2c_driver_setI2cISR *****************
  4040 ;; Defined at:
  4041 ;;		line 263 in file "mcc_generated_files/i2c_driver.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  4044 ;;		 -> i2c_ISR(1), 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4056 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;Total ram usage:        2 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    6
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_i2c_open
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _i2c_driver_setI2cISR
  4072  0F32                     _i2c_driver_setI2cISR:	
  4073                           
  4074                           ;mcc_generated_files/i2c_driver.c: 264:     i2c_driver_i2cISR = handler;
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  4078  0F32  0020               	movlb	0	; select bank0
  4079  0F33  0858               	movf	i2c_driver_setI2cISR@handler+1,w
  4080  0F34  00CA               	movwf	_i2c_driver_i2cISR+1
  4081  0F35  0857               	movf	i2c_driver_setI2cISR@handler,w
  4082  0F36  00C9               	movwf	_i2c_driver_i2cISR
  4083  0F37  0008               	return
  4084  0F38                     __end_of_i2c_driver_setI2cISR:	
  4085                           
  4086                           	psect	text8
  4087  0F2C                     __ptext8:	
  4088 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  4089 ;; Defined at:
  4090 ;;		line 259 in file "mcc_generated_files/i2c_driver.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  4093 ;;		 -> i2c_busCollisionISR(1), 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;		None
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;Total ram usage:        2 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    6
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_i2c_open
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function _i2c_driver_setBusCollisionISR
  4121  0F2C                     _i2c_driver_setBusCollisionISR:	
  4122                           
  4123                           ;mcc_generated_files/i2c_driver.c: 260:     i2c_driver_busCollisionISR = handler;
  4124                           
  4125                           ;incstack = 0
  4126                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  4127  0F2C  0020               	movlb	0	; select bank0
  4128  0F2D  0858               	movf	i2c_driver_setBusCollisionISR@handler+1,w
  4129  0F2E  00FB               	movwf	_i2c_driver_busCollisionISR+1
  4130  0F2F  0857               	movf	i2c_driver_setBusCollisionISR@handler,w
  4131  0F30  00FA               	movwf	_i2c_driver_busCollisionISR
  4132  0F31  0008               	return
  4133  0F32                     __end_of_i2c_driver_setBusCollisionISR:	
  4134                           
  4135                           	psect	text9
  4136  0FD5                     __ptext9:	
  4137 ;; *************** function _i2c_driver_open *****************
  4138 ;; Defined at:
  4139 ;;		line 84 in file "mcc_generated_files/i2c_driver.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;		None               void
  4146 ;; Registers used:
  4147 ;;		wreg, status,2
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;Total ram usage:        0 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    6
  4160 ;; This function calls:
  4161 ;;		Nothing
  4162 ;; This function is called by:
  4163 ;;		_i2c_open
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function _i2c_driver_open
  4169  0FD5                     _i2c_driver_open:	
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  4173  0FD5  0024               	movlb	4	; select bank4
  4174  0FD6  1A95               	btfsc	21,5	;volatile
  4175  0FD7  0008               	return
  4176  0FD8  0194               	clrf	20	;volatile
  4177  0FD9  3028               	movlw	40
  4178  0FDA  0095               	movwf	21	;volatile
  4179  0FDB  0196               	clrf	22	;volatile
  4180  0FDC  304F               	movlw	79
  4181  0FDD  0092               	movwf	18	;volatile
  4182  0FDE  0008               	return
  4183  0FDF                     __end_of_i2c_driver_open:	
  4184                           
  4185                           	psect	text10
  4186  0EF3                     __ptext10:	
  4187 ;; *************** function _i2c_masterWrite *****************
  4188 ;; Defined at:
  4189 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      enum E3252
  4196 ;; Registers used:
  4197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4207 ;;Total ram usage:        0 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:   13
  4210 ;; This function calls:
  4211 ;;		_i2c_masterOperation
  4212 ;; This function is called by:
  4213 ;;		_i2c_writeNBytes
  4214 ;;		_i2c_readDataBlock
  4215 ;;		_i2c_write1ByteRegister
  4216 ;;		_i2c_read1ByteRegister
  4217 ;;		_i2c_read2ByteRegister
  4218 ;;		_i2c_write2ByteRegister
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           
  4223                           ;psect for function _i2c_masterWrite
  4224  0EF3                     _i2c_masterWrite:	
  4225                           
  4226                           ;mcc_generated_files/drivers/i2c_master.c: 224:     return i2c_masterOperation(0);;	Retu
      +                          rn value of _i2c_masterWrite is never used
  4227                           
  4228                           ;incstack = 0
  4229                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4230  0EF3  3000               	movlw	0
  4231  0EF4  3186  260A         	fcall	_i2c_masterOperation
  4232  0EF6  0008               	return
  4233  0EF7                     __end_of_i2c_masterWrite:	
  4234                           
  4235                           	psect	text11
  4236  060A                     __ptext11:	
  4237 ;; *************** function _i2c_masterOperation *****************
  4238 ;; Defined at:
  4239 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  read            1    wreg     _Bool 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  read            1    8[BANK0 ] _Bool 
  4244 ;;  ret             1    9[BANK0 ] enum E3252
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      enum E3252
  4247 ;; Registers used:
  4248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;Total ram usage:        3 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:   12
  4261 ;; This function calls:
  4262 ;;		_i2c_driver_start
  4263 ;;		_i2c_poller
  4264 ;;		_mssp_IRQisEnabled
  4265 ;; This function is called by:
  4266 ;;		_i2c_masterWrite
  4267 ;;		_i2c_masterRead
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _i2c_masterOperation
  4273  060A                     _i2c_masterOperation:	
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4277                           ;i2c_masterOperation@read stored from wreg
  4278  060A  0020               	movlb	0	; select bank0
  4279  060B  00DF               	movwf	i2c_masterOperation@read
  4280                           
  4281                           ;mcc_generated_files/drivers/i2c_master.c: 193: i2c_error_t i2c_masterOperation(_Bool re
      +                          ad);mcc_generated_files/drivers/i2c_master.c: 194: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 195:     i2c_error_t ret = I2C_BUSY;
  4282  060C  01E0               	clrf	i2c_masterOperation@ret
  4283  060D  0AE0               	incf	i2c_masterOperation@ret,f
  4284                           
  4285                           ;mcc_generated_files/drivers/i2c_master.c: 196:     if(!i2c_status.busy)
  4286  060E  1820               	btfsc	_i2c_status,0
  4287  060F  2E26               	goto	l4958
  4288                           
  4289                           ;mcc_generated_files/drivers/i2c_master.c: 197:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 198:         i2c_status.busy = 1;
  4290  0610  1420               	bsf	_i2c_status,0
  4291                           
  4292                           ;mcc_generated_files/drivers/i2c_master.c: 199:         ret = I2C_NOERR;
  4293  0611  01E0               	clrf	i2c_masterOperation@ret
  4294                           
  4295                           ;mcc_generated_files/drivers/i2c_master.c: 201:         if(read)
  4296  0612  085F               	movf	i2c_masterOperation@read,w
  4297  0613  1903               	btfsc	3,2
  4298  0614  2E18               	goto	l4952
  4299                           
  4300                           ;mcc_generated_files/drivers/i2c_master.c: 202:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 203:             i2c_status.state = I2C_SEND_ADR_READ;
  4301  0615  01A9               	clrf	_i2c_status+9
  4302  0616  0AA9               	incf	_i2c_status+9,f
  4303                           
  4304                           ;mcc_generated_files/drivers/i2c_master.c: 204:         }
  4305  0617  2E1C               	goto	l4954
  4306  0618                     l4952:	
  4307                           
  4308                           ;mcc_generated_files/drivers/i2c_master.c: 206:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 207:             i2c_status.state = I2C_SEND_ADR_WRITE;
  4309  0618  3002               	movlw	2
  4310  0619  00DE               	movwf	??_i2c_masterOperation
  4311  061A  085E               	movf	??_i2c_masterOperation,w
  4312  061B  00A9               	movwf	_i2c_status+9
  4313  061C                     l4954:	
  4314                           
  4315                           ;mcc_generated_files/drivers/i2c_master.c: 209:         i2c_driver_start();
  4316  061C  318E  26B1  3186   	fcall	_i2c_driver_start
  4317                           
  4318                           ;mcc_generated_files/drivers/i2c_master.c: 211:         if(! mssp_IRQisEnabled())
  4319  061F  318F  27CB  3186   	fcall	_mssp_IRQisEnabled
  4320  0622  1803               	btfsc	3,0
  4321  0623  2E26               	goto	l4958
  4322                           
  4323                           ;mcc_generated_files/drivers/i2c_master.c: 212:             i2c_poller();
  4324  0624  3187  27F0         	fcall	_i2c_poller
  4325  0626                     l4958:	
  4326                           
  4327                           ;mcc_generated_files/drivers/i2c_master.c: 214:     return ret;
  4328  0626  0020               	movlb	0	; select bank0
  4329  0627  0860               	movf	i2c_masterOperation@ret,w
  4330  0628  0008               	return
  4331  0629                     __end_of_i2c_masterOperation:	
  4332                           
  4333                           	psect	text12
  4334  0FCB                     __ptext12:	
  4335 ;; *************** function _mssp_IRQisEnabled *****************
  4336 ;; Defined at:
  4337 ;;		line 44 in file "mcc_generated_files/i2c_driver.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;		None               void
  4344 ;; Registers used:
  4345 ;;		wreg, status,2, status,0
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;Total ram usage:        2 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    6
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_i2c_masterOperation
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _mssp_IRQisEnabled
  4367  0FCB                     _mssp_IRQisEnabled:	
  4368                           
  4369                           ;mcc_generated_files/i2c_driver.c: 46:             _delay((unsigned long)((100)*(3200000
      +                          0/4000000.0)));
  4370                           
  4371                           ;incstack = 0
  4372                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  4373  0FCB  0021               	movlb	1	; select bank1
  4374  0FCC  0C11               	rrf	17,w	;volatile
  4375  0FCD  0020               	movlb	0	; select bank0
  4376  0FCE  00D7               	movwf	??_mssp_IRQisEnabled
  4377  0FCF  0CD7               	rrf	??_mssp_IRQisEnabled,f
  4378  0FD0  0C57               	rrf	??_mssp_IRQisEnabled,w
  4379  0FD1  3901               	andlw	1
  4380  0FD2  00D8               	movwf	??_mssp_IRQisEnabled+1
  4381  0FD3  0C58               	rrf	??_mssp_IRQisEnabled+1,w
  4382  0FD4  0008               	return
  4383  0FD5                     __end_of_mssp_IRQisEnabled:	
  4384                           
  4385                           	psect	text13
  4386  07F0                     __ptext13:	
  4387 ;; *************** function _i2c_poller *****************
  4388 ;; Defined at:
  4389 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;Total ram usage:        0 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:   11
  4410 ;; This function calls:
  4411 ;;		_i2c_ISR
  4412 ;;		_mssp_waitForEvent
  4413 ;; This function is called by:
  4414 ;;		_i2c_masterOperation
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           
  4419                           ;psect for function _i2c_poller
  4420  07F0                     _i2c_poller:	
  4421  07F0                     l4916:	
  4422                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4426                           
  4427                           
  4428                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  4429  07F0  0020               	movlb	0	; select bank0
  4430  07F1  1C20               	btfss	_i2c_status,0
  4431  07F2  0008               	return
  4432                           
  4433                           ;mcc_generated_files/drivers/i2c_master.c: 233:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 234:         mssp_waitForEvent(((void*)0));
  4434  07F3  3000               	movlw	0
  4435  07F4  318F  27F5  3187   	fcall	_mssp_waitForEvent
  4436                           
  4437                           ;mcc_generated_files/drivers/i2c_master.c: 235:         i2c_ISR();
  4438  07F7  3184  24B0  3187   	fcall	_i2c_ISR
  4439  07FA  2FF0               	goto	l4916
  4440  07FB                     __end_of_i2c_poller:	
  4441                           
  4442                           	psect	text14
  4443  0FF5                     __ptext14:	
  4444 ;; *************** function _mssp_waitForEvent *****************
  4445 ;; Defined at:
  4446 ;;		line 69 in file "mcc_generated_files/i2c_driver.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  timeout         1    wreg     PTR unsigned short 
  4449 ;;		 -> NULL(0), 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  timeout         1    0[BANK0 ] PTR unsigned short 
  4452 ;;		 -> NULL(0), 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      void 
  4455 ;; Registers used:
  4456 ;;		wreg
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;Total ram usage:        1 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    6
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_i2c_poller
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _mssp_waitForEvent
  4478  0FF5                     _mssp_waitForEvent:	
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _mssp_waitForEvent: [wreg]
  4482  0FF5  0020               	movlb	0	; select bank0
  4483  0FF6  1991               	btfsc	17,3	;volatile
  4484  0FF7  0008               	return
  4485  0FF8                     l782:	
  4486  0FF8  0020               	movlb	0	; select bank0
  4487  0FF9  1991               	btfsc	17,3	;volatile
  4488  0FFA  0008               	return
  4489  0FFB  30A0               	movlw	160
  4490  0FFC                     u3377:	
  4491  0FFC  3200               	nop2
  4492  0FFD  0B89               	decfsz	9,f
  4493  0FFE  2FFC               	goto	u3377
  4494  0FFF  2FF8               	goto	l782
  4495  1000                     __end_of_mssp_waitForEvent:	
  4496                           
  4497                           	psect	text15
  4498  04B0                     __ptext15:	
  4499 ;; *************** function _i2c_ISR *****************
  4500 ;; Defined at:
  4501 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;Total ram usage:        3 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:   10
  4522 ;; This function calls:
  4523 ;;		_do_I2C_DO_ACK
  4524 ;;		_do_I2C_DO_ADDRESS_NACK
  4525 ;;		_do_I2C_DO_NACK_RESTART
  4526 ;;		_do_I2C_DO_NACK_STOP
  4527 ;;		_do_I2C_IDLE
  4528 ;;		_do_I2C_RCEN
  4529 ;;		_do_I2C_RESET
  4530 ;;		_do_I2C_RX
  4531 ;;		_do_I2C_SEND_ADR_READ
  4532 ;;		_do_I2C_SEND_ADR_WRITE
  4533 ;;		_do_I2C_SEND_RESTART
  4534 ;;		_do_I2C_SEND_RESTART_READ
  4535 ;;		_do_I2C_SEND_RESTART_WRITE
  4536 ;;		_do_I2C_SEND_STOP
  4537 ;;		_do_I2C_TX
  4538 ;;		_do_I2C_TX_EMPTY
  4539 ;;		_i2c_driver_isNACK
  4540 ;;		_mssp_clearIRQ
  4541 ;; This function is called by:
  4542 ;;		_i2c_open
  4543 ;;		_i2c_poller
  4544 ;;		_INTERRUPT_InterruptManager
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           
  4549                           ;psect for function _i2c_ISR
  4550  04B0                     _i2c_ISR:	
  4551                           
  4552                           ;Skip over the trampoline to the duplicate function for level 1
  4553  04B0  1C7E               	btfss	126,0
  4554  04B1  2CB4               	goto	l4894
  4555  04B2  3185  2D7B         	ljmp	i1l5418
  4556  04B4                     _i2c_ISR$intlevel0:	
  4557  04B4                     l4894:	
  4558                           ;incstack = 0
  4559                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4560                           
  4561                           
  4562                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
  4563  04B4  318E  26AB  3184   	fcall	_mssp_clearIRQ
  4564                           
  4565                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
  4566  04B7  0020               	movlb	0	; select bank0
  4567  04B8  1DA0               	btfss	_i2c_status,3
  4568  04B9  2CC4               	goto	l4902
  4569  04BA  318F  279B  3184   	fcall	_i2c_driver_isNACK
  4570  04BD  1C03               	btfss	3,0
  4571  04BE  2CC4               	goto	l4902
  4572                           
  4573                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
  4574  04BF  300F               	movlw	15
  4575  04C0  0020               	movlb	0	; select bank0
  4576  04C1  00DB               	movwf	??_i2c_ISR
  4577  04C2  085B               	movf	??_i2c_ISR,w
  4578  04C3  00A9               	movwf	_i2c_status+9
  4579  04C4                     l4902:	
  4580                           
  4581                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
  4582  04C4  0020               	movlb	0	; select bank0
  4583  04C5  0829               	movf	_i2c_status+9,w
  4584  04C6  00DB               	movwf	??_i2c_ISR
  4585  04C7  01DC               	clrf	??_i2c_ISR+1
  4586  04C8  35DB               	lslf	??_i2c_ISR,f
  4587  04C9  0DDC               	rlf	??_i2c_ISR+1,f
  4588  04CA  30EA               	movlw	low (_fsmStateTable| (0+32768))
  4589  04CB  075B               	addwf	??_i2c_ISR,w
  4590  04CC  0084               	movwf	4
  4591  04CD  3085               	movlw	high (_fsmStateTable| (0+32768))
  4592  04CE  3D5C               	addwfc	??_i2c_ISR+1,w
  4593  04CF  0085               	movwf	5
  4594  04D0  3F01               	moviw [1]fsr0
  4595  04D1  008A               	movwf	10
  4596  04D2  3F00               	moviw [0]fsr0
  4597  04D3  000A               	callw
  4598  04D4  3184               	pagesel	$
  4599  04D5  0020               	movlb	0	; select bank0
  4600  04D6  00DD               	movwf	??_i2c_ISR+2
  4601  04D7  085D               	movf	??_i2c_ISR+2,w
  4602  04D8  00A9               	movwf	_i2c_status+9
  4603  04D9  0008               	return
  4604  04DA                     __end_of_i2c_ISR:	
  4605                           
  4606                           	psect	text16
  4607  02A4                     __ptext16:	
  4608 ;; *************** function _do_I2C_RX *****************
  4609 ;; Defined at:
  4610 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      enum E3411
  4617 ;; Registers used:
  4618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;Total ram usage:        3 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    9
  4631 ;; This function calls:
  4632 ;;		Absolute function
  4633 ;;		_do_I2C_DO_NACK_RESTART
  4634 ;;		_do_I2C_DO_NACK_STOP
  4635 ;;		_i2c_driver_getRXData
  4636 ;;		_i2c_driver_sendACK
  4637 ;;		_i2c_restartWrite
  4638 ;;		_rd1RegCompleteHandler
  4639 ;;		_rd2RegCompleteHandler
  4640 ;;		_rdBlkRegCompleteHandler
  4641 ;;		_returnReset
  4642 ;;		_returnStop
  4643 ;;		_wr1RegCompleteHandler
  4644 ;;		_wr2RegCompleteHandler
  4645 ;; This function is called by:
  4646 ;;		_i2c_ISR
  4647 ;;		i1_i2c_ISR
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           
  4652                           ;psect for function _do_I2C_RX
  4653  02A4                     _do_I2C_RX:	
  4654                           
  4655                           ;Skip over the trampoline to the duplicate function for level 1
  4656  02A4  1C7E               	btfss	126,0
  4657  02A5  2AA8               	goto	l4834
  4658  02A6  3183  2B36         	ljmp	i1l5206
  4659  02A8                     _do_I2C_RX$intlevel0:	
  4660  02A8                     l4834:	
  4661                           ;incstack = 0
  4662                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4663                           
  4664                           
  4665                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
  4666  02A8  318E  26BD  3182   	fcall	_i2c_driver_getRXData
  4667  02AB  0020               	movlb	0	; select bank0
  4668  02AC  00D7               	movwf	??_do_I2C_RX
  4669  02AD  0822               	movf	low ((_i2c_status| 0+2)),w
  4670  02AE  0086               	movwf	6
  4671  02AF  0187               	clrf	7
  4672  02B0  0857               	movf	??_do_I2C_RX,w
  4673  02B1  0081               	movwf	1
  4674  02B2  3001               	movlw	1
  4675  02B3  00D7               	movwf	??_do_I2C_RX
  4676  02B4  0857               	movf	??_do_I2C_RX,w
  4677  02B5  07A2               	addwf	low ((_i2c_status| 0+2)),f
  4678                           
  4679                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
  4680  02B6  3001               	movlw	1
  4681  02B7  02A3               	subwf	_i2c_status+3,f
  4682  02B8  3000               	movlw	0
  4683  02B9  3BA4               	subwfb	_i2c_status+4,f
  4684  02BA  0823               	movf	_i2c_status+3,w
  4685  02BB  0424               	iorwf	_i2c_status+4,w
  4686  02BC  1903               	btfsc	3,2
  4687  02BD  2AC2               	goto	l579
  4688                           
  4689                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
  4690  02BE  318E  26EB         	fcall	_i2c_driver_sendACK
  4691                           
  4692                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
  4693  02C0  3005               	movlw	5
  4694  02C1  0008               	return
  4695  02C2                     l579:	
  4696                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
  4697                           
  4698                           
  4699                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
  4700  02C2  1520               	bsf	_i2c_status,2
  4701                           
  4702                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  4703  02C3  2ACA               	goto	l4858
  4704  02C4                     l4848:	
  4705                           
  4706                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
  4707  02C4  318F  2793         	fcall	_do_I2C_DO_NACK_RESTART
  4708  02C6  0008               	return
  4709  02C7                     l4852:	
  4710                           
  4711                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
  4712  02C7  318F  278B         	fcall	_do_I2C_DO_NACK_STOP
  4713  02C9  0008               	return
  4714  02CA                     l4858:	
  4715  02CA  0837               	movf	low ((_i2c_status| 0+23)),w
  4716  02CB  00D7               	movwf	??_do_I2C_RX
  4717  02CC  0857               	movf	??_do_I2C_RX,w
  4718  02CD  00E0               	movwf	wr1RegCompleteHandler@p
  4719  02CE  300B               	movlw	11
  4720  02CF  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  4721  02D0  0086               	movwf	6
  4722  02D1  0187               	clrf	7
  4723  02D2  3F41               	moviw [1]fsr1
  4724  02D3  008A               	movwf	10
  4725  02D4  3F40               	moviw [0]fsr1
  4726  02D5  000A               	callw
  4727  02D6  3182               	pagesel	$
  4728  02D7  0020               	movlb	0	; select bank0
  4729  02D8  00D8               	movwf	??_do_I2C_RX+1
  4730  02D9  01D9               	clrf	??_do_I2C_RX+2
  4731                           
  4732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4733                           ; Switch size 1, requested type "simple"
  4734                           ; Number of cases is 1, Range of values is 0 to 0
  4735                           ; switch strategies available:
  4736                           ; Name         Instructions Cycles
  4737                           ; simple_byte            4     3 (average)
  4738                           ; direct_byte            8     6 (fixed)
  4739                           ; jumptable            260     6 (fixed)
  4740                           ;	Chosen strategy is simple_byte
  4741  02DA  0859               	movf	??_do_I2C_RX+2,w
  4742  02DB  3A00               	xorlw	0	; case 0
  4743  02DC  1903               	skipnz
  4744  02DD  2ADF               	goto	l5874
  4745  02DE  2AC7               	goto	l4852
  4746  02DF                     l5874:	
  4747                           
  4748                           ; Switch size 1, requested type "simple"
  4749                           ; Number of cases is 4, Range of values is 1 to 4
  4750                           ; switch strategies available:
  4751                           ; Name         Instructions Cycles
  4752                           ; simple_byte           13     7 (average)
  4753                           ; direct_byte           17     9 (fixed)
  4754                           ; jumptable            263     9 (fixed)
  4755                           ;	Chosen strategy is simple_byte
  4756  02DF  0858               	movf	??_do_I2C_RX+1,w
  4757  02E0  3A01               	xorlw	1	; case 1
  4758  02E1  1903               	skipnz
  4759  02E2  2AC7               	goto	l4852
  4760  02E3  3A03               	xorlw	3	; case 2
  4761  02E4  1903               	skipnz
  4762  02E5  2AC4               	goto	l4848
  4763  02E6  3A01               	xorlw	1	; case 3
  4764  02E7  1903               	skipnz
  4765  02E8  2AC4               	goto	l4848
  4766  02E9  3A07               	xorlw	7	; case 4
  4767  02EA  1903               	skipnz
  4768  02EB  2AC7               	goto	l4852
  4769  02EC  2AC7               	goto	l4852
  4770  02ED  0008               	return
  4771  02EE                     __end_of_do_I2C_RX:	
  4772                           
  4773                           	psect	text17
  4774  0205                     __ptext17:	
  4775 ;; *************** function _do_I2C_TX *****************
  4776 ;; Defined at:
  4777 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;		None
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;		None
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      enum E3411
  4784 ;; Registers used:
  4785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;Total ram usage:        3 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    9
  4798 ;; This function calls:
  4799 ;;		Absolute function
  4800 ;;		_do_I2C_SEND_RESTART_READ
  4801 ;;		_do_I2C_SEND_RESTART_WRITE
  4802 ;;		_do_I2C_SEND_STOP
  4803 ;;		_i2c_driver_TXData
  4804 ;;		_i2c_driver_isNACK
  4805 ;;		_i2c_restartWrite
  4806 ;;		_rd1RegCompleteHandler
  4807 ;;		_rd2RegCompleteHandler
  4808 ;;		_rdBlkRegCompleteHandler
  4809 ;;		_returnReset
  4810 ;;		_returnStop
  4811 ;;		_wr1RegCompleteHandler
  4812 ;;		_wr2RegCompleteHandler
  4813 ;; This function is called by:
  4814 ;;		_i2c_ISR
  4815 ;;		i1_i2c_ISR
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           
  4820                           ;psect for function _do_I2C_TX
  4821  0205                     _do_I2C_TX:	
  4822                           
  4823                           ;Skip over the trampoline to the duplicate function for level 1
  4824  0205  1C7E               	btfss	126,0
  4825  0206  2A09               	goto	l4800
  4826  0207  3182  2A57         	ljmp	i1l5172
  4827  0209                     _do_I2C_TX$intlevel0:	
  4828  0209                     l4800:	
  4829                           ;incstack = 0
  4830                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4831                           
  4832                           
  4833                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
  4834  0209  318F  279B  3182   	fcall	_i2c_driver_isNACK
  4835  020C  1803               	btfsc	3,0
  4836  020D  2A18               	goto	l4818
  4837  020E  2A3C               	goto	l563
  4838  020F                     l4804:	
  4839                           
  4840                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
  4841  020F  318F  2763         	fcall	_do_I2C_SEND_RESTART_READ
  4842  0211  0008               	return
  4843  0212                     l4808:	
  4844                           
  4845                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
  4846  0212  318F  276B         	fcall	_do_I2C_SEND_RESTART_WRITE
  4847  0214  0008               	return
  4848  0215                     l4812:	
  4849                           
  4850                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
  4851  0215  318F  277B         	fcall	_do_I2C_SEND_STOP
  4852  0217  0008               	return
  4853  0218                     l4818:	
  4854  0218  0020               	movlb	0	; select bank0
  4855  0219  083A               	movf	low ((_i2c_status| 0+26)),w
  4856  021A  00D8               	movwf	??_do_I2C_TX
  4857  021B  0858               	movf	??_do_I2C_TX,w
  4858  021C  00E0               	movwf	wr1RegCompleteHandler@p
  4859  021D  3011               	movlw	17
  4860  021E  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  4861  021F  0086               	movwf	6
  4862  0220  0187               	clrf	7
  4863  0221  3F41               	moviw [1]fsr1
  4864  0222  008A               	movwf	10
  4865  0223  3F40               	moviw [0]fsr1
  4866  0224  000A               	callw
  4867  0225  3182               	pagesel	$
  4868  0226  0020               	movlb	0	; select bank0
  4869  0227  00D9               	movwf	??_do_I2C_TX+1
  4870  0228  01DA               	clrf	??_do_I2C_TX+2
  4871                           
  4872                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4873                           ; Switch size 1, requested type "simple"
  4874                           ; Number of cases is 1, Range of values is 0 to 0
  4875                           ; switch strategies available:
  4876                           ; Name         Instructions Cycles
  4877                           ; simple_byte            4     3 (average)
  4878                           ; direct_byte            8     6 (fixed)
  4879                           ; jumptable            260     6 (fixed)
  4880                           ;	Chosen strategy is simple_byte
  4881  0229  085A               	movf	??_do_I2C_TX+2,w
  4882  022A  3A00               	xorlw	0	; case 0
  4883  022B  1903               	skipnz
  4884  022C  2A2E               	goto	l5876
  4885  022D  2A15               	goto	l4812
  4886  022E                     l5876:	
  4887                           
  4888                           ; Switch size 1, requested type "simple"
  4889                           ; Number of cases is 4, Range of values is 1 to 4
  4890                           ; switch strategies available:
  4891                           ; Name         Instructions Cycles
  4892                           ; simple_byte           13     7 (average)
  4893                           ; direct_byte           17     9 (fixed)
  4894                           ; jumptable            263     9 (fixed)
  4895                           ;	Chosen strategy is simple_byte
  4896  022E  0859               	movf	??_do_I2C_TX+1,w
  4897  022F  3A01               	xorlw	1	; case 1
  4898  0230  1903               	skipnz
  4899  0231  2A15               	goto	l4812
  4900  0232  3A03               	xorlw	3	; case 2
  4901  0233  1903               	skipnz
  4902  0234  2A0F               	goto	l4804
  4903  0235  3A01               	xorlw	1	; case 3
  4904  0236  1903               	skipnz
  4905  0237  2A12               	goto	l4808
  4906  0238  3A07               	xorlw	7	; case 4
  4907  0239  1903               	skipnz
  4908  023A  2A15               	goto	l4812
  4909  023B  2A15               	goto	l4812
  4910  023C                     l563:	
  4911                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
  4912                           
  4913                           
  4914                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
  4915  023C  0020               	movlb	0	; select bank0
  4916  023D  11A0               	bcf	_i2c_status,3
  4917                           
  4918                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
  4919  023E  3002               	movlw	2
  4920  023F  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  4921  0240  0086               	movwf	6
  4922  0241  0187               	clrf	7
  4923  0242  3F40               	moviw [0]fsr1
  4924  0243  0084               	movwf	4
  4925  0244  0185               	clrf	5
  4926  0245  0A81               	incf	1,f
  4927  0246  0800               	movf	0,w
  4928  0247  318F  2726  3182   	fcall	_i2c_driver_TXData
  4929                           
  4930                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
  4931  024A  3001               	movlw	1
  4932  024B  0020               	movlb	0	; select bank0
  4933  024C  02A3               	subwf	_i2c_status+3,f
  4934  024D  3000               	movlw	0
  4935  024E  3BA4               	subwfb	_i2c_status+4,f
  4936  024F  0823               	movf	_i2c_status+3,w
  4937  0250  0424               	iorwf	_i2c_status+4,w
  4938  0251  1D03               	btfss	3,2
  4939  0252  2A55               	goto	l4826
  4940  0253  3006               	movlw	6
  4941  0254  0008               	return
  4942  0255                     l4826:	
  4943  0255  3003               	movlw	3
  4944  0256  0008               	return
  4945  0257                     __end_of_do_I2C_TX:	
  4946                           
  4947                           	psect	text18
  4948  0455                     __ptext18:	
  4949 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  4950 ;; Defined at:
  4951 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;		None
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      enum E3411
  4958 ;; Registers used:
  4959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;Total ram usage:        3 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    9
  4972 ;; This function calls:
  4973 ;;		Absolute function
  4974 ;;		_do_I2C_SEND_RESTART
  4975 ;;		_do_I2C_SEND_STOP
  4976 ;;		_i2c_restartWrite
  4977 ;;		_rd1RegCompleteHandler
  4978 ;;		_rd2RegCompleteHandler
  4979 ;;		_rdBlkRegCompleteHandler
  4980 ;;		_returnReset
  4981 ;;		_returnStop
  4982 ;;		_wr1RegCompleteHandler
  4983 ;;		_wr2RegCompleteHandler
  4984 ;; This function is called by:
  4985 ;;		_i2c_ISR
  4986 ;;		i1_i2c_ISR
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           
  4991                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  4992  0455                     _do_I2C_DO_ADDRESS_NACK:	
  4993                           
  4994                           ;Skip over the trampoline to the duplicate function for level 1
  4995  0455  1C7E               	btfss	126,0
  4996  0456  2C59               	goto	l4780
  4997  0457  3184  2CDA         	ljmp	i1l5152
  4998  0459                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  4999  0459                     l4780:	
  5000                           ;incstack = 0
  5001                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5002                           
  5003                           
  5004                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
  5005  0459  0020               	movlb	0	; select bank0
  5006  045A  11A0               	bcf	_i2c_status,3
  5007                           
  5008                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
  5009  045B  3002               	movlw	2
  5010  045C  00D7               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5011  045D  0857               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5012  045E  00AA               	movwf	_i2c_status+10
  5013                           
  5014                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
  5015  045F  2C66               	goto	l4794
  5016  0460                     l4784:	
  5017                           
  5018                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
  5019  0460  318F  2773         	fcall	_do_I2C_SEND_RESTART
  5020  0462  0008               	return
  5021  0463                     l4788:	
  5022                           
  5023                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
  5024  0463  318F  277B         	fcall	_do_I2C_SEND_STOP
  5025  0465  0008               	return
  5026  0466                     l4794:	
  5027  0466  0839               	movf	low ((_i2c_status| 0+25)),w
  5028  0467  00D7               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5029  0468  0857               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5030  0469  00E0               	movwf	wr1RegCompleteHandler@p
  5031  046A  300F               	movlw	15
  5032  046B  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5033  046C  0086               	movwf	6
  5034  046D  0187               	clrf	7
  5035  046E  3F41               	moviw [1]fsr1
  5036  046F  008A               	movwf	10
  5037  0470  3F40               	moviw [0]fsr1
  5038  0471  000A               	callw
  5039  0472  3184               	pagesel	$
  5040  0473  0020               	movlb	0	; select bank0
  5041  0474  00D8               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
  5042  0475  01D9               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
  5043                           
  5044                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5045                           ; Switch size 1, requested type "simple"
  5046                           ; Number of cases is 1, Range of values is 0 to 0
  5047                           ; switch strategies available:
  5048                           ; Name         Instructions Cycles
  5049                           ; simple_byte            4     3 (average)
  5050                           ; direct_byte            8     6 (fixed)
  5051                           ; jumptable            260     6 (fixed)
  5052                           ;	Chosen strategy is simple_byte
  5053  0476  0859               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
  5054  0477  3A00               	xorlw	0	; case 0
  5055  0478  1903               	skipnz
  5056  0479  2C7B               	goto	l5878
  5057  047A  2C63               	goto	l4788
  5058  047B                     l5878:	
  5059                           
  5060                           ; Switch size 1, requested type "simple"
  5061                           ; Number of cases is 2, Range of values is 2 to 3
  5062                           ; switch strategies available:
  5063                           ; Name         Instructions Cycles
  5064                           ; simple_byte            7     4 (average)
  5065                           ; direct_byte           13     9 (fixed)
  5066                           ; jumptable            263     9 (fixed)
  5067                           ;	Chosen strategy is simple_byte
  5068  047B  0858               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
  5069  047C  3A02               	xorlw	2	; case 2
  5070  047D  1903               	skipnz
  5071  047E  2C60               	goto	l4784
  5072  047F  3A01               	xorlw	1	; case 3
  5073  0480  1903               	skipnz
  5074  0481  2C60               	goto	l4784
  5075  0482  2C63               	goto	l4788
  5076  0483  0008               	return
  5077  0484                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  5078                           
  5079                           	psect	text19
  5080  0F93                     __ptext19:	
  5081 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  5082 ;; Defined at:
  5083 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;		None
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      enum E3411
  5090 ;; Registers used:
  5091 ;;		wreg, status,2, status,0, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;Total ram usage:        0 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    7
  5104 ;; This function calls:
  5105 ;;		_i2c_driver_sendNACK
  5106 ;; This function is called by:
  5107 ;;		_do_I2C_RX
  5108 ;;		_i2c_ISR
  5109 ;;		i1_i2c_ISR
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _do_I2C_DO_NACK_RESTART
  5115  0F93                     _do_I2C_DO_NACK_RESTART:	
  5116                           
  5117                           ;Skip over the trampoline to the duplicate function for level 1
  5118  0F93  1C7E               	btfss	126,0
  5119  0F94  2F97               	goto	l4664
  5120  0F95  318E  2EE3         	ljmp	i1l3660
  5121  0F97                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  5122  0F97                     l4664:	
  5123                           ;incstack = 0
  5124                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5125                           
  5126                           
  5127                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
  5128  0F97  318E  26EF         	fcall	_i2c_driver_sendNACK
  5129                           
  5130                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
  5131  0F99  3009               	movlw	9
  5132  0F9A  0008               	return
  5133  0F9B                     __end_of_do_I2C_DO_NACK_RESTART:	
  5134                           
  5135                           	psect	text20
  5136  0F8B                     __ptext20:	
  5137 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  5138 ;; Defined at:
  5139 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;		None
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;		None
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  1    wreg      enum E3411
  5146 ;; Registers used:
  5147 ;;		wreg, status,2, status,0, pclath, cstack
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;Total ram usage:        0 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:    7
  5160 ;; This function calls:
  5161 ;;		_i2c_driver_sendNACK
  5162 ;; This function is called by:
  5163 ;;		_do_I2C_RX
  5164 ;;		_i2c_ISR
  5165 ;;		i1_i2c_ISR
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           
  5170                           ;psect for function _do_I2C_DO_NACK_STOP
  5171  0F8B                     _do_I2C_DO_NACK_STOP:	
  5172                           
  5173                           ;Skip over the trampoline to the duplicate function for level 1
  5174  0F8B  1C7E               	btfss	126,0
  5175  0F8C  2F8F               	goto	l4658
  5176  0F8D  318E  2EDF         	ljmp	i1l3654
  5177  0F8F                     _do_I2C_DO_NACK_STOP$intlevel0:	
  5178  0F8F                     l4658:	
  5179                           ;incstack = 0
  5180                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  5181                           
  5182                           
  5183                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
  5184  0F8F  318E  26EF         	fcall	_i2c_driver_sendNACK
  5185                           
  5186                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
  5187  0F91  300A               	movlw	10
  5188  0F92  0008               	return
  5189  0F93                     __end_of_do_I2C_DO_NACK_STOP:	
  5190                           
  5191                           	psect	text21
  5192  0F83                     __ptext21:	
  5193 ;; *************** function _do_I2C_DO_ACK *****************
  5194 ;; Defined at:
  5195 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;		None
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      enum E3411
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0, pclath, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;Total ram usage:        0 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    7
  5216 ;; This function calls:
  5217 ;;		_i2c_driver_sendACK
  5218 ;; This function is called by:
  5219 ;;		_i2c_ISR
  5220 ;;		i1_i2c_ISR
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           
  5225                           ;psect for function _do_I2C_DO_ACK
  5226  0F83                     _do_I2C_DO_ACK:	
  5227                           
  5228                           ;Skip over the trampoline to the duplicate function for level 1
  5229  0F83  1C7E               	btfss	126,0
  5230  0F84  2F87               	goto	l4774
  5231  0F85  318E  2EDB         	ljmp	i1l3866
  5232  0F87                     _do_I2C_DO_ACK$intlevel0:	
  5233  0F87                     l4774:	
  5234                           ;incstack = 0
  5235                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  5236                           
  5237                           
  5238                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
  5239  0F87  318E  26EB         	fcall	_i2c_driver_sendACK
  5240                           
  5241                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
  5242  0F89  3005               	movlw	5
  5243  0F8A  0008               	return
  5244  0F8B                     __end_of_do_I2C_DO_ACK:	
  5245                           
  5246                           	psect	text22
  5247  0FC1                     __ptext22:	
  5248 ;; *************** function _do_I2C_RCEN *****************
  5249 ;; Defined at:
  5250 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      enum E3411
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    7
  5271 ;; This function calls:
  5272 ;;		_i2c_driver_startRX
  5273 ;; This function is called by:
  5274 ;;		_i2c_ISR
  5275 ;;		i1_i2c_ISR
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _do_I2C_RCEN
  5281  0FC1                     _do_I2C_RCEN:	
  5282                           
  5283                           ;Skip over the trampoline to the duplicate function for level 1
  5284  0FC1  1C7E               	btfss	126,0
  5285  0FC2  2FC5               	goto	l4766
  5286  0FC3  318F  2F02         	ljmp	i1l3858
  5287  0FC5                     _do_I2C_RCEN$intlevel0:	
  5288  0FC5                     l4766:	
  5289                           ;incstack = 0
  5290                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  5291                           
  5292                           
  5293                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
  5294  0FC5  0020               	movlb	0	; select bank0
  5295  0FC6  11A0               	bcf	_i2c_status,3
  5296                           
  5297                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
  5298  0FC7  318E  26BA         	fcall	_i2c_driver_startRX
  5299                           
  5300                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
  5301  0FC9  3004               	movlw	4
  5302  0FCA  0008               	return
  5303  0FCB                     __end_of_do_I2C_RCEN:	
  5304                           
  5305                           	psect	text23
  5306  0FEA                     __ptext23:	
  5307 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  5308 ;; Defined at:
  5309 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      enum E3411
  5316 ;; Registers used:
  5317 ;;		wreg, status,2, status,0, pclath, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    7
  5330 ;; This function calls:
  5331 ;;		_i2c_driver_TXData
  5332 ;; This function is called by:
  5333 ;;		_i2c_ISR
  5334 ;;		i1_i2c_ISR
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           
  5339                           ;psect for function _do_I2C_SEND_ADR_WRITE
  5340  0FEA                     _do_I2C_SEND_ADR_WRITE:	
  5341                           
  5342                           ;Skip over the trampoline to the duplicate function for level 1
  5343  0FEA  1C7E               	btfss	126,0
  5344  0FEB  2FEE               	goto	l4758
  5345  0FEC  318F  2F4C         	ljmp	i1l3850
  5346  0FEE                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  5347  0FEE                     l4758:	
  5348                           ;incstack = 0
  5349                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  5350                           
  5351                           
  5352                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
  5353  0FEE  0020               	movlb	0	; select bank0
  5354  0FEF  15A0               	bsf	_i2c_status,3
  5355                           
  5356                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
  5357  0FF0  3521               	lslf	_i2c_status+1,w
  5358  0FF1  318F  2726         	fcall	_i2c_driver_TXData
  5359                           
  5360                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
  5361  0FF3  3003               	movlw	3
  5362  0FF4  0008               	return
  5363  0FF5                     __end_of_do_I2C_SEND_ADR_WRITE:	
  5364                           
  5365                           	psect	text24
  5366  07D8                     __ptext24:	
  5367 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  5368 ;; Defined at:
  5369 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;		None
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;		None
  5374 ;; Return value:  Size  Location     Type
  5375 ;;                  1    wreg      enum E3411
  5376 ;; Registers used:
  5377 ;;		wreg, status,2, status,0, pclath, cstack
  5378 ;; Tracked objects:
  5379 ;;		On entry : 0/0
  5380 ;;		On exit  : 0/0
  5381 ;;		Unchanged: 0/0
  5382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5387 ;;Total ram usage:        0 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; Hardware stack levels required when called:    7
  5390 ;; This function calls:
  5391 ;;		_i2c_driver_TXData
  5392 ;; This function is called by:
  5393 ;;		_i2c_ISR
  5394 ;;		i1_i2c_ISR
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _do_I2C_SEND_ADR_READ
  5400  07D8                     _do_I2C_SEND_ADR_READ:	
  5401                           
  5402                           ;Skip over the trampoline to the duplicate function for level 1
  5403  07D8  1C7E               	btfss	126,0
  5404  07D9  2FDC               	goto	l4750
  5405  07DA  318F  2F5B         	ljmp	i1l3842
  5406  07DC                     _do_I2C_SEND_ADR_READ$intlevel0:	
  5407  07DC                     l4750:	
  5408                           ;incstack = 0
  5409                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  5410                           
  5411                           
  5412                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
  5413  07DC  0020               	movlb	0	; select bank0
  5414  07DD  15A0               	bsf	_i2c_status,3
  5415                           
  5416                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
  5417  07DE  1403               	setc
  5418  07DF  0D21               	rlf	_i2c_status+1,w
  5419  07E0  318F  2726         	fcall	_i2c_driver_TXData
  5420                           
  5421                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
  5422  07E2  3005               	movlw	5
  5423  07E3  0008               	return
  5424  07E4                     __end_of_do_I2C_SEND_ADR_READ:	
  5425                           
  5426                           	psect	text25
  5427  0F7B                     __ptext25:	
  5428 ;; *************** function _do_I2C_SEND_STOP *****************
  5429 ;; Defined at:
  5430 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;		None
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;		None
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  1    wreg      enum E3411
  5437 ;; Registers used:
  5438 ;;		wreg, status,2, status,0, pclath, cstack
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;Total ram usage:        0 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    7
  5451 ;; This function calls:
  5452 ;;		_i2c_driver_stop
  5453 ;; This function is called by:
  5454 ;;		_do_I2C_DO_ADDRESS_NACK
  5455 ;;		_do_I2C_TX
  5456 ;;		_do_I2C_TX_EMPTY
  5457 ;;		_i2c_ISR
  5458 ;;		i1_i2c_ISR
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           
  5463                           ;psect for function _do_I2C_SEND_STOP
  5464  0F7B                     _do_I2C_SEND_STOP:	
  5465                           
  5466                           ;Skip over the trampoline to the duplicate function for level 1
  5467  0F7B  1C7E               	btfss	126,0
  5468  0F7C  2F7F               	goto	l4646
  5469  0F7D  318E  2ED7         	ljmp	i1l3648
  5470  0F7F                     _do_I2C_SEND_STOP$intlevel0:	
  5471  0F7F                     l4646:	
  5472                           ;incstack = 0
  5473                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  5474                           
  5475                           
  5476                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
  5477  0F7F  318E  26B7         	fcall	_i2c_driver_stop
  5478                           
  5479                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
  5480  0F81  3000               	movlw	0
  5481  0F82  0008               	return
  5482  0F83                     __end_of_do_I2C_SEND_STOP:	
  5483                           
  5484                           	psect	text26
  5485  0F73                     __ptext26:	
  5486 ;; *************** function _do_I2C_SEND_RESTART *****************
  5487 ;; Defined at:
  5488 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      enum E3411
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0, pclath, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;Total ram usage:        0 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    7
  5509 ;; This function calls:
  5510 ;;		_i2c_driver_restart
  5511 ;; This function is called by:
  5512 ;;		_do_I2C_DO_ADDRESS_NACK
  5513 ;;		_do_I2C_TX_EMPTY
  5514 ;;		_i2c_ISR
  5515 ;;		i1_i2c_ISR
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _do_I2C_SEND_RESTART
  5521  0F73                     _do_I2C_SEND_RESTART:	
  5522                           
  5523                           ;Skip over the trampoline to the duplicate function for level 1
  5524  0F73  1C7E               	btfss	126,0
  5525  0F74  2F77               	goto	l4640
  5526  0F75  318E  2ED3         	ljmp	i1l3642
  5527  0F77                     _do_I2C_SEND_RESTART$intlevel0:	
  5528  0F77                     l4640:	
  5529                           ;incstack = 0
  5530                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5531                           
  5532                           
  5533                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
  5534  0F77  318E  26B4         	fcall	_i2c_driver_restart
  5535                           
  5536                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
  5537  0F79  3001               	movlw	1
  5538  0F7A  0008               	return
  5539  0F7B                     __end_of_do_I2C_SEND_RESTART:	
  5540                           
  5541                           	psect	text27
  5542  0F6B                     __ptext27:	
  5543 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  5544 ;; Defined at:
  5545 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      enum E3411
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    7
  5566 ;; This function calls:
  5567 ;;		_i2c_driver_restart
  5568 ;; This function is called by:
  5569 ;;		_do_I2C_TX
  5570 ;;		_i2c_ISR
  5571 ;;		i1_i2c_ISR
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  5577  0F6B                     _do_I2C_SEND_RESTART_WRITE:	
  5578                           
  5579                           ;Skip over the trampoline to the duplicate function for level 1
  5580  0F6B  1C7E               	btfss	126,0
  5581  0F6C  2F6F               	goto	l4634
  5582  0F6D  318E  2ECF         	ljmp	i1l3636
  5583  0F6F                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  5584  0F6F                     l4634:	
  5585                           ;incstack = 0
  5586                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  5587                           
  5588                           
  5589                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
  5590  0F6F  318E  26B4         	fcall	_i2c_driver_restart
  5591                           
  5592                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
  5593  0F71  3002               	movlw	2
  5594  0F72  0008               	return
  5595  0F73                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  5596                           
  5597                           	psect	text28
  5598  0F63                     __ptext28:	
  5599 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  5600 ;; Defined at:
  5601 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;		None
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;		None
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      enum E3411
  5608 ;; Registers used:
  5609 ;;		wreg, status,2, status,0, pclath, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;Total ram usage:        0 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    7
  5622 ;; This function calls:
  5623 ;;		_i2c_driver_restart
  5624 ;; This function is called by:
  5625 ;;		_do_I2C_TX
  5626 ;;		_i2c_ISR
  5627 ;;		i1_i2c_ISR
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _do_I2C_SEND_RESTART_READ
  5633  0F63                     _do_I2C_SEND_RESTART_READ:	
  5634                           
  5635                           ;Skip over the trampoline to the duplicate function for level 1
  5636  0F63  1C7E               	btfss	126,0
  5637  0F64  2F67               	goto	l4628
  5638  0F65  318E  2ECB         	ljmp	i1l3630
  5639  0F67                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  5640  0F67                     l4628:	
  5641                           ;incstack = 0
  5642                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  5643                           
  5644                           
  5645                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
  5646  0F67  318E  26B4         	fcall	_i2c_driver_restart
  5647                           
  5648                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
  5649  0F69  3001               	movlw	1
  5650  0F6A  0008               	return
  5651  0F6B                     __end_of_do_I2C_SEND_RESTART_READ:	
  5652                           
  5653                           	psect	text29
  5654  0FA4                     __ptext29:	
  5655 ;; *************** function _do_I2C_IDLE *****************
  5656 ;; Defined at:
  5657 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      enum E3411
  5664 ;; Registers used:
  5665 ;;		wreg, status,2
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;Total ram usage:        0 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    6
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_i2c_ISR
  5682 ;;		i1_i2c_ISR
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           
  5687                           ;psect for function _do_I2C_IDLE
  5688  0FA4                     _do_I2C_IDLE:	
  5689                           
  5690                           ;Skip over the trampoline to the duplicate function for level 1
  5691  0FA4  1C7E               	btfss	126,0
  5692  0FA5  2FA8               	goto	l4742
  5693  0FA6  3187  2FFB         	ljmp	i1l3834
  5694  0FA8                     _do_I2C_IDLE$intlevel0:	
  5695  0FA8                     l4742:	
  5696                           ;incstack = 0
  5697                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  5698                           
  5699                           
  5700                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
  5701  0FA8  0020               	movlb	0	; select bank0
  5702  0FA9  1020               	bcf	_i2c_status,0
  5703                           
  5704                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
  5705  0FAA  01AA               	clrf	_i2c_status+10
  5706                           
  5707                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
  5708  0FAB  300E               	movlw	14
  5709  0FAC  0008               	return
  5710  0FAD                     __end_of_do_I2C_IDLE:	
  5711                           
  5712                           	psect	text30
  5713  0FDF                     __ptext30:	
  5714 ;; *************** function _do_I2C_RESET *****************
  5715 ;; Defined at:
  5716 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;		None
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  1    wreg      enum E3411
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0, pclath, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5734 ;;Total ram usage:        0 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    7
  5737 ;; This function calls:
  5738 ;;		_i2c_driver_resetBus
  5739 ;; This function is called by:
  5740 ;;		_i2c_ISR
  5741 ;;		i1_i2c_ISR
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           
  5746                           ;psect for function _do_I2C_RESET
  5747  0FDF                     _do_I2C_RESET:	
  5748                           
  5749                           ;Skip over the trampoline to the duplicate function for level 1
  5750  0FDF  1C7E               	btfss	126,0
  5751  0FE0  2FE3               	goto	l4732
  5752  0FE1  318F  2F45         	ljmp	i1l3824
  5753  0FE3                     _do_I2C_RESET$intlevel0:	
  5754  0FE3                     l4732:	
  5755                           ;incstack = 0
  5756                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  5757                           
  5758                           
  5759                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
  5760  0FE3  318E  268E         	fcall	_i2c_driver_resetBus
  5761                           
  5762                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
  5763  0FE5  0020               	movlb	0	; select bank0
  5764  0FE6  1020               	bcf	_i2c_status,0
  5765                           
  5766                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
  5767  0FE7  01AA               	clrf	_i2c_status+10
  5768                           
  5769                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
  5770  0FE8  300E               	movlw	14
  5771  0FE9  0008               	return
  5772  0FEA                     __end_of_do_I2C_RESET:	
  5773                           
  5774                           	psect	text31
  5775  03F0                     __ptext31:	
  5776 ;; *************** function _do_I2C_TX_EMPTY *****************
  5777 ;; Defined at:
  5778 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      enum E3411
  5785 ;; Registers used:
  5786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;Total ram usage:        3 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    9
  5799 ;; This function calls:
  5800 ;;		Absolute function
  5801 ;;		_do_I2C_SEND_RESTART
  5802 ;;		_do_I2C_SEND_STOP
  5803 ;;		_i2c_restartWrite
  5804 ;;		_mssp_setIRQ
  5805 ;;		_rd1RegCompleteHandler
  5806 ;;		_rd2RegCompleteHandler
  5807 ;;		_rdBlkRegCompleteHandler
  5808 ;;		_returnReset
  5809 ;;		_returnStop
  5810 ;;		_wr1RegCompleteHandler
  5811 ;;		_wr2RegCompleteHandler
  5812 ;; This function is called by:
  5813 ;;		_i2c_ISR
  5814 ;;		i1_i2c_ISR
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function _do_I2C_TX_EMPTY
  5820  03F0                     _do_I2C_TX_EMPTY:	
  5821                           
  5822                           ;Skip over the trampoline to the duplicate function for level 1
  5823  03F0  1C7E               	btfss	126,0
  5824  03F1  2BF4               	goto	l4864
  5825  03F2  3184  2C25         	ljmp	i1l5236
  5826  03F4                     _do_I2C_TX_EMPTY$intlevel0:	
  5827  03F4                     l4864:	
  5828                           ;incstack = 0
  5829                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5830                           
  5831                           
  5832                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
  5833  03F4  0020               	movlb	0	; select bank0
  5834  03F5  1520               	bsf	_i2c_status,2
  5835                           
  5836                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  5837  03F6  2C01               	goto	l4882
  5838  03F7                     l4866:	
  5839                           
  5840                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
  5841  03F7  318F  2773         	fcall	_do_I2C_SEND_RESTART
  5842  03F9  0008               	return
  5843  03FA                     l4870:	
  5844                           
  5845                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
  5846  03FA  318E  26C0         	fcall	_mssp_setIRQ
  5847                           
  5848                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
  5849  03FC  3003               	movlw	3
  5850  03FD  0008               	return
  5851  03FE                     l4876:	
  5852                           
  5853                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
  5854  03FE  318F  277B         	fcall	_do_I2C_SEND_STOP
  5855  0400  0008               	return
  5856  0401                     l4882:	
  5857  0401  0837               	movf	low ((_i2c_status| 0+23)),w
  5858  0402  00D7               	movwf	??_do_I2C_TX_EMPTY
  5859  0403  0857               	movf	??_do_I2C_TX_EMPTY,w
  5860  0404  00E0               	movwf	wr1RegCompleteHandler@p
  5861  0405  300B               	movlw	11
  5862  0406  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5863  0407  0086               	movwf	6
  5864  0408  0187               	clrf	7
  5865  0409  3F41               	moviw [1]fsr1
  5866  040A  008A               	movwf	10
  5867  040B  3F40               	moviw [0]fsr1
  5868  040C  000A               	callw
  5869  040D  3183               	pagesel	$
  5870  040E  0020               	movlb	0	; select bank0
  5871  040F  00D8               	movwf	??_do_I2C_TX_EMPTY+1
  5872  0410  01D9               	clrf	??_do_I2C_TX_EMPTY+2
  5873                           
  5874                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5875                           ; Switch size 1, requested type "simple"
  5876                           ; Number of cases is 1, Range of values is 0 to 0
  5877                           ; switch strategies available:
  5878                           ; Name         Instructions Cycles
  5879                           ; simple_byte            4     3 (average)
  5880                           ; direct_byte            8     6 (fixed)
  5881                           ; jumptable            260     6 (fixed)
  5882                           ;	Chosen strategy is simple_byte
  5883  0411  0859               	movf	??_do_I2C_TX_EMPTY+2,w
  5884  0412  3A00               	xorlw	0	; case 0
  5885  0413  1903               	skipnz
  5886  0414  2C16               	goto	l5880
  5887  0415  2BFE               	goto	l4876
  5888  0416                     l5880:	
  5889                           
  5890                           ; Switch size 1, requested type "simple"
  5891                           ; Number of cases is 4, Range of values is 1 to 4
  5892                           ; switch strategies available:
  5893                           ; Name         Instructions Cycles
  5894                           ; simple_byte           13     7 (average)
  5895                           ; direct_byte           17     9 (fixed)
  5896                           ; jumptable            263     9 (fixed)
  5897                           ;	Chosen strategy is simple_byte
  5898  0416  0858               	movf	??_do_I2C_TX_EMPTY+1,w
  5899  0417  3A01               	xorlw	1	; case 1
  5900  0418  1903               	skipnz
  5901  0419  2BFE               	goto	l4876
  5902  041A  3A03               	xorlw	3	; case 2
  5903  041B  1903               	skipnz
  5904  041C  2BF7               	goto	l4866
  5905  041D  3A01               	xorlw	1	; case 3
  5906  041E  1903               	skipnz
  5907  041F  2BF7               	goto	l4866
  5908  0420  3A07               	xorlw	7	; case 4
  5909  0421  1903               	skipnz
  5910  0422  2BFA               	goto	l4870
  5911  0423  2BFE               	goto	l4876
  5912  0424  0008               	return
  5913  0425                     __end_of_do_I2C_TX_EMPTY:	
  5914                           
  5915                           	psect	text32
  5916  0EC0                     __ptext32:	
  5917 ;; *************** function _mssp_setIRQ *****************
  5918 ;; Defined at:
  5919 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;		None
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;		None
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		None
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5937 ;;Total ram usage:        0 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:    6
  5940 ;; This function calls:
  5941 ;;		Nothing
  5942 ;; This function is called by:
  5943 ;;		_do_I2C_TX_EMPTY
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           
  5948                           ;psect for function _mssp_setIRQ
  5949  0EC0                     _mssp_setIRQ:	
  5950                           
  5951                           ;mcc_generated_files/i2c_driver.c: 61:     else
  5952                           
  5953                           ;incstack = 0
  5954                           ; Regs used in _mssp_setIRQ: []
  5955  0EC0  0020               	movlb	0	; select bank0
  5956  0EC1  1591               	bsf	17,3	;volatile
  5957  0EC2  0008               	return
  5958  0EC3                     __end_of_mssp_setIRQ:	
  5959                           
  5960                           	psect	text33
  5961  0F9B                     __ptext33:	
  5962 ;; *************** function _i2c_driver_isNACK *****************
  5963 ;; Defined at:
  5964 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;		None               void
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;Total ram usage:        1 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    6
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_do_I2C_TX
  5989 ;;		_i2c_ISR
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _i2c_driver_isNACK
  5995  0F9B                     _i2c_driver_isNACK:	
  5996                           
  5997                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  6001  0F9B  0024               	movlb	4	; select bank4
  6002  0F9C  0E16               	swapf	22,w	;volatile
  6003  0F9D  0C89               	rrf	9,f
  6004  0F9E  0C89               	rrf	9,f
  6005  0F9F  3901               	andlw	1
  6006  0FA0  0020               	movlb	0	; select bank0
  6007  0FA1  00D7               	movwf	??_i2c_driver_isNACK
  6008  0FA2  0C57               	rrf	??_i2c_driver_isNACK,w
  6009  0FA3  0008               	return
  6010  0FA4                     __end_of_i2c_driver_isNACK:	
  6011                           
  6012                           	psect	text34
  6013  0F26                     __ptext34:	
  6014 ;; *************** function _i2c_driver_TXData *****************
  6015 ;; Defined at:
  6016 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  d               1    wreg     unsigned char 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  d               1    0[BANK0 ] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  1    wreg      void 
  6023 ;; Registers used:
  6024 ;;		wreg
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;Total ram usage:        1 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    6
  6037 ;; This function calls:
  6038 ;;		Nothing
  6039 ;; This function is called by:
  6040 ;;		_do_I2C_SEND_ADR_READ
  6041 ;;		_do_I2C_SEND_ADR_WRITE
  6042 ;;		_do_I2C_TX
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function _i2c_driver_TXData
  6048  0F26                     _i2c_driver_TXData:	
  6049                           
  6050                           ;incstack = 0
  6051                           ; Regs used in _i2c_driver_TXData: [wreg]
  6052                           ;i2c_driver_TXData@d stored from wreg
  6053  0F26  0020               	movlb	0	; select bank0
  6054  0F27  00D7               	movwf	i2c_driver_TXData@d
  6055                           
  6056                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
  6057  0F28  0857               	movf	i2c_driver_TXData@d,w
  6058  0F29  0024               	movlb	4	; select bank4
  6059  0F2A  0091               	movwf	17	;volatile
  6060  0F2B  0008               	return
  6061  0F2C                     __end_of_i2c_driver_TXData:	
  6062                           
  6063                           	psect	text35
  6064  0EBD                     __ptext35:	
  6065 ;; *************** function _i2c_driver_getRXData *****************
  6066 ;; Defined at:
  6067 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      unsigned char 
  6074 ;; Registers used:
  6075 ;;		wreg
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    6
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_do_I2C_RX
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function _i2c_driver_getRXData
  6097  0EBD                     _i2c_driver_getRXData:	
  6098                           
  6099                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
  6100                           
  6101                           ;incstack = 0
  6102                           ; Regs used in _i2c_driver_getRXData: [wreg]
  6103  0EBD  0024               	movlb	4	; select bank4
  6104  0EBE  0811               	movf	17,w	;volatile
  6105  0EBF  0008               	return
  6106  0EC0                     __end_of_i2c_driver_getRXData:	
  6107                           
  6108                           	psect	text36
  6109  0EEF                     __ptext36:	
  6110 ;; *************** function _i2c_driver_sendNACK *****************
  6111 ;; Defined at:
  6112 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;		None
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;		None
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		None
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;Total ram usage:        0 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    6
  6133 ;; This function calls:
  6134 ;;		Nothing
  6135 ;; This function is called by:
  6136 ;;		_do_I2C_DO_NACK_STOP
  6137 ;;		_do_I2C_DO_NACK_RESTART
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _i2c_driver_sendNACK
  6143  0EEF                     _i2c_driver_sendNACK:	
  6144                           
  6145                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in _i2c_driver_sendNACK: []
  6149  0EEF  0024               	movlb	4	; select bank4
  6150  0EF0  1696               	bsf	22,5	;volatile
  6151                           
  6152                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
  6153  0EF1  1616               	bsf	22,4	;volatile
  6154  0EF2  0008               	return
  6155  0EF3                     __end_of_i2c_driver_sendNACK:	
  6156                           
  6157                           	psect	text37
  6158  0E8E                     __ptext37:	
  6159 ;; *************** function _i2c_driver_resetBus *****************
  6160 ;; Defined at:
  6161 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      void 
  6168 ;; Registers used:
  6169 ;;		None
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;Total ram usage:        0 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    6
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_do_I2C_RESET
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function _i2c_driver_resetBus
  6191  0E8E                     _i2c_driver_resetBus:	
  6192                           
  6193                           ;incstack = 0
  6194                           ; Regs used in _i2c_driver_resetBus: []
  6195  0E8E  0008               	return
  6196  0E8F                     __end_of_i2c_driver_resetBus:	
  6197                           
  6198                           	psect	text38
  6199  0EBA                     __ptext38:	
  6200 ;; *************** function _i2c_driver_startRX *****************
  6201 ;; Defined at:
  6202 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;		None
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		None
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6220 ;;Total ram usage:        0 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    6
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_do_I2C_RCEN
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           
  6231                           ;psect for function _i2c_driver_startRX
  6232  0EBA                     _i2c_driver_startRX:	
  6233                           
  6234                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
  6235                           
  6236                           ;incstack = 0
  6237                           ; Regs used in _i2c_driver_startRX: []
  6238  0EBA  0024               	movlb	4	; select bank4
  6239  0EBB  1596               	bsf	22,3	;volatile
  6240  0EBC  0008               	return
  6241  0EBD                     __end_of_i2c_driver_startRX:	
  6242                           
  6243                           	psect	text39
  6244  0629                     __ptext39:	
  6245 ;; *************** function _rdBlkRegCompleteHandler *****************
  6246 ;; Defined at:
  6247 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  p               1    9[BANK0 ] PTR void 
  6250 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6251 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      enum E358
  6256 ;; Registers used:
  6257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6263 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;Total ram usage:        1 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    8
  6270 ;; This function calls:
  6271 ;;		_i2c_setBuffer
  6272 ;;		_i2c_setDataCompleteCallback
  6273 ;; This function is called by:
  6274 ;;		_i2c_readDataBlock
  6275 ;;		_do_I2C_DO_ADDRESS_NACK
  6276 ;;		_do_I2C_TX
  6277 ;;		_do_I2C_RX
  6278 ;;		_do_I2C_TX_EMPTY
  6279 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6280 ;;		i1_do_I2C_TX
  6281 ;;		i1_do_I2C_RX
  6282 ;;		i1_do_I2C_TX_EMPTY
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _rdBlkRegCompleteHandler
  6288  0629                     _rdBlkRegCompleteHandler:	
  6289                           
  6290                           ;Skip over the trampoline to the duplicate function for level 1
  6291  0629  1C7E               	btfss	126,0
  6292  062A  2E2D               	goto	l4720
  6293  062B  3186  2E7C         	ljmp	i1l5062
  6294  062D                     _rdBlkRegCompleteHandler$intlevel0:	
  6295  062D                     l4720:	
  6296                           ;incstack = 0
  6297                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6298                           
  6299                           
  6300                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
  6301  062D  0020               	movlb	0	; select bank0
  6302  062E  0860               	movf	rdBlkRegCompleteHandler@p,w
  6303  062F  0086               	movwf	6
  6304  0630  0187               	clrf	7
  6305  0631  3F40               	moviw [0]fsr1
  6306  0632  00D7               	movwf	i2c_setBuffer@bufferSize
  6307  0633  3F41               	moviw [1]fsr1
  6308  0634  00D8               	movwf	i2c_setBuffer@bufferSize+1
  6309  0635  0860               	movf	rdBlkRegCompleteHandler@p,w
  6310  0636  3E02               	addlw	2
  6311  0637  0086               	movwf	6
  6312  0638  0187               	clrf	7
  6313  0639  0801               	movf	1,w
  6314  063A  3187  2788  3186   	fcall	_i2c_setBuffer
  6315                           
  6316                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
  6317  063D  3000               	movlw	0
  6318  063E  0020               	movlb	0	; select bank0
  6319  063F  00DC               	movwf	i2c_setDataCompleteCallback@cb
  6320  0640  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  6321  0641  01DE               	clrf	i2c_setDataCompleteCallback@p
  6322  0642  3187  27B1         	fcall	_i2c_setDataCompleteCallback
  6323                           
  6324                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
  6325  0644  3002               	movlw	2
  6326  0645  0008               	return
  6327  0646                     __end_of_rdBlkRegCompleteHandler:	
  6328                           
  6329                           	psect	text40
  6330  06AB                     __ptext40:	
  6331 ;; *************** function _rd2RegCompleteHandler *****************
  6332 ;; Defined at:
  6333 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  p               1    9[BANK0 ] PTR void 
  6336 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6337 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      enum E358
  6342 ;; Registers used:
  6343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        1 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    8
  6356 ;; This function calls:
  6357 ;;		_i2c_setBuffer
  6358 ;;		_i2c_setDataCompleteCallback
  6359 ;; This function is called by:
  6360 ;;		_i2c_read2ByteRegister
  6361 ;;		_do_I2C_DO_ADDRESS_NACK
  6362 ;;		_do_I2C_TX
  6363 ;;		_do_I2C_RX
  6364 ;;		_do_I2C_TX_EMPTY
  6365 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6366 ;;		i1_do_I2C_TX
  6367 ;;		i1_do_I2C_RX
  6368 ;;		i1_do_I2C_TX_EMPTY
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           
  6373                           ;psect for function _rd2RegCompleteHandler
  6374  06AB                     _rd2RegCompleteHandler:	
  6375                           
  6376                           ;Skip over the trampoline to the duplicate function for level 1
  6377  06AB  1C7E               	btfss	126,0
  6378  06AC  2EAF               	goto	l4704
  6379  06AD  3187  2F44         	ljmp	i1l5046
  6380  06AF                     _rd2RegCompleteHandler$intlevel0:	
  6381  06AF                     l4704:	
  6382                           ;incstack = 0
  6383                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6384                           
  6385                           
  6386                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
  6387  06AF  3002               	movlw	2
  6388  06B0  0020               	movlb	0	; select bank0
  6389  06B1  00D7               	movwf	i2c_setBuffer@bufferSize
  6390  06B2  3000               	movlw	0
  6391  06B3  00D8               	movwf	i2c_setBuffer@bufferSize+1
  6392  06B4  0860               	movf	rd2RegCompleteHandler@p,w
  6393  06B5  3187  2788  3186   	fcall	_i2c_setBuffer
  6394                           
  6395                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
  6396  06B8  3000               	movlw	0
  6397  06B9  0020               	movlb	0	; select bank0
  6398  06BA  00DC               	movwf	i2c_setDataCompleteCallback@cb
  6399  06BB  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  6400  06BC  01DE               	clrf	i2c_setDataCompleteCallback@p
  6401  06BD  3187  27B1         	fcall	_i2c_setDataCompleteCallback
  6402                           
  6403                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
  6404  06BF  3002               	movlw	2
  6405  06C0  0008               	return
  6406  06C1                     __end_of_rd2RegCompleteHandler:	
  6407                           
  6408                           	psect	text41
  6409  06C1                     __ptext41:	
  6410 ;; *************** function _rd1RegCompleteHandler *****************
  6411 ;; Defined at:
  6412 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  p               1    9[BANK0 ] PTR void 
  6415 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6416 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      enum E358
  6421 ;; Registers used:
  6422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6428 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;Total ram usage:        1 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    8
  6435 ;; This function calls:
  6436 ;;		_i2c_setBuffer
  6437 ;;		_i2c_setDataCompleteCallback
  6438 ;; This function is called by:
  6439 ;;		_i2c_read1ByteRegister
  6440 ;;		_do_I2C_DO_ADDRESS_NACK
  6441 ;;		_do_I2C_TX
  6442 ;;		_do_I2C_RX
  6443 ;;		_do_I2C_TX_EMPTY
  6444 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6445 ;;		i1_do_I2C_TX
  6446 ;;		i1_do_I2C_RX
  6447 ;;		i1_do_I2C_TX_EMPTY
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           
  6452                           ;psect for function _rd1RegCompleteHandler
  6453  06C1                     _rd1RegCompleteHandler:	
  6454                           
  6455                           ;Skip over the trampoline to the duplicate function for level 1
  6456  06C1  1C7E               	btfss	126,0
  6457  06C2  2EC5               	goto	l4696
  6458  06C3  3187  2F55         	ljmp	i1l5038
  6459  06C5                     _rd1RegCompleteHandler$intlevel0:	
  6460  06C5                     l4696:	
  6461                           ;incstack = 0
  6462                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6463                           
  6464                           
  6465                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
  6466  06C5  3001               	movlw	1
  6467  06C6  0020               	movlb	0	; select bank0
  6468  06C7  00D7               	movwf	i2c_setBuffer@bufferSize
  6469  06C8  3000               	movlw	0
  6470  06C9  00D8               	movwf	i2c_setBuffer@bufferSize+1
  6471  06CA  0860               	movf	rd1RegCompleteHandler@p,w
  6472  06CB  3187  2788  3186   	fcall	_i2c_setBuffer
  6473                           
  6474                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
  6475  06CE  3000               	movlw	0
  6476  06CF  0020               	movlb	0	; select bank0
  6477  06D0  00DC               	movwf	i2c_setDataCompleteCallback@cb
  6478  06D1  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  6479  06D2  01DE               	clrf	i2c_setDataCompleteCallback@p
  6480  06D3  3187  27B1         	fcall	_i2c_setDataCompleteCallback
  6481                           
  6482                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
  6483  06D5  3002               	movlw	2
  6484  06D6  0008               	return
  6485  06D7                     __end_of_rd1RegCompleteHandler:	
  6486                           
  6487                           	psect	text42
  6488  06D7                     __ptext42:	
  6489 ;; *************** function _wr1RegCompleteHandler *****************
  6490 ;; Defined at:
  6491 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;  p               1    9[BANK0 ] PTR void 
  6494 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6495 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;		None
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      enum E358
  6500 ;; Registers used:
  6501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6507 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;Total ram usage:        1 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    8
  6514 ;; This function calls:
  6515 ;;		_i2c_setBuffer
  6516 ;;		_i2c_setDataCompleteCallback
  6517 ;; This function is called by:
  6518 ;;		_i2c_write1ByteRegister
  6519 ;;		_do_I2C_DO_ADDRESS_NACK
  6520 ;;		_do_I2C_TX
  6521 ;;		_do_I2C_RX
  6522 ;;		_do_I2C_TX_EMPTY
  6523 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6524 ;;		i1_do_I2C_TX
  6525 ;;		i1_do_I2C_RX
  6526 ;;		i1_do_I2C_TX_EMPTY
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _wr1RegCompleteHandler
  6532  06D7                     _wr1RegCompleteHandler:	
  6533                           
  6534                           ;Skip over the trampoline to the duplicate function for level 1
  6535  06D7  1C7E               	btfss	126,0
  6536  06D8  2EDB               	goto	l4688
  6537  06D9  3187  2F66         	ljmp	i1l5030
  6538  06DB                     _wr1RegCompleteHandler$intlevel0:	
  6539  06DB                     l4688:	
  6540                           ;incstack = 0
  6541                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6542                           
  6543                           
  6544                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
  6545  06DB  3001               	movlw	1
  6546  06DC  0020               	movlb	0	; select bank0
  6547  06DD  00D7               	movwf	i2c_setBuffer@bufferSize
  6548  06DE  3000               	movlw	0
  6549  06DF  00D8               	movwf	i2c_setBuffer@bufferSize+1
  6550  06E0  0860               	movf	wr1RegCompleteHandler@p,w
  6551  06E1  3187  2788  3186   	fcall	_i2c_setBuffer
  6552                           
  6553                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
  6554  06E4  3000               	movlw	0
  6555  06E5  0020               	movlb	0	; select bank0
  6556  06E6  00DC               	movwf	i2c_setDataCompleteCallback@cb
  6557  06E7  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  6558  06E8  01DE               	clrf	i2c_setDataCompleteCallback@p
  6559  06E9  3187  27B1         	fcall	_i2c_setDataCompleteCallback
  6560                           
  6561                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
  6562  06EB  3004               	movlw	4
  6563  06EC  0008               	return
  6564  06ED                     __end_of_wr1RegCompleteHandler:	
  6565                           
  6566                           	psect	text43
  6567  0F20                     __ptext43:	
  6568 ;; *************** function _i2c_restartWrite *****************
  6569 ;; Defined at:
  6570 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  p               1    9[BANK0 ] PTR void 
  6573 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6574 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      enum E358
  6579 ;; Registers used:
  6580 ;;		wreg
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6586 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;Total ram usage:        1 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    6
  6593 ;; This function calls:
  6594 ;;		Nothing
  6595 ;; This function is called by:
  6596 ;;		_i2c_writeNBytes
  6597 ;;		_i2c_readDataBlock
  6598 ;;		_i2c_write1ByteRegister
  6599 ;;		_i2c_read1ByteRegister
  6600 ;;		_i2c_read2ByteRegister
  6601 ;;		_i2c_write2ByteRegister
  6602 ;;		_do_I2C_DO_ADDRESS_NACK
  6603 ;;		_do_I2C_TX
  6604 ;;		_do_I2C_RX
  6605 ;;		_do_I2C_TX_EMPTY
  6606 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6607 ;;		i1_do_I2C_TX
  6608 ;;		i1_do_I2C_RX
  6609 ;;		i1_do_I2C_TX_EMPTY
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _i2c_restartWrite
  6615  0F20                     _i2c_restartWrite:	
  6616                           
  6617                           ;Skip over the trampoline to the duplicate function for level 1
  6618  0F20  1C7E               	btfss	126,0
  6619  0F21  2F24               	goto	l4726
  6620  0F22  3180  2802         	ljmp	i1l5068
  6621  0F24                     _i2c_restartWrite$intlevel0:	
  6622  0F24                     l4726:	
  6623                           ;incstack = 0
  6624                           ; Regs used in _i2c_restartWrite: [wreg]
  6625                           
  6626                           
  6627                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
  6628  0F24  3003               	movlw	3
  6629  0F25  0008               	return
  6630  0F26                     __end_of_i2c_restartWrite:	
  6631                           
  6632                           	psect	text44
  6633  0F1A                     __ptext44:	
  6634 ;; *************** function _returnReset *****************
  6635 ;; Defined at:
  6636 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  p               1    9[BANK0 ] PTR void 
  6639 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6640 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      enum E3257
  6645 ;; Registers used:
  6646 ;;		wreg
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6652 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;Total ram usage:        1 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    6
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_i2c_open
  6663 ;;		_do_I2C_DO_ADDRESS_NACK
  6664 ;;		_do_I2C_TX
  6665 ;;		_do_I2C_RX
  6666 ;;		_do_I2C_TX_EMPTY
  6667 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6668 ;;		i1_do_I2C_TX
  6669 ;;		i1_do_I2C_RX
  6670 ;;		i1_do_I2C_TX_EMPTY
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           
  6675                           ;psect for function _returnReset
  6676  0F1A                     _returnReset:	
  6677                           
  6678                           ;Skip over the trampoline to the duplicate function for level 1
  6679  0F1A  1C7E               	btfss	126,0
  6680  0F1B  2F1E               	goto	l4684
  6681  0F1C  318E  2E91         	ljmp	i1l5026
  6682  0F1E                     _returnReset$intlevel0:	
  6683  0F1E                     l4684:	
  6684                           ;incstack = 0
  6685                           ; Regs used in _returnReset: [wreg]
  6686                           
  6687                           
  6688                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
  6689  0F1E  3005               	movlw	5
  6690  0F1F  0008               	return
  6691  0F20                     __end_of_returnReset:	
  6692                           
  6693                           	psect	text45
  6694  0F14                     __ptext45:	
  6695 ;; *************** function _returnStop *****************
  6696 ;; Defined at:
  6697 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  p               1    9[BANK0 ] PTR void 
  6700 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6701 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;		None
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  1    wreg      enum E3257
  6706 ;; Registers used:
  6707 ;;		wreg
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6713 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;Total ram usage:        1 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    6
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_i2c_open
  6724 ;;		_setCallBack
  6725 ;;		_do_I2C_DO_ADDRESS_NACK
  6726 ;;		_do_I2C_TX
  6727 ;;		_do_I2C_RX
  6728 ;;		_do_I2C_TX_EMPTY
  6729 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6730 ;;		i1_do_I2C_TX
  6731 ;;		i1_do_I2C_RX
  6732 ;;		i1_do_I2C_TX_EMPTY
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736                           
  6737                           ;psect for function _returnStop
  6738  0F14                     _returnStop:	
  6739                           
  6740                           ;Skip over the trampoline to the duplicate function for level 1
  6741  0F14  1C7E               	btfss	126,0
  6742  0F15  2F18               	goto	l4680
  6743  0F16  318E  2E8F         	ljmp	i1l5022
  6744  0F18                     _returnStop$intlevel0:	
  6745  0F18                     l4680:	
  6746                           ;incstack = 0
  6747                           ; Regs used in _returnStop: [wreg]
  6748                           
  6749                           
  6750                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
  6751  0F18  3001               	movlw	1
  6752  0F19  0008               	return
  6753  0F1A                     __end_of_returnStop:	
  6754                           
  6755                           	psect	text46
  6756  06ED                     __ptext46:	
  6757 ;; *************** function _wr2RegCompleteHandler *****************
  6758 ;; Defined at:
  6759 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;  p               1    9[BANK0 ] PTR void 
  6762 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6763 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;		None
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  1    wreg      enum E358
  6768 ;; Registers used:
  6769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6775 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;Total ram usage:        1 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    8
  6782 ;; This function calls:
  6783 ;;		_i2c_setBuffer
  6784 ;;		_i2c_setDataCompleteCallback
  6785 ;; This function is called by:
  6786 ;;		_i2c_write2ByteRegister
  6787 ;;		_do_I2C_DO_ADDRESS_NACK
  6788 ;;		_do_I2C_TX
  6789 ;;		_do_I2C_RX
  6790 ;;		_do_I2C_TX_EMPTY
  6791 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6792 ;;		i1_do_I2C_TX
  6793 ;;		i1_do_I2C_RX
  6794 ;;		i1_do_I2C_TX_EMPTY
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           
  6799                           ;psect for function _wr2RegCompleteHandler
  6800  06ED                     _wr2RegCompleteHandler:	
  6801                           
  6802                           ;Skip over the trampoline to the duplicate function for level 1
  6803  06ED  1C7E               	btfss	126,0
  6804  06EE  2EF1               	goto	l4712
  6805  06EF  3187  2F77         	ljmp	i1l5054
  6806  06F1                     _wr2RegCompleteHandler$intlevel0:	
  6807  06F1                     l4712:	
  6808                           ;incstack = 0
  6809                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6810                           
  6811                           
  6812                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
  6813  06F1  3002               	movlw	2
  6814  06F2  0020               	movlb	0	; select bank0
  6815  06F3  00D7               	movwf	i2c_setBuffer@bufferSize
  6816  06F4  3000               	movlw	0
  6817  06F5  00D8               	movwf	i2c_setBuffer@bufferSize+1
  6818  06F6  0860               	movf	wr2RegCompleteHandler@p,w
  6819  06F7  3187  2788  3186   	fcall	_i2c_setBuffer
  6820                           
  6821                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
  6822  06FA  3000               	movlw	0
  6823  06FB  0020               	movlb	0	; select bank0
  6824  06FC  00DC               	movwf	i2c_setDataCompleteCallback@cb
  6825  06FD  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  6826  06FE  01DE               	clrf	i2c_setDataCompleteCallback@p
  6827  06FF  3187  27B1         	fcall	_i2c_setDataCompleteCallback
  6828                           
  6829                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
  6830  0701  3004               	movlw	4
  6831  0702  0008               	return
  6832  0703                     __end_of_wr2RegCompleteHandler:	
  6833                           
  6834                           	psect	text47
  6835  07B1                     __ptext47:	
  6836 ;; *************** function _i2c_setDataCompleteCallback *****************
  6837 ;; Defined at:
  6838 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  6841 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6842 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  6843 ;;  p               1    7[BANK0 ] PTR void 
  6844 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6845 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  1    wreg      void 
  6850 ;; Registers used:
  6851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6857 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;Total ram usage:        4 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    7
  6864 ;; This function calls:
  6865 ;;		_setCallBack
  6866 ;; This function is called by:
  6867 ;;		_wr1RegCompleteHandler
  6868 ;;		_rd1RegCompleteHandler
  6869 ;;		_rd2RegCompleteHandler
  6870 ;;		_wr2RegCompleteHandler
  6871 ;;		_rdBlkRegCompleteHandler
  6872 ;;		_i2c_readDataBlock
  6873 ;;		_i2c_write1ByteRegister
  6874 ;;		_i2c_read1ByteRegister
  6875 ;;		_i2c_read2ByteRegister
  6876 ;;		_i2c_write2ByteRegister
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           
  6881                           ;psect for function _i2c_setDataCompleteCallback
  6882  07B1                     _i2c_setDataCompleteCallback:	
  6883                           
  6884                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6888  07B1  0020               	movlb	0	; select bank0
  6889  07B2  085D               	movf	i2c_setDataCompleteCallback@cb+1,w
  6890  07B3  00D8               	movwf	setCallBack@cb+1
  6891  07B4  085C               	movf	i2c_setDataCompleteCallback@cb,w
  6892  07B5  00D7               	movwf	setCallBack@cb
  6893  07B6  085E               	movf	i2c_setDataCompleteCallback@p,w
  6894  07B7  00DF               	movwf	??_i2c_setDataCompleteCallback
  6895  07B8  085F               	movf	??_i2c_setDataCompleteCallback,w
  6896  07B9  00D9               	movwf	setCallBack@p
  6897  07BA  3000               	movlw	0
  6898  07BB  3185  25A1         	fcall	_setCallBack
  6899  07BD  0008               	return
  6900  07BE                     __end_of_i2c_setDataCompleteCallback:	
  6901                           
  6902                           	psect	text48
  6903  05A1                     __ptext48:	
  6904 ;; *************** function _setCallBack *****************
  6905 ;; Defined at:
  6906 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;  idx             1    wreg     enum E3429
  6909 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
  6910 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6911 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
  6912 ;;  p               1    2[BANK0 ] PTR void 
  6913 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6914 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  idx             1    4[BANK0 ] enum E3429
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6926 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;Total ram usage:        5 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    6
  6933 ;; This function calls:
  6934 ;;		Nothing
  6935 ;; This function is called by:
  6936 ;;		_i2c_setDataCompleteCallback
  6937 ;;		_i2c_setAddressNACKCallback
  6938 ;;		_i2c_setWriteCollisionCallback
  6939 ;;		_i2c_setDataNACKCallback
  6940 ;;		_i2c_setTimeOutCallback
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _setCallBack
  6946  05A1                     _setCallBack:	
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  6950                           ;setCallBack@idx stored from wreg
  6951  05A1  0020               	movlb	0	; select bank0
  6952  05A2  00DB               	movwf	setCallBack@idx
  6953                           
  6954                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
  6955  05A3  0857               	movf	setCallBack@cb,w
  6956  05A4  0458               	iorwf	setCallBack@cb+1,w
  6957  05A5  1903               	btfsc	3,2
  6958  05A6  2DB8               	goto	l4612
  6959                           
  6960                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
  6961  05A7  355B               	lslf	setCallBack@idx,w
  6962  05A8  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  6963  05A9  0086               	movwf	6
  6964  05AA  0187               	clrf	7
  6965  05AB  0857               	movf	setCallBack@cb,w
  6966  05AC  3FC0               	movwi [0]fsr1
  6967  05AD  0858               	movf	setCallBack@cb+1,w
  6968  05AE  3FC1               	movwi [1]fsr1
  6969                           
  6970                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
  6971  05AF  0859               	movf	setCallBack@p,w
  6972  05B0  00DA               	movwf	??_setCallBack
  6973  05B1  085B               	movf	setCallBack@idx,w
  6974  05B2  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  6975  05B3  0086               	movwf	6
  6976  05B4  0187               	clrf	7
  6977  05B5  085A               	movf	??_setCallBack,w
  6978  05B6  0081               	movwf	1
  6979                           
  6980                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
  6981  05B7  0008               	return
  6982  05B8                     l4612:	
  6983                           
  6984                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
  6985  05B8  355B               	lslf	setCallBack@idx,w
  6986  05B9  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  6987  05BA  0086               	movwf	6
  6988  05BB  0187               	clrf	7
  6989  05BC  3014               	movlw	low _returnStop
  6990  05BD  3FC0               	movwi [0]fsr1
  6991  05BE  300F               	movlw	high _returnStop
  6992  05BF  3FC1               	movwi [1]fsr1
  6993                           
  6994                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
  6995  05C0  085B               	movf	setCallBack@idx,w
  6996  05C1  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  6997  05C2  0086               	movwf	6
  6998  05C3  0187               	clrf	7
  6999  05C4  0181               	clrf	1
  7000  05C5  0008               	return
  7001  05C6                     __end_of_setCallBack:	
  7002                           
  7003                           	psect	text49
  7004  0788                     __ptext49:	
  7005 ;; *************** function _i2c_setBuffer *****************
  7006 ;; Defined at:
  7007 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  buffer          1    wreg     PTR void 
  7010 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7011 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7012 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), rtcData(9), 
  7013 ;;  bufferSize      2    0[BANK0 ] unsigned int 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  buffer          1    3[BANK0 ] PTR void 
  7016 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7017 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7018 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), rtcData(9), 
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  1    wreg      void 
  7021 ;; Registers used:
  7022 ;;		wreg
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7028 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;Total ram usage:        4 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    6
  7035 ;; This function calls:
  7036 ;;		Nothing
  7037 ;; This function is called by:
  7038 ;;		_wr1RegCompleteHandler
  7039 ;;		_i2c_writeNBytes
  7040 ;;		_rd1RegCompleteHandler
  7041 ;;		_rd2RegCompleteHandler
  7042 ;;		_wr2RegCompleteHandler
  7043 ;;		_rdBlkRegCompleteHandler
  7044 ;;		_i2c_readDataBlock
  7045 ;;		_i2c_write1ByteRegister
  7046 ;;		_i2c_read1ByteRegister
  7047 ;;		_i2c_read2ByteRegister
  7048 ;;		_i2c_write2ByteRegister
  7049 ;;		_i2c_readNBytes
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           
  7054                           ;psect for function _i2c_setBuffer
  7055  0788                     _i2c_setBuffer:	
  7056                           
  7057                           ;incstack = 0
  7058                           ; Regs used in _i2c_setBuffer: [wreg]
  7059                           ;i2c_setBuffer@buffer stored from wreg
  7060  0788  0020               	movlb	0	; select bank0
  7061  0789  00DA               	movwf	i2c_setBuffer@buffer
  7062                           
  7063                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
  7064  078A  1D20               	btfss	_i2c_status,2
  7065  078B  0008               	return
  7066                           
  7067                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
  7068  078C  085A               	movf	i2c_setBuffer@buffer,w
  7069  078D  00D9               	movwf	??_i2c_setBuffer
  7070  078E  0859               	movf	??_i2c_setBuffer,w
  7071  078F  00A2               	movwf	low ((_i2c_status| 0+2))
  7072                           
  7073                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
  7074  0790  0858               	movf	i2c_setBuffer@bufferSize+1,w
  7075  0791  00A4               	movwf	_i2c_status+4
  7076  0792  0857               	movf	i2c_setBuffer@bufferSize,w
  7077  0793  00A3               	movwf	_i2c_status+3
  7078                           
  7079                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
  7080  0794  1120               	bcf	_i2c_status,2
  7081  0795  0008               	return
  7082  0796                     __end_of_i2c_setBuffer:	
  7083                           
  7084                           	psect	text50
  7085  0EB7                     __ptext50:	
  7086 ;; *************** function _i2c_driver_stop *****************
  7087 ;; Defined at:
  7088 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;		None
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;		None
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		None
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7106 ;;Total ram usage:        0 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    6
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		_do_I2C_SEND_STOP
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           
  7117                           ;psect for function _i2c_driver_stop
  7118  0EB7                     _i2c_driver_stop:	
  7119                           
  7120                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
  7121                           
  7122                           ;incstack = 0
  7123                           ; Regs used in _i2c_driver_stop: []
  7124  0EB7  0024               	movlb	4	; select bank4
  7125  0EB8  1516               	bsf	22,2	;volatile
  7126  0EB9  0008               	return
  7127  0EBA                     __end_of_i2c_driver_stop:	
  7128                           
  7129                           	psect	text51
  7130  0EB4                     __ptext51:	
  7131 ;; *************** function _i2c_driver_restart *****************
  7132 ;; Defined at:
  7133 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      void 
  7140 ;; Registers used:
  7141 ;;		None
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;Total ram usage:        0 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    6
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_do_I2C_SEND_RESTART_READ
  7158 ;;		_do_I2C_SEND_RESTART_WRITE
  7159 ;;		_do_I2C_SEND_RESTART
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           
  7164                           ;psect for function _i2c_driver_restart
  7165  0EB4                     _i2c_driver_restart:	
  7166                           
  7167                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _i2c_driver_restart: []
  7171  0EB4  0024               	movlb	4	; select bank4
  7172  0EB5  1496               	bsf	22,1	;volatile
  7173  0EB6  0008               	return
  7174  0EB7                     __end_of_i2c_driver_restart:	
  7175                           
  7176                           	psect	text52
  7177  0EEB                     __ptext52:	
  7178 ;; *************** function _i2c_driver_sendACK *****************
  7179 ;; Defined at:
  7180 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
  7181 ;; Parameters:    Size  Location     Type
  7182 ;;		None
  7183 ;; Auto vars:     Size  Location     Type
  7184 ;;		None
  7185 ;; Return value:  Size  Location     Type
  7186 ;;                  1    wreg      void 
  7187 ;; Registers used:
  7188 ;;		None
  7189 ;; Tracked objects:
  7190 ;;		On entry : 0/0
  7191 ;;		On exit  : 0/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;Total ram usage:        0 bytes
  7199 ;; Hardware stack levels used:    1
  7200 ;; Hardware stack levels required when called:    6
  7201 ;; This function calls:
  7202 ;;		Nothing
  7203 ;; This function is called by:
  7204 ;;		_do_I2C_DO_ACK
  7205 ;;		_do_I2C_RX
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           
  7210                           ;psect for function _i2c_driver_sendACK
  7211  0EEB                     _i2c_driver_sendACK:	
  7212                           
  7213                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in _i2c_driver_sendACK: []
  7217  0EEB  0024               	movlb	4	; select bank4
  7218  0EEC  1296               	bcf	22,5	;volatile
  7219                           
  7220                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
  7221  0EED  1616               	bsf	22,4	;volatile
  7222  0EEE  0008               	return
  7223  0EEF                     __end_of_i2c_driver_sendACK:	
  7224                           
  7225                           	psect	text53
  7226  0EB1                     __ptext53:	
  7227 ;; *************** function _i2c_driver_start *****************
  7228 ;; Defined at:
  7229 ;;		line 147 in file "mcc_generated_files/i2c_driver.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;		None
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;		None
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  1    wreg      void 
  7236 ;; Registers used:
  7237 ;;		None
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;Total ram usage:        0 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    6
  7250 ;; This function calls:
  7251 ;;		Nothing
  7252 ;; This function is called by:
  7253 ;;		_i2c_masterOperation
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           
  7258                           ;psect for function _i2c_driver_start
  7259  0EB1                     _i2c_driver_start:	
  7260                           
  7261                           ;mcc_generated_files/i2c_driver.c: 149:     SSPCON2bits.SEN = 1;
  7262                           
  7263                           ;incstack = 0
  7264                           ; Regs used in _i2c_driver_start: []
  7265  0EB1  0024               	movlb	4	; select bank4
  7266  0EB2  1416               	bsf	22,0	;volatile
  7267  0EB3  0008               	return
  7268  0EB4                     __end_of_i2c_driver_start:	
  7269                           
  7270                           	psect	text54
  7271  0703                     __ptext54:	
  7272 ;; *************** function _i2c_close *****************
  7273 ;; Defined at:
  7274 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;		None
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  ret             1    1[BANK0 ] enum E3252
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      enum E3252
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0, pclath, cstack
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;Total ram usage:        2 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    7
  7295 ;; This function calls:
  7296 ;;		_mssp_clearIRQ
  7297 ;;		_mssp_disableIRQ
  7298 ;; This function is called by:
  7299 ;;		_i2c_writeNBytes
  7300 ;;		_i2c_readDataBlock
  7301 ;;		_i2c_write1ByteRegister
  7302 ;;		_i2c_read1ByteRegister
  7303 ;;		_i2c_read2ByteRegister
  7304 ;;		_i2c_write2ByteRegister
  7305 ;;		_i2c_readNBytes
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           
  7310                           ;psect for function _i2c_close
  7311  0703                     _i2c_close:	
  7312                           
  7313                           ;mcc_generated_files/drivers/i2c_master.c: 164:     i2c_error_t ret = I2C_BUSY;
  7314                           
  7315                           ;incstack = 0
  7316                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  7317  0703  0020               	movlb	0	; select bank0
  7318  0704  01D8               	clrf	i2c_close@ret
  7319  0705  0AD8               	incf	i2c_close@ret,f
  7320                           
  7321                           ;mcc_generated_files/drivers/i2c_master.c: 165:     if(!i2c_status.busy)
  7322  0706  1820               	btfsc	_i2c_status,0
  7323  0707  2F17               	goto	l489
  7324                           
  7325                           ;mcc_generated_files/drivers/i2c_master.c: 166:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 167:         i2c_status.inUse = 0;
  7326  0708  10A0               	bcf	_i2c_status,1
  7327                           
  7328                           ;mcc_generated_files/drivers/i2c_master.c: 169:         i2c_status.address = 0xff;
  7329  0709  30FF               	movlw	255
  7330  070A  00D7               	movwf	??_i2c_close
  7331  070B  0857               	movf	??_i2c_close,w
  7332  070C  00A1               	movwf	_i2c_status+1
  7333                           
  7334                           ;mcc_generated_files/drivers/i2c_master.c: 170:         mssp_clearIRQ();
  7335  070D  318E  26AB  3187   	fcall	_mssp_clearIRQ
  7336                           
  7337                           ;mcc_generated_files/drivers/i2c_master.c: 171:         mssp_disableIRQ();
  7338  0710  318E  26AE         	fcall	_mssp_disableIRQ
  7339                           
  7340                           ;mcc_generated_files/drivers/i2c_master.c: 172:         ret = i2c_status.error;
  7341  0712  0020               	movlb	0	; select bank0
  7342  0713  082A               	movf	_i2c_status+10,w
  7343  0714  00D7               	movwf	??_i2c_close
  7344  0715  0857               	movf	??_i2c_close,w
  7345  0716  00D8               	movwf	i2c_close@ret
  7346  0717                     l489:	
  7347                           ;mcc_generated_files/drivers/i2c_master.c: 173:     }
  7348                           
  7349                           
  7350                           ;mcc_generated_files/drivers/i2c_master.c: 174:     return ret;
  7351  0717  0858               	movf	i2c_close@ret,w
  7352  0718  0008               	return
  7353  0719                     __end_of_i2c_close:	
  7354                           
  7355                           	psect	text55
  7356  0EAE                     __ptext55:	
  7357 ;; *************** function _mssp_disableIRQ *****************
  7358 ;; Defined at:
  7359 ;;		line 49 in file "mcc_generated_files/i2c_driver.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		None
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;Total ram usage:        0 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    6
  7380 ;; This function calls:
  7381 ;;		Nothing
  7382 ;; This function is called by:
  7383 ;;		_i2c_close
  7384 ;;		_i2c_setTimeOut
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           
  7389                           ;psect for function _mssp_disableIRQ
  7390  0EAE                     _mssp_disableIRQ:	
  7391                           
  7392                           ;mcc_generated_files/i2c_driver.c: 51: __bit i2c_driver_open(void)
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _mssp_disableIRQ: []
  7396  0EAE  0021               	movlb	1	; select bank1
  7397  0EAF  1191               	bcf	17,3	;volatile
  7398  0EB0  0008               	return
  7399  0EB1                     __end_of_mssp_disableIRQ:	
  7400                           
  7401                           	psect	text56
  7402  0EAB                     __ptext56:	
  7403 ;; *************** function _mssp_clearIRQ *****************
  7404 ;; Defined at:
  7405 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;		None
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		None
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;Total ram usage:        0 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    6
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		_i2c_open
  7430 ;;		_i2c_close
  7431 ;;		_i2c_ISR
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           
  7436                           ;psect for function _mssp_clearIRQ
  7437  0EAB                     _mssp_clearIRQ:	
  7438                           
  7439                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
  7440                           
  7441                           ;incstack = 0
  7442                           ; Regs used in _mssp_clearIRQ: []
  7443  0EAB  0020               	movlb	0	; select bank0
  7444  0EAC  1191               	bcf	17,3	;volatile
  7445  0EAD  0008               	return
  7446  0EAE                     __end_of_mssp_clearIRQ:	
  7447                           
  7448                           	psect	text57
  7449  0504                     __ptext57:	
  7450 ;; *************** function _bcdMinuteIncr *****************
  7451 ;; Defined at:
  7452 ;;		line 138 in file "main.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  mn              1    wreg     unsigned char 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  mn              1    0[BANK0 ] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      unsigned char 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;Total ram usage:        1 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    6
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_main
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _bcdMinuteIncr
  7482  0504                     _bcdMinuteIncr:	
  7483                           
  7484                           ;incstack = 0
  7485                           ; Regs used in _bcdMinuteIncr: [wreg+status,2+status,0]
  7486                           ;bcdMinuteIncr@mn stored from wreg
  7487  0504  0020               	movlb	0	; select bank0
  7488  0505  00D7               	movwf	bcdMinuteIncr@mn
  7489                           
  7490                           ;main.c: 140:     if(mn == 0x09) return 0x10;
  7491  0506  3009               	movlw	9
  7492  0507  0657               	xorwf	bcdMinuteIncr@mn,w
  7493  0508  1D03               	btfss	3,2
  7494  0509  2D0C               	goto	l5340
  7495  050A  3010               	movlw	16
  7496  050B  0008               	return
  7497  050C                     l5340:	
  7498                           
  7499                           ;main.c: 141:     if(mn == 0x19) return 0x20;
  7500  050C  3019               	movlw	25
  7501  050D  0657               	xorwf	bcdMinuteIncr@mn,w
  7502  050E  1D03               	btfss	3,2
  7503  050F  2D12               	goto	l5346
  7504  0510  3020               	movlw	32
  7505  0511  0008               	return
  7506  0512                     l5346:	
  7507                           
  7508                           ;main.c: 142:     if(mn == 0x29) return 0x30;
  7509  0512  3029               	movlw	41
  7510  0513  0657               	xorwf	bcdMinuteIncr@mn,w
  7511  0514  1D03               	btfss	3,2
  7512  0515  2D18               	goto	l5352
  7513  0516  3030               	movlw	48
  7514  0517  0008               	return
  7515  0518                     l5352:	
  7516                           
  7517                           ;main.c: 143:     if(mn == 0x39) return 0x40;
  7518  0518  3039               	movlw	57
  7519  0519  0657               	xorwf	bcdMinuteIncr@mn,w
  7520  051A  1D03               	btfss	3,2
  7521  051B  2D1E               	goto	l5358
  7522  051C  3040               	movlw	64
  7523  051D  0008               	return
  7524  051E                     l5358:	
  7525                           
  7526                           ;main.c: 144:     if(mn == 0x49) return 0x50;
  7527  051E  3049               	movlw	73
  7528  051F  0657               	xorwf	bcdMinuteIncr@mn,w
  7529  0520  1D03               	btfss	3,2
  7530  0521  2D24               	goto	l5364
  7531  0522  3050               	movlw	80
  7532  0523  0008               	return
  7533  0524                     l5364:	
  7534                           
  7535                           ;main.c: 145:     if(mn == 0x59) return 0x00;
  7536  0524  3059               	movlw	89
  7537  0525  0657               	xorwf	bcdMinuteIncr@mn,w
  7538  0526  1D03               	btfss	3,2
  7539  0527  2D2A               	goto	l5370
  7540  0528  3000               	movlw	0
  7541  0529  0008               	return
  7542  052A                     l5370:	
  7543                           
  7544                           ;main.c: 146:     return (mn + 1);
  7545  052A  0857               	movf	bcdMinuteIncr@mn,w
  7546  052B  3E01               	addlw	1
  7547  052C  0008               	return
  7548  052D                     __end_of_bcdMinuteIncr:	
  7549                           
  7550                           	psect	text58
  7551  052D                     __ptext58:	
  7552 ;; *************** function _bcdMinuteDecr *****************
  7553 ;; Defined at:
  7554 ;;		line 149 in file "main.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  mn              1    wreg     unsigned char 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  mn              1    0[BANK0 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      unsigned char 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;Total ram usage:        1 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    6
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_main
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _bcdMinuteDecr
  7584  052D                     _bcdMinuteDecr:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _bcdMinuteDecr: [wreg+status,2+status,0]
  7588                           ;bcdMinuteDecr@mn stored from wreg
  7589  052D  0020               	movlb	0	; select bank0
  7590  052E  00D7               	movwf	bcdMinuteDecr@mn
  7591                           
  7592                           ;main.c: 150:     if(mn == 0x00) return 0x59;
  7593  052F  0857               	movf	bcdMinuteDecr@mn,w
  7594  0530  1D03               	btfss	3,2
  7595  0531  2D34               	goto	l5380
  7596  0532  3059               	movlw	89
  7597  0533  0008               	return
  7598  0534                     l5380:	
  7599                           
  7600                           ;main.c: 151:     if(mn == 0x10) return 0x09;
  7601  0534  3010               	movlw	16
  7602  0535  0657               	xorwf	bcdMinuteDecr@mn,w
  7603  0536  1D03               	btfss	3,2
  7604  0537  2D3A               	goto	l5386
  7605  0538  3009               	movlw	9
  7606  0539  0008               	return
  7607  053A                     l5386:	
  7608                           
  7609                           ;main.c: 152:     if(mn == 0x20) return 0x19;
  7610  053A  3020               	movlw	32
  7611  053B  0657               	xorwf	bcdMinuteDecr@mn,w
  7612  053C  1D03               	btfss	3,2
  7613  053D  2D40               	goto	l5392
  7614  053E  3019               	movlw	25
  7615  053F  0008               	return
  7616  0540                     l5392:	
  7617                           
  7618                           ;main.c: 153:     if(mn == 0x30) return 0x29;
  7619  0540  3030               	movlw	48
  7620  0541  0657               	xorwf	bcdMinuteDecr@mn,w
  7621  0542  1D03               	btfss	3,2
  7622  0543  2D46               	goto	l5398
  7623  0544  3029               	movlw	41
  7624  0545  0008               	return
  7625  0546                     l5398:	
  7626                           
  7627                           ;main.c: 154:     if(mn == 0x40) return 0x39;
  7628  0546  3040               	movlw	64
  7629  0547  0657               	xorwf	bcdMinuteDecr@mn,w
  7630  0548  1D03               	btfss	3,2
  7631  0549  2D4C               	goto	l5404
  7632  054A  3039               	movlw	57
  7633  054B  0008               	return
  7634  054C                     l5404:	
  7635                           
  7636                           ;main.c: 155:     if(mn == 0x50) return 0x49;
  7637  054C  3050               	movlw	80
  7638  054D  0657               	xorwf	bcdMinuteDecr@mn,w
  7639  054E  1D03               	btfss	3,2
  7640  054F  2D52               	goto	l5410
  7641  0550  3049               	movlw	73
  7642  0551  0008               	return
  7643  0552                     l5410:	
  7644                           
  7645                           ;main.c: 156:     return (mn - 1);
  7646  0552  0857               	movf	bcdMinuteDecr@mn,w
  7647  0553  3EFF               	addlw	255
  7648  0554  0008               	return
  7649  0555                     __end_of_bcdMinuteDecr:	
  7650                           
  7651                           	psect	text59
  7652  0694                     __ptext59:	
  7653 ;; *************** function _bcdHourIncr *****************
  7654 ;; Defined at:
  7655 ;;		line 123 in file "main.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;  hr              1    wreg     unsigned char 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  hr              1    0[BANK0 ] unsigned char 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;                  1    wreg      unsigned char 
  7662 ;; Registers used:
  7663 ;;		wreg, status,2, status,0
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;Total ram usage:        1 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    6
  7676 ;; This function calls:
  7677 ;;		Nothing
  7678 ;; This function is called by:
  7679 ;;		_main
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function _bcdHourIncr
  7685  0694                     _bcdHourIncr:	
  7686                           
  7687                           ;incstack = 0
  7688                           ; Regs used in _bcdHourIncr: [wreg+status,2+status,0]
  7689                           ;bcdHourIncr@hr stored from wreg
  7690  0694  0020               	movlb	0	; select bank0
  7691  0695  00D7               	movwf	bcdHourIncr@hr
  7692                           
  7693                           ;main.c: 125:     if(hr == 0x09) return 0x10;
  7694  0696  3009               	movlw	9
  7695  0697  0657               	xorwf	bcdHourIncr@hr,w
  7696  0698  1D03               	btfss	3,2
  7697  0699  2E9C               	goto	l5296
  7698  069A  3010               	movlw	16
  7699  069B  0008               	return
  7700  069C                     l5296:	
  7701                           
  7702                           ;main.c: 126:     if(hr == 0x19) return 0x20;
  7703  069C  3019               	movlw	25
  7704  069D  0657               	xorwf	bcdHourIncr@hr,w
  7705  069E  1D03               	btfss	3,2
  7706  069F  2EA2               	goto	l5302
  7707  06A0  3020               	movlw	32
  7708  06A1  0008               	return
  7709  06A2                     l5302:	
  7710                           
  7711                           ;main.c: 127:     if(hr == 0x23) return 0x00;
  7712  06A2  3023               	movlw	35
  7713  06A3  0657               	xorwf	bcdHourIncr@hr,w
  7714  06A4  1D03               	btfss	3,2
  7715  06A5  2EA8               	goto	l5308
  7716  06A6  3000               	movlw	0
  7717  06A7  0008               	return
  7718  06A8                     l5308:	
  7719                           
  7720                           ;main.c: 128:     return (hr + 1);
  7721  06A8  0857               	movf	bcdHourIncr@hr,w
  7722  06A9  3E01               	addlw	1
  7723  06AA  0008               	return
  7724  06AB                     __end_of_bcdHourIncr:	
  7725                           
  7726                           	psect	text60
  7727  0719                     __ptext60:	
  7728 ;; *************** function _bcdHourDecr *****************
  7729 ;; Defined at:
  7730 ;;		line 131 in file "main.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  hr              1    wreg     unsigned char 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  hr              1    0[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      unsigned char 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;Total ram usage:        1 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    6
  7751 ;; This function calls:
  7752 ;;		Nothing
  7753 ;; This function is called by:
  7754 ;;		_main
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function _bcdHourDecr
  7760  0719                     _bcdHourDecr:	
  7761                           
  7762                           ;incstack = 0
  7763                           ; Regs used in _bcdHourDecr: [wreg+status,2+status,0]
  7764                           ;bcdHourDecr@hr stored from wreg
  7765  0719  0020               	movlb	0	; select bank0
  7766  071A  00D7               	movwf	bcdHourDecr@hr
  7767                           
  7768                           ;main.c: 132:     if(hr == 0x00) return 0x23;
  7769  071B  0857               	movf	bcdHourDecr@hr,w
  7770  071C  1D03               	btfss	3,2
  7771  071D  2F20               	goto	l5318
  7772  071E  3023               	movlw	35
  7773  071F  0008               	return
  7774  0720                     l5318:	
  7775                           
  7776                           ;main.c: 133:     if(hr == 0x10) return 0x09;
  7777  0720  3010               	movlw	16
  7778  0721  0657               	xorwf	bcdHourDecr@hr,w
  7779  0722  1D03               	btfss	3,2
  7780  0723  2F26               	goto	l5324
  7781  0724  3009               	movlw	9
  7782  0725  0008               	return
  7783  0726                     l5324:	
  7784                           
  7785                           ;main.c: 134:     if(hr == 0x20) return 0x19;
  7786  0726  3020               	movlw	32
  7787  0727  0657               	xorwf	bcdHourDecr@hr,w
  7788  0728  1D03               	btfss	3,2
  7789  0729  2F2C               	goto	l5330
  7790  072A  3019               	movlw	25
  7791  072B  0008               	return
  7792  072C                     l5330:	
  7793                           
  7794                           ;main.c: 135:     return (hr - 1);
  7795  072C  0857               	movf	bcdHourDecr@hr,w
  7796  072D  3EFF               	addlw	255
  7797  072E  0008               	return
  7798  072F                     __end_of_bcdHourDecr:	
  7799                           
  7800                           	psect	text61
  7801  07E4                     __ptext61:	
  7802 ;; *************** function _SYSTEM_Initialize *****************
  7803 ;; Defined at:
  7804 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;		None
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;		None
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  1    wreg      void 
  7811 ;; Registers used:
  7812 ;;		wreg, status,2, status,0, pclath, cstack
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7822 ;;Total ram usage:        0 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:    8
  7825 ;; This function calls:
  7826 ;;		_OSCILLATOR_Initialize
  7827 ;;		_PIN_MANAGER_Initialize
  7828 ;;		_TMR0_Initialize
  7829 ;;		_WDT_Initialize
  7830 ;; This function is called by:
  7831 ;;		_main
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           
  7836                           ;psect for function _SYSTEM_Initialize
  7837  07E4                     _SYSTEM_Initialize:	
  7838                           
  7839                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  7840                           
  7841                           ;incstack = 0
  7842                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7843  07E4  3184  2484  3187   	fcall	_PIN_MANAGER_Initialize
  7844                           
  7845                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  7846  07E7  318F  27B7  3187   	fcall	_OSCILLATOR_Initialize
  7847                           
  7848                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  7849  07EA  318E  26E7  3187   	fcall	_WDT_Initialize
  7850                           
  7851                           ;mcc_generated_files/mcc.c: 56:     TMR0_Initialize();
  7852  07ED  3187  272F         	fcall	_TMR0_Initialize
  7853  07EF  0008               	return
  7854  07F0                     __end_of_SYSTEM_Initialize:	
  7855                           
  7856                           	psect	text62
  7857  0EE7                     __ptext62:	
  7858 ;; *************** function _WDT_Initialize *****************
  7859 ;; Defined at:
  7860 ;;		line 73 in file "mcc_generated_files/mcc.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;		None
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;Total ram usage:        0 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    6
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_SYSTEM_Initialize
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _WDT_Initialize
  7890  0EE7                     _WDT_Initialize:	
  7891                           
  7892                           ;mcc_generated_files/mcc.c: 76:     WDTCON = 0x16;
  7893                           
  7894                           ;incstack = 0
  7895                           ; Regs used in _WDT_Initialize: [wreg]
  7896  0EE7  3016               	movlw	22
  7897  0EE8  0021               	movlb	1	; select bank1
  7898  0EE9  0097               	movwf	23	;volatile
  7899  0EEA  0008               	return
  7900  0EEB                     __end_of_WDT_Initialize:	
  7901                           
  7902                           	psect	text63
  7903  072F                     __ptext63:	
  7904 ;; *************** function _TMR0_Initialize *****************
  7905 ;; Defined at:
  7906 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;		None
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;		None
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		wreg, status,2, status,0, pclath, cstack
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;Total ram usage:        1 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    7
  7927 ;; This function calls:
  7928 ;;		_TMR0_SetInterruptHandler
  7929 ;; This function is called by:
  7930 ;;		_SYSTEM_Initialize
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           
  7935                           ;psect for function _TMR0_Initialize
  7936  072F                     _TMR0_Initialize:	
  7937                           
  7938                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
  7939                           
  7940                           ;incstack = 0
  7941                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7942  072F  0021               	movlb	1	; select bank1
  7943  0730  0815               	movf	21,w	;volatile
  7944  0731  39C0               	andlw	192
  7945  0732  3817               	iorlw	23
  7946  0733  0095               	movwf	21	;volatile
  7947                           
  7948                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
  7949  0734  3083               	movlw	131
  7950  0735  0020               	movlb	0	; select bank0
  7951  0736  0095               	movwf	21	;volatile
  7952                           
  7953                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
  7954  0737  3083               	movlw	131
  7955  0738  00D9               	movwf	??_TMR0_Initialize
  7956  0739  0859               	movf	??_TMR0_Initialize,w
  7957  073A  00FD               	movwf	_timer0ReloadVal	;volatile
  7958                           
  7959                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  7960  073B  110B               	bcf	11,2	;volatile
  7961                           
  7962                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  7963  073C  168B               	bsf	11,5	;volatile
  7964                           
  7965                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  7966  073D  308C               	movlw	low _TMR0_DefaultInterruptHandler
  7967  073E  00D7               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7968  073F  300E               	movlw	high _TMR0_DefaultInterruptHandler
  7969  0740  00D8               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7970  0741  318F  270E         	fcall	_TMR0_SetInterruptHandler
  7971  0743  0008               	return
  7972  0744                     __end_of_TMR0_Initialize:	
  7973                           
  7974                           	psect	text64
  7975  0F0E                     __ptext64:	
  7976 ;; *************** function _TMR0_SetInterruptHandler *****************
  7977 ;; Defined at:
  7978 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7981 ;;		 -> displayRefreshISR(1), TMR0_DefaultInterruptHandler(1), 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;		None
  7984 ;; Return value:  Size  Location     Type
  7985 ;;                  1    wreg      void 
  7986 ;; Registers used:
  7987 ;;		wreg
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7993 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;Total ram usage:        2 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; Hardware stack levels required when called:    6
  8000 ;; This function calls:
  8001 ;;		Nothing
  8002 ;; This function is called by:
  8003 ;;		_TMR0_Initialize
  8004 ;;		_main
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           
  8009                           ;psect for function _TMR0_SetInterruptHandler
  8010  0F0E                     _TMR0_SetInterruptHandler:	
  8011                           
  8012                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  8013                           
  8014                           ;incstack = 0
  8015                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  8016  0F0E  0020               	movlb	0	; select bank0
  8017  0F0F  0858               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  8018  0F10  00F9               	movwf	_TMR0_InterruptHandler+1
  8019  0F11  0857               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  8020  0F12  00F8               	movwf	_TMR0_InterruptHandler
  8021  0F13  0008               	return
  8022  0F14                     __end_of_TMR0_SetInterruptHandler:	
  8023                           
  8024                           	psect	text65
  8025  0484                     __ptext65:	
  8026 ;; *************** function _PIN_MANAGER_Initialize *****************
  8027 ;; Defined at:
  8028 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;		None
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;		None
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      void 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2, status,0, pclath, cstack
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;Total ram usage:        0 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    7
  8049 ;; This function calls:
  8050 ;;		_IOCBF4_SetInterruptHandler
  8051 ;; This function is called by:
  8052 ;;		_SYSTEM_Initialize
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           
  8057                           ;psect for function _PIN_MANAGER_Initialize
  8058  0484                     _PIN_MANAGER_Initialize:	
  8059                           
  8060                           ;mcc_generated_files/pin_manager.c: 62:     LATE = 0x00;
  8061                           
  8062                           ;incstack = 0
  8063                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8064  0484  0022               	movlb	2	; select bank2
  8065  0485  0190               	clrf	16	;volatile
  8066                           
  8067                           ;mcc_generated_files/pin_manager.c: 63:     LATD = 0x00;
  8068  0486  018F               	clrf	15	;volatile
  8069                           
  8070                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  8071  0487  018C               	clrf	12	;volatile
  8072                           
  8073                           ;mcc_generated_files/pin_manager.c: 65:     LATB = 0x00;
  8074  0488  018D               	clrf	13	;volatile
  8075                           
  8076                           ;mcc_generated_files/pin_manager.c: 66:     LATC = 0x00;
  8077  0489  018E               	clrf	14	;volatile
  8078                           
  8079                           ;mcc_generated_files/pin_manager.c: 71:     TRISE = 0x0D;
  8080  048A  300D               	movlw	13
  8081  048B  0021               	movlb	1	; select bank1
  8082  048C  0090               	movwf	16	;volatile
  8083                           
  8084                           ;mcc_generated_files/pin_manager.c: 72:     TRISA = 0x67;
  8085  048D  3067               	movlw	103
  8086  048E  008C               	movwf	12	;volatile
  8087                           
  8088                           ;mcc_generated_files/pin_manager.c: 73:     TRISB = 0xFF;
  8089  048F  30FF               	movlw	255
  8090  0490  008D               	movwf	13	;volatile
  8091                           
  8092                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFD;
  8093  0491  30FD               	movlw	253
  8094  0492  008E               	movwf	14	;volatile
  8095                           
  8096                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0x00;
  8097  0493  018F               	clrf	15	;volatile
  8098                           
  8099                           ;mcc_generated_files/pin_manager.c: 80:     ANSELD = 0x00;
  8100  0494  0023               	movlb	3	; select bank3
  8101  0495  018F               	clrf	15	;volatile
  8102                           
  8103                           ;mcc_generated_files/pin_manager.c: 81:     ANSELB = 0x20;
  8104  0496  3020               	movlw	32
  8105  0497  008D               	movwf	13	;volatile
  8106                           
  8107                           ;mcc_generated_files/pin_manager.c: 82:     ANSELE = 0x05;
  8108  0498  3005               	movlw	5
  8109  0499  0090               	movwf	16	;volatile
  8110                           
  8111                           ;mcc_generated_files/pin_manager.c: 83:     ANSELA = 0x27;
  8112  049A  3027               	movlw	39
  8113  049B  008C               	movwf	12	;volatile
  8114                           
  8115                           ;mcc_generated_files/pin_manager.c: 88:     WPUE = 0x00;
  8116  049C  0024               	movlb	4	; select bank4
  8117  049D  0190               	clrf	16	;volatile
  8118                           
  8119                           ;mcc_generated_files/pin_manager.c: 89:     WPUB = 0x00;
  8120  049E  018D               	clrf	13	;volatile
  8121                           
  8122                           ;mcc_generated_files/pin_manager.c: 90:     OPTION_REGbits.nWPUEN = 1;
  8123  049F  0021               	movlb	1	; select bank1
  8124  04A0  1795               	bsf	21,7	;volatile
  8125                           
  8126                           ;mcc_generated_files/pin_manager.c: 96:     APFCON = 0x00;
  8127  04A1  0022               	movlb	2	; select bank2
  8128  04A2  019D               	clrf	29	;volatile
  8129                           
  8130                           ;mcc_generated_files/pin_manager.c: 102:     IOCBFbits.IOCBF4 = 0;
  8131  04A3  0027               	movlb	7	; select bank7
  8132  04A4  1216               	bcf	22,4	;volatile
  8133                           
  8134                           ;mcc_generated_files/pin_manager.c: 104:     IOCBNbits.IOCBN4 = 0;
  8135  04A5  1215               	bcf	21,4	;volatile
  8136                           
  8137                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP4 = 1;
  8138  04A6  1614               	bsf	20,4	;volatile
  8139                           
  8140                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF4_SetInterruptHandler(IOCBF4_DefaultIn
      +                          terruptHandler);
  8141  04A7  308B               	movlw	low _IOCBF4_DefaultInterruptHandler
  8142  04A8  0020               	movlb	0	; select bank0
  8143  04A9  00D7               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
  8144  04AA  300E               	movlw	high _IOCBF4_DefaultInterruptHandler
  8145  04AB  00D8               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
  8146  04AC  318F  2708         	fcall	_IOCBF4_SetInterruptHandler
  8147                           
  8148                           ;mcc_generated_files/pin_manager.c: 114:     INTCONbits.IOCIE = 1;
  8149  04AE  158B               	bsf	11,3	;volatile
  8150  04AF  0008               	return
  8151  04B0                     __end_of_PIN_MANAGER_Initialize:	
  8152                           
  8153                           	psect	text66
  8154  0F08                     __ptext66:	
  8155 ;; *************** function _IOCBF4_SetInterruptHandler *****************
  8156 ;; Defined at:
  8157 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  8160 ;;		 -> secondISR(1), IOCBF4_DefaultInterruptHandler(1), 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      void 
  8165 ;; Registers used:
  8166 ;;		wreg
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8172 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;Total ram usage:        2 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    6
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_PIN_MANAGER_Initialize
  8183 ;;		_main
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           
  8188                           ;psect for function _IOCBF4_SetInterruptHandler
  8189  0F08                     _IOCBF4_SetInterruptHandler:	
  8190                           
  8191                           ;mcc_generated_files/pin_manager.c: 146:     IOCBF4_InterruptHandler = InterruptHandler;
  8192                           
  8193                           ;incstack = 0
  8194                           ; Regs used in _IOCBF4_SetInterruptHandler: [wreg]
  8195  0F08  0020               	movlb	0	; select bank0
  8196  0F09  0858               	movf	IOCBF4_SetInterruptHandler@InterruptHandler+1,w
  8197  0F0A  00EF               	movwf	_IOCBF4_InterruptHandler+1
  8198  0F0B  0857               	movf	IOCBF4_SetInterruptHandler@InterruptHandler,w
  8199  0F0C  00EE               	movwf	_IOCBF4_InterruptHandler
  8200  0F0D  0008               	return
  8201  0F0E                     __end_of_IOCBF4_SetInterruptHandler:	
  8202                           
  8203                           	psect	text67
  8204  0FB7                     __ptext67:	
  8205 ;; *************** function _OSCILLATOR_Initialize *****************
  8206 ;; Defined at:
  8207 ;;		line 59 in file "mcc_generated_files/mcc.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;Total ram usage:        0 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    6
  8228 ;; This function calls:
  8229 ;;		Nothing
  8230 ;; This function is called by:
  8231 ;;		_SYSTEM_Initialize
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           
  8236                           ;psect for function _OSCILLATOR_Initialize
  8237  0FB7                     _OSCILLATOR_Initialize:	
  8238                           
  8239                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x70;
  8240                           
  8241                           ;incstack = 0
  8242                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8243  0FB7  3070               	movlw	112
  8244  0FB8  0021               	movlb	1	; select bank1
  8245  0FB9  0099               	movwf	25	;volatile
  8246                           
  8247                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
  8248  0FBA  0198               	clrf	24	;volatile
  8249                           
  8250                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  8251  0FBB  0022               	movlb	2	; select bank2
  8252  0FBC  0196               	clrf	22	;volatile
  8253  0FBD                     l111:	
  8254                           ;mcc_generated_files/mcc.c: 69:     {;mcc_generated_files/mcc.c: 70:     }
  8255                           
  8256                           
  8257                           ;mcc_generated_files/mcc.c: 68:     while(PLLR == 0)
  8258  0FBD  0021               	movlb	1	; select bank1
  8259  0FBE  1B1A               	btfsc	26,6	;volatile
  8260  0FBF  0008               	return
  8261  0FC0  2FBD               	goto	l111
  8262  0FC1                     __end_of_OSCILLATOR_Initialize:	
  8263                           
  8264                           	psect	intentry
  8265  0004                     __pintentry:	
  8266 ;; *************** function _INTERRUPT_InterruptManager *****************
  8267 ;; Defined at:
  8268 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;		None
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      void 
  8275 ;; Registers used:
  8276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;Total ram usage:        0 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    5
  8289 ;; This function calls:
  8290 ;;		Absolute function
  8291 ;;		_PIN_MANAGER_IOC
  8292 ;;		_TMR0_ISR
  8293 ;;		_i2c_busCollisionISR
  8294 ;;		i1_i2c_ISR
  8295 ;; This function is called by:
  8296 ;;		Interrupt level 1
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300  0004                     _INTERRUPT_InterruptManager:	
  8301                           
  8302                           ;incstack = 0
  8303  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8304                           
  8305                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8306  0005  3180               	pagesel	$
  8307                           
  8308                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  8309  0006  1A8B               	btfsc	11,5	;volatile
  8310  0007  1D0B               	btfss	11,2	;volatile
  8311  0008  280D               	goto	i1l73
  8312                           
  8313                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  8314  0009  318F  273E  3180   	fcall	_TMR0_ISR
  8315                           
  8316                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  8317  000C  282D               	goto	i1l83
  8318  000D                     i1l73:	
  8319                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
  8320                           
  8321  000D  198B               	btfsc	11,3	;volatile
  8322  000E  1C0B               	btfss	11,0	;volatile
  8323  000F  2814               	goto	i1l75
  8324                           
  8325                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         PIN_MANAGER_IOC();
  8326  0010  318E  26FC  3180   	fcall	_PIN_MANAGER_IOC
  8327                           
  8328                           ;mcc_generated_files/interrupt_manager.c: 62:     }
  8329  0013  282D               	goto	i1l83
  8330  0014                     i1l75:	
  8331                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.PEIE == 1)
  8332                           
  8333  0014  1F0B               	btfss	11,6	;volatile
  8334  0015  282D               	goto	i1l83
  8335                           
  8336                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         if(PIE2bits.BCLIE == 1 && PIR2bits.BCLIF == 1)
  8337  0016  0021               	movlb	1	; select bank1
  8338  0017  1D92               	btfss	18,3	;volatile
  8339  0018  2822               	goto	i1l78
  8340  0019  0020               	movlb	0	; select bank0
  8341  001A  1D92               	btfss	18,3	;volatile
  8342  001B  2822               	goto	i1l78
  8343                           
  8344                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c_driver_busCollisionISR();
  8345  001C  087B               	movf	_i2c_driver_busCollisionISR+1,w
  8346  001D  008A               	movwf	10
  8347  001E  087A               	movf	_i2c_driver_busCollisionISR,w
  8348  001F  000A               	callw
  8349  0020  3180               	pagesel	$
  8350                           
  8351                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  8352  0021  282D               	goto	i1l83
  8353  0022                     i1l78:	
  8354                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
  8355                           
  8356  0022  0021               	movlb	1	; select bank1
  8357  0023  1D91               	btfss	17,3	;volatile
  8358  0024  282D               	goto	i1l83
  8359  0025  0020               	movlb	0	; select bank0
  8360  0026  1D91               	btfss	17,3	;volatile
  8361  0027  282D               	goto	i1l83
  8362                           
  8363                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c_driver_i2cISR();
  8364  0028  084A               	movf	_i2c_driver_i2cISR+1,w
  8365  0029  008A               	movwf	10
  8366  002A  0849               	movf	_i2c_driver_i2cISR,w
  8367  002B  000A               	callw
  8368  002C  3180               	pagesel	$
  8369  002D                     i1l83:	
  8370                           ;mcc_generated_files/interrupt_manager.c: 79:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 81:     }
  8371                           
  8372                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  8373                           
  8374  002D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8375  002E  0009               	retfie
  8376  002F                     __end_of_INTERRUPT_InterruptManager:	
  8377                           
  8378                           	psect	text69
  8379  057B                     __ptext69:	
  8380 ;; *************** function i1_i2c_ISR *****************
  8381 ;; Defined at:
  8382 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;		None
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;		None
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  1    wreg      void 
  8389 ;; Registers used:
  8390 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;Total ram usage:        3 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    4
  8403 ;; This function calls:
  8404 ;;		i1_do_I2C_DO_ACK
  8405 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8406 ;;		i1_do_I2C_DO_NACK_RESTART
  8407 ;;		i1_do_I2C_DO_NACK_STOP
  8408 ;;		i1_do_I2C_IDLE
  8409 ;;		i1_do_I2C_RCEN
  8410 ;;		i1_do_I2C_RESET
  8411 ;;		i1_do_I2C_RX
  8412 ;;		i1_do_I2C_SEND_ADR_READ
  8413 ;;		i1_do_I2C_SEND_ADR_WRITE
  8414 ;;		i1_do_I2C_SEND_RESTART
  8415 ;;		i1_do_I2C_SEND_RESTART_READ
  8416 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8417 ;;		i1_do_I2C_SEND_STOP
  8418 ;;		i1_do_I2C_TX
  8419 ;;		i1_do_I2C_TX_EMPTY
  8420 ;;		i1_i2c_driver_isNACK
  8421 ;;		i1_mssp_clearIRQ
  8422 ;; This function is called by:
  8423 ;;		_INTERRUPT_InterruptManager
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           
  8428                           ;psect for function i1_i2c_ISR
  8429  057B                     i1_i2c_ISR:	
  8430  057B                     i1l5418:	
  8431                           ;incstack = 0
  8432                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8433                           
  8434                           
  8435                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
  8436  057B  318E  26A8  3185   	fcall	i1_mssp_clearIRQ
  8437                           
  8438                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
  8439  057E  0020               	movlb	0	; select bank0
  8440  057F  1DA0               	btfss	_i2c_status,3
  8441  0580  2D8B               	goto	i1l5426
  8442  0581  318F  2753  3185   	fcall	i1_i2c_driver_isNACK
  8443  0584  1C03               	btfss	3,0
  8444  0585  2D8B               	goto	i1l5426
  8445                           
  8446                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
  8447  0586  300F               	movlw	15
  8448  0587  00F3               	movwf	??i1_i2c_ISR
  8449  0588  0873               	movf	??i1_i2c_ISR,w
  8450  0589  0020               	movlb	0	; select bank0
  8451  058A  00A9               	movwf	_i2c_status+9
  8452  058B                     i1l5426:	
  8453                           
  8454                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
  8455  058B  0020               	movlb	0	; select bank0
  8456  058C  0829               	movf	_i2c_status+9,w
  8457  058D  00F3               	movwf	??i1_i2c_ISR
  8458  058E  01F4               	clrf	??i1_i2c_ISR+1
  8459  058F  35F3               	lslf	??i1_i2c_ISR,f
  8460  0590  0DF4               	rlf	??i1_i2c_ISR+1,f
  8461  0591  30EA               	movlw	low (_fsmStateTable| (0+32768))
  8462  0592  0773               	addwf	??i1_i2c_ISR,w
  8463  0593  0084               	movwf	4
  8464  0594  3085               	movlw	high (_fsmStateTable| (0+32768))
  8465  0595  3D74               	addwfc	??i1_i2c_ISR+1,w
  8466  0596  0085               	movwf	5
  8467  0597  3F01               	moviw [1]fsr0
  8468  0598  008A               	movwf	10
  8469  0599  3F00               	moviw [0]fsr0
  8470  059A  000A               	callw
  8471  059B  3185               	pagesel	$
  8472  059C  00F5               	movwf	??i1_i2c_ISR+2
  8473  059D  0875               	movf	??i1_i2c_ISR+2,w
  8474  059E  0020               	movlb	0	; select bank0
  8475  059F  00A9               	movwf	_i2c_status+9
  8476  05A0  0008               	return
  8477  05A1                     __end_ofi1_i2c_ISR:	
  8478                           
  8479                           	psect	text70
  8480  0EA8                     __ptext70:	
  8481 ;; *************** function i1_mssp_clearIRQ *****************
  8482 ;; Defined at:
  8483 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;		None
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;		None
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  1    wreg      void 
  8490 ;; Registers used:
  8491 ;;		None
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8501 ;;Total ram usage:        0 bytes
  8502 ;; Hardware stack levels used:    1
  8503 ;; This function calls:
  8504 ;;		Nothing
  8505 ;; This function is called by:
  8506 ;;		i1_i2c_ISR
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           
  8511                           ;psect for function i1_mssp_clearIRQ
  8512  0EA8                     i1_mssp_clearIRQ:	
  8513                           
  8514                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
  8515                           
  8516                           ;incstack = 0
  8517                           ; Regs used in i1_mssp_clearIRQ: []
  8518  0EA8  0020               	movlb	0	; select bank0
  8519  0EA9  1191               	bcf	17,3	;volatile
  8520  0EAA  0008               	return
  8521  0EAB                     __end_ofi1_mssp_clearIRQ:	
  8522                           
  8523                           	psect	text71
  8524  0336                     __ptext71:	
  8525 ;; *************** function i1_do_I2C_RX *****************
  8526 ;; Defined at:
  8527 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8528 ;; Parameters:    Size  Location     Type
  8529 ;;		None
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;		None
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  1    wreg      enum E3411
  8534 ;; Registers used:
  8535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;Total ram usage:        3 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; Hardware stack levels required when called:    3
  8548 ;; This function calls:
  8549 ;;		Absolute function
  8550 ;;		i1_do_I2C_DO_NACK_RESTART
  8551 ;;		i1_do_I2C_DO_NACK_STOP
  8552 ;;		i1_i2c_driver_getRXData
  8553 ;;		i1_i2c_driver_sendACK
  8554 ;;		i1_i2c_restartWrite
  8555 ;;		i1_rd1RegCompleteHandler
  8556 ;;		i1_rd2RegCompleteHandler
  8557 ;;		i1_rdBlkRegCompleteHandler
  8558 ;;		i1_returnReset
  8559 ;;		i1_returnStop
  8560 ;;		i1_wr1RegCompleteHandler
  8561 ;;		i1_wr2RegCompleteHandler
  8562 ;; This function is called by:
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function i1_do_I2C_RX
  8568  0336                     i1_do_I2C_RX:	
  8569  0336                     i1l5206:	
  8570                           ;incstack = 0
  8571                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8572                           
  8573                           
  8574                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
  8575  0336  318E  26A2  3183   	fcall	i1_i2c_driver_getRXData
  8576  0339  00F0               	movwf	??i1_do_I2C_RX
  8577  033A  0020               	movlb	0	; select bank0
  8578  033B  0822               	movf	low ((_i2c_status| 0+2)),w
  8579  033C  0086               	movwf	6
  8580  033D  0187               	clrf	7
  8581  033E  0870               	movf	??i1_do_I2C_RX,w
  8582  033F  0081               	movwf	1
  8583  0340  3001               	movlw	1
  8584  0341  00F0               	movwf	??i1_do_I2C_RX
  8585  0342  0870               	movf	??i1_do_I2C_RX,w
  8586  0343  07A2               	addwf	low ((_i2c_status| 0+2)),f
  8587                           
  8588                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
  8589  0344  3001               	movlw	1
  8590  0345  02A3               	subwf	_i2c_status+3,f
  8591  0346  3000               	movlw	0
  8592  0347  3BA4               	subwfb	_i2c_status+4,f
  8593  0348  0823               	movf	_i2c_status+3,w
  8594  0349  0424               	iorwf	_i2c_status+4,w
  8595  034A  1903               	btfsc	3,2
  8596  034B  2B50               	goto	i1l579
  8597                           
  8598                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
  8599  034C  318E  26C3         	fcall	i1_i2c_driver_sendACK
  8600                           
  8601                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
  8602  034E  3005               	movlw	5
  8603  034F  0008               	return
  8604  0350                     i1l579:	
  8605                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
  8606                           
  8607                           
  8608                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
  8609  0350  1520               	bsf	_i2c_status,2
  8610                           
  8611                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  8612  0351  2B58               	goto	i1l5230
  8613  0352                     i1l5220:	
  8614                           
  8615                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
  8616  0352  318E  26E3         	fcall	i1_do_I2C_DO_NACK_RESTART
  8617  0354  0008               	return
  8618  0355                     i1l5224:	
  8619                           
  8620                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
  8621  0355  318E  26DF         	fcall	i1_do_I2C_DO_NACK_STOP
  8622  0357  0008               	return
  8623  0358                     i1l5230:	
  8624  0358  0837               	movf	low ((_i2c_status| 0+23)),w
  8625  0359  00F0               	movwf	??i1_do_I2C_RX
  8626  035A  0870               	movf	??i1_do_I2C_RX,w
  8627  035B  00D8               	movwf	i1wr1RegCompleteHandler@p
  8628  035C  300B               	movlw	11
  8629  035D  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8630  035E  0086               	movwf	6
  8631  035F  0187               	clrf	7
  8632  0360  3F41               	moviw [1]fsr1
  8633  0361  008A               	movwf	10
  8634  0362  3F40               	moviw [0]fsr1
  8635  0363  000A               	callw
  8636  0364  3183               	pagesel	$
  8637  0365  00F1               	movwf	??i1_do_I2C_RX+1
  8638  0366  01F2               	clrf	??i1_do_I2C_RX+2
  8639                           
  8640                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8641                           ; Switch size 1, requested type "simple"
  8642                           ; Number of cases is 1, Range of values is 0 to 0
  8643                           ; switch strategies available:
  8644                           ; Name         Instructions Cycles
  8645                           ; simple_byte            4     3 (average)
  8646                           ; direct_byte            8     6 (fixed)
  8647                           ; jumptable            260     6 (fixed)
  8648                           ;	Chosen strategy is simple_byte
  8649  0367  0872               	movf	??i1_do_I2C_RX+2,w
  8650  0368  3A00               	xorlw	0	; case 0
  8651  0369  1903               	skipnz
  8652  036A  2B6C               	goto	i1l5882
  8653  036B  2B55               	goto	i1l5224
  8654  036C                     i1l5882:	
  8655                           
  8656                           ; Switch size 1, requested type "simple"
  8657                           ; Number of cases is 4, Range of values is 1 to 4
  8658                           ; switch strategies available:
  8659                           ; Name         Instructions Cycles
  8660                           ; simple_byte           13     7 (average)
  8661                           ; direct_byte           17     9 (fixed)
  8662                           ; jumptable            263     9 (fixed)
  8663                           ;	Chosen strategy is simple_byte
  8664  036C  0871               	movf	??i1_do_I2C_RX+1,w
  8665  036D  3A01               	xorlw	1	; case 1
  8666  036E  1903               	skipnz
  8667  036F  2B55               	goto	i1l5224
  8668  0370  3A03               	xorlw	3	; case 2
  8669  0371  1903               	skipnz
  8670  0372  2B52               	goto	i1l5220
  8671  0373  3A01               	xorlw	1	; case 3
  8672  0374  1903               	skipnz
  8673  0375  2B52               	goto	i1l5220
  8674  0376  3A07               	xorlw	7	; case 4
  8675  0377  1903               	skipnz
  8676  0378  2B55               	goto	i1l5224
  8677  0379  2B55               	goto	i1l5224
  8678  037A  0008               	return
  8679  037B                     __end_ofi1_do_I2C_RX:	
  8680                           
  8681                           	psect	text72
  8682  0257                     __ptext72:	
  8683 ;; *************** function i1_do_I2C_TX *****************
  8684 ;; Defined at:
  8685 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;		None
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      enum E3411
  8692 ;; Registers used:
  8693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;Total ram usage:        3 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    3
  8706 ;; This function calls:
  8707 ;;		Absolute function
  8708 ;;		i1_do_I2C_SEND_RESTART_READ
  8709 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8710 ;;		i1_do_I2C_SEND_STOP
  8711 ;;		i1_i2c_driver_TXData
  8712 ;;		i1_i2c_driver_isNACK
  8713 ;;		i1_i2c_restartWrite
  8714 ;;		i1_rd1RegCompleteHandler
  8715 ;;		i1_rd2RegCompleteHandler
  8716 ;;		i1_rdBlkRegCompleteHandler
  8717 ;;		i1_returnReset
  8718 ;;		i1_returnStop
  8719 ;;		i1_wr1RegCompleteHandler
  8720 ;;		i1_wr2RegCompleteHandler
  8721 ;; This function is called by:
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function i1_do_I2C_TX
  8727  0257                     i1_do_I2C_TX:	
  8728  0257                     i1l5172:	
  8729                           ;incstack = 0
  8730                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8731                           
  8732                           
  8733                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
  8734  0257  318F  2753  3182   	fcall	i1_i2c_driver_isNACK
  8735  025A  1803               	btfsc	3,0
  8736  025B  2A66               	goto	i1l5190
  8737  025C  2A89               	goto	i1l563
  8738  025D                     i1l5176:	
  8739                           
  8740                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
  8741  025D  318E  26CB         	fcall	i1_do_I2C_SEND_RESTART_READ
  8742  025F  0008               	return
  8743  0260                     i1l5180:	
  8744                           
  8745                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
  8746  0260  318E  26CF         	fcall	i1_do_I2C_SEND_RESTART_WRITE
  8747  0262  0008               	return
  8748  0263                     i1l5184:	
  8749                           
  8750                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
  8751  0263  318E  26D7         	fcall	i1_do_I2C_SEND_STOP
  8752  0265  0008               	return
  8753  0266                     i1l5190:	
  8754  0266  0020               	movlb	0	; select bank0
  8755  0267  083A               	movf	low ((_i2c_status| 0+26)),w
  8756  0268  00F0               	movwf	??i1_do_I2C_TX
  8757  0269  0870               	movf	??i1_do_I2C_TX,w
  8758  026A  00D8               	movwf	i1wr1RegCompleteHandler@p
  8759  026B  3011               	movlw	17
  8760  026C  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8761  026D  0086               	movwf	6
  8762  026E  0187               	clrf	7
  8763  026F  3F41               	moviw [1]fsr1
  8764  0270  008A               	movwf	10
  8765  0271  3F40               	moviw [0]fsr1
  8766  0272  000A               	callw
  8767  0273  3182               	pagesel	$
  8768  0274  00F1               	movwf	??i1_do_I2C_TX+1
  8769  0275  01F2               	clrf	??i1_do_I2C_TX+2
  8770                           
  8771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8772                           ; Switch size 1, requested type "simple"
  8773                           ; Number of cases is 1, Range of values is 0 to 0
  8774                           ; switch strategies available:
  8775                           ; Name         Instructions Cycles
  8776                           ; simple_byte            4     3 (average)
  8777                           ; direct_byte            8     6 (fixed)
  8778                           ; jumptable            260     6 (fixed)
  8779                           ;	Chosen strategy is simple_byte
  8780  0276  0872               	movf	??i1_do_I2C_TX+2,w
  8781  0277  3A00               	xorlw	0	; case 0
  8782  0278  1903               	skipnz
  8783  0279  2A7B               	goto	i1l5884
  8784  027A  2A63               	goto	i1l5184
  8785  027B                     i1l5884:	
  8786                           
  8787                           ; Switch size 1, requested type "simple"
  8788                           ; Number of cases is 4, Range of values is 1 to 4
  8789                           ; switch strategies available:
  8790                           ; Name         Instructions Cycles
  8791                           ; simple_byte           13     7 (average)
  8792                           ; direct_byte           17     9 (fixed)
  8793                           ; jumptable            263     9 (fixed)
  8794                           ;	Chosen strategy is simple_byte
  8795  027B  0871               	movf	??i1_do_I2C_TX+1,w
  8796  027C  3A01               	xorlw	1	; case 1
  8797  027D  1903               	skipnz
  8798  027E  2A63               	goto	i1l5184
  8799  027F  3A03               	xorlw	3	; case 2
  8800  0280  1903               	skipnz
  8801  0281  2A5D               	goto	i1l5176
  8802  0282  3A01               	xorlw	1	; case 3
  8803  0283  1903               	skipnz
  8804  0284  2A60               	goto	i1l5180
  8805  0285  3A07               	xorlw	7	; case 4
  8806  0286  1903               	skipnz
  8807  0287  2A63               	goto	i1l5184
  8808  0288  2A63               	goto	i1l5184
  8809  0289                     i1l563:	
  8810                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
  8811                           
  8812                           
  8813                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
  8814  0289  0020               	movlb	0	; select bank0
  8815  028A  11A0               	bcf	_i2c_status,3
  8816                           
  8817                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
  8818  028B  3002               	movlw	2
  8819  028C  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8820  028D  0086               	movwf	6
  8821  028E  0187               	clrf	7
  8822  028F  3F40               	moviw [0]fsr1
  8823  0290  0084               	movwf	4
  8824  0291  0185               	clrf	5
  8825  0292  0A81               	incf	1,f
  8826  0293  0800               	movf	0,w
  8827  0294  318E  26F7  3182   	fcall	i1_i2c_driver_TXData
  8828                           
  8829                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
  8830  0297  3001               	movlw	1
  8831  0298  0020               	movlb	0	; select bank0
  8832  0299  02A3               	subwf	_i2c_status+3,f
  8833  029A  3000               	movlw	0
  8834  029B  3BA4               	subwfb	_i2c_status+4,f
  8835  029C  0823               	movf	_i2c_status+3,w
  8836  029D  0424               	iorwf	_i2c_status+4,w
  8837  029E  1D03               	btfss	3,2
  8838  029F  2AA2               	goto	i1l5198
  8839  02A0  3006               	movlw	6
  8840  02A1  0008               	return
  8841  02A2                     i1l5198:	
  8842  02A2  3003               	movlw	3
  8843  02A3  0008               	return
  8844  02A4                     __end_ofi1_do_I2C_TX:	
  8845                           
  8846                           	psect	text73
  8847  04DA                     __ptext73:	
  8848 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
  8849 ;; Defined at:
  8850 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;		None
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;		None
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      enum E3411
  8857 ;; Registers used:
  8858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;Total ram usage:        3 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    3
  8871 ;; This function calls:
  8872 ;;		Absolute function
  8873 ;;		i1_do_I2C_SEND_RESTART
  8874 ;;		i1_do_I2C_SEND_STOP
  8875 ;;		i1_i2c_restartWrite
  8876 ;;		i1_rd1RegCompleteHandler
  8877 ;;		i1_rd2RegCompleteHandler
  8878 ;;		i1_rdBlkRegCompleteHandler
  8879 ;;		i1_returnReset
  8880 ;;		i1_returnStop
  8881 ;;		i1_wr1RegCompleteHandler
  8882 ;;		i1_wr2RegCompleteHandler
  8883 ;; This function is called by:
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           
  8888                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
  8889  04DA                     i1_do_I2C_DO_ADDRESS_NACK:	
  8890  04DA                     i1l5152:	
  8891                           ;incstack = 0
  8892                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8893                           
  8894                           
  8895                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
  8896  04DA  0020               	movlb	0	; select bank0
  8897  04DB  11A0               	bcf	_i2c_status,3
  8898                           
  8899                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
  8900  04DC  3002               	movlw	2
  8901  04DD  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  8902  04DE  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  8903  04DF  00AA               	movwf	_i2c_status+10
  8904                           
  8905                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
  8906  04E0  2CE7               	goto	i1l5166
  8907  04E1                     i1l5156:	
  8908                           
  8909                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
  8910  04E1  318E  26D3         	fcall	i1_do_I2C_SEND_RESTART
  8911  04E3  0008               	return
  8912  04E4                     i1l5160:	
  8913                           
  8914                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
  8915  04E4  318E  26D7         	fcall	i1_do_I2C_SEND_STOP
  8916  04E6  0008               	return
  8917  04E7                     i1l5166:	
  8918  04E7  0839               	movf	low ((_i2c_status| 0+25)),w
  8919  04E8  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  8920  04E9  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  8921  04EA  00D8               	movwf	i1wr1RegCompleteHandler@p
  8922  04EB  300F               	movlw	15
  8923  04EC  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8924  04ED  0086               	movwf	6
  8925  04EE  0187               	clrf	7
  8926  04EF  3F41               	moviw [1]fsr1
  8927  04F0  008A               	movwf	10
  8928  04F1  3F40               	moviw [0]fsr1
  8929  04F2  000A               	callw
  8930  04F3  3184               	pagesel	$
  8931  04F4  00F1               	movwf	??i1_do_I2C_DO_ADDRESS_NACK+1
  8932  04F5  01F2               	clrf	??i1_do_I2C_DO_ADDRESS_NACK+2
  8933                           
  8934                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8935                           ; Switch size 1, requested type "simple"
  8936                           ; Number of cases is 1, Range of values is 0 to 0
  8937                           ; switch strategies available:
  8938                           ; Name         Instructions Cycles
  8939                           ; simple_byte            4     3 (average)
  8940                           ; direct_byte            8     6 (fixed)
  8941                           ; jumptable            260     6 (fixed)
  8942                           ;	Chosen strategy is simple_byte
  8943  04F6  0872               	movf	??i1_do_I2C_DO_ADDRESS_NACK+2,w
  8944  04F7  3A00               	xorlw	0	; case 0
  8945  04F8  1903               	skipnz
  8946  04F9  2CFB               	goto	i1l5886
  8947  04FA  2CE4               	goto	i1l5160
  8948  04FB                     i1l5886:	
  8949                           
  8950                           ; Switch size 1, requested type "simple"
  8951                           ; Number of cases is 2, Range of values is 2 to 3
  8952                           ; switch strategies available:
  8953                           ; Name         Instructions Cycles
  8954                           ; simple_byte            7     4 (average)
  8955                           ; direct_byte           13     9 (fixed)
  8956                           ; jumptable            263     9 (fixed)
  8957                           ;	Chosen strategy is simple_byte
  8958  04FB  0871               	movf	??i1_do_I2C_DO_ADDRESS_NACK+1,w
  8959  04FC  3A02               	xorlw	2	; case 2
  8960  04FD  1903               	skipnz
  8961  04FE  2CE1               	goto	i1l5156
  8962  04FF  3A01               	xorlw	1	; case 3
  8963  0500  1903               	skipnz
  8964  0501  2CE1               	goto	i1l5156
  8965  0502  2CE4               	goto	i1l5160
  8966  0503  0008               	return
  8967  0504                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
  8968                           
  8969                           	psect	text74
  8970  0EE3                     __ptext74:	
  8971 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
  8972 ;; Defined at:
  8973 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;		None
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  1    wreg      enum E3411
  8980 ;; Registers used:
  8981 ;;		wreg, status,2, status,0, pclath, cstack
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;Total ram usage:        0 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    1
  8994 ;; This function calls:
  8995 ;;		i1_i2c_driver_sendNACK
  8996 ;; This function is called by:
  8997 ;;		i1_do_I2C_RX
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           
  9002                           ;psect for function i1_do_I2C_DO_NACK_RESTART
  9003  0EE3                     i1_do_I2C_DO_NACK_RESTART:	
  9004  0EE3                     i1l3660:	
  9005                           ;incstack = 0
  9006                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9007                           
  9008                           
  9009                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
  9010  0EE3  318E  26C7         	fcall	i1_i2c_driver_sendNACK
  9011                           
  9012                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
  9013  0EE5  3009               	movlw	9
  9014  0EE6  0008               	return
  9015  0EE7                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
  9016                           
  9017                           	psect	text75
  9018  0EDF                     __ptext75:	
  9019 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
  9020 ;; Defined at:
  9021 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;		None
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;		None
  9026 ;; Return value:  Size  Location     Type
  9027 ;;                  1    wreg      enum E3411
  9028 ;; Registers used:
  9029 ;;		wreg, status,2, status,0, pclath, cstack
  9030 ;; Tracked objects:
  9031 ;;		On entry : 0/0
  9032 ;;		On exit  : 0/0
  9033 ;;		Unchanged: 0/0
  9034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;Total ram usage:        0 bytes
  9040 ;; Hardware stack levels used:    1
  9041 ;; Hardware stack levels required when called:    1
  9042 ;; This function calls:
  9043 ;;		i1_i2c_driver_sendNACK
  9044 ;; This function is called by:
  9045 ;;		i1_do_I2C_RX
  9046 ;; This function uses a non-reentrant model
  9047 ;;
  9048                           
  9049                           
  9050                           ;psect for function i1_do_I2C_DO_NACK_STOP
  9051  0EDF                     i1_do_I2C_DO_NACK_STOP:	
  9052  0EDF                     i1l3654:	
  9053                           ;incstack = 0
  9054                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9055                           
  9056                           
  9057                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
  9058  0EDF  318E  26C7         	fcall	i1_i2c_driver_sendNACK
  9059                           
  9060                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
  9061  0EE1  300A               	movlw	10
  9062  0EE2  0008               	return
  9063  0EE3                     __end_ofi1_do_I2C_DO_NACK_STOP:	
  9064                           
  9065                           	psect	text76
  9066  0EDB                     __ptext76:	
  9067 ;; *************** function i1_do_I2C_DO_ACK *****************
  9068 ;; Defined at:
  9069 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;		None
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;		None
  9074 ;; Return value:  Size  Location     Type
  9075 ;;                  1    wreg      enum E3411
  9076 ;; Registers used:
  9077 ;;		wreg, status,2, status,0, pclath, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;Total ram usage:        0 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    1
  9090 ;; This function calls:
  9091 ;;		i1_i2c_driver_sendACK
  9092 ;; This function is called by:
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function i1_do_I2C_DO_ACK
  9098  0EDB                     i1_do_I2C_DO_ACK:	
  9099  0EDB                     i1l3866:	
  9100                           ;incstack = 0
  9101                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  9102                           
  9103                           
  9104                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
  9105  0EDB  318E  26C3         	fcall	i1_i2c_driver_sendACK
  9106                           
  9107                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
  9108  0EDD  3005               	movlw	5
  9109  0EDE  0008               	return
  9110  0EDF                     __end_ofi1_do_I2C_DO_ACK:	
  9111                           
  9112                           	psect	text77
  9113  0F02                     __ptext77:	
  9114 ;; *************** function i1_do_I2C_RCEN *****************
  9115 ;; Defined at:
  9116 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;		None
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      enum E3411
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0, pclath, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;Total ram usage:        0 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    1
  9137 ;; This function calls:
  9138 ;;		i1_i2c_driver_startRX
  9139 ;; This function is called by:
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           
  9144                           ;psect for function i1_do_I2C_RCEN
  9145  0F02                     i1_do_I2C_RCEN:	
  9146  0F02                     i1l3858:	
  9147                           ;incstack = 0
  9148                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9149                           
  9150                           
  9151                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
  9152  0F02  0020               	movlb	0	; select bank0
  9153  0F03  11A0               	bcf	_i2c_status,3
  9154                           
  9155                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
  9156  0F04  318E  269F         	fcall	i1_i2c_driver_startRX
  9157                           
  9158                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
  9159  0F06  3004               	movlw	4
  9160  0F07  0008               	return
  9161  0F08                     __end_ofi1_do_I2C_RCEN:	
  9162                           
  9163                           	psect	text78
  9164  0F4C                     __ptext78:	
  9165 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
  9166 ;; Defined at:
  9167 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;		None
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;		None
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      enum E3411
  9174 ;; Registers used:
  9175 ;;		wreg, status,2, status,0, pclath, cstack
  9176 ;; Tracked objects:
  9177 ;;		On entry : 0/0
  9178 ;;		On exit  : 0/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;Total ram usage:        0 bytes
  9186 ;; Hardware stack levels used:    1
  9187 ;; Hardware stack levels required when called:    1
  9188 ;; This function calls:
  9189 ;;		i1_i2c_driver_TXData
  9190 ;; This function is called by:
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           
  9195                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
  9196  0F4C                     i1_do_I2C_SEND_ADR_WRITE:	
  9197  0F4C                     i1l3850:	
  9198                           ;incstack = 0
  9199                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9200                           
  9201                           
  9202                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
  9203  0F4C  0020               	movlb	0	; select bank0
  9204  0F4D  15A0               	bsf	_i2c_status,3
  9205                           
  9206                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
  9207  0F4E  3521               	lslf	_i2c_status+1,w
  9208  0F4F  318E  26F7         	fcall	i1_i2c_driver_TXData
  9209                           
  9210                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
  9211  0F51  3003               	movlw	3
  9212  0F52  0008               	return
  9213  0F53                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
  9214                           
  9215                           	psect	text79
  9216  0F5B                     __ptext79:	
  9217 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
  9218 ;; Defined at:
  9219 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;		None
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;		None
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      enum E3411
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0, pclath, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;Total ram usage:        0 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    1
  9240 ;; This function calls:
  9241 ;;		i1_i2c_driver_TXData
  9242 ;; This function is called by:
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           
  9247                           ;psect for function i1_do_I2C_SEND_ADR_READ
  9248  0F5B                     i1_do_I2C_SEND_ADR_READ:	
  9249  0F5B                     i1l3842:	
  9250                           ;incstack = 0
  9251                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  9252                           
  9253                           
  9254                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
  9255  0F5B  0020               	movlb	0	; select bank0
  9256  0F5C  15A0               	bsf	_i2c_status,3
  9257                           
  9258                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
  9259  0F5D  1403               	setc
  9260  0F5E  0D21               	rlf	_i2c_status+1,w
  9261  0F5F  318E  26F7         	fcall	i1_i2c_driver_TXData
  9262                           
  9263                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
  9264  0F61  3005               	movlw	5
  9265  0F62  0008               	return
  9266  0F63                     __end_ofi1_do_I2C_SEND_ADR_READ:	
  9267                           
  9268                           	psect	text80
  9269  0ED7                     __ptext80:	
  9270 ;; *************** function i1_do_I2C_SEND_STOP *****************
  9271 ;; Defined at:
  9272 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;		None
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;		None
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  1    wreg      enum E3411
  9279 ;; Registers used:
  9280 ;;		wreg, status,2, status,0, pclath, cstack
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;Total ram usage:        0 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; Hardware stack levels required when called:    1
  9293 ;; This function calls:
  9294 ;;		i1_i2c_driver_stop
  9295 ;; This function is called by:
  9296 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9297 ;;		i1_do_I2C_TX
  9298 ;;		i1_do_I2C_TX_EMPTY
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function i1_do_I2C_SEND_STOP
  9304  0ED7                     i1_do_I2C_SEND_STOP:	
  9305  0ED7                     i1l3648:	
  9306                           ;incstack = 0
  9307                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9308                           
  9309                           
  9310                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
  9311  0ED7  318E  269C         	fcall	i1_i2c_driver_stop
  9312                           
  9313                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
  9314  0ED9  3000               	movlw	0
  9315  0EDA  0008               	return
  9316  0EDB                     __end_ofi1_do_I2C_SEND_STOP:	
  9317                           
  9318                           	psect	text81
  9319  0ED3                     __ptext81:	
  9320 ;; *************** function i1_do_I2C_SEND_RESTART *****************
  9321 ;; Defined at:
  9322 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;		None
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;		None
  9327 ;; Return value:  Size  Location     Type
  9328 ;;                  1    wreg      enum E3411
  9329 ;; Registers used:
  9330 ;;		wreg, status,2, status,0, pclath, cstack
  9331 ;; Tracked objects:
  9332 ;;		On entry : 0/0
  9333 ;;		On exit  : 0/0
  9334 ;;		Unchanged: 0/0
  9335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;Total ram usage:        0 bytes
  9341 ;; Hardware stack levels used:    1
  9342 ;; Hardware stack levels required when called:    1
  9343 ;; This function calls:
  9344 ;;		i1_i2c_driver_restart
  9345 ;; This function is called by:
  9346 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9347 ;;		i1_do_I2C_TX_EMPTY
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           
  9351                           
  9352                           ;psect for function i1_do_I2C_SEND_RESTART
  9353  0ED3                     i1_do_I2C_SEND_RESTART:	
  9354  0ED3                     i1l3642:	
  9355                           ;incstack = 0
  9356                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9357                           
  9358                           
  9359                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
  9360  0ED3  318E  2699         	fcall	i1_i2c_driver_restart
  9361                           
  9362                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
  9363  0ED5  3001               	movlw	1
  9364  0ED6  0008               	return
  9365  0ED7                     __end_ofi1_do_I2C_SEND_RESTART:	
  9366                           
  9367                           	psect	text82
  9368  0ECF                     __ptext82:	
  9369 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
  9370 ;; Defined at:
  9371 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;		None
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;		None
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  1    wreg      enum E3411
  9378 ;; Registers used:
  9379 ;;		wreg, status,2, status,0, pclath, cstack
  9380 ;; Tracked objects:
  9381 ;;		On entry : 0/0
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;Total ram usage:        0 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; Hardware stack levels required when called:    1
  9392 ;; This function calls:
  9393 ;;		i1_i2c_driver_restart
  9394 ;; This function is called by:
  9395 ;;		i1_do_I2C_TX
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           
  9400                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
  9401  0ECF                     i1_do_I2C_SEND_RESTART_WRITE:	
  9402  0ECF                     i1l3636:	
  9403                           ;incstack = 0
  9404                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9405                           
  9406                           
  9407                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
  9408  0ECF  318E  2699         	fcall	i1_i2c_driver_restart
  9409                           
  9410                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
  9411  0ED1  3002               	movlw	2
  9412  0ED2  0008               	return
  9413  0ED3                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
  9414                           
  9415                           	psect	text83
  9416  0ECB                     __ptext83:	
  9417 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
  9418 ;; Defined at:
  9419 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;		None
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;		None
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  1    wreg      enum E3411
  9426 ;; Registers used:
  9427 ;;		wreg, status,2, status,0, pclath, cstack
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;Total ram usage:        0 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    1
  9440 ;; This function calls:
  9441 ;;		i1_i2c_driver_restart
  9442 ;; This function is called by:
  9443 ;;		i1_do_I2C_TX
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           
  9448                           ;psect for function i1_do_I2C_SEND_RESTART_READ
  9449  0ECB                     i1_do_I2C_SEND_RESTART_READ:	
  9450  0ECB                     i1l3630:	
  9451                           ;incstack = 0
  9452                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9453                           
  9454                           
  9455                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
  9456  0ECB  318E  2699         	fcall	i1_i2c_driver_restart
  9457                           
  9458                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
  9459  0ECD  3001               	movlw	1
  9460  0ECE  0008               	return
  9461  0ECF                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
  9462                           
  9463                           	psect	text84
  9464  07FB                     __ptext84:	
  9465 ;; *************** function i1_do_I2C_IDLE *****************
  9466 ;; Defined at:
  9467 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      enum E3411
  9474 ;; Registers used:
  9475 ;;		wreg, status,2
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; This function calls:
  9488 ;;		Nothing
  9489 ;; This function is called by:
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           
  9494                           ;psect for function i1_do_I2C_IDLE
  9495  07FB                     i1_do_I2C_IDLE:	
  9496  07FB                     i1l3834:	
  9497                           ;incstack = 0
  9498                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
  9499                           
  9500                           
  9501                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
  9502  07FB  0020               	movlb	0	; select bank0
  9503  07FC  1020               	bcf	_i2c_status,0
  9504                           
  9505                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
  9506  07FD  01AA               	clrf	_i2c_status+10
  9507                           
  9508                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
  9509  07FE  300E               	movlw	14
  9510  07FF  0008               	return
  9511  0800                     __end_ofi1_do_I2C_IDLE:	
  9512                           
  9513                           	psect	text85
  9514  0F45                     __ptext85:	
  9515 ;; *************** function i1_do_I2C_RESET *****************
  9516 ;; Defined at:
  9517 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;		None
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;		None
  9522 ;; Return value:  Size  Location     Type
  9523 ;;                  1    wreg      enum E3411
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:        0 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    1
  9538 ;; This function calls:
  9539 ;;		i1_i2c_driver_resetBus
  9540 ;; This function is called by:
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           
  9545                           ;psect for function i1_do_I2C_RESET
  9546  0F45                     i1_do_I2C_RESET:	
  9547  0F45                     i1l3824:	
  9548                           ;incstack = 0
  9549                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  9550                           
  9551                           
  9552                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
  9553  0F45  318E  268D         	fcall	i1_i2c_driver_resetBus
  9554                           
  9555                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
  9556  0F47  0020               	movlb	0	; select bank0
  9557  0F48  1020               	bcf	_i2c_status,0
  9558                           
  9559                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
  9560  0F49  01AA               	clrf	_i2c_status+10
  9561                           
  9562                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
  9563  0F4A  300E               	movlw	14
  9564  0F4B  0008               	return
  9565  0F4C                     __end_ofi1_do_I2C_RESET:	
  9566                           
  9567                           	psect	text86
  9568  0425                     __ptext86:	
  9569 ;; *************** function i1_do_I2C_TX_EMPTY *****************
  9570 ;; Defined at:
  9571 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;		None
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;		None
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  1    wreg      enum E3411
  9578 ;; Registers used:
  9579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;Total ram usage:        3 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    3
  9592 ;; This function calls:
  9593 ;;		Absolute function
  9594 ;;		i1_do_I2C_SEND_RESTART
  9595 ;;		i1_do_I2C_SEND_STOP
  9596 ;;		i1_i2c_restartWrite
  9597 ;;		i1_mssp_setIRQ
  9598 ;;		i1_rd1RegCompleteHandler
  9599 ;;		i1_rd2RegCompleteHandler
  9600 ;;		i1_rdBlkRegCompleteHandler
  9601 ;;		i1_returnReset
  9602 ;;		i1_returnStop
  9603 ;;		i1_wr1RegCompleteHandler
  9604 ;;		i1_wr2RegCompleteHandler
  9605 ;; This function is called by:
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function i1_do_I2C_TX_EMPTY
  9611  0425                     i1_do_I2C_TX_EMPTY:	
  9612  0425                     i1l5236:	
  9613                           ;incstack = 0
  9614                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9615                           
  9616                           
  9617                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
  9618  0425  0020               	movlb	0	; select bank0
  9619  0426  1520               	bsf	_i2c_status,2
  9620                           
  9621                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  9622  0427  2C32               	goto	i1l5254
  9623  0428                     i1l5238:	
  9624                           
  9625                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
  9626  0428  318E  26D3         	fcall	i1_do_I2C_SEND_RESTART
  9627  042A  0008               	return
  9628  042B                     i1l5242:	
  9629                           
  9630                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
  9631  042B  318E  26A5         	fcall	i1_mssp_setIRQ
  9632                           
  9633                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
  9634  042D  3003               	movlw	3
  9635  042E  0008               	return
  9636  042F                     i1l5248:	
  9637                           
  9638                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
  9639  042F  318E  26D7         	fcall	i1_do_I2C_SEND_STOP
  9640  0431  0008               	return
  9641  0432                     i1l5254:	
  9642  0432  0837               	movf	low ((_i2c_status| 0+23)),w
  9643  0433  00F0               	movwf	??i1_do_I2C_TX_EMPTY
  9644  0434  0870               	movf	??i1_do_I2C_TX_EMPTY,w
  9645  0435  00D8               	movwf	i1wr1RegCompleteHandler@p
  9646  0436  300B               	movlw	11
  9647  0437  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9648  0438  0086               	movwf	6
  9649  0439  0187               	clrf	7
  9650  043A  3F41               	moviw [1]fsr1
  9651  043B  008A               	movwf	10
  9652  043C  3F40               	moviw [0]fsr1
  9653  043D  000A               	callw
  9654  043E  3184               	pagesel	$
  9655  043F  00F1               	movwf	??i1_do_I2C_TX_EMPTY+1
  9656  0440  01F2               	clrf	??i1_do_I2C_TX_EMPTY+2
  9657                           
  9658                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9659                           ; Switch size 1, requested type "simple"
  9660                           ; Number of cases is 1, Range of values is 0 to 0
  9661                           ; switch strategies available:
  9662                           ; Name         Instructions Cycles
  9663                           ; simple_byte            4     3 (average)
  9664                           ; direct_byte            8     6 (fixed)
  9665                           ; jumptable            260     6 (fixed)
  9666                           ;	Chosen strategy is simple_byte
  9667  0441  0872               	movf	??i1_do_I2C_TX_EMPTY+2,w
  9668  0442  3A00               	xorlw	0	; case 0
  9669  0443  1903               	skipnz
  9670  0444  2C46               	goto	i1l5888
  9671  0445  2C2F               	goto	i1l5248
  9672  0446                     i1l5888:	
  9673                           
  9674                           ; Switch size 1, requested type "simple"
  9675                           ; Number of cases is 4, Range of values is 1 to 4
  9676                           ; switch strategies available:
  9677                           ; Name         Instructions Cycles
  9678                           ; simple_byte           13     7 (average)
  9679                           ; direct_byte           17     9 (fixed)
  9680                           ; jumptable            263     9 (fixed)
  9681                           ;	Chosen strategy is simple_byte
  9682  0446  0871               	movf	??i1_do_I2C_TX_EMPTY+1,w
  9683  0447  3A01               	xorlw	1	; case 1
  9684  0448  1903               	skipnz
  9685  0449  2C2F               	goto	i1l5248
  9686  044A  3A03               	xorlw	3	; case 2
  9687  044B  1903               	skipnz
  9688  044C  2C28               	goto	i1l5238
  9689  044D  3A01               	xorlw	1	; case 3
  9690  044E  1903               	skipnz
  9691  044F  2C28               	goto	i1l5238
  9692  0450  3A07               	xorlw	7	; case 4
  9693  0451  1903               	skipnz
  9694  0452  2C2B               	goto	i1l5242
  9695  0453  2C2F               	goto	i1l5248
  9696  0454  0008               	return
  9697  0455                     __end_ofi1_do_I2C_TX_EMPTY:	
  9698                           
  9699                           	psect	text87
  9700  0EA5                     __ptext87:	
  9701 ;; *************** function i1_mssp_setIRQ *****************
  9702 ;; Defined at:
  9703 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;		None
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;		None
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  1    wreg      void 
  9710 ;; Registers used:
  9711 ;;		None
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;Total ram usage:        0 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; This function calls:
  9724 ;;		Nothing
  9725 ;; This function is called by:
  9726 ;;		i1_do_I2C_TX_EMPTY
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           
  9731                           ;psect for function i1_mssp_setIRQ
  9732  0EA5                     i1_mssp_setIRQ:	
  9733                           
  9734                           ;mcc_generated_files/i2c_driver.c: 61:     else
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in i1_mssp_setIRQ: []
  9738  0EA5  0020               	movlb	0	; select bank0
  9739  0EA6  1591               	bsf	17,3	;volatile
  9740  0EA7  0008               	return
  9741  0EA8                     __end_ofi1_mssp_setIRQ:	
  9742                           
  9743                           	psect	text88
  9744  0F53                     __ptext88:	
  9745 ;; *************** function i1_i2c_driver_isNACK *****************
  9746 ;; Defined at:
  9747 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;		None
  9750 ;; Auto vars:     Size  Location     Type
  9751 ;;		None
  9752 ;; Return value:  Size  Location     Type
  9753 ;;		None               void
  9754 ;; Registers used:
  9755 ;;		wreg, status,2, status,0
  9756 ;; Tracked objects:
  9757 ;;		On entry : 0/0
  9758 ;;		On exit  : 0/0
  9759 ;;		Unchanged: 0/0
  9760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;Total ram usage:        1 bytes
  9766 ;; Hardware stack levels used:    1
  9767 ;; This function calls:
  9768 ;;		Nothing
  9769 ;; This function is called by:
  9770 ;;		i1_do_I2C_TX
  9771 ;;		i1_i2c_ISR
  9772 ;; This function uses a non-reentrant model
  9773 ;;
  9774                           
  9775                           
  9776                           ;psect for function i1_i2c_driver_isNACK
  9777  0F53                     i1_i2c_driver_isNACK:	
  9778                           
  9779                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
  9780                           
  9781                           ;incstack = 0
  9782                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
  9783  0F53  0024               	movlb	4	; select bank4
  9784  0F54  0E16               	swapf	22,w	;volatile
  9785  0F55  0C89               	rrf	9,f
  9786  0F56  0C89               	rrf	9,f
  9787  0F57  3901               	andlw	1
  9788  0F58  00F0               	movwf	??i1_i2c_driver_isNACK
  9789  0F59  0C70               	rrf	??i1_i2c_driver_isNACK,w
  9790  0F5A  0008               	return
  9791  0F5B                     __end_ofi1_i2c_driver_isNACK:	
  9792                           
  9793                           	psect	text89
  9794  0EF7                     __ptext89:	
  9795 ;; *************** function i1_i2c_driver_TXData *****************
  9796 ;; Defined at:
  9797 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;  d               1    wreg     unsigned char 
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;  d               1    0[COMMON] unsigned char 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;                  1    wreg      void 
  9804 ;; Registers used:
  9805 ;;		wreg
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;Total ram usage:        1 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; This function calls:
  9818 ;;		Nothing
  9819 ;; This function is called by:
  9820 ;;		i1_do_I2C_SEND_ADR_READ
  9821 ;;		i1_do_I2C_SEND_ADR_WRITE
  9822 ;;		i1_do_I2C_TX
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function i1_i2c_driver_TXData
  9828  0EF7                     i1_i2c_driver_TXData:	
  9829                           
  9830                           ;incstack = 0
  9831                           ; Regs used in i1_i2c_driver_TXData: [wreg]
  9832                           ;i1i2c_driver_TXData@d stored from wreg
  9833  0EF7  00F0               	movwf	i1i2c_driver_TXData@d
  9834                           
  9835                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
  9836  0EF8  0870               	movf	i1i2c_driver_TXData@d,w
  9837  0EF9  0024               	movlb	4	; select bank4
  9838  0EFA  0091               	movwf	17	;volatile
  9839  0EFB  0008               	return
  9840  0EFC                     __end_ofi1_i2c_driver_TXData:	
  9841                           
  9842                           	psect	text90
  9843  0EA2                     __ptext90:	
  9844 ;; *************** function i1_i2c_driver_getRXData *****************
  9845 ;; Defined at:
  9846 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
  9847 ;; Parameters:    Size  Location     Type
  9848 ;;		None
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;		None
  9851 ;; Return value:  Size  Location     Type
  9852 ;;                  1    wreg      unsigned char 
  9853 ;; Registers used:
  9854 ;;		wreg
  9855 ;; Tracked objects:
  9856 ;;		On entry : 0/0
  9857 ;;		On exit  : 0/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;Total ram usage:        0 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; This function calls:
  9867 ;;		Nothing
  9868 ;; This function is called by:
  9869 ;;		i1_do_I2C_RX
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           
  9874                           ;psect for function i1_i2c_driver_getRXData
  9875  0EA2                     i1_i2c_driver_getRXData:	
  9876                           
  9877                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
  9881  0EA2  0024               	movlb	4	; select bank4
  9882  0EA3  0811               	movf	17,w	;volatile
  9883  0EA4  0008               	return
  9884  0EA5                     __end_ofi1_i2c_driver_getRXData:	
  9885                           
  9886                           	psect	text91
  9887  0EC7                     __ptext91:	
  9888 ;; *************** function i1_i2c_driver_sendNACK *****************
  9889 ;; Defined at:
  9890 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;		None
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;		None
  9895 ;; Return value:  Size  Location     Type
  9896 ;;                  1    wreg      void 
  9897 ;; Registers used:
  9898 ;;		None
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;Total ram usage:        0 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; This function calls:
  9911 ;;		Nothing
  9912 ;; This function is called by:
  9913 ;;		i1_do_I2C_DO_NACK_STOP
  9914 ;;		i1_do_I2C_DO_NACK_RESTART
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918                           
  9919                           ;psect for function i1_i2c_driver_sendNACK
  9920  0EC7                     i1_i2c_driver_sendNACK:	
  9921                           
  9922                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in i1_i2c_driver_sendNACK: []
  9926  0EC7  0024               	movlb	4	; select bank4
  9927  0EC8  1696               	bsf	22,5	;volatile
  9928                           
  9929                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
  9930  0EC9  1616               	bsf	22,4	;volatile
  9931  0ECA  0008               	return
  9932  0ECB                     __end_ofi1_i2c_driver_sendNACK:	
  9933                           
  9934                           	psect	text92
  9935  0E8D                     __ptext92:	
  9936 ;; *************** function i1_i2c_driver_resetBus *****************
  9937 ;; Defined at:
  9938 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;		None
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  1    wreg      void 
  9945 ;; Registers used:
  9946 ;;		None
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        0 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; This function calls:
  9959 ;;		Nothing
  9960 ;; This function is called by:
  9961 ;;		i1_do_I2C_RESET
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           
  9966                           ;psect for function i1_i2c_driver_resetBus
  9967  0E8D                     i1_i2c_driver_resetBus:	
  9968                           
  9969                           ;incstack = 0
  9970                           ; Regs used in i1_i2c_driver_resetBus: []
  9971  0E8D  0008               	return
  9972  0E8E                     __end_ofi1_i2c_driver_resetBus:	
  9973                           
  9974                           	psect	text93
  9975  0E9F                     __ptext93:	
  9976 ;; *************** function i1_i2c_driver_startRX *****************
  9977 ;; Defined at:
  9978 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;		None
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;		None
  9983 ;; Return value:  Size  Location     Type
  9984 ;;                  1    wreg      void 
  9985 ;; Registers used:
  9986 ;;		None
  9987 ;; Tracked objects:
  9988 ;;		On entry : 0/0
  9989 ;;		On exit  : 0/0
  9990 ;;		Unchanged: 0/0
  9991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;Total ram usage:        0 bytes
  9997 ;; Hardware stack levels used:    1
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		i1_do_I2C_RCEN
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function i1_i2c_driver_startRX
 10007  0E9F                     i1_i2c_driver_startRX:	
 10008                           
 10009                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
 10010                           
 10011                           ;incstack = 0
 10012                           ; Regs used in i1_i2c_driver_startRX: []
 10013  0E9F  0024               	movlb	4	; select bank4
 10014  0EA0  1596               	bsf	22,3	;volatile
 10015  0EA1  0008               	return
 10016  0EA2                     __end_ofi1_i2c_driver_startRX:	
 10017                           
 10018                           	psect	text94
 10019  0002                     __ptext94:	
 10020 ;; *************** function i1_i2c_restartWrite *****************
 10021 ;; Defined at:
 10022 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;  p               1    1[BANK0 ] PTR void 
 10025 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10026 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      enum E358
 10031 ;; Registers used:
 10032 ;;		wreg
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10038 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;Total ram usage:        1 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; This function calls:
 10045 ;;		Nothing
 10046 ;; This function is called by:
 10047 ;;		_do_I2C_DO_ADDRESS_NACK
 10048 ;;		_do_I2C_TX
 10049 ;;		_do_I2C_RX
 10050 ;;		_do_I2C_TX_EMPTY
 10051 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10052 ;;		i1_do_I2C_TX
 10053 ;;		i1_do_I2C_RX
 10054 ;;		i1_do_I2C_TX_EMPTY
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           
 10059                           ;psect for function i1_i2c_restartWrite
 10060  0002                     i1_i2c_restartWrite:	
 10061  0002                     i1l5068:	
 10062                           ;incstack = 0
 10063                           ; Regs used in i1_i2c_restartWrite: [wreg]
 10064                           
 10065                           
 10066                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
 10067  0002  3003               	movlw	3
 10068  0003  0008               	return
 10069  0004                     __end_ofi1_i2c_restartWrite:	
 10070                           
 10071                           	psect	text95
 10072  067C                     __ptext95:	
 10073 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 10074 ;; Defined at:
 10075 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;  p               1    1[BANK0 ] PTR void 
 10078 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10079 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      enum E358
 10084 ;; Registers used:
 10085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10091 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;Total ram usage:        1 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    2
 10098 ;; This function calls:
 10099 ;;		i1_i2c_setBuffer
 10100 ;;		i1_i2c_setDataCompleteCallback
 10101 ;; This function is called by:
 10102 ;;		_do_I2C_DO_ADDRESS_NACK
 10103 ;;		_do_I2C_TX
 10104 ;;		_do_I2C_RX
 10105 ;;		_do_I2C_TX_EMPTY
 10106 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10107 ;;		i1_do_I2C_TX
 10108 ;;		i1_do_I2C_RX
 10109 ;;		i1_do_I2C_TX_EMPTY
 10110 ;; This function uses a non-reentrant model
 10111 ;;
 10112                           
 10113                           
 10114                           ;psect for function i1_rdBlkRegCompleteHandler
 10115  067C                     i1_rdBlkRegCompleteHandler:	
 10116  067C                     i1l5062:	
 10117                           ;incstack = 0
 10118                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10119                           
 10120                           
 10121                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 10122  067C  0020               	movlb	0	; select bank0
 10123  067D  0858               	movf	i1rdBlkRegCompleteHandler@p,w
 10124  067E  0086               	movwf	6
 10125  067F  0187               	clrf	7
 10126  0680  3F40               	moviw [0]fsr1
 10127  0681  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10128  0682  3F41               	moviw [1]fsr1
 10129  0683  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10130  0684  0858               	movf	i1rdBlkRegCompleteHandler@p,w
 10131  0685  3E02               	addlw	2
 10132  0686  0086               	movwf	6
 10133  0687  0187               	clrf	7
 10134  0688  0801               	movf	1,w
 10135  0689  3187  2796  3186   	fcall	i1_i2c_setBuffer
 10136                           
 10137                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 10138  068C  3000               	movlw	0
 10139  068D  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10140  068E  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10141  068F  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10142  0690  3187  27BE         	fcall	i1_i2c_setDataCompleteCallback
 10143                           
 10144                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
 10145  0692  3002               	movlw	2
 10146  0693  0008               	return
 10147  0694                     __end_ofi1_rdBlkRegCompleteHandler:	
 10148                           
 10149                           	psect	text96
 10150  0744                     __ptext96:	
 10151 ;; *************** function i1_rd2RegCompleteHandler *****************
 10152 ;; Defined at:
 10153 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  p               1    1[BANK0 ] PTR void 
 10156 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10157 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;		None
 10160 ;; Return value:  Size  Location     Type
 10161 ;;                  1    wreg      enum E358
 10162 ;; Registers used:
 10163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10164 ;; Tracked objects:
 10165 ;;		On entry : 0/0
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10169 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;Total ram usage:        1 bytes
 10174 ;; Hardware stack levels used:    1
 10175 ;; Hardware stack levels required when called:    2
 10176 ;; This function calls:
 10177 ;;		i1_i2c_setBuffer
 10178 ;;		i1_i2c_setDataCompleteCallback
 10179 ;; This function is called by:
 10180 ;;		_do_I2C_DO_ADDRESS_NACK
 10181 ;;		_do_I2C_TX
 10182 ;;		_do_I2C_RX
 10183 ;;		_do_I2C_TX_EMPTY
 10184 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10185 ;;		i1_do_I2C_TX
 10186 ;;		i1_do_I2C_RX
 10187 ;;		i1_do_I2C_TX_EMPTY
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           
 10192                           ;psect for function i1_rd2RegCompleteHandler
 10193  0744                     i1_rd2RegCompleteHandler:	
 10194  0744                     i1l5046:	
 10195                           ;incstack = 0
 10196                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10197                           
 10198                           
 10199                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
 10200  0744  3002               	movlw	2
 10201  0745  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10202  0746  3000               	movlw	0
 10203  0747  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10204  0748  0020               	movlb	0	; select bank0
 10205  0749  0858               	movf	i1rd2RegCompleteHandler@p,w
 10206  074A  3187  2796  3187   	fcall	i1_i2c_setBuffer
 10207                           
 10208                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10209  074D  3000               	movlw	0
 10210  074E  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10211  074F  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10212  0750  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10213  0751  3187  27BE         	fcall	i1_i2c_setDataCompleteCallback
 10214                           
 10215                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
 10216  0753  3002               	movlw	2
 10217  0754  0008               	return
 10218  0755                     __end_ofi1_rd2RegCompleteHandler:	
 10219                           
 10220                           	psect	text97
 10221  0755                     __ptext97:	
 10222 ;; *************** function i1_rd1RegCompleteHandler *****************
 10223 ;; Defined at:
 10224 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;  p               1    1[BANK0 ] PTR void 
 10227 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10228 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;		None
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  1    wreg      enum E358
 10233 ;; Registers used:
 10234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10240 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;Total ram usage:        1 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; Hardware stack levels required when called:    2
 10247 ;; This function calls:
 10248 ;;		i1_i2c_setBuffer
 10249 ;;		i1_i2c_setDataCompleteCallback
 10250 ;; This function is called by:
 10251 ;;		_do_I2C_DO_ADDRESS_NACK
 10252 ;;		_do_I2C_TX
 10253 ;;		_do_I2C_RX
 10254 ;;		_do_I2C_TX_EMPTY
 10255 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10256 ;;		i1_do_I2C_TX
 10257 ;;		i1_do_I2C_RX
 10258 ;;		i1_do_I2C_TX_EMPTY
 10259 ;; This function uses a non-reentrant model
 10260 ;;
 10261                           
 10262                           
 10263                           ;psect for function i1_rd1RegCompleteHandler
 10264  0755                     i1_rd1RegCompleteHandler:	
 10265  0755                     i1l5038:	
 10266                           ;incstack = 0
 10267                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10268                           
 10269                           
 10270                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
 10271  0755  3001               	movlw	1
 10272  0756  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10273  0757  3000               	movlw	0
 10274  0758  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10275  0759  0020               	movlb	0	; select bank0
 10276  075A  0858               	movf	i1rd1RegCompleteHandler@p,w
 10277  075B  3187  2796  3187   	fcall	i1_i2c_setBuffer
 10278                           
 10279                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10280  075E  3000               	movlw	0
 10281  075F  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10282  0760  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10283  0761  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10284  0762  3187  27BE         	fcall	i1_i2c_setDataCompleteCallback
 10285                           
 10286                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
 10287  0764  3002               	movlw	2
 10288  0765  0008               	return
 10289  0766                     __end_ofi1_rd1RegCompleteHandler:	
 10290                           
 10291                           	psect	text98
 10292  0766                     __ptext98:	
 10293 ;; *************** function i1_wr1RegCompleteHandler *****************
 10294 ;; Defined at:
 10295 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;  p               1    1[BANK0 ] PTR void 
 10298 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10299 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  1    wreg      enum E358
 10304 ;; Registers used:
 10305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10311 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;Total ram usage:        1 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    2
 10318 ;; This function calls:
 10319 ;;		i1_i2c_setBuffer
 10320 ;;		i1_i2c_setDataCompleteCallback
 10321 ;; This function is called by:
 10322 ;;		_do_I2C_DO_ADDRESS_NACK
 10323 ;;		_do_I2C_TX
 10324 ;;		_do_I2C_RX
 10325 ;;		_do_I2C_TX_EMPTY
 10326 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10327 ;;		i1_do_I2C_TX
 10328 ;;		i1_do_I2C_RX
 10329 ;;		i1_do_I2C_TX_EMPTY
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           
 10334                           ;psect for function i1_wr1RegCompleteHandler
 10335  0766                     i1_wr1RegCompleteHandler:	
 10336  0766                     i1l5030:	
 10337                           ;incstack = 0
 10338                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10339                           
 10340                           
 10341                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
 10342  0766  3001               	movlw	1
 10343  0767  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10344  0768  3000               	movlw	0
 10345  0769  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10346  076A  0020               	movlb	0	; select bank0
 10347  076B  0858               	movf	i1wr1RegCompleteHandler@p,w
 10348  076C  3187  2796  3187   	fcall	i1_i2c_setBuffer
 10349                           
 10350                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10351  076F  3000               	movlw	0
 10352  0770  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10353  0771  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10354  0772  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10355  0773  3187  27BE         	fcall	i1_i2c_setDataCompleteCallback
 10356                           
 10357                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
 10358  0775  3004               	movlw	4
 10359  0776  0008               	return
 10360  0777                     __end_ofi1_wr1RegCompleteHandler:	
 10361                           
 10362                           	psect	text99
 10363  0E91                     __ptext99:	
 10364 ;; *************** function i1_returnReset *****************
 10365 ;; Defined at:
 10366 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  p               1    1[BANK0 ] PTR void 
 10369 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10370 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;		None
 10373 ;; Return value:  Size  Location     Type
 10374 ;;                  1    wreg      enum E3257
 10375 ;; Registers used:
 10376 ;;		wreg
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10382 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;Total ram usage:        1 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; This function calls:
 10389 ;;		Nothing
 10390 ;; This function is called by:
 10391 ;;		_do_I2C_DO_ADDRESS_NACK
 10392 ;;		_do_I2C_TX
 10393 ;;		_do_I2C_RX
 10394 ;;		_do_I2C_TX_EMPTY
 10395 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10396 ;;		i1_do_I2C_TX
 10397 ;;		i1_do_I2C_RX
 10398 ;;		i1_do_I2C_TX_EMPTY
 10399 ;; This function uses a non-reentrant model
 10400 ;;
 10401                           
 10402                           
 10403                           ;psect for function i1_returnReset
 10404  0E91                     i1_returnReset:	
 10405  0E91                     i1l5026:	
 10406                           ;incstack = 0
 10407                           ; Regs used in i1_returnReset: [wreg]
 10408                           
 10409                           
 10410                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 10411  0E91  3005               	movlw	5
 10412  0E92  0008               	return
 10413  0E93                     __end_ofi1_returnReset:	
 10414                           
 10415                           	psect	text100
 10416  0E8F                     __ptext100:	
 10417 ;; *************** function i1_returnStop *****************
 10418 ;; Defined at:
 10419 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  p               1    1[BANK0 ] PTR void 
 10422 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10423 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  1    wreg      enum E3257
 10428 ;; Registers used:
 10429 ;;		wreg
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10435 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;Total ram usage:        1 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; This function calls:
 10442 ;;		Nothing
 10443 ;; This function is called by:
 10444 ;;		i1_setCallBack
 10445 ;;		_do_I2C_DO_ADDRESS_NACK
 10446 ;;		_do_I2C_TX
 10447 ;;		_do_I2C_RX
 10448 ;;		_do_I2C_TX_EMPTY
 10449 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10450 ;;		i1_do_I2C_TX
 10451 ;;		i1_do_I2C_RX
 10452 ;;		i1_do_I2C_TX_EMPTY
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           
 10457                           ;psect for function i1_returnStop
 10458  0E8F                     i1_returnStop:	
 10459  0E8F                     i1l5022:	
 10460                           ;incstack = 0
 10461                           ; Regs used in i1_returnStop: [wreg]
 10462                           
 10463                           
 10464                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 10465  0E8F  3001               	movlw	1
 10466  0E90  0008               	return
 10467  0E91                     __end_ofi1_returnStop:	
 10468                           
 10469                           	psect	text101
 10470  0777                     __ptext101:	
 10471 ;; *************** function i1_wr2RegCompleteHandler *****************
 10472 ;; Defined at:
 10473 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;  p               1    1[BANK0 ] PTR void 
 10476 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10477 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      enum E358
 10482 ;; Registers used:
 10483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10489 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;Total ram usage:        1 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    2
 10496 ;; This function calls:
 10497 ;;		i1_i2c_setBuffer
 10498 ;;		i1_i2c_setDataCompleteCallback
 10499 ;; This function is called by:
 10500 ;;		_do_I2C_DO_ADDRESS_NACK
 10501 ;;		_do_I2C_TX
 10502 ;;		_do_I2C_RX
 10503 ;;		_do_I2C_TX_EMPTY
 10504 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10505 ;;		i1_do_I2C_TX
 10506 ;;		i1_do_I2C_RX
 10507 ;;		i1_do_I2C_TX_EMPTY
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511                           
 10512                           ;psect for function i1_wr2RegCompleteHandler
 10513  0777                     i1_wr2RegCompleteHandler:	
 10514  0777                     i1l5054:	
 10515                           ;incstack = 0
 10516                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10517                           
 10518                           
 10519                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
 10520  0777  3002               	movlw	2
 10521  0778  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10522  0779  3000               	movlw	0
 10523  077A  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10524  077B  0020               	movlb	0	; select bank0
 10525  077C  0858               	movf	i1wr2RegCompleteHandler@p,w
 10526  077D  3187  2796  3187   	fcall	i1_i2c_setBuffer
 10527                           
 10528                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 10529  0780  3000               	movlw	0
 10530  0781  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10531  0782  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10532  0783  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10533  0784  3187  27BE         	fcall	i1_i2c_setDataCompleteCallback
 10534                           
 10535                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
 10536  0786  3004               	movlw	4
 10537  0787  0008               	return
 10538  0788                     __end_ofi1_wr2RegCompleteHandler:	
 10539                           
 10540                           	psect	text102
 10541  07BE                     __ptext102:	
 10542 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 10543 ;; Defined at:
 10544 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10545 ;; Parameters:    Size  Location     Type
 10546 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10547 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10548 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10549 ;;  p               1    7[COMMON] PTR void 
 10550 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10551 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;		None
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  1    wreg      void 
 10556 ;; Registers used:
 10557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10563 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Totals:         3       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;Total ram usage:        4 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    1
 10570 ;; This function calls:
 10571 ;;		i1_setCallBack
 10572 ;; This function is called by:
 10573 ;;		i1_wr1RegCompleteHandler
 10574 ;;		i1_rd1RegCompleteHandler
 10575 ;;		i1_rd2RegCompleteHandler
 10576 ;;		i1_wr2RegCompleteHandler
 10577 ;;		i1_rdBlkRegCompleteHandler
 10578 ;; This function uses a non-reentrant model
 10579 ;;
 10580                           
 10581                           
 10582                           ;psect for function i1_i2c_setDataCompleteCallback
 10583  07BE                     i1_i2c_setDataCompleteCallback:	
 10584                           
 10585                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
 10586                           
 10587                           ;incstack = 0
 10588                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 10589  07BE  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 10590  07BF  00F1               	movwf	i1setCallBack@cb+1
 10591  07C0  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 10592  07C1  00F0               	movwf	i1setCallBack@cb
 10593  07C2  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 10594  07C3  0020               	movlb	0	; select bank0
 10595  07C4  00D7               	movwf	??i1_i2c_setDataCompleteCallback
 10596  07C5  0857               	movf	??i1_i2c_setDataCompleteCallback,w
 10597  07C6  00F2               	movwf	i1setCallBack@p
 10598  07C7  3000               	movlw	0
 10599  07C8  3185  25C6         	fcall	i1_setCallBack
 10600  07CA  0008               	return
 10601  07CB                     __end_ofi1_i2c_setDataCompleteCallback:	
 10602                           
 10603                           	psect	text103
 10604  05C6                     __ptext103:	
 10605 ;; *************** function i1_setCallBack *****************
 10606 ;; Defined at:
 10607 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10608 ;; Parameters:    Size  Location     Type
 10609 ;;  idx             1    wreg     enum E3429
 10610 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 10611 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10612 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 10613 ;;  p               1    2[COMMON] PTR void 
 10614 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10615 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;  idx             1    4[COMMON] enum E3429
 10618 ;; Return value:  Size  Location     Type
 10619 ;;                  1    wreg      void 
 10620 ;; Registers used:
 10621 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10627 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;Total ram usage:        5 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		i1_i2c_setDataCompleteCallback
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function i1_setCallBack
 10642  05C6                     i1_setCallBack:	
 10643                           
 10644                           ;incstack = 0
 10645                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 10646                           ;i1setCallBack@idx stored from wreg
 10647  05C6  00F4               	movwf	i1setCallBack@idx
 10648                           
 10649                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
 10650  05C7  0870               	movf	i1setCallBack@cb,w
 10651  05C8  0471               	iorwf	i1setCallBack@cb+1,w
 10652  05C9  1903               	btfsc	3,2
 10653  05CA  2DDC               	goto	i1l4922
 10654                           
 10655                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
 10656  05CB  3574               	lslf	i1setCallBack@idx,w
 10657  05CC  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10658  05CD  0086               	movwf	6
 10659  05CE  0187               	clrf	7
 10660  05CF  0870               	movf	i1setCallBack@cb,w
 10661  05D0  3FC0               	movwi [0]fsr1
 10662  05D1  0871               	movf	i1setCallBack@cb+1,w
 10663  05D2  3FC1               	movwi [1]fsr1
 10664                           
 10665                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
 10666  05D3  0872               	movf	i1setCallBack@p,w
 10667  05D4  00F3               	movwf	??i1_setCallBack
 10668  05D5  0874               	movf	i1setCallBack@idx,w
 10669  05D6  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10670  05D7  0086               	movwf	6
 10671  05D8  0187               	clrf	7
 10672  05D9  0873               	movf	??i1_setCallBack,w
 10673  05DA  0081               	movwf	1
 10674                           
 10675                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
 10676  05DB  0008               	return
 10677  05DC                     i1l4922:	
 10678                           
 10679                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
 10680  05DC  3574               	lslf	i1setCallBack@idx,w
 10681  05DD  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10682  05DE  0086               	movwf	6
 10683  05DF  0187               	clrf	7
 10684  05E0  3014               	movlw	low _returnStop
 10685  05E1  3FC0               	movwi [0]fsr1
 10686  05E2  300F               	movlw	high _returnStop
 10687  05E3  3FC1               	movwi [1]fsr1
 10688                           
 10689                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
 10690  05E4  0874               	movf	i1setCallBack@idx,w
 10691  05E5  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10692  05E6  0086               	movwf	6
 10693  05E7  0187               	clrf	7
 10694  05E8  0181               	clrf	1
 10695  05E9  0008               	return
 10696  05EA                     __end_ofi1_setCallBack:	
 10697                           
 10698                           	psect	text104
 10699  0796                     __ptext104:	
 10700 ;; *************** function i1_i2c_setBuffer *****************
 10701 ;; Defined at:
 10702 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;  buffer          1    wreg     PTR void 
 10705 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 10706 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 10707 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), rtcData(9), 
 10708 ;;  bufferSize      2    0[COMMON] unsigned int 
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  buffer          1    3[COMMON] PTR void 
 10711 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 10712 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 10713 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), rtcData(9), 
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  1    wreg      void 
 10716 ;; Registers used:
 10717 ;;		wreg
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10723 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;Total ram usage:        4 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; This function calls:
 10730 ;;		Nothing
 10731 ;; This function is called by:
 10732 ;;		i1_wr1RegCompleteHandler
 10733 ;;		i1_rd1RegCompleteHandler
 10734 ;;		i1_rd2RegCompleteHandler
 10735 ;;		i1_wr2RegCompleteHandler
 10736 ;;		i1_rdBlkRegCompleteHandler
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           
 10741                           ;psect for function i1_i2c_setBuffer
 10742  0796                     i1_i2c_setBuffer:	
 10743                           
 10744                           ;incstack = 0
 10745                           ; Regs used in i1_i2c_setBuffer: [wreg]
 10746                           ;i1i2c_setBuffer@buffer stored from wreg
 10747  0796  00F3               	movwf	i1i2c_setBuffer@buffer
 10748                           
 10749                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
 10750  0797  0020               	movlb	0	; select bank0
 10751  0798  1D20               	btfss	_i2c_status,2
 10752  0799  0008               	return
 10753                           
 10754                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
 10755  079A  0873               	movf	i1i2c_setBuffer@buffer,w
 10756  079B  00F2               	movwf	??i1_i2c_setBuffer
 10757  079C  0872               	movf	??i1_i2c_setBuffer,w
 10758  079D  00A2               	movwf	low ((_i2c_status| 0+2))
 10759                           
 10760                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
 10761  079E  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 10762  079F  00A4               	movwf	_i2c_status+4
 10763  07A0  0870               	movf	i1i2c_setBuffer@bufferSize,w
 10764  07A1  00A3               	movwf	_i2c_status+3
 10765                           
 10766                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
 10767  07A2  1120               	bcf	_i2c_status,2
 10768  07A3  0008               	return
 10769  07A4                     __end_ofi1_i2c_setBuffer:	
 10770                           
 10771                           	psect	text105
 10772  0E9C                     __ptext105:	
 10773 ;; *************** function i1_i2c_driver_stop *****************
 10774 ;; Defined at:
 10775 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;		None
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;		None
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  1    wreg      void 
 10782 ;; Registers used:
 10783 ;;		None
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:        0 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; This function calls:
 10796 ;;		Nothing
 10797 ;; This function is called by:
 10798 ;;		i1_do_I2C_SEND_STOP
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           
 10803                           ;psect for function i1_i2c_driver_stop
 10804  0E9C                     i1_i2c_driver_stop:	
 10805                           
 10806                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
 10807                           
 10808                           ;incstack = 0
 10809                           ; Regs used in i1_i2c_driver_stop: []
 10810  0E9C  0024               	movlb	4	; select bank4
 10811  0E9D  1516               	bsf	22,2	;volatile
 10812  0E9E  0008               	return
 10813  0E9F                     __end_ofi1_i2c_driver_stop:	
 10814                           
 10815                           	psect	text106
 10816  0E99                     __ptext106:	
 10817 ;; *************** function i1_i2c_driver_restart *****************
 10818 ;; Defined at:
 10819 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;		None
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;		None
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      void 
 10826 ;; Registers used:
 10827 ;;		None
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;Total ram usage:        0 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; This function calls:
 10840 ;;		Nothing
 10841 ;; This function is called by:
 10842 ;;		i1_do_I2C_SEND_RESTART_READ
 10843 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10844 ;;		i1_do_I2C_SEND_RESTART
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           
 10849                           ;psect for function i1_i2c_driver_restart
 10850  0E99                     i1_i2c_driver_restart:	
 10851                           
 10852                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
 10853                           
 10854                           ;incstack = 0
 10855                           ; Regs used in i1_i2c_driver_restart: []
 10856  0E99  0024               	movlb	4	; select bank4
 10857  0E9A  1496               	bsf	22,1	;volatile
 10858  0E9B  0008               	return
 10859  0E9C                     __end_ofi1_i2c_driver_restart:	
 10860                           
 10861                           	psect	text107
 10862  0EC3                     __ptext107:	
 10863 ;; *************** function i1_i2c_driver_sendACK *****************
 10864 ;; Defined at:
 10865 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;		None
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;		None
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  1    wreg      void 
 10872 ;; Registers used:
 10873 ;;		None
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;Total ram usage:        0 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; This function calls:
 10886 ;;		Nothing
 10887 ;; This function is called by:
 10888 ;;		i1_do_I2C_DO_ACK
 10889 ;;		i1_do_I2C_RX
 10890 ;; This function uses a non-reentrant model
 10891 ;;
 10892                           
 10893                           
 10894                           ;psect for function i1_i2c_driver_sendACK
 10895  0EC3                     i1_i2c_driver_sendACK:	
 10896                           
 10897                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
 10898                           
 10899                           ;incstack = 0
 10900                           ; Regs used in i1_i2c_driver_sendACK: []
 10901  0EC3  0024               	movlb	4	; select bank4
 10902  0EC4  1296               	bcf	22,5	;volatile
 10903                           
 10904                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
 10905  0EC5  1616               	bsf	22,4	;volatile
 10906  0EC6  0008               	return
 10907  0EC7                     __end_ofi1_i2c_driver_sendACK:	
 10908                           
 10909                           	psect	text108
 10910  0E96                     __ptext108:	
 10911 ;; *************** function _i2c_busCollisionISR *****************
 10912 ;; Defined at:
 10913 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;		None
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;		None
 10918 ;; Return value:  Size  Location     Type
 10919 ;;                  1    wreg      void 
 10920 ;; Registers used:
 10921 ;;		status,2, status,0, pclath, cstack
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;Total ram usage:        0 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; Hardware stack levels required when called:    1
 10934 ;; This function calls:
 10935 ;;		_i2c_driver_clearBusCollision
 10936 ;; This function is called by:
 10937 ;;		_i2c_open
 10938 ;;		_INTERRUPT_InterruptManager
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           
 10943                           ;psect for function _i2c_busCollisionISR
 10944  0E96                     _i2c_busCollisionISR:	
 10945                           
 10946                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c_driver_clearBusCollision();
 10947                           
 10948                           ;incstack = 0
 10949                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 10950  0E96  318E  2693         	fcall	_i2c_driver_clearBusCollision
 10951  0E98  0008               	return
 10952  0E99                     __end_of_i2c_busCollisionISR:	
 10953                           
 10954                           	psect	text109
 10955  0E93                     __ptext109:	
 10956 ;; *************** function _i2c_driver_clearBusCollision *****************
 10957 ;; Defined at:
 10958 ;;		line 254 in file "mcc_generated_files/i2c_driver.c"
 10959 ;; Parameters:    Size  Location     Type
 10960 ;;		None
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;		None
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  1    wreg      void 
 10965 ;; Registers used:
 10966 ;;		None
 10967 ;; Tracked objects:
 10968 ;;		On entry : 0/0
 10969 ;;		On exit  : 0/0
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;Total ram usage:        0 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; This function calls:
 10979 ;;		Nothing
 10980 ;; This function is called by:
 10981 ;;		_i2c_busCollisionISR
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           
 10986                           ;psect for function _i2c_driver_clearBusCollision
 10987  0E93                     _i2c_driver_clearBusCollision:	
 10988                           
 10989                           ;mcc_generated_files/i2c_driver.c: 256:     PIR2bits.BCLIF = 0;
 10990                           
 10991                           ;incstack = 0
 10992                           ; Regs used in _i2c_driver_clearBusCollision: []
 10993  0E93  0020               	movlb	0	; select bank0
 10994  0E94  1192               	bcf	18,3	;volatile
 10995  0E95  0008               	return
 10996  0E96                     __end_of_i2c_driver_clearBusCollision:	
 10997                           
 10998                           	psect	text110
 10999  0F3E                     __ptext110:	
 11000 ;; *************** function _TMR0_ISR *****************
 11001 ;; Defined at:
 11002 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;		None
 11007 ;; Return value:  Size  Location     Type
 11008 ;;                  1    wreg      void 
 11009 ;; Registers used:
 11010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;Total ram usage:        0 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:    2
 11023 ;; This function calls:
 11024 ;;		_TMR0_CallBack
 11025 ;; This function is called by:
 11026 ;;		_INTERRUPT_InterruptManager
 11027 ;; This function uses a non-reentrant model
 11028 ;;
 11029                           
 11030                           
 11031                           ;psect for function _TMR0_ISR
 11032  0F3E                     _TMR0_ISR:	
 11033                           
 11034                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 11035                           
 11036                           ;incstack = 0
 11037                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11038  0F3E  110B               	bcf	11,2	;volatile
 11039                           
 11040                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 11041  0F3F  087D               	movf	_timer0ReloadVal,w	;volatile
 11042  0F40  0020               	movlb	0	; select bank0
 11043  0F41  0095               	movwf	21	;volatile
 11044                           
 11045                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
 11046  0F42  318F  27AD         	fcall	_TMR0_CallBack
 11047  0F44  0008               	return
 11048  0F45                     __end_of_TMR0_ISR:	
 11049                           
 11050                           	psect	text111
 11051  0FAD                     __ptext111:	
 11052 ;; *************** function _TMR0_CallBack *****************
 11053 ;; Defined at:
 11054 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 11055 ;; Parameters:    Size  Location     Type
 11056 ;;		None
 11057 ;; Auto vars:     Size  Location     Type
 11058 ;;		None
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  1    wreg      void 
 11061 ;; Registers used:
 11062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;Total ram usage:        0 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    1
 11075 ;; This function calls:
 11076 ;;		Absolute function
 11077 ;;		_TMR0_DefaultInterruptHandler
 11078 ;;		_displayRefreshISR
 11079 ;; This function is called by:
 11080 ;;		_TMR0_ISR
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           
 11085                           ;psect for function _TMR0_CallBack
 11086  0FAD                     _TMR0_CallBack:	
 11087                           
 11088                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
 11089                           
 11090                           ;incstack = 0
 11091                           ; Regs used in _TMR0_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11092  0FAD  0878               	movf	_TMR0_InterruptHandler,w
 11093  0FAE  0479               	iorwf	_TMR0_InterruptHandler+1,w
 11094  0FAF  1903               	btfsc	3,2
 11095  0FB0  0008               	return
 11096                           
 11097                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
 11098  0FB1  0879               	movf	_TMR0_InterruptHandler+1,w
 11099  0FB2  008A               	movwf	10
 11100  0FB3  0878               	movf	_TMR0_InterruptHandler,w
 11101  0FB4  000A               	callw
 11102  0FB5  318F               	pagesel	$
 11103  0FB6  0008               	return
 11104  0FB7                     __end_of_TMR0_CallBack:	
 11105                           
 11106                           	psect	text112
 11107  0E8C                     __ptext112:	
 11108 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11109 ;; Defined at:
 11110 ;;		line 137 in file "mcc_generated_files/tmr0.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;		None
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;		None
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		None
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;Total ram usage:        0 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; This function calls:
 11131 ;;		Nothing
 11132 ;; This function is called by:
 11133 ;;		_TMR0_Initialize
 11134 ;;		_TMR0_CallBack
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           
 11139                           ;psect for function _TMR0_DefaultInterruptHandler
 11140  0E8C                     _TMR0_DefaultInterruptHandler:	
 11141                           
 11142                           ;incstack = 0
 11143                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11144  0E8C  0008               	return
 11145  0E8D                     __end_of_TMR0_DefaultInterruptHandler:	
 11146                           
 11147                           	psect	text113
 11148  01A5                     __ptext113:	
 11149 ;; *************** function _displayRefreshISR *****************
 11150 ;; Defined at:
 11151 ;;		line 316 in file "main.c"
 11152 ;; Parameters:    Size  Location     Type
 11153 ;;		None
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;		None
 11156 ;; Return value:  Size  Location     Type
 11157 ;;                  1    wreg      void 
 11158 ;; Registers used:
 11159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11160 ;; Tracked objects:
 11161 ;;		On entry : 0/0
 11162 ;;		On exit  : 0/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;Total ram usage:        2 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_main
 11175 ;;		_TMR0_CallBack
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           
 11180                           ;psect for function _displayRefreshISR
 11181  01A5                     _displayRefreshISR:	
 11182                           
 11183                           ;main.c: 317:     static uint8_t i;;main.c: 318:     i &= 0x03;
 11184                           
 11185                           ;incstack = 0
 11186                           ; Regs used in _displayRefreshISR: [wreg-fsr1h+status,2+status,0]
 11187  01A5  3003               	movlw	3
 11188  01A6  00F0               	movwf	??_displayRefreshISR
 11189  01A7  0870               	movf	??_displayRefreshISR,w
 11190  01A8  05FC               	andwf	displayRefreshISR@i,f
 11191                           
 11192                           ;main.c: 319:     LATD = displayBuff[i];
 11193  01A9  087C               	movf	displayRefreshISR@i,w
 11194  01AA  3E45               	addlw	(low (_displayBuff| 0))& (0+255)
 11195  01AB  0086               	movwf	6
 11196  01AC  0187               	clrf	7
 11197  01AD  0801               	movf	1,w
 11198  01AE  0022               	movlb	2	; select bank2
 11199  01AF  008F               	movwf	15	;volatile
 11200                           
 11201                           ;main.c: 320:     switch(i){
 11202  01B0  29BD               	goto	i1l3552
 11203  01B1                     i1l378:	
 11204                           ;main.c: 322:             do { LATAbits.LATA3 = 0; } while(0);
 11205                           
 11206  01B1  118C               	bcf	12,3	;volatile
 11207                           
 11208                           ;main.c: 323:             do { LATEbits.LATE1 = 1; } while(0);
 11209  01B2  1490               	bsf	16,1	;volatile
 11210  01B3  29D3               	goto	i1l3554
 11211  01B4                     i1l384:	
 11212                           ;main.c: 326:             do { LATEbits.LATE1 = 0; } while(0);
 11213                           
 11214  01B4  1090               	bcf	16,1	;volatile
 11215                           
 11216                           ;main.c: 327:             do { LATCbits.LATC1 = 1; } while(0);
 11217  01B5  148E               	bsf	14,1	;volatile
 11218  01B6  29D3               	goto	i1l3554
 11219  01B7                     i1l389:	
 11220                           ;main.c: 330:             do { LATCbits.LATC1 = 0; } while(0);
 11221                           
 11222  01B7  108E               	bcf	14,1	;volatile
 11223                           
 11224                           ;main.c: 331:             do { LATAbits.LATA4 = 1; } while(0);
 11225  01B8  160C               	bsf	12,4	;volatile
 11226  01B9  29D3               	goto	i1l3554
 11227  01BA                     i1l394:	
 11228                           ;main.c: 334:             do { LATAbits.LATA4 = 0; } while(0);
 11229                           
 11230  01BA  120C               	bcf	12,4	;volatile
 11231                           
 11232                           ;main.c: 335:             do { LATAbits.LATA3 = 1; } while(0);
 11233  01BB  158C               	bsf	12,3	;volatile
 11234  01BC  29D3               	goto	i1l3554
 11235  01BD                     i1l3552:	
 11236  01BD  087C               	movf	displayRefreshISR@i,w
 11237  01BE  00F0               	movwf	??_displayRefreshISR
 11238  01BF  01F1               	clrf	??_displayRefreshISR+1
 11239                           
 11240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11241                           ; Switch size 1, requested type "simple"
 11242                           ; Number of cases is 1, Range of values is 0 to 0
 11243                           ; switch strategies available:
 11244                           ; Name         Instructions Cycles
 11245                           ; simple_byte            4     3 (average)
 11246                           ; direct_byte            8     6 (fixed)
 11247                           ; jumptable            260     6 (fixed)
 11248                           ;	Chosen strategy is simple_byte
 11249  01C0  0871               	movf	??_displayRefreshISR+1,w
 11250  01C1  3A00               	xorlw	0	; case 0
 11251  01C2  1903               	skipnz
 11252  01C3  29C5               	goto	i1l5890
 11253  01C4  29D3               	goto	i1l3554
 11254  01C5                     i1l5890:	
 11255                           
 11256                           ; Switch size 1, requested type "simple"
 11257                           ; Number of cases is 4, Range of values is 0 to 3
 11258                           ; switch strategies available:
 11259                           ; Name         Instructions Cycles
 11260                           ; simple_byte           13     7 (average)
 11261                           ; direct_byte           14     6 (fixed)
 11262                           ; jumptable            260     6 (fixed)
 11263                           ;	Chosen strategy is simple_byte
 11264  01C5  0870               	movf	??_displayRefreshISR,w
 11265  01C6  3A00               	xorlw	0	; case 0
 11266  01C7  1903               	skipnz
 11267  01C8  29B1               	goto	i1l378
 11268  01C9  3A01               	xorlw	1	; case 1
 11269  01CA  1903               	skipnz
 11270  01CB  29B4               	goto	i1l384
 11271  01CC  3A03               	xorlw	3	; case 2
 11272  01CD  1903               	skipnz
 11273  01CE  29B7               	goto	i1l389
 11274  01CF  3A01               	xorlw	1	; case 3
 11275  01D0  1903               	skipnz
 11276  01D1  29BA               	goto	i1l394
 11277  01D2  29D3               	goto	i1l3554
 11278  01D3                     i1l3554:	
 11279                           
 11280                           ;main.c: 339:     i++;
 11281  01D3  3001               	movlw	1
 11282  01D4  00F0               	movwf	??_displayRefreshISR
 11283  01D5  0870               	movf	??_displayRefreshISR,w
 11284  01D6  07FC               	addwf	displayRefreshISR@i,f
 11285                           
 11286                           ;main.c: 342:     if(flag_button_press_count[0] != 0){
 11287  01D7  0020               	movlb	0	; select bank0
 11288  01D8  0841               	movf	_flag_button_press_count,w
 11289  01D9  1903               	btfsc	3,2
 11290  01DA  29E3               	goto	i1l398
 11291                           
 11292                           ;main.c: 343:   if(button_press_count[0] < 200) button_press_count[0]++;
 11293  01DB  30C8               	movlw	200
 11294  01DC  023D               	subwf	_button_press_count,w
 11295  01DD  1803               	skipnc
 11296  01DE  29E3               	goto	i1l398
 11297  01DF  3001               	movlw	1
 11298  01E0  00F0               	movwf	??_displayRefreshISR
 11299  01E1  0870               	movf	??_displayRefreshISR,w
 11300  01E2  07BD               	addwf	_button_press_count,f
 11301  01E3                     i1l398:	
 11302                           ;main.c: 344:  }
 11303                           
 11304                           
 11305                           ;main.c: 345:     if(flag_button_press_count[1] != 0){
 11306  01E3  0842               	movf	_flag_button_press_count+1,w
 11307  01E4  1903               	btfsc	3,2
 11308  01E5  29EE               	goto	i1l400
 11309                           
 11310                           ;main.c: 346:   if(button_press_count[1] < 200) button_press_count[1]++;
 11311  01E6  30C8               	movlw	200
 11312  01E7  023E               	subwf	_button_press_count+1,w
 11313  01E8  1803               	skipnc
 11314  01E9  29EE               	goto	i1l400
 11315  01EA  3001               	movlw	1
 11316  01EB  00F0               	movwf	??_displayRefreshISR
 11317  01EC  0870               	movf	??_displayRefreshISR,w
 11318  01ED  07BE               	addwf	_button_press_count+1,f
 11319  01EE                     i1l400:	
 11320                           ;main.c: 347:  }
 11321                           
 11322                           
 11323                           ;main.c: 348:     if(flag_button_press_count[2] != 0){
 11324  01EE  0843               	movf	_flag_button_press_count+2,w
 11325  01EF  1903               	btfsc	3,2
 11326  01F0  29F9               	goto	i1l402
 11327                           
 11328                           ;main.c: 349:   if(button_press_count[2] < 200) button_press_count[2]++;
 11329  01F1  30C8               	movlw	200
 11330  01F2  023F               	subwf	_button_press_count+2,w
 11331  01F3  1803               	skipnc
 11332  01F4  29F9               	goto	i1l402
 11333  01F5  3001               	movlw	1
 11334  01F6  00F0               	movwf	??_displayRefreshISR
 11335  01F7  0870               	movf	??_displayRefreshISR,w
 11336  01F8  07BF               	addwf	_button_press_count+2,f
 11337  01F9                     i1l402:	
 11338                           ;main.c: 350:  }
 11339                           
 11340                           
 11341                           ;main.c: 351:     if(flag_button_press_count[3] != 0){
 11342  01F9  0844               	movf	_flag_button_press_count+3,w
 11343  01FA  1903               	btfsc	3,2
 11344  01FB  0008               	return
 11345                           
 11346                           ;main.c: 352:   if(button_press_count[3] < 200) button_press_count[3]++;
 11347  01FC  30C8               	movlw	200
 11348  01FD  0240               	subwf	_button_press_count+3,w
 11349  01FE  1803               	skipnc
 11350  01FF  0008               	return
 11351  0200  3001               	movlw	1
 11352  0201  00F0               	movwf	??_displayRefreshISR
 11353  0202  0870               	movf	??_displayRefreshISR,w
 11354  0203  07C0               	addwf	_button_press_count+3,f
 11355  0204  0008               	return
 11356  0205                     __end_of_displayRefreshISR:	
 11357                           
 11358                           	psect	text114
 11359  0EFC                     __ptext114:	
 11360 ;; *************** function _PIN_MANAGER_IOC *****************
 11361 ;; Defined at:
 11362 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;		None
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;		None
 11367 ;; Return value:  Size  Location     Type
 11368 ;;                  1    wreg      void 
 11369 ;; Registers used:
 11370 ;;		wreg, status,2, status,0, pclath, cstack
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;Total ram usage:        0 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; Hardware stack levels required when called:    2
 11383 ;; This function calls:
 11384 ;;		_IOCBF4_ISR
 11385 ;; This function is called by:
 11386 ;;		_INTERRUPT_InterruptManager
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           
 11391                           ;psect for function _PIN_MANAGER_IOC
 11392  0EFC                     _PIN_MANAGER_IOC:	
 11393                           
 11394                           ;mcc_generated_files/pin_manager.c: 121:     if(IOCBFbits.IOCBF4 == 1)
 11395                           
 11396                           ;incstack = 0
 11397                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 11398  0EFC  0027               	movlb	7	; select bank7
 11399  0EFD  1E16               	btfss	22,4	;volatile
 11400  0EFE  0008               	return
 11401                           
 11402                           ;mcc_generated_files/pin_manager.c: 122:     {;mcc_generated_files/pin_manager.c: 123:  
      +                                 IOCBF4_ISR();
 11403  0EFF  3187  27CB         	fcall	_IOCBF4_ISR
 11404  0F01  0008               	return
 11405  0F02                     __end_of_PIN_MANAGER_IOC:	
 11406                           
 11407                           	psect	text115
 11408  07CB                     __ptext115:	
 11409 ;; *************** function _IOCBF4_ISR *****************
 11410 ;; Defined at:
 11411 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
 11412 ;; Parameters:    Size  Location     Type
 11413 ;;		None
 11414 ;; Auto vars:     Size  Location     Type
 11415 ;;		None
 11416 ;; Return value:  Size  Location     Type
 11417 ;;                  1    wreg      void 
 11418 ;; Registers used:
 11419 ;;		wreg, status,2, status,0, pclath, cstack
 11420 ;; Tracked objects:
 11421 ;;		On entry : 0/0
 11422 ;;		On exit  : 0/0
 11423 ;;		Unchanged: 0/0
 11424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;Total ram usage:        0 bytes
 11430 ;; Hardware stack levels used:    1
 11431 ;; Hardware stack levels required when called:    1
 11432 ;; This function calls:
 11433 ;;		Absolute function
 11434 ;;		_IOCBF4_DefaultInterruptHandler
 11435 ;;		_secondISR
 11436 ;; This function is called by:
 11437 ;;		_PIN_MANAGER_IOC
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           
 11442                           ;psect for function _IOCBF4_ISR
 11443  07CB                     _IOCBF4_ISR:	
 11444                           
 11445                           ;mcc_generated_files/pin_manager.c: 135:     if(IOCBF4_InterruptHandler)
 11446                           
 11447                           ;incstack = 0
 11448                           ; Regs used in _IOCBF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11449  07CB  0020               	movlb	0	; select bank0
 11450  07CC  086E               	movf	_IOCBF4_InterruptHandler,w
 11451  07CD  046F               	iorwf	_IOCBF4_InterruptHandler+1,w
 11452  07CE  1903               	btfsc	3,2
 11453  07CF  2FD5               	goto	i1l3790
 11454                           
 11455                           ;mcc_generated_files/pin_manager.c: 136:     {;mcc_generated_files/pin_manager.c: 137:  
      +                                 IOCBF4_InterruptHandler();
 11456  07D0  086F               	movf	_IOCBF4_InterruptHandler+1,w
 11457  07D1  008A               	movwf	10
 11458  07D2  086E               	movf	_IOCBF4_InterruptHandler,w
 11459  07D3  000A               	callw
 11460  07D4  3187               	pagesel	$
 11461  07D5                     i1l3790:	
 11462                           
 11463                           ;mcc_generated_files/pin_manager.c: 139:     IOCBFbits.IOCBF4 = 0;
 11464  07D5  0027               	movlb	7	; select bank7
 11465  07D6  1216               	bcf	22,4	;volatile
 11466  07D7  0008               	return
 11467  07D8                     __end_of_IOCBF4_ISR:	
 11468                           
 11469                           	psect	text116
 11470  0E8B                     __ptext116:	
 11471 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 11472 ;; Defined at:
 11473 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;		None
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;		None
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  1    wreg      void 
 11480 ;; Registers used:
 11481 ;;		None
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;Total ram usage:        0 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		_PIN_MANAGER_Initialize
 11497 ;;		_IOCBF4_ISR
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           
 11502                           ;psect for function _IOCBF4_DefaultInterruptHandler
 11503  0E8B                     _IOCBF4_DefaultInterruptHandler:	
 11504                           
 11505                           ;incstack = 0
 11506                           ; Regs used in _IOCBF4_DefaultInterruptHandler: []
 11507  0E8B  0008               	return
 11508  0E8C                     __end_of_IOCBF4_DefaultInterruptHandler:	
 11509                           
 11510                           	psect	text117
 11511  0646                     __ptext117:	
 11512 ;; *************** function _secondISR *****************
 11513 ;; Defined at:
 11514 ;;		line 301 in file "main.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1    wreg      void 
 11521 ;; Registers used:
 11522 ;;		wreg, status,2, status,0
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;Total ram usage:        0 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; This function calls:
 11535 ;;		Nothing
 11536 ;; This function is called by:
 11537 ;;		_main
 11538 ;;		_IOCBF4_ISR
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           
 11543                           ;psect for function _secondISR
 11544  0646                     _secondISR:	
 11545                           
 11546                           ;main.c: 303:     if(mode == MODE_NORMAL){
 11547                           
 11548                           ;incstack = 0
 11549                           ; Regs used in _secondISR: [wreg+status,2+status,0]
 11550  0646  0020               	movlb	0	; select bank0
 11551  0647  084C               	movf	_mode,w
 11552  0648  1D03               	btfss	3,2
 11553  0649  2E58               	goto	i1l3540
 11554  064A  1003               	clrc
 11555  064B  0022               	movlb	2	; select bank2
 11556  064C  1F8C               	btfss	12,7	;volatile
 11557  064D  1403               	setc
 11558  064E  1C03               	btfss	3,0
 11559  064F  2E53               	goto	u140_20
 11560  0650  0022               	movlb	2	; select bank2
 11561  0651  178C               	bsf	12,7	;volatile
 11562  0652  2E55               	goto	i1l3538
 11563  0653                     u140_20:	
 11564  0653  0022               	movlb	2	; select bank2
 11565  0654  138C               	bcf	12,7	;volatile
 11566  0655                     i1l3538:	
 11567                           
 11568                           ;main.c: 305:         flag_time_display_update = 1;
 11569  0655  0020               	movlb	0	; select bank0
 11570  0656  01CD               	clrf	_flag_time_display_update
 11571  0657  0ACD               	incf	_flag_time_display_update,f
 11572  0658                     i1l3540:	
 11573                           
 11574                           ;main.c: 308:     if(mode_timeout_count) {
 11575  0658  084B               	movf	_mode_timeout_count,w
 11576  0659  1903               	btfsc	3,2
 11577  065A  0008               	return
 11578                           
 11579                           ;main.c: 309:         mode_timeout_count--;
 11580  065B  3001               	movlw	1
 11581  065C  02CB               	subwf	_mode_timeout_count,f
 11582                           
 11583                           ;main.c: 310:         if(mode_timeout_count == 0){
 11584  065D  084B               	movf	_mode_timeout_count,w
 11585  065E  1D03               	btfss	3,2
 11586  065F  0008               	return
 11587                           
 11588                           ;main.c: 311:             mode = MODE_NORMAL;
 11589  0660  01CC               	clrf	_mode
 11590  0661  0008               	return
 11591  0662                     __end_of_secondISR:	
 11592  007E                     btemp	set	126	;btemp
 11593  007E                     int$flags	set	126
 11594  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    42
    Data        0
    BSS         61
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     23      80
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    do_I2C_TX$2191$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$2197	const PTR FTN()enum E3411 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX$2196	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$2191	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), returnReset(), returnStop(), 
		 -> Absolute function(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S810$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned short  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_driver_setI2cISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_setBusCollisionISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_readDataBlock@data	PTR void  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    d.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    S1126$data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E3411[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 9
		 -> i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), rtcData(BANK0[9]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S810$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S810$callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), returnReset(), returnStop(), 
		 -> Absolute function(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_i2c_restartWrite(), i1_rd1RegCompleteHandler(), i1_rd2RegCompleteHandler(), 
		 -> i1_wr2RegCompleteHandler(), i1_rdBlkRegCompleteHandler(), i1_returnReset(), i1_returnStop(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), returnReset(), returnStop(), 
		 -> Absolute function(), 

    S810$data_ptr	PTR unsigned char  size(1) Largest target is 9
		 -> i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), rtcData(BANK0[9]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 9
		 -> i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), rtcData(BANK0[9]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), IOCBF4_DefaultInterruptHandler(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), Absolute function(), IOCBF4_DefaultInterruptHandler(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i1_i2c_ISR(), i2c_ISR(), Absolute function(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_DO_ADDRESS_NACK
    i1_i2c_ISR->i1_do_I2C_RX
    i1_i2c_ISR->i1_do_I2C_TX
    i1_i2c_ISR->i1_do_I2C_TX_EMPTY
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _TMR0_CallBack->_displayRefreshISR

Critical Paths under _main in BANK0

    _main->_initRTC
    _updateRTC->_i2c_writeNBytes
    _initRTC->_i2c_readDataBlock
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c_driver_TXData
    _do_I2C_TX->_i2c_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  399068
                                             21 BANK0      2     2      0
         _IOCBF4_SetInterruptHandler
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                        _bcdHourDecr
                        _bcdHourIncr
                      _bcdMinuteDecr
                      _bcdMinuteIncr
                  _i2c_readDataBlock
                            _initRTC
                          _updateRTC
 ---------------------------------------------------------------------------------
 (1) _updateRTC                                            3     2      1   97845
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              2     2      0  198695
                                             19 BANK0      2     2      0
                  _i2c_readDataBlock
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   97693
                                             10 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_readDataBlock                                    9     5      4  101002
                                             10 BANK0      9     5      4
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    2259
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     310
                                              2 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   93060
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   93060
                                              7 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   92992
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              3     3      0   92937
                                              4 BANK0      3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   23242
                                              1 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    4692
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1      32
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4735
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2979
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3    1117
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1574
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      37
                                              0 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteIncr                                        1     1      0     217
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteDecr                                        1     1      0     217
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourIncr                                          1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourDecr                                          1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     422
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     211
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0   18830
                   Absolute function *
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           3     3      0   18830
                                              3 COMMON     3     3      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         3     3      0    4713
                                              0 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_wr2RegCompleteHandler                             1     0      1     904
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_wr1RegCompleteHandler                             1     0      1    1044
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1       0
                                              1 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1       0
                                              1 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_rdBlkRegCompleteHandler                           1     0      1     935
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd2RegCompleteHandler                             1     0      1     904
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd1RegCompleteHandler                             1     0      1     904
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setDataCompleteCallback                       4     1      3     699
                                              5 COMMON     3     0      3
                                              0 BANK0      1     1      0
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (16) i1_setCallBack                                       5     2      3     287
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) i1_i2c_restartWrite                                  1     0      1       0
                                              1 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                  _displayRefreshISR *
 ---------------------------------------------------------------------------------
 (14) _displayRefreshISR                                   2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF4_DefaultInterruptHandler *
                          _secondISR *
 ---------------------------------------------------------------------------------
 (14) _secondISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCBF4_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _bcdHourDecr
   _bcdHourIncr
   _bcdMinuteDecr
   _bcdMinuteIncr
   _i2c_readDataBlock
     _i2c_close
       _mssp_clearIRQ
       _mssp_disableIRQ
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_DO_NACK_RESTART *
               _i2c_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c_driver_startRX
             _do_I2C_RESET *
               _i2c_driver_resetBus
             _do_I2C_RX *
               Absolute function(Fake) *
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _i2c_driver_getRXData *
               _i2c_driver_sendACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_SEND_ADR_READ *
               _i2c_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c_driver_restart
             _do_I2C_SEND_STOP *
               _i2c_driver_stop
             _do_I2C_TX *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_driver_TXData *
               _i2c_driver_isNACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_TX_EMPTY *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _mssp_setIRQ *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _i2c_driver_isNACK *
             _mssp_clearIRQ *
           _mssp_waitForEvent
         _mssp_IRQisEnabled
     _i2c_open
       _i2c_driver_open
       _i2c_driver_setBusCollisionISR
       _i2c_driver_setI2cISR
       _mssp_clearIRQ
     _i2c_setAddressNACKCallback
       _setCallBack
     _i2c_setBuffer
     _i2c_setDataCompleteCallback
       _setCallBack
   _initRTC
     _i2c_readDataBlock
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
       _i2c_setDataCompleteCallback
         _setCallBack
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateRTC
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCBF4_ISR
       Absolute function(Fake) *
       _IOCBF4_DefaultInterruptHandler *
       _secondISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _displayRefreshISR *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      5C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      5C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Sep  7 16:06:49 2019

                __end_of_i2c_driver_restart 0EB7                         i1_i2c_driver_isNACK 0F53  
                              returnReset@p 0060                  __end_of_i2c_driver_startRX 0EBD  
                    __size_of_bcdMinuteDecr 0028               _do_I2C_SEND_RESTART$intlevel0 0F77  
                               __CFG_CP$OFF 0000                                 _SSPSTATbits 0214  
                    __size_of_bcdMinuteIncr 0029                             i1_mssp_clearIRQ 0EA8  
                      __size_of_do_I2C_IDLE 0009                         _do_I2C_SEND_RESTART 0F73  
                      __size_of_do_I2C_RCEN 000A                             _timer0ReloadVal 007D  
                      __end_ofi1_returnStop 0E91                        ?i1_i2c_driver_TXData 0070  
                               i1_do_I2C_RX 0336                                 i1_do_I2C_TX 0257  
                               __CFG_LVP$ON 0000                        i1_i2c_driver_sendACK 0EC3  
                                       l111 0FBD                                         l330 0070  
                                       l326 0066                                         l335 0095  
                                       l328 006B                                         l482 0334  
                                       l563 023C                                         l489 0717  
                                       l579 02C2                                         l782 0FF8  
                              __CFG_CPD$OFF 0000                    i1_do_I2C_DO_NACK_RESTART 0EE3  
              __size_of_i2c_masterOperation 001F                        _returnStop$intlevel0 0F18  
                      i1_i2c_driver_restart 0E99               i2c_setDataCompleteCallback@cb 005C  
                  ?i1_rd2RegCompleteHandler 0058                       __size_of_do_I2C_RESET 000B  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                        i1_i2c_driver_startRX 0E9F  
                     __end_ofi1_returnReset 0E93          __end_of_IOCBF4_SetInterruptHandler 0F0E  
                _IOCBF4_SetInterruptHandler 0F08                        ?i1_i2c_driver_isNACK 0070  
                  ?i1_wr2RegCompleteHandler 0058             ??i1_i2c_setDataCompleteCallback 0057  
                    i1_i2c_driver_getRXData 0EA2                       __end_ofi1_mssp_setIRQ 0EA8  
                   ??_rd2RegCompleteHandler 0061                       i1_i2c_driver_sendNACK 0EC7  
                             i1returnStop@p 0058                                        l5302 06A2  
                                      l5150 0574                                        l5142 0557  
                                      l5128 03C0                                        l5330 072C  
                                      l5410 0552                                        l5138 03E9  
                                      l5324 0726                                        l5308 06A8  
                                      l5404 054C                                        l5340 050C  
                                      l4612 05B8                                        l5500 0094  
                                      l5318 0720                                        l5502 0097  
                                      l5352 0518                                        l4712 06F1  
                                      l4704 06AF                                        l4720 062D  
                                      l4640 0F77                                        l4800 0209  
                                      l5512 00BA                                        l5370 052A  
                                      l5346 0512                                        l4634 0F6F  
                                      l5380 0534                                        l5364 0524  
                                      l4732 0FE3                                        l4628 0F67  
                                      l4812 0215                                        l4804 020F  
                                      l5516 00AE                                        l5524 00C0  
                                      l5358 051E                                        l4726 0F24  
                                      l4742 0FA8                                        l4646 0F7F  
                                      l4750 07DC                                        l4902 04C4  
                                      l5542 00D9                                        l5550 00EB  
                                      l5470 0060                                        l5296 069C  
                                      l5392 0540                                        l4680 0F18  
                                      l4664 0F97                                        l4808 0212  
                                      l5528 00C2                                        l5480 0075  
                                      l5386 053A                                        l4658 0F8F  
                                      l4826 0255                                        l4818 0218  
                                      l4834 02A8                                        l5538 00E5  
                                      l5554 00ED                                        l5570 0106  
                                      l4684 0F1E                                        l4780 0459  
                                      l4852 02C7                                        l4916 07F0  
                                      l5398 0546                                        l4870 03FA  
                                      l4758 0FEE                                        l4766 0FC5  
                                      l4774 0F87                                        l5566 0104  
                                      l5494 008C                                        l4688 06DB  
                                      l4696 06C5                                        l4864 03F4  
                                      l4784 0460                                        l4848 02C4  
                                      l4952 0618                                        l5584 0156  
                                      l4866 03F7                                        l4882 0401  
                                      l4794 0466                                        l4858 02CA  
                                      l4954 061C                                        l5586 0158  
                                      l4876 03FE                                        l4788 0463  
                                      l4894 04B4                                        l4958 0626  
                                      l5598 019F                                        l5880 0416  
                                      l5874 02DF                                        l5876 022E  
                                      l5878 047B                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      _LATD 010F                                        _LATE 0110  
                                      u3205 0161                                        u3215 017F  
                                      u3175 011D                                        u3185 013B  
                                      u3367 0381                                        u3377 0FFC  
                                      i1l73 000D                                        i1l75 0014  
                                      i1l83 002D                                        i1l78 0022  
                      ?_do_I2C_SEND_RESTART 0070                                        _PLLR 04D6  
                                      _TMR0 0015                                        _WPUB 020D  
                                      _WPUE 0210                     ??_wr2RegCompleteHandler 0061  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                     i1_i2c_driver_resetBus 0E8D           __size_of_do_I2C_SEND_RESTART_READ 0008  
                 ?_do_I2C_SEND_RESTART_READ 0070                             ??_mssp_clearIRQ 0057  
                                      _main 0042                                        _mode 004C  
                 __size_of_do_I2C_SEND_STOP 0008                      __size_of_do_I2C_DO_ACK 0008  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                           ??i1_do_I2C_DO_ACK 0070  
                             __CFG_BOREN$ON 0000                       ?_do_I2C_SEND_ADR_READ 0070  
                  __size_of_i2c_writeNBytes 0026                                        start 002F  
                             _i2c_setBuffer 0788                               __CFG_MCLRE$ON 0000  
                           __end_of_i2c_ISR 04DA            __size_of_rdBlkRegCompleteHandler 001D  
                  ??_do_I2C_DO_NACK_RESTART 0057                               i1_do_I2C_IDLE 07FB  
                             i1_do_I2C_RCEN 0F02                     __end_of_TMR0_Initialize 0744  
                              _do_I2C_RESET 0FDF                              i1returnReset@p 0058  
                             __CFG_PLLEN$ON 0000              ??_TMR0_DefaultInterruptHandler 0070  
            __size_of_OSCILLATOR_Initialize 000A                 i2c_setAddressNACKCallback@p 005E  
                     ??i1_i2c_driver_TXData 0070               __end_of_OSCILLATOR_Initialize 0FC1  
                       __size_of_IOCBF4_ISR 000D                       ?i1_i2c_driver_sendACK 0070  
                                     ?_main 0070                               __CFG_WDTE$OFF 0000  
                  __size_of_mssp_disableIRQ 0003                 i2c_driver_setI2cISR@handler 0057  
                                     i1l400 01EE                                       i1l402 01F9  
                                     i1l384 01B4                                       i1l394 01BA  
                                     i1l378 01B1                                       i1l563 0289  
                                     i1l389 01B7                                       i1l398 01E3  
                                     i1l579 0350                       ?i1_i2c_driver_restart 0070  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _TRISD 008F  
                                     _TRISE 0090                       ?i1_i2c_driver_startRX 0070  
         __size_of_TMR0_SetInterruptHandler 0006                   ?_TMR0_SetInterruptHandler 0057  
                     ??i1_i2c_driver_isNACK 0070                                 i2c_open@ret 005B  
                          __end_of_TMR0_ISR 0F45                          __size_ofi1_i2c_ISR 0026  
                           __end_of_initRTC 03B6                     __end_of_PIN_MANAGER_IOC 0F02  
                            _WDT_Initialize 0EE7                               _bcdMinuteDecr 052D  
                      _i2c_driver_getRXData 0EBD                ?i1_do_I2C_SEND_RESTART_WRITE 0070  
                ?_do_I2C_SEND_RESTART_WRITE 0070                               _bcdMinuteIncr 0504  
                     ??_do_I2C_SEND_RESTART 0057                                       pclath 000A  
                _i2c_driver_busCollisionISR 007A                      ?_do_I2C_SEND_ADR_WRITE 0070  
                                     status 0003                                       wtemp0 007E  
                        i2c_driver_TXData@d 0057                   __size_of_i2c_driver_start 0003  
                            ?_i2c_setBuffer 0057                                ?_setCallBack 0057  
                   __end_ofi1_mssp_clearIRQ 0EAB                               _fsmStateTable 05EA  
                           __initialization 0031              __size_ofi1_do_I2C_SEND_RESTART 0004  
                                _i2c_poller 07F0               __end_ofi1_do_I2C_SEND_RESTART 0ED7  
                                _i2c_status 0020                              ?i1_do_I2C_IDLE 0070  
                              __end_of_main 01A5                              ?i1_do_I2C_RCEN 0070  
                __end_ofi1_do_I2C_SEND_STOP 0EDB                            __end_of_i2c_open 0336  
                      _i2c_driver_setI2cISR 0F32                 ?_INTERRUPT_InterruptManager 0070  
           __end_ofi1_rd2RegCompleteHandler 0755                               setCallBack@cb 0057  
                            i1_do_I2C_RESET 0F45                               _do_I2C_DO_ACK 0F83  
                                    ??_main 006C                           ?_i2c_restartWrite 0060  
           __end_ofi1_wr2RegCompleteHandler 0788                                i2c_close@ret 0058  
                           _i2c_driver_open 0FD5                          ??_i2c_restartWrite 0061  
                           _i2c_driver_stop 0EB7                      __end_of_WDT_Initialize 0EEB  
                   ?_do_I2C_DO_ADDRESS_NACK 0070                      ?i1_i2c_driver_sendNACK 0070  
                            ?_bcdMinuteDecr 0070                       ?_i2c_driver_getRXData 0070  
                            ?_bcdMinuteIncr 0070                                      _EEADRH 0192  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _APFCON 011D             i1i2c_setDataCompleteCallback@cb 0075  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELD 018F                                      _ANSELE 0190  
                                    _BORCON 0116                     ?i1_do_I2C_SEND_ADR_READ 0070  
                    ?i1_i2c_driver_resetBus 0070                                      i1l5022 0E8F  
                                    i1l5030 0766                                      i1l5026 0E91  
                                    i1l3540 0658                                      i1l5220 0352  
                                    i1l5054 0777                                      i1l5038 0755  
                                    i1l5046 0744                                      i1l5062 067C  
                                    i1l3630 0ECB                                      i1l5230 0358  
                                    i1l5206 0336                                      i1l3552 01BD  
                                    i1l5160 04E4                                      i1l5152 04DA  
                                    i1l5224 0355                                      i1l3538 0655  
                                    i1l3554 01D3                                      i1l5242 042B  
                                    i1l3642 0ED3                                      i1l5068 0002  
                                    i1l5236 0425                                      i1l3636 0ECF  
                                    i1l3660 0EE3                                      i1l5156 04E1  
                                    i1l5180 0260                                      i1l5172 0257  
                                    i1l5238 0428                                      i1l5254 0432  
                                    i1l3654 0EDF                                      i1l5166 04E7  
                                    i1l5190 0266                                      u140_20 0653  
                                    i1l5248 042F                                      i1l3824 0F45  
                                    i1l3648 0ED7                                      i1l5184 0263  
                                    i1l5176 025D                                      i1l3834 07FB  
                                    i1l3842 0F5B                                      i1l3850 0F4C  
                                    i1l5426 058B                                      i1l5418 057B  
                                    i1l3790 07D5                                      i1l5198 02A2  
                                    i1l4922 05DC                                      i1l3858 0F02  
                                    i1l3866 0EDB                                      i1l5890 01C5  
                                    i1l5882 036C                                      i1l5884 027B  
                                    i1l5886 04FB                                      i1l5888 0446  
             ??i1_do_I2C_SEND_RESTART_WRITE 0070                          __size_of_i2c_close 0016  
                                    _OSCCON 0099                     i1_rd1RegCompleteHandler 0755  
                    ??_do_I2C_SEND_ADR_READ 0057                                      _WDTCON 0097  
                                    _SSPADD 0212                                      _SSPBUF 0211  
                  rdBlkRegCompleteHandler@p 0060                                      _SSPMSK 0213  
                                 ??_i2c_ISR 005B                     i1_wr1RegCompleteHandler 0766  
               ??i1_rdBlkRegCompleteHandler 0078                              __CFG_PWRTE$OFF 0000  
                       _do_I2C_RX$intlevel0 02A8                       __size_ofi1_returnStop 0002  
               __end_of_do_I2C_DO_NACK_STOP 0F93                           __end_ofi1_i2c_ISR 05A1  
       __end_of_i2c_setDataCompleteCallback 07BE                 _i2c_setDataCompleteCallback 07B1  
                           _i2c_masterWrite 0EF3                              __CFG_STVREN$ON 0000  
           __size_of_do_I2C_DO_NACK_RESTART 0008                       ?_i2c_driver_setI2cISR 0057  
                         ??_i2c_writeNBytes 0064                      __end_ofi1_do_I2C_RESET 0F4C  
                           i1_i2c_setBuffer 0796                      ??i1_i2c_driver_sendACK 0070  
                          ?_TMR0_Initialize 0070                              ?_do_I2C_DO_ACK 0070  
               __size_ofi1_i2c_restartWrite 0002                      ??i1_i2c_driver_restart 0070  
                    ??i1_i2c_driver_startRX 0070                                   ??_initRTC 006A  
            __end_of_do_I2C_DO_ADDRESS_NACK 0484                 ?_i2c_setAddressNACKCallback 005C  
                           ?_WDT_Initialize 0070                                ?_returnReset 0060  
             _do_I2C_DO_NACK_STOP$intlevel0 0F8F                  i1rdBlkRegCompleteHandler@p 0058  
                     __end_of_TMR0_CallBack 0FB7           __size_ofi1_do_I2C_DO_ADDRESS_NACK 002A  
                              ?_mssp_setIRQ 0070              __end_ofi1_do_I2C_SEND_ADR_READ 0F63  
                         ??_mssp_disableIRQ 0057    TMR0_SetInterruptHandler@InterruptHandler 0057  
IOCBF4_SetInterruptHandler@InterruptHandler 0057                   ?i1_do_I2C_DO_ADDRESS_NACK 0070  
                          ?_PIN_MANAGER_IOC 0070                                ??_IOCBF4_ISR 0070  
                         i1_do_I2C_TX_EMPTY 0425                           _SYSTEM_Initialize 07E4  
                   __end_of__initialization 003E                             ??_i2c_setBuffer 0059  
            _do_I2C_SEND_ADR_READ$intlevel0 07DC                            _do_I2C_SEND_STOP 0F7B  
                              i1_returnStop 0E8F                       i1_do_I2C_DO_NACK_STOP 0EDF  
                        __size_of_do_I2C_RX 004A                          __size_of_do_I2C_TX 0052  
                        ?i1_do_I2C_TX_EMPTY 0070                          ?_SYSTEM_Initialize 0070  
         _rdBlkRegCompleteHandler$intlevel0 062D                         _i2c_masterOperation 060A  
                  __size_of_do_I2C_TX_EMPTY 0035                            ?i1_mssp_clearIRQ 0070  
                           ??i1_do_I2C_IDLE 0070                             ??i1_do_I2C_RCEN 0070  
                   _rdBlkRegCompleteHandler 0629                                 ?_i2c_poller 0070  
                            __pcstackCOMMON 0070                  ??i1_do_I2C_DO_NACK_RESTART 0070  
                       _do_I2C_TX$intlevel0 0209                         ??i1_do_I2C_TX_EMPTY 0070  
                       ??_SYSTEM_Initialize 005A                                   ?_TMR0_ISR 0070  
                           ?i1_do_I2C_RESET 0070                     __end_of_i2c_driver_open 0FDF  
                   __end_of_i2c_driver_stop 0EBA                           __end_of_i2c_close 0719  
                              ?i1_do_I2C_RX 0070                                ?i1_do_I2C_TX 0070  
                        __end_of_IOCBF4_ISR 07D8                         i1i2c_restartWrite@p 0058  
                        _i2c_driver_sendACK 0EEB                   i1_rdBlkRegCompleteHandler 067C  
                      ?_i2c_masterOperation 0070              i1i2c_setDataCompleteCallback@p 0077  
                   ?i1_i2c_driver_getRXData 0070                              _OPTION_REGbits 0095  
              ??i1_do_I2C_SEND_RESTART_READ 0070                          _i2c_driver_restart 0EB4  
                           ??_bcdMinuteDecr 0057                             ??_bcdMinuteIncr 0057  
                    __size_ofi1_setCallBack 0024                          _i2c_driver_startRX 0EBA  
                    ??_i2c_driver_getRXData 0057                             i1setCallBack@cb 0070  
                  i1rd1RegCompleteHandler@p 0058                             i1_do_I2C_DO_ACK 0EDB  
               ?_IOCBF4_SetInterruptHandler 0057                         ?_i2c_driver_sendACK 0070  
                            setCallBack@idx 005B                   __end_ofi1_do_I2C_TX_EMPTY 0455  
                    _do_I2C_DO_NACK_RESTART 0F93                   __end_of_SYSTEM_Initialize 07F0  
                 ??i1_rd1RegCompleteHandler 0078                         ?_i2c_driver_restart 0070  
                                __pbssBANK0 0020                   ??i1_wr1RegCompleteHandler 0078  
                       ?_i2c_driver_startRX 0070              __size_of_rd2RegCompleteHandler 0016  
                                 ?_i2c_open 0070               __end_of_rd2RegCompleteHandler 06C1  
                             ??_bcdHourDecr 0057                               ??_bcdHourIncr 0057  
                           __CFG_VCAPEN$OFF 0000              __size_of_wr2RegCompleteHandler 0016  
          __size_ofi1_rd2RegCompleteHandler 0011               __end_of_wr2RegCompleteHandler 0703  
                   __end_of_i2c_masterWrite 0EF7                    i1wr1RegCompleteHandler@p 0058  
                          _i2c_driver_start 0EB1                       _rd1RegCompleteHandler 06C1  
                   __end_ofi1_i2c_setBuffer 07A4            __size_ofi1_wr2RegCompleteHandler 0011  
                     _do_I2C_IDLE$intlevel0 0FA8                       _wr1RegCompleteHandler 06D7  
              __size_of_i2c_busCollisionISR 0003             _wr1RegCompleteHandler$intlevel0 06DB  
           _rd1RegCompleteHandler$intlevel0 06C5                                  __pmaintext 0042  
                             ??_do_I2C_IDLE 0057                        __size_of_setCallBack 0025  
                             ??_do_I2C_RCEN 0057                        ??_i2c_driver_sendACK 0057  
                    ??_i2c_driver_setI2cISR 0059            __end_of_TMR0_SetInterruptHandler 0F14  
                        __size_of_secondISR 001C                                  ??_TMR0_ISR 0072  
                           ??_do_I2C_DO_ACK 0057                                  __pintentry 0004  
                      ??_i2c_driver_restart 0057                __size_of_i2c_driver_sendNACK 0004  
                      ??_i2c_driver_startRX 0057            ??_IOCBF4_DefaultInterruptHandler 0070  
           ?_IOCBF4_DefaultInterruptHandler 0070                         i2c_setBuffer@buffer 005A  
              __size_of_i2c_driver_resetBus 0001              __end_ofi1_i2c_driver_getRXData 0EA5  
            ?_i2c_driver_setBusCollisionISR 0057                       ??_i2c_masterOperation 005E  
                         __end_of_do_I2C_RX 02EE                           __end_of_do_I2C_TX 0257  
                     i2c_readDataBlock@data 0062                    ?i1_do_I2C_SEND_ADR_WRITE 0070  
                        __size_of_updateRTC 001A                                     _OSCTUNE 0098  
                                _displayNum 1000                         __size_of_i2c_poller 000B  
                                   _SSPCON1 0215                                     _SSPCON2 0216  
                   ??_do_I2C_SEND_ADR_WRITE 0058         _do_I2C_SEND_RESTART_WRITE$intlevel0 0F6F  
                                   _SSPSTAT 0214                 ??_do_I2C_SEND_RESTART_WRITE 0057  
                    ?i1_do_I2C_DO_NACK_STOP 0070                           _mssp_IRQisEnabled 0FCB  
                                ??_i2c_open 0059                                     _i2c_ISR 04B0  
                 ??_rdBlkRegCompleteHandler 0061                           _mssp_waitForEvent 0FF5  
                        ?_mssp_IRQisEnabled 0070                       __end_of_mssp_clearIRQ 0EAE  
                     _returnReset$intlevel0 0F1E                       _do_I2C_RCEN$intlevel0 0FC5  
                             i1_setCallBack 05C6                          ?_mssp_waitForEvent 0070  
          _do_I2C_DO_ADDRESS_NACK$intlevel0 0459                 __end_ofi1_i2c_driver_TXData 0EFC  
                       __end_of_bcdHourDecr 072F                         __end_of_bcdHourIncr 06AB  
       __size_of_i2c_setAddressNACKCallback 000D                      __size_ofi1_returnReset 0002  
                       ??_mssp_IRQisEnabled 0057                      __size_ofi1_mssp_setIRQ 0003  
                         ??_do_I2C_TX_EMPTY 0057                            ?_i2c_driver_open 0070  
                       ??_mssp_waitForEvent 0057                            ?_i2c_driver_stop 0070  
                    i2c_writeNBytes@address 0064                 __end_ofi1_i2c_driver_isNACK 0F5B  
                   __end_ofi1_do_I2C_DO_ACK 0EDF                                     __ptext1 0662  
                                   __ptext2 037B                                     __ptext3 0555  
                                   __ptext4 03B6                                     __ptext5 07A4  
                                   __ptext6 02EE                                     __ptext7 0F32  
                                   __ptext8 0F2C                                     __ptext9 0FD5  
                        i2c_readDataBlock@d 0067                         __end_of_do_I2C_IDLE 0FAD  
                       __end_of_do_I2C_RCEN 0FCB                                     _initRTC 037B  
                     _OSCILLATOR_Initialize 0FB7                     ??i1_i2c_driver_sendNACK 0070  
               __end_of_do_I2C_SEND_RESTART 0F7B                    ??_PIN_MANAGER_Initialize 0059  
                                   _rtcData 004E                                   _IOCBFbits 0396  
                             bcdHourDecr@hr 0057                      i2c_masterOperation@ret 0060  
                                 _IOCBNbits 0395                     ??i1_i2c_driver_resetBus 0070  
                                 _IOCBPbits 0394                          i1_do_I2C_SEND_STOP 0ED7  
                _do_I2C_SEND_STOP$intlevel0 0F7F                  __size_ofi1_do_I2C_TX_EMPTY 0030  
                  _do_I2C_SEND_RESTART_READ 0F63                  __size_of_SYSTEM_Initialize 000C  
                                   clrloop0 0F39                   __end_of_mssp_IRQisEnabled 0FD5  
                         __end_of_secondISR 0662                               bcdHourIncr@hr 0057  
                      __size_of_returnReset 0006                        end_of_initialization 003E  
                      __size_of_mssp_setIRQ 0003                   __end_of_mssp_waitForEvent 1000  
                 __size_of_i2c_restartWrite 0006                         ?i1_do_I2C_SEND_STOP 0070  
                    ?_rd1RegCompleteHandler 0060                             _i2c_writeNBytes 0555  
                          ?_i2c_masterWrite 0070                      ?_wr1RegCompleteHandler 0060  
                            ?i1_setCallBack 0070                            ?i1_i2c_setBuffer 0070  
                         __end_of_updateRTC 067C                   _do_I2C_SEND_RESTART_WRITE 0F6B  
                     i1_do_I2C_SEND_RESTART 0ED3            __end_ofi1_do_I2C_DO_ADDRESS_NACK 0504  
                        _button_press_count 003D             __end_ofi1_do_I2C_SEND_ADR_WRITE 0F53  
                           _mssp_disableIRQ 0EAE                            ??_WDT_Initialize 0057  
                                 i1_i2c_ISR 057B                        ??i1_do_I2C_SEND_STOP 0070  
                                _returnStop 0F14                    _TMR0_SetInterruptHandler 0F0E  
                                 _PORTBbits 000D             __end_of_rdBlkRegCompleteHandler 0646  
                  __end_of_do_I2C_SEND_STOP 0F83          __end_ofi1_do_I2C_SEND_RESTART_READ 0ECF  
                i1_do_I2C_SEND_RESTART_READ 0ECB                            __CFG_FOSC$INTOSC 0000  
                      __size_ofi1_do_I2C_RX 0045                        __size_ofi1_do_I2C_TX 004D  
      __size_of_i2c_setDataCompleteCallback 000D                               i1_returnReset 0E91  
                               returnStop@p 0060                               i1_mssp_setIRQ 0EA5  
        __size_ofi1_rdBlkRegCompleteHandler 0018                i2c_setDataCompleteCallback@p 005E  
                   i1_rd2RegCompleteHandler 0744                                 _bcdHourDecr 0719  
                               _bcdHourIncr 0694                     i1_wr2RegCompleteHandler 0777  
             __size_of_do_I2C_SEND_ADR_READ 000C                            ??i1_do_I2C_RESET 0070  
                  _flag_time_display_update 004D                                ??_i2c_poller 005E  
                               _do_I2C_IDLE 0FA4                                 _do_I2C_RCEN 0FC1  
                __end_ofi1_i2c_restartWrite 0004        __end_of_i2c_driver_clearBusCollision 0E96  
     __size_of_i2c_driver_clearBusCollision 0003                _i2c_driver_clearBusCollision 0E93  
                        _mode_timeout_count 004B                           __size_of_TMR0_ISR 0007  
                                ?i1_i2c_ISR 0070                            ?i1_do_I2C_DO_ACK 0070  
                    ?_OSCILLATOR_Initialize 0070               __size_ofi1_i2c_driver_sendACK 0004  
              __size_of_do_I2C_DO_NACK_STOP 0008                    __end_of_i2c_driver_start 0EB4  
             __size_ofi1_i2c_driver_restart 0003                     ?_do_I2C_DO_NACK_RESTART 0070  
                       start_initialization 0031                          updateRTC@bcdMinute 0065  
                                 _i2c_close 0703               __size_ofi1_i2c_driver_startRX 0003  
                       _i2c_busCollisionISR 0E96                    __size_of_TMR0_Initialize 0015  
           __size_of_PIN_MANAGER_Initialize 002C                              ?i1_returnReset 0058  
                   __end_of_i2c_writeNBytes 057B         __end_ofi1_do_I2C_SEND_RESTART_WRITE 0ED3  
               i1_do_I2C_SEND_RESTART_WRITE 0ECF                              ?i1_mssp_setIRQ 0070  
                __size_of_mssp_IRQisEnabled 000A                                setCallBack@p 0059  
                        __end_of_i2c_poller 07FB                           _displayRefreshISR 01A5  
                       _i2c_driver_sendNACK 0EEF                             i2c_open@address 005A  
                   i2c_setBuffer@bufferSize 0057                  __size_of_mssp_waitForEvent 000B  
                    rd1RegCompleteHandler@p 0060                          ?_displayRefreshISR 0070  
                       _i2c_driver_resetBus 0E8E                             ??i1_setCallBack 0073  
                   _flag_button_press_count 0041                       __end_of_i2c_setBuffer 0796  
                         __size_of_i2c_open 0048                    __size_of_PIN_MANAGER_IOC 0006  
     __end_ofi1_i2c_setDataCompleteCallback 07CB      __size_ofi1_i2c_setDataCompleteCallback 000D  
             i1_i2c_setDataCompleteCallback 07BE                        ?_i2c_busCollisionISR 0070  
                   __end_of_mssp_disableIRQ 0EB1                            i1setCallBack@idx 0074  
                       ??_displayRefreshISR 0070                       __end_ofi1_do_I2C_IDLE 0800  
                     __end_ofi1_do_I2C_RCEN 0F08                   i1i2c_setBuffer@bufferSize 0070  
                    ?i1_do_I2C_SEND_RESTART 0070                      wr1RegCompleteHandler@p 0060  
                    __size_of_TMR0_CallBack 000A                        ?_i2c_driver_sendNACK 0070  
                             ?_do_I2C_RESET 0070                   _do_I2C_TX_EMPTY$intlevel0 03F4  
                  __size_ofi1_mssp_clearIRQ 0003                                 ?_returnStop 0060  
                      ?_i2c_driver_resetBus 0070                           _i2c_driver_TXData 0F26  
            __end_of_do_I2C_DO_NACK_RESTART 0F9B               ?_i2c_driver_clearBusCollision 0070  
                         _i2c_driver_i2cISR 0049                    i1_do_I2C_DO_ADDRESS_NACK 04DA  
                        ?_i2c_driver_TXData 0070                                 __pbssCOMMON 0078  
                                ?_i2c_close 0070                                   ___latbits 0003  
                             __pcstackBANK0 0057           __size_ofi1_do_I2C_DO_NACK_RESTART 0004  
                  i1rd2RegCompleteHandler@p 0058                                   _do_I2C_RX 02A4  
                 ?i1_do_I2C_DO_NACK_RESTART 0070                                   _do_I2C_TX 0205  
                 __end_of_displayRefreshISR 0205                           _i2c_driver_isNACK 0F9B  
                     __end_of_bcdMinuteDecr 0555                     ??i1_do_I2C_DO_NACK_STOP 0070  
                     __end_of_bcdMinuteIncr 052D                            updateRTC@bcdHour 0067  
                 ??i1_rd2RegCompleteHandler 0078               __size_of_i2c_driver_getRXData 0003  
    __end_of_IOCBF4_DefaultInterruptHandler 0E8C     __size_of_IOCBF4_DefaultInterruptHandler 0001  
            _IOCBF4_DefaultInterruptHandler 0E8B                          ?_i2c_driver_isNACK 0070  
                       ??_i2c_driver_TXData 0057              __size_of_do_I2C_SEND_ADR_WRITE 000B  
                 ??i1_wr2RegCompleteHandler 0078               __end_of_do_I2C_SEND_ADR_WRITE 0FF5  
           ??_i2c_driver_setBusCollisionISR 0059                              i1setCallBack@p 0072  
                          _i2c_restartWrite 0F20                  _i2c_restartWrite$intlevel0 0F24  
                                  ?_i2c_ISR 0070             _do_I2C_SEND_ADR_WRITE$intlevel0 0FEE  
          __size_ofi1_do_I2C_SEND_ADR_WRITE 0007                             _do_I2C_TX_EMPTY 03F0  
                     _TMR0_InterruptHandler 0078                               ??_setCallBack 005A  
                                 __pnvBANK0 006E                    i1wr2RegCompleteHandler@p 0058  
                     _rd2RegCompleteHandler 06AB                         ??_i2c_driver_isNACK 0057  
                     ??_i2c_busCollisionISR 0070                       __end_of_fsmStateTable 060A  
                    _PIN_MANAGER_Initialize 0484                       _wr2RegCompleteHandler 06ED  
               __size_of_i2c_driver_sendACK 0004                              ??_do_I2C_RESET 0057  
                                 __ptext100 0E8F                                   __ptext101 0777  
                                 __ptext110 0F3E                                   __ptext102 07BE  
                                 __ptext111 0FAD                                   __ptext103 05C6  
                                 __ptext112 0E8C                                   __ptext104 0796  
                                 __ptext113 01A5                                   __ptext105 0E9C  
                                 __ptext114 0EFC                                   __ptext106 0E99  
                                 __ptext115 07CB                                   __ptext107 0EC3  
                                 __ptext116 0E8B                                   __ptext108 0E96  
                     ??_i2c_driver_sendNACK 0057                                   __ptext117 0646  
                                 __ptext109 0E93                 __end_of_i2c_masterOperation 0629  
                  ??_do_I2C_DO_ADDRESS_NACK 0057               __size_of_i2c_driver_setI2cISR 0006  
               __size_of_i2c_driver_restart 0003                        i2c_readDataBlock@len 0063  
                 __end_of_i2c_driver_TXData 0F2C                        i2c_readDataBlock@reg 0061  
                     __end_of_do_I2C_DO_ACK 0F8B                       ??_i2c_driver_resetBus 0057  
               __size_of_i2c_driver_startRX 0003                                 ??i1_i2c_ISR 0073  
              ??_INTERRUPT_InterruptManager 0076                  ??_do_I2C_SEND_RESTART_READ 0057  
                  ??i1_do_I2C_SEND_ADR_READ 0070                                    ?_initRTC 0070  
                           ??i1_returnReset 0078                           _i2c_readDataBlock 03B6  
                 __end_of_i2c_driver_isNACK 0FA4                    ?i1_rd1RegCompleteHandler 0058  
        __size_of_do_I2C_SEND_RESTART_WRITE 0008                             ??i1_mssp_setIRQ 0070  
            __size_ofi1_i2c_driver_sendNACK 0004               __end_ofi1_i2c_driver_sendNACK 0ECB  
                  ?i1_wr1RegCompleteHandler 0058                                  ?_do_I2C_RX 0070  
                                ?_do_I2C_TX 0070                          ?_i2c_readDataBlock 0061  
                          ?_i2c_writeNBytes 0061              __size_ofi1_i2c_driver_resetBus 0001  
                             _TMR0_CallBack 0FAD               __end_ofi1_i2c_driver_resetBus 0E8E  
                   ??_rd1RegCompleteHandler 0061                           _i2c_ISR$intlevel0 04B4  
                   ??_wr1RegCompleteHandler 0061                           ??_TMR0_Initialize 0059  
                       ??_i2c_readDataBlock 0065                                    _LATAbits 010C  
                                 _secondISR 0646                                    _LATCbits 010E  
                                  _LATEbits 0110                         __size_of_returnStop 0006  
                                 clear_ram0 0F38                                    _PIE1bits 0091  
                                  _PIE2bits 0092         __size_of_INTERRUPT_InterruptManager 002B  
                ??_TMR0_SetInterruptHandler 0059                                    _PIR1bits 0011  
                                  _PIR2bits 0012                            ?_mssp_disableIRQ 0070  
                                  _TMR0_ISR 0F3E                ?_i2c_setDataCompleteCallback 005C  
            ?i1_i2c_setDataCompleteCallback 0075                                 _displayBuff 0045  
                       __end_of_setCallBack 05C6                           ??_PIN_MANAGER_IOC 0070  
                                 _updateRTC 0662                   __end_of_i2c_readDataBlock 03F0  
              __size_ofi1_i2c_driver_TXData 0005                           i1_i2c_driver_stop 0E9C  
              i2c_setAddressNACKCallback@cb 005C                           ?_do_I2C_SEND_STOP 0070  
               ?i1_do_I2C_SEND_RESTART_READ 0070                          ?i1_i2c_driver_stop 0070  
                               ??_i2c_close 0057                               ??_returnReset 0061  
                        ??_do_I2C_SEND_STOP 0057                      __size_of_mssp_clearIRQ 0003  
                  __size_of_i2c_driver_open 000A                           ??i1_mssp_clearIRQ 0070  
              ??_i2c_setAddressNACKCallback 005F                    __size_of_i2c_driver_stop 0003  
                __size_of_displayRefreshISR 0060           __end_of_do_I2C_SEND_RESTART_WRITE 0F73  
              __size_ofi1_i2c_driver_isNACK 0008                               ??_mssp_setIRQ 0057  
            ??_i2c_driver_clearBusCollision 0070                              ?_TMR0_CallBack 0070  
                   __end_of_do_I2C_TX_EMPTY 0425                    ?_rdBlkRegCompleteHandler 0060  
                       ??i1_i2c_driver_stop 0070                __size_of_do_I2C_SEND_RESTART 0008  
                   _do_I2C_DO_ACK$intlevel0 0F87                                    _i2c_open 02EE  
                             ?i1_returnStop 0058                                ?_bcdHourDecr 0070  
                    ?_rd2RegCompleteHandler 0060                                  ?_secondISR 0070  
                              ?_bcdHourIncr 0070                         _do_I2C_DO_NACK_STOP 0F8B  
                                _EECON1bits 0195                            __size_of_i2c_ISR 002A  
                    ?_wr2RegCompleteHandler 0060             _wr2RegCompleteHandler$intlevel0 06F1  
           _rd2RegCompleteHandler$intlevel0 06AF       __end_of_i2c_driver_setBusCollisionISR 0F32  
    __size_of_i2c_driver_setBusCollisionISR 0006               _i2c_driver_setBusCollisionISR 0F2C  
                       i2c_writeNBytes@data 0061                                ?_do_I2C_IDLE 0070  
                  ??i1_i2c_driver_getRXData 0070                                ?_do_I2C_RCEN 0070  
                   ??_OSCILLATOR_Initialize 0057                    __size_of_i2c_masterWrite 0004  
                __size_of_i2c_driver_TXData 0006             __size_of_do_I2C_DO_ADDRESS_NACK 002F  
                 __end_ofi1_i2c_driver_stop 0E9F                          __end_of_displayNum 100A  
                     i1i2c_setBuffer@buffer 0073                                  ?_updateRTC 0065  
             ??_i2c_setDataCompleteCallback 005F             __end_ofi1_rd1RegCompleteHandler 0766  
                  __size_ofi1_i2c_setBuffer 000E                               ??i1_do_I2C_RX 0070  
                             ??i1_do_I2C_TX 0070          _do_I2C_SEND_RESTART_READ$intlevel0 0F67  
               __size_ofi1_do_I2C_SEND_STOP 0004             __end_ofi1_wr1RegCompleteHandler 0777  
                      ?_do_I2C_DO_NACK_STOP 0070                __end_of_do_I2C_SEND_ADR_READ 07E4  
           __size_ofi1_do_I2C_SEND_ADR_READ 0008                  __size_of_i2c_driver_isNACK 0009  
                   _IOCBF4_InterruptHandler 006E                           ?_i2c_driver_start 0070  
                          __size_of_initRTC 003B                          i1_i2c_restartWrite 0002  
                               ??_do_I2C_RX 0057                                 ??_do_I2C_TX 0058  
                        ??_i2c_driver_start 0057                                    __ptext10 0EF3  
                                  __ptext11 060A                                    __ptext20 0F8B  
                                  __ptext12 0FCB                                    __ptext21 0F83  
                                  __ptext13 07F0                                    __ptext30 0FDF  
                                  __ptext22 0FC1                                    __ptext14 0FF5  
                                  __ptext31 03F0                                    __ptext23 0FEA  
                                  __ptext15 04B0                                    __ptext40 06AB  
                                  __ptext32 0EC0                                    __ptext24 07D8  
                                  __ptext16 02A4                                    __ptext41 06C1  
                                  __ptext33 0F9B                                    __ptext25 0F7B  
                                  __ptext17 0205                                    __ptext50 0EB7  
                                  __ptext42 06D7                                    __ptext34 0F26  
                                  __ptext26 0F73                                    __ptext18 0455  
                                  __ptext51 0EB4                                    __ptext43 0F20  
                                  __ptext35 0EBD                                    __ptext27 0F6B  
                                  __ptext19 0F93                                    __ptext60 0719  
                                  __ptext52 0EEB                                    __ptext44 0F1A  
                                  __ptext36 0EEF                                    __ptext28 0F63  
                                  __ptext61 07E4                                    __ptext53 0EB1  
                                  __ptext45 0F14                                    __ptext37 0E8E  
                                  __ptext29 0FA4                                    __ptext70 0EA8  
                                  __ptext62 0EE7                                    __ptext54 0703  
                                  __ptext46 06ED                                    __ptext38 0EBA  
                                  __ptext71 0336                                    __ptext63 072F  
                                  __ptext55 0EAE                                    __ptext47 07B1  
                                  __ptext39 0629                                    __ptext80 0ED7  
                                  __ptext72 0257                                    __ptext64 0F0E  
                                  __ptext56 0EAB                                    __ptext48 05A1  
                                  __ptext81 0ED3                                    __ptext73 04DA  
                                  __ptext65 0484                                    __ptext57 0504  
                                  __ptext49 0788                                    __ptext90 0EA2  
                                  __ptext82 0ECF                                    __ptext74 0EE3  
                                  __ptext66 0F08                                    __ptext58 052D  
                                  __ptext91 0EC7                                    __ptext83 0ECB  
                                  __ptext75 0EDF                                    __ptext67 0FB7  
                                  __ptext59 0694                                    __ptext92 0E8D  
                                  __ptext84 07FB                                    __ptext76 0EDB  
                                  __ptext93 0E9F                                    __ptext85 0F45  
                                  __ptext77 0F02                                    __ptext69 057B  
                                  __ptext94 0002                                    __ptext86 0425  
                                  __ptext78 0F4C                                    __ptext95 067C  
                                  __ptext87 0EA5                                    __ptext79 0F5B  
                                  __ptext96 0744                                    __ptext88 0F53  
                                  __ptext97 0755                                    __ptext89 0EF7  
                                  __ptext98 0766                                    __ptext99 0E91  
              ??_IOCBF4_SetInterruptHandler 0059                        __end_of_do_I2C_RESET 0FEA  
                                _IOCBF4_ISR 07CB                              ??i1_returnStop 0078  
                   i1_do_I2C_SEND_ADR_WRITE 0F4C                         ?i1_i2c_restartWrite 0058  
              __end_ofi1_i2c_driver_sendACK 0EC7                         __end_of_returnReset 0F20  
                             __size_of_main 0163                         __end_of_mssp_setIRQ 0EC3  
              __end_ofi1_i2c_driver_restart 0E9C                        i1i2c_driver_TXData@d 0070  
      __end_of_TMR0_DefaultInterruptHandler 0E8D       __size_of_TMR0_DefaultInterruptHandler 0001  
              _TMR0_DefaultInterruptHandler 0E8C                __end_ofi1_i2c_driver_startRX 0EA2  
                  i2c_readDataBlock@address 0066                                 _setCallBack 05A1  
                   ??i1_do_I2C_SEND_RESTART 0070                               _mssp_clearIRQ 0EAB  
                   i2c_masterOperation@read 005F        __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004  
                                  int$flags 007E                  ??i1_do_I2C_DO_ADDRESS_NACK 0070  
          __end_ofi1_do_I2C_DO_NACK_RESTART 0EE7          __end_of_INTERRUPT_InterruptManager 002F  
                _INTERRUPT_InterruptManager 0004                        ??i1_i2c_restartWrite 0078  
          __end_of_do_I2C_SEND_RESTART_READ 0F6B                                ??_returnStop 0061  
                  __end_of_i2c_restartWrite 0F26                       ??_do_I2C_DO_NACK_STOP 0057  
                __size_of_i2c_readDataBlock 003A                    mssp_waitForEvent@timeout 0057  
       __size_of_IOCBF4_SetInterruptHandler 0006        i2c_driver_setBusCollisionISR@handler 0057  
                                _INTCONbits 000B                             ??_TMR0_CallBack 0072  
                        i2c_writeNBytes@len 0062                         __end_ofi1_do_I2C_RX 037B  
                       __end_ofi1_do_I2C_TX 02A4                    __size_ofi1_do_I2C_DO_ACK 0004  
                          ?_do_I2C_TX_EMPTY 0070                     __size_of_WDT_Initialize 0004  
                    _do_I2C_DO_ADDRESS_NACK 0455              __size_ofi1_do_I2C_DO_NACK_STOP 0004  
                                  intlevel1 0000               __end_ofi1_do_I2C_DO_NACK_STOP 0EE3  
                    _do_I2C_RESET$intlevel0 0FE3                      rd2RegCompleteHandler@p 0060  
                         ??_i2c_driver_open 0057                           ??_i2c_driver_stop 0057  
                   ?_PIN_MANAGER_Initialize 0070                                 ??_secondISR 0070  
                         i2c_restartWrite@p 0060                      i1_do_I2C_SEND_ADR_READ 0F5B  
                         __CFG_CLKOUTEN$OFF 0000                  ?i1_rdBlkRegCompleteHandler 0058  
                        __end_of_returnStop 0F1A                              ?_mssp_clearIRQ 0070  
                     __end_ofi1_setCallBack 05EA         __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
             ?_TMR0_DefaultInterruptHandler 0070                __end_of_i2c_driver_getRXData 0EC0  
           __size_ofi1_i2c_driver_getRXData 0003                      wr2RegCompleteHandler@p 0060  
                           bcdMinuteDecr@mn 0057                  __size_ofi1_i2c_driver_stop 0003  
                               ??_updateRTC 0066                          displayRefreshISR@i 007C  
                             __pstringtext1 05EA                               __pstringtext2 1000  
                           bcdMinuteIncr@mn 0057                     __size_ofi1_do_I2C_RESET 0007  
                                _OPTION_REG 0095                             _TMR0_Initialize 072F  
                         ??_i2c_masterWrite 0061          __end_of_i2c_setAddressNACKCallback 07B1  
                _i2c_setAddressNACKCallback 07A4                      __size_of_i2c_setBuffer 000E  
                         ??i1_i2c_setBuffer 0072                                 _returnReset 0F1A  
          _do_I2C_DO_NACK_RESTART$intlevel0 0F97                                 _SSPCON1bits 0215  
                               _SSPCON2bits 0216                                 _mssp_setIRQ 0EC0  
                 ??i1_do_I2C_SEND_ADR_WRITE 0070                __end_of_i2c_driver_setI2cISR 0F38  
                    __size_ofi1_do_I2C_IDLE 0005                      __size_ofi1_do_I2C_RCEN 0006  
                               ?_IOCBF4_ISR 0070              __end_of_PIN_MANAGER_Initialize 04B0  
               __end_of_i2c_busCollisionISR 0E99              __size_of_rd1RegCompleteHandler 0016  
             __end_of_rd1RegCompleteHandler 06D7                         i1_i2c_driver_TXData 0EF7  
                           _PIN_MANAGER_IOC 0EFC              __size_of_wr1RegCompleteHandler 0016  
          __size_ofi1_rd1RegCompleteHandler 0011               __end_of_wr1RegCompleteHandler 06ED  
                     _do_I2C_SEND_ADR_WRITE 0FEA                 __end_of_i2c_driver_sendNACK 0EF3  
                      _do_I2C_SEND_ADR_READ 07D8           __end_ofi1_rdBlkRegCompleteHandler 0694  
          __size_ofi1_wr1RegCompleteHandler 0011                  __end_of_i2c_driver_sendACK 0EEF  
                      __size_of_bcdHourDecr 0016                        __size_of_bcdHourIncr 0017  
               __end_of_i2c_driver_resetBus 0E8F  
