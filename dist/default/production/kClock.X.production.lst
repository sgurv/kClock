

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Jul 19 17:26:57 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F1939
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	text68,local,class=CODE,merge=1,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,delta=2
    88                           	psect	text74,local,class=CODE,merge=1,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,delta=2
    90                           	psect	text76,local,class=CODE,merge=1,delta=2
    91                           	psect	text77,local,class=CODE,merge=1,delta=2
    92                           	psect	text78,local,class=CODE,merge=1,delta=2
    93                           	psect	text79,local,class=CODE,merge=1,delta=2
    94                           	psect	text80,local,class=CODE,merge=1,delta=2
    95                           	psect	text81,local,class=CODE,merge=1,delta=2
    96                           	psect	text82,local,class=CODE,merge=1,delta=2
    97                           	psect	text83,local,class=CODE,merge=1,delta=2
    98                           	psect	text84,local,class=CODE,merge=1,delta=2
    99                           	psect	text85,local,class=CODE,merge=1,delta=2
   100                           	psect	text86,local,class=CODE,merge=1,delta=2
   101                           	psect	text87,local,class=CODE,merge=1,delta=2
   102                           	psect	text88,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text90,local,class=CODE,merge=1,delta=2
   105                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text92,local,class=CODE,merge=1,delta=2
   107                           	psect	text93,local,class=CODE,merge=1,delta=2
   108                           	psect	text94,local,class=CODE,merge=1,delta=2
   109                           	psect	text95,local,class=CODE,merge=1,delta=2
   110                           	psect	text96,local,class=CODE,merge=1,delta=2
   111                           	psect	text97,local,class=CODE,merge=1,delta=2
   112                           	psect	text98,local,class=CODE,merge=1,delta=2
   113                           	psect	text99,local,class=CODE,merge=1,delta=2
   114                           	psect	text100,local,class=CODE,merge=1,delta=2
   115                           	psect	text101,local,class=CODE,merge=1,delta=2
   116                           	psect	text102,local,class=CODE,merge=1,delta=2
   117                           	psect	text103,local,class=CODE,merge=1,delta=2
   118                           	psect	text104,local,class=CODE,merge=1,delta=2
   119                           	psect	text105,local,class=CODE,merge=1,delta=2
   120                           	psect	text106,local,class=CODE,merge=1,delta=2
   121                           	psect	text107,local,class=CODE,merge=1,delta=2
   122                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text115,local,class=CODE,merge=1,delta=2
   130                           	psect	text116,local,class=CODE,merge=1,delta=2
   131                           	psect	text117,local,class=CODE,merge=1,delta=2
   132                           	psect	text118,local,class=CODE,merge=1,delta=2
   133                           	psect	text119,local,class=CODE,merge=1,delta=2
   134                           	psect	text120,local,class=CODE,merge=1,delta=2
   135                           	psect	text121,local,class=CODE,merge=1,delta=2
   136                           	psect	text122,local,class=CODE,merge=1,delta=2
   137                           	psect	text123,local,class=CODE,merge=1,delta=2
   138                           	psect	text124,local,class=CODE,merge=1,delta=2
   139                           	psect	text125,local,class=CODE,merge=1,delta=2
   140                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text129,local,class=CODE,merge=1,delta=2
   144                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text131,local,class=CODE,merge=1,delta=2
   146                           	psect	text132,local,class=CODE,merge=1,delta=2
   147                           	psect	text133,local,class=CODE,merge=1,delta=2
   148                           	psect	text134,local,class=CODE,merge=1,delta=2
   149                           	psect	text135,local,class=CODE,merge=1,delta=2
   150                           	psect	text136,local,class=CODE,merge=1,delta=2
   151                           	psect	text137,local,class=CODE,merge=1,delta=2
   152                           	psect	text138,local,class=CODE,merge=1,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     
   155                           ; Version 2.10
   156                           ; Generated 31/07/2019 GMT
   157                           ; 
   158                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   159                           ; All rights reserved.
   160                           ; 
   161                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   162                           ; 
   163                           ; Redistribution and use in source and binary forms, with or without modification, are
   164                           ; permitted provided that the following conditions are met:
   165                           ; 
   166                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   167                           ;        conditions and the following disclaimer.
   168                           ; 
   169                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   170                           ;        of conditions and the following disclaimer in the documentation and/or other
   171                           ;        materials provided with the distribution.
   172                           ; 
   173                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   174                           ;        software without specific prior written permission.
   175                           ; 
   176                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   177                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   178                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   179                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   180                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   181                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   182                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   183                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   184                           ; 
   185                           ; 
   186                           ; Code-generator required, PIC16F1939 Definitions
   187                           ; 
   188                           ; SFR Addresses
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  000F                     	;# 
   205  0010                     	;# 
   206  0011                     	;# 
   207  0012                     	;# 
   208  0013                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  001E                     	;# 
   219  001F                     	;# 
   220  008C                     	;# 
   221  008D                     	;# 
   222  008E                     	;# 
   223  008F                     	;# 
   224  0090                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0095                     	;# 
   229  0096                     	;# 
   230  0097                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  010C                     	;# 
   240  010D                     	;# 
   241  010E                     	;# 
   242  010F                     	;# 
   243  0110                     	;# 
   244  0111                     	;# 
   245  0112                     	;# 
   246  0113                     	;# 
   247  0114                     	;# 
   248  0115                     	;# 
   249  0116                     	;# 
   250  0117                     	;# 
   251  0118                     	;# 
   252  0119                     	;# 
   253  011A                     	;# 
   254  011B                     	;# 
   255  011D                     	;# 
   256  018C                     	;# 
   257  018D                     	;# 
   258  018F                     	;# 
   259  0190                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0194                     	;# 
   267  0195                     	;# 
   268  0196                     	;# 
   269  0199                     	;# 
   270  019A                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019C                     	;# 
   276  019C                     	;# 
   277  019D                     	;# 
   278  019E                     	;# 
   279  019F                     	;# 
   280  020D                     	;# 
   281  0210                     	;# 
   282  0211                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0214                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0291                     	;# 
   291  0291                     	;# 
   292  0292                     	;# 
   293  0293                     	;# 
   294  0294                     	;# 
   295  0295                     	;# 
   296  0295                     	;# 
   297  0296                     	;# 
   298  0298                     	;# 
   299  0298                     	;# 
   300  0299                     	;# 
   301  029A                     	;# 
   302  029B                     	;# 
   303  029C                     	;# 
   304  029C                     	;# 
   305  029D                     	;# 
   306  029E                     	;# 
   307  029F                     	;# 
   308  0311                     	;# 
   309  0311                     	;# 
   310  0312                     	;# 
   311  0313                     	;# 
   312  0314                     	;# 
   313  0315                     	;# 
   314  0315                     	;# 
   315  0316                     	;# 
   316  0318                     	;# 
   317  0318                     	;# 
   318  0319                     	;# 
   319  031A                     	;# 
   320  031C                     	;# 
   321  031C                     	;# 
   322  031D                     	;# 
   323  031E                     	;# 
   324  0394                     	;# 
   325  0395                     	;# 
   326  0396                     	;# 
   327  0415                     	;# 
   328  0416                     	;# 
   329  0417                     	;# 
   330  041C                     	;# 
   331  041D                     	;# 
   332  041E                     	;# 
   333  0791                     	;# 
   334  0792                     	;# 
   335  0793                     	;# 
   336  0794                     	;# 
   337  0795                     	;# 
   338  0798                     	;# 
   339  0799                     	;# 
   340  079A                     	;# 
   341  07A0                     	;# 
   342  07A1                     	;# 
   343  07A2                     	;# 
   344  07A3                     	;# 
   345  07A4                     	;# 
   346  07A5                     	;# 
   347  07A6                     	;# 
   348  07A7                     	;# 
   349  07A8                     	;# 
   350  07A9                     	;# 
   351  07AA                     	;# 
   352  07AB                     	;# 
   353  0FE4                     	;# 
   354  0FE5                     	;# 
   355  0FE6                     	;# 
   356  0FE7                     	;# 
   357  0FE8                     	;# 
   358  0FE9                     	;# 
   359  0FEA                     	;# 
   360  0FEB                     	;# 
   361  0FED                     	;# 
   362  0FEE                     	;# 
   363  0FEF                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000F                     	;# 
   380  0010                     	;# 
   381  0011                     	;# 
   382  0012                     	;# 
   383  0013                     	;# 
   384  0015                     	;# 
   385  0016                     	;# 
   386  0016                     	;# 
   387  0017                     	;# 
   388  0018                     	;# 
   389  0019                     	;# 
   390  001A                     	;# 
   391  001B                     	;# 
   392  001C                     	;# 
   393  001E                     	;# 
   394  001F                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  008F                     	;# 
   399  0090                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0098                     	;# 
   407  0099                     	;# 
   408  009A                     	;# 
   409  009B                     	;# 
   410  009B                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  010C                     	;# 
   415  010D                     	;# 
   416  010E                     	;# 
   417  010F                     	;# 
   418  0110                     	;# 
   419  0111                     	;# 
   420  0112                     	;# 
   421  0113                     	;# 
   422  0114                     	;# 
   423  0115                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  0118                     	;# 
   427  0119                     	;# 
   428  011A                     	;# 
   429  011B                     	;# 
   430  011D                     	;# 
   431  018C                     	;# 
   432  018D                     	;# 
   433  018F                     	;# 
   434  0190                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0199                     	;# 
   445  019A                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019C                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020D                     	;# 
   456  0210                     	;# 
   457  0211                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0294                     	;# 
   470  0295                     	;# 
   471  0295                     	;# 
   472  0296                     	;# 
   473  0298                     	;# 
   474  0298                     	;# 
   475  0299                     	;# 
   476  029A                     	;# 
   477  029B                     	;# 
   478  029C                     	;# 
   479  029C                     	;# 
   480  029D                     	;# 
   481  029E                     	;# 
   482  029F                     	;# 
   483  0311                     	;# 
   484  0311                     	;# 
   485  0312                     	;# 
   486  0313                     	;# 
   487  0314                     	;# 
   488  0315                     	;# 
   489  0315                     	;# 
   490  0316                     	;# 
   491  0318                     	;# 
   492  0318                     	;# 
   493  0319                     	;# 
   494  031A                     	;# 
   495  031C                     	;# 
   496  031C                     	;# 
   497  031D                     	;# 
   498  031E                     	;# 
   499  0394                     	;# 
   500  0395                     	;# 
   501  0396                     	;# 
   502  0415                     	;# 
   503  0416                     	;# 
   504  0417                     	;# 
   505  041C                     	;# 
   506  041D                     	;# 
   507  041E                     	;# 
   508  0791                     	;# 
   509  0792                     	;# 
   510  0793                     	;# 
   511  0794                     	;# 
   512  0795                     	;# 
   513  0798                     	;# 
   514  0799                     	;# 
   515  079A                     	;# 
   516  07A0                     	;# 
   517  07A1                     	;# 
   518  07A2                     	;# 
   519  07A3                     	;# 
   520  07A4                     	;# 
   521  07A5                     	;# 
   522  07A6                     	;# 
   523  07A7                     	;# 
   524  07A8                     	;# 
   525  07A9                     	;# 
   526  07AA                     	;# 
   527  07AB                     	;# 
   528  0FE4                     	;# 
   529  0FE5                     	;# 
   530  0FE6                     	;# 
   531  0FE7                     	;# 
   532  0FE8                     	;# 
   533  0FE9                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEF                     	;# 
   539  0000                     	;# 
   540  0001                     	;# 
   541  0002                     	;# 
   542  0003                     	;# 
   543  0004                     	;# 
   544  0005                     	;# 
   545  0006                     	;# 
   546  0007                     	;# 
   547  0008                     	;# 
   548  0009                     	;# 
   549  000A                     	;# 
   550  000B                     	;# 
   551  000C                     	;# 
   552  000D                     	;# 
   553  000E                     	;# 
   554  000F                     	;# 
   555  0010                     	;# 
   556  0011                     	;# 
   557  0012                     	;# 
   558  0013                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0016                     	;# 
   562  0017                     	;# 
   563  0018                     	;# 
   564  0019                     	;# 
   565  001A                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  001E                     	;# 
   569  001F                     	;# 
   570  008C                     	;# 
   571  008D                     	;# 
   572  008E                     	;# 
   573  008F                     	;# 
   574  0090                     	;# 
   575  0091                     	;# 
   576  0092                     	;# 
   577  0093                     	;# 
   578  0095                     	;# 
   579  0096                     	;# 
   580  0097                     	;# 
   581  0098                     	;# 
   582  0099                     	;# 
   583  009A                     	;# 
   584  009B                     	;# 
   585  009B                     	;# 
   586  009C                     	;# 
   587  009D                     	;# 
   588  009E                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0110                     	;# 
   594  0111                     	;# 
   595  0112                     	;# 
   596  0113                     	;# 
   597  0114                     	;# 
   598  0115                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  0118                     	;# 
   602  0119                     	;# 
   603  011A                     	;# 
   604  011B                     	;# 
   605  011D                     	;# 
   606  018C                     	;# 
   607  018D                     	;# 
   608  018F                     	;# 
   609  0190                     	;# 
   610  0191                     	;# 
   611  0191                     	;# 
   612  0192                     	;# 
   613  0193                     	;# 
   614  0193                     	;# 
   615  0193                     	;# 
   616  0194                     	;# 
   617  0195                     	;# 
   618  0196                     	;# 
   619  0199                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019C                     	;# 
   626  019C                     	;# 
   627  019D                     	;# 
   628  019E                     	;# 
   629  019F                     	;# 
   630  020D                     	;# 
   631  0210                     	;# 
   632  0211                     	;# 
   633  0212                     	;# 
   634  0213                     	;# 
   635  0214                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0216                     	;# 
   639  0217                     	;# 
   640  0291                     	;# 
   641  0291                     	;# 
   642  0292                     	;# 
   643  0293                     	;# 
   644  0294                     	;# 
   645  0295                     	;# 
   646  0295                     	;# 
   647  0296                     	;# 
   648  0298                     	;# 
   649  0298                     	;# 
   650  0299                     	;# 
   651  029A                     	;# 
   652  029B                     	;# 
   653  029C                     	;# 
   654  029C                     	;# 
   655  029D                     	;# 
   656  029E                     	;# 
   657  029F                     	;# 
   658  0311                     	;# 
   659  0311                     	;# 
   660  0312                     	;# 
   661  0313                     	;# 
   662  0314                     	;# 
   663  0315                     	;# 
   664  0315                     	;# 
   665  0316                     	;# 
   666  0318                     	;# 
   667  0318                     	;# 
   668  0319                     	;# 
   669  031A                     	;# 
   670  031C                     	;# 
   671  031C                     	;# 
   672  031D                     	;# 
   673  031E                     	;# 
   674  0394                     	;# 
   675  0395                     	;# 
   676  0396                     	;# 
   677  0415                     	;# 
   678  0416                     	;# 
   679  0417                     	;# 
   680  041C                     	;# 
   681  041D                     	;# 
   682  041E                     	;# 
   683  0791                     	;# 
   684  0792                     	;# 
   685  0793                     	;# 
   686  0794                     	;# 
   687  0795                     	;# 
   688  0798                     	;# 
   689  0799                     	;# 
   690  079A                     	;# 
   691  07A0                     	;# 
   692  07A1                     	;# 
   693  07A2                     	;# 
   694  07A3                     	;# 
   695  07A4                     	;# 
   696  07A5                     	;# 
   697  07A6                     	;# 
   698  07A7                     	;# 
   699  07A8                     	;# 
   700  07A9                     	;# 
   701  07AA                     	;# 
   702  07AB                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  000F                     	;# 
   730  0010                     	;# 
   731  0011                     	;# 
   732  0012                     	;# 
   733  0013                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0016                     	;# 
   737  0017                     	;# 
   738  0018                     	;# 
   739  0019                     	;# 
   740  001A                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001E                     	;# 
   744  001F                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  008F                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0093                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0098                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  010F                     	;# 
   768  0110                     	;# 
   769  0111                     	;# 
   770  0112                     	;# 
   771  0113                     	;# 
   772  0114                     	;# 
   773  0115                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  0118                     	;# 
   777  0119                     	;# 
   778  011A                     	;# 
   779  011B                     	;# 
   780  011D                     	;# 
   781  018C                     	;# 
   782  018D                     	;# 
   783  018F                     	;# 
   784  0190                     	;# 
   785  0191                     	;# 
   786  0191                     	;# 
   787  0192                     	;# 
   788  0193                     	;# 
   789  0193                     	;# 
   790  0193                     	;# 
   791  0194                     	;# 
   792  0195                     	;# 
   793  0196                     	;# 
   794  0199                     	;# 
   795  019A                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019B                     	;# 
   800  019C                     	;# 
   801  019C                     	;# 
   802  019D                     	;# 
   803  019E                     	;# 
   804  019F                     	;# 
   805  020D                     	;# 
   806  0210                     	;# 
   807  0211                     	;# 
   808  0212                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0291                     	;# 
   816  0291                     	;# 
   817  0292                     	;# 
   818  0293                     	;# 
   819  0294                     	;# 
   820  0295                     	;# 
   821  0295                     	;# 
   822  0296                     	;# 
   823  0298                     	;# 
   824  0298                     	;# 
   825  0299                     	;# 
   826  029A                     	;# 
   827  029B                     	;# 
   828  029C                     	;# 
   829  029C                     	;# 
   830  029D                     	;# 
   831  029E                     	;# 
   832  029F                     	;# 
   833  0311                     	;# 
   834  0311                     	;# 
   835  0312                     	;# 
   836  0313                     	;# 
   837  0314                     	;# 
   838  0315                     	;# 
   839  0315                     	;# 
   840  0316                     	;# 
   841  0318                     	;# 
   842  0318                     	;# 
   843  0319                     	;# 
   844  031A                     	;# 
   845  031C                     	;# 
   846  031C                     	;# 
   847  031D                     	;# 
   848  031E                     	;# 
   849  0394                     	;# 
   850  0395                     	;# 
   851  0396                     	;# 
   852  0415                     	;# 
   853  0416                     	;# 
   854  0417                     	;# 
   855  041C                     	;# 
   856  041D                     	;# 
   857  041E                     	;# 
   858  0791                     	;# 
   859  0792                     	;# 
   860  0793                     	;# 
   861  0794                     	;# 
   862  0795                     	;# 
   863  0798                     	;# 
   864  0799                     	;# 
   865  079A                     	;# 
   866  07A0                     	;# 
   867  07A1                     	;# 
   868  07A2                     	;# 
   869  07A3                     	;# 
   870  07A4                     	;# 
   871  07A5                     	;# 
   872  07A6                     	;# 
   873  07A7                     	;# 
   874  07A8                     	;# 
   875  07A9                     	;# 
   876  07AA                     	;# 
   877  07AB                     	;# 
   878  0FE4                     	;# 
   879  0FE5                     	;# 
   880  0FE6                     	;# 
   881  0FE7                     	;# 
   882  0FE8                     	;# 
   883  0FE9                     	;# 
   884  0FEA                     	;# 
   885  0FEB                     	;# 
   886  0FED                     	;# 
   887  0FEE                     	;# 
   888  0FEF                     	;# 
   889  0000                     	;# 
   890  0001                     	;# 
   891  0002                     	;# 
   892  0003                     	;# 
   893  0004                     	;# 
   894  0005                     	;# 
   895  0006                     	;# 
   896  0007                     	;# 
   897  0008                     	;# 
   898  0009                     	;# 
   899  000A                     	;# 
   900  000B                     	;# 
   901  000C                     	;# 
   902  000D                     	;# 
   903  000E                     	;# 
   904  000F                     	;# 
   905  0010                     	;# 
   906  0011                     	;# 
   907  0012                     	;# 
   908  0013                     	;# 
   909  0015                     	;# 
   910  0016                     	;# 
   911  0016                     	;# 
   912  0017                     	;# 
   913  0018                     	;# 
   914  0019                     	;# 
   915  001A                     	;# 
   916  001B                     	;# 
   917  001C                     	;# 
   918  001E                     	;# 
   919  001F                     	;# 
   920  008C                     	;# 
   921  008D                     	;# 
   922  008E                     	;# 
   923  008F                     	;# 
   924  0090                     	;# 
   925  0091                     	;# 
   926  0092                     	;# 
   927  0093                     	;# 
   928  0095                     	;# 
   929  0096                     	;# 
   930  0097                     	;# 
   931  0098                     	;# 
   932  0099                     	;# 
   933  009A                     	;# 
   934  009B                     	;# 
   935  009B                     	;# 
   936  009C                     	;# 
   937  009D                     	;# 
   938  009E                     	;# 
   939  010C                     	;# 
   940  010D                     	;# 
   941  010E                     	;# 
   942  010F                     	;# 
   943  0110                     	;# 
   944  0111                     	;# 
   945  0112                     	;# 
   946  0113                     	;# 
   947  0114                     	;# 
   948  0115                     	;# 
   949  0116                     	;# 
   950  0117                     	;# 
   951  0118                     	;# 
   952  0119                     	;# 
   953  011A                     	;# 
   954  011B                     	;# 
   955  011D                     	;# 
   956  018C                     	;# 
   957  018D                     	;# 
   958  018F                     	;# 
   959  0190                     	;# 
   960  0191                     	;# 
   961  0191                     	;# 
   962  0192                     	;# 
   963  0193                     	;# 
   964  0193                     	;# 
   965  0193                     	;# 
   966  0194                     	;# 
   967  0195                     	;# 
   968  0196                     	;# 
   969  0199                     	;# 
   970  019A                     	;# 
   971  019B                     	;# 
   972  019B                     	;# 
   973  019B                     	;# 
   974  019B                     	;# 
   975  019C                     	;# 
   976  019C                     	;# 
   977  019D                     	;# 
   978  019E                     	;# 
   979  019F                     	;# 
   980  020D                     	;# 
   981  0210                     	;# 
   982  0211                     	;# 
   983  0212                     	;# 
   984  0213                     	;# 
   985  0214                     	;# 
   986  0215                     	;# 
   987  0215                     	;# 
   988  0216                     	;# 
   989  0217                     	;# 
   990  0291                     	;# 
   991  0291                     	;# 
   992  0292                     	;# 
   993  0293                     	;# 
   994  0294                     	;# 
   995  0295                     	;# 
   996  0295                     	;# 
   997  0296                     	;# 
   998  0298                     	;# 
   999  0298                     	;# 
  1000  0299                     	;# 
  1001  029A                     	;# 
  1002  029B                     	;# 
  1003  029C                     	;# 
  1004  029C                     	;# 
  1005  029D                     	;# 
  1006  029E                     	;# 
  1007  029F                     	;# 
  1008  0311                     	;# 
  1009  0311                     	;# 
  1010  0312                     	;# 
  1011  0313                     	;# 
  1012  0314                     	;# 
  1013  0315                     	;# 
  1014  0315                     	;# 
  1015  0316                     	;# 
  1016  0318                     	;# 
  1017  0318                     	;# 
  1018  0319                     	;# 
  1019  031A                     	;# 
  1020  031C                     	;# 
  1021  031C                     	;# 
  1022  031D                     	;# 
  1023  031E                     	;# 
  1024  0394                     	;# 
  1025  0395                     	;# 
  1026  0396                     	;# 
  1027  0415                     	;# 
  1028  0416                     	;# 
  1029  0417                     	;# 
  1030  041C                     	;# 
  1031  041D                     	;# 
  1032  041E                     	;# 
  1033  0791                     	;# 
  1034  0792                     	;# 
  1035  0793                     	;# 
  1036  0794                     	;# 
  1037  0795                     	;# 
  1038  0798                     	;# 
  1039  0799                     	;# 
  1040  079A                     	;# 
  1041  07A0                     	;# 
  1042  07A1                     	;# 
  1043  07A2                     	;# 
  1044  07A3                     	;# 
  1045  07A4                     	;# 
  1046  07A5                     	;# 
  1047  07A6                     	;# 
  1048  07A7                     	;# 
  1049  07A8                     	;# 
  1050  07A9                     	;# 
  1051  07AA                     	;# 
  1052  07AB                     	;# 
  1053  0FE4                     	;# 
  1054  0FE5                     	;# 
  1055  0FE6                     	;# 
  1056  0FE7                     	;# 
  1057  0FE8                     	;# 
  1058  0FE9                     	;# 
  1059  0FEA                     	;# 
  1060  0FEB                     	;# 
  1061  0FED                     	;# 
  1062  0FEE                     	;# 
  1063  0FEF                     	;# 
  1064  0000                     	;# 
  1065  0001                     	;# 
  1066  0002                     	;# 
  1067  0003                     	;# 
  1068  0004                     	;# 
  1069  0005                     	;# 
  1070  0006                     	;# 
  1071  0007                     	;# 
  1072  0008                     	;# 
  1073  0009                     	;# 
  1074  000A                     	;# 
  1075  000B                     	;# 
  1076  000C                     	;# 
  1077  000D                     	;# 
  1078  000E                     	;# 
  1079  000F                     	;# 
  1080  0010                     	;# 
  1081  0011                     	;# 
  1082  0012                     	;# 
  1083  0013                     	;# 
  1084  0015                     	;# 
  1085  0016                     	;# 
  1086  0016                     	;# 
  1087  0017                     	;# 
  1088  0018                     	;# 
  1089  0019                     	;# 
  1090  001A                     	;# 
  1091  001B                     	;# 
  1092  001C                     	;# 
  1093  001E                     	;# 
  1094  001F                     	;# 
  1095  008C                     	;# 
  1096  008D                     	;# 
  1097  008E                     	;# 
  1098  008F                     	;# 
  1099  0090                     	;# 
  1100  0091                     	;# 
  1101  0092                     	;# 
  1102  0093                     	;# 
  1103  0095                     	;# 
  1104  0096                     	;# 
  1105  0097                     	;# 
  1106  0098                     	;# 
  1107  0099                     	;# 
  1108  009A                     	;# 
  1109  009B                     	;# 
  1110  009B                     	;# 
  1111  009C                     	;# 
  1112  009D                     	;# 
  1113  009E                     	;# 
  1114  010C                     	;# 
  1115  010D                     	;# 
  1116  010E                     	;# 
  1117  010F                     	;# 
  1118  0110                     	;# 
  1119  0111                     	;# 
  1120  0112                     	;# 
  1121  0113                     	;# 
  1122  0114                     	;# 
  1123  0115                     	;# 
  1124  0116                     	;# 
  1125  0117                     	;# 
  1126  0118                     	;# 
  1127  0119                     	;# 
  1128  011A                     	;# 
  1129  011B                     	;# 
  1130  011D                     	;# 
  1131  018C                     	;# 
  1132  018D                     	;# 
  1133  018F                     	;# 
  1134  0190                     	;# 
  1135  0191                     	;# 
  1136  0191                     	;# 
  1137  0192                     	;# 
  1138  0193                     	;# 
  1139  0193                     	;# 
  1140  0193                     	;# 
  1141  0194                     	;# 
  1142  0195                     	;# 
  1143  0196                     	;# 
  1144  0199                     	;# 
  1145  019A                     	;# 
  1146  019B                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019C                     	;# 
  1151  019C                     	;# 
  1152  019D                     	;# 
  1153  019E                     	;# 
  1154  019F                     	;# 
  1155  020D                     	;# 
  1156  0210                     	;# 
  1157  0211                     	;# 
  1158  0212                     	;# 
  1159  0213                     	;# 
  1160  0214                     	;# 
  1161  0215                     	;# 
  1162  0215                     	;# 
  1163  0216                     	;# 
  1164  0217                     	;# 
  1165  0291                     	;# 
  1166  0291                     	;# 
  1167  0292                     	;# 
  1168  0293                     	;# 
  1169  0294                     	;# 
  1170  0295                     	;# 
  1171  0295                     	;# 
  1172  0296                     	;# 
  1173  0298                     	;# 
  1174  0298                     	;# 
  1175  0299                     	;# 
  1176  029A                     	;# 
  1177  029B                     	;# 
  1178  029C                     	;# 
  1179  029C                     	;# 
  1180  029D                     	;# 
  1181  029E                     	;# 
  1182  029F                     	;# 
  1183  0311                     	;# 
  1184  0311                     	;# 
  1185  0312                     	;# 
  1186  0313                     	;# 
  1187  0314                     	;# 
  1188  0315                     	;# 
  1189  0315                     	;# 
  1190  0316                     	;# 
  1191  0318                     	;# 
  1192  0318                     	;# 
  1193  0319                     	;# 
  1194  031A                     	;# 
  1195  031C                     	;# 
  1196  031C                     	;# 
  1197  031D                     	;# 
  1198  031E                     	;# 
  1199  0394                     	;# 
  1200  0395                     	;# 
  1201  0396                     	;# 
  1202  0415                     	;# 
  1203  0416                     	;# 
  1204  0417                     	;# 
  1205  041C                     	;# 
  1206  041D                     	;# 
  1207  041E                     	;# 
  1208  0791                     	;# 
  1209  0792                     	;# 
  1210  0793                     	;# 
  1211  0794                     	;# 
  1212  0795                     	;# 
  1213  0798                     	;# 
  1214  0799                     	;# 
  1215  079A                     	;# 
  1216  07A0                     	;# 
  1217  07A1                     	;# 
  1218  07A2                     	;# 
  1219  07A3                     	;# 
  1220  07A4                     	;# 
  1221  07A5                     	;# 
  1222  07A6                     	;# 
  1223  07A7                     	;# 
  1224  07A8                     	;# 
  1225  07A9                     	;# 
  1226  07AA                     	;# 
  1227  07AB                     	;# 
  1228  0FE4                     	;# 
  1229  0FE5                     	;# 
  1230  0FE6                     	;# 
  1231  0FE7                     	;# 
  1232  0FE8                     	;# 
  1233  0FE9                     	;# 
  1234  0FEA                     	;# 
  1235  0FEB                     	;# 
  1236  0FED                     	;# 
  1237  0FEE                     	;# 
  1238  0FEF                     	;# 
  1239  0000                     	;# 
  1240  0001                     	;# 
  1241  0002                     	;# 
  1242  0003                     	;# 
  1243  0004                     	;# 
  1244  0005                     	;# 
  1245  0006                     	;# 
  1246  0007                     	;# 
  1247  0008                     	;# 
  1248  0009                     	;# 
  1249  000A                     	;# 
  1250  000B                     	;# 
  1251  000C                     	;# 
  1252  000D                     	;# 
  1253  000E                     	;# 
  1254  000F                     	;# 
  1255  0010                     	;# 
  1256  0011                     	;# 
  1257  0012                     	;# 
  1258  0013                     	;# 
  1259  0015                     	;# 
  1260  0016                     	;# 
  1261  0016                     	;# 
  1262  0017                     	;# 
  1263  0018                     	;# 
  1264  0019                     	;# 
  1265  001A                     	;# 
  1266  001B                     	;# 
  1267  001C                     	;# 
  1268  001E                     	;# 
  1269  001F                     	;# 
  1270  008C                     	;# 
  1271  008D                     	;# 
  1272  008E                     	;# 
  1273  008F                     	;# 
  1274  0090                     	;# 
  1275  0091                     	;# 
  1276  0092                     	;# 
  1277  0093                     	;# 
  1278  0095                     	;# 
  1279  0096                     	;# 
  1280  0097                     	;# 
  1281  0098                     	;# 
  1282  0099                     	;# 
  1283  009A                     	;# 
  1284  009B                     	;# 
  1285  009B                     	;# 
  1286  009C                     	;# 
  1287  009D                     	;# 
  1288  009E                     	;# 
  1289  010C                     	;# 
  1290  010D                     	;# 
  1291  010E                     	;# 
  1292  010F                     	;# 
  1293  0110                     	;# 
  1294  0111                     	;# 
  1295  0112                     	;# 
  1296  0113                     	;# 
  1297  0114                     	;# 
  1298  0115                     	;# 
  1299  0116                     	;# 
  1300  0117                     	;# 
  1301  0118                     	;# 
  1302  0119                     	;# 
  1303  011A                     	;# 
  1304  011B                     	;# 
  1305  011D                     	;# 
  1306  018C                     	;# 
  1307  018D                     	;# 
  1308  018F                     	;# 
  1309  0190                     	;# 
  1310  0191                     	;# 
  1311  0191                     	;# 
  1312  0192                     	;# 
  1313  0193                     	;# 
  1314  0193                     	;# 
  1315  0193                     	;# 
  1316  0194                     	;# 
  1317  0195                     	;# 
  1318  0196                     	;# 
  1319  0199                     	;# 
  1320  019A                     	;# 
  1321  019B                     	;# 
  1322  019B                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019C                     	;# 
  1326  019C                     	;# 
  1327  019D                     	;# 
  1328  019E                     	;# 
  1329  019F                     	;# 
  1330  020D                     	;# 
  1331  0210                     	;# 
  1332  0211                     	;# 
  1333  0212                     	;# 
  1334  0213                     	;# 
  1335  0214                     	;# 
  1336  0215                     	;# 
  1337  0215                     	;# 
  1338  0216                     	;# 
  1339  0217                     	;# 
  1340  0291                     	;# 
  1341  0291                     	;# 
  1342  0292                     	;# 
  1343  0293                     	;# 
  1344  0294                     	;# 
  1345  0295                     	;# 
  1346  0295                     	;# 
  1347  0296                     	;# 
  1348  0298                     	;# 
  1349  0298                     	;# 
  1350  0299                     	;# 
  1351  029A                     	;# 
  1352  029B                     	;# 
  1353  029C                     	;# 
  1354  029C                     	;# 
  1355  029D                     	;# 
  1356  029E                     	;# 
  1357  029F                     	;# 
  1358  0311                     	;# 
  1359  0311                     	;# 
  1360  0312                     	;# 
  1361  0313                     	;# 
  1362  0314                     	;# 
  1363  0315                     	;# 
  1364  0315                     	;# 
  1365  0316                     	;# 
  1366  0318                     	;# 
  1367  0318                     	;# 
  1368  0319                     	;# 
  1369  031A                     	;# 
  1370  031C                     	;# 
  1371  031C                     	;# 
  1372  031D                     	;# 
  1373  031E                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0415                     	;# 
  1378  0416                     	;# 
  1379  0417                     	;# 
  1380  041C                     	;# 
  1381  041D                     	;# 
  1382  041E                     	;# 
  1383  0791                     	;# 
  1384  0792                     	;# 
  1385  0793                     	;# 
  1386  0794                     	;# 
  1387  0795                     	;# 
  1388  0798                     	;# 
  1389  0799                     	;# 
  1390  079A                     	;# 
  1391  07A0                     	;# 
  1392  07A1                     	;# 
  1393  07A2                     	;# 
  1394  07A3                     	;# 
  1395  07A4                     	;# 
  1396  07A5                     	;# 
  1397  07A6                     	;# 
  1398  07A7                     	;# 
  1399  07A8                     	;# 
  1400  07A9                     	;# 
  1401  07AA                     	;# 
  1402  07AB                     	;# 
  1403  0FE4                     	;# 
  1404  0FE5                     	;# 
  1405  0FE6                     	;# 
  1406  0FE7                     	;# 
  1407  0FE8                     	;# 
  1408  0FE9                     	;# 
  1409  0FEA                     	;# 
  1410  0FEB                     	;# 
  1411  0FED                     	;# 
  1412  0FEE                     	;# 
  1413  0FEF                     	;# 
  1414  0000                     	;# 
  1415  0001                     	;# 
  1416  0002                     	;# 
  1417  0003                     	;# 
  1418  0004                     	;# 
  1419  0005                     	;# 
  1420  0006                     	;# 
  1421  0007                     	;# 
  1422  0008                     	;# 
  1423  0009                     	;# 
  1424  000A                     	;# 
  1425  000B                     	;# 
  1426  000C                     	;# 
  1427  000D                     	;# 
  1428  000E                     	;# 
  1429  000F                     	;# 
  1430  0010                     	;# 
  1431  0011                     	;# 
  1432  0012                     	;# 
  1433  0013                     	;# 
  1434  0015                     	;# 
  1435  0016                     	;# 
  1436  0016                     	;# 
  1437  0017                     	;# 
  1438  0018                     	;# 
  1439  0019                     	;# 
  1440  001A                     	;# 
  1441  001B                     	;# 
  1442  001C                     	;# 
  1443  001E                     	;# 
  1444  001F                     	;# 
  1445  008C                     	;# 
  1446  008D                     	;# 
  1447  008E                     	;# 
  1448  008F                     	;# 
  1449  0090                     	;# 
  1450  0091                     	;# 
  1451  0092                     	;# 
  1452  0093                     	;# 
  1453  0095                     	;# 
  1454  0096                     	;# 
  1455  0097                     	;# 
  1456  0098                     	;# 
  1457  0099                     	;# 
  1458  009A                     	;# 
  1459  009B                     	;# 
  1460  009B                     	;# 
  1461  009C                     	;# 
  1462  009D                     	;# 
  1463  009E                     	;# 
  1464  010C                     	;# 
  1465  010D                     	;# 
  1466  010E                     	;# 
  1467  010F                     	;# 
  1468  0110                     	;# 
  1469  0111                     	;# 
  1470  0112                     	;# 
  1471  0113                     	;# 
  1472  0114                     	;# 
  1473  0115                     	;# 
  1474  0116                     	;# 
  1475  0117                     	;# 
  1476  0118                     	;# 
  1477  0119                     	;# 
  1478  011A                     	;# 
  1479  011B                     	;# 
  1480  011D                     	;# 
  1481  018C                     	;# 
  1482  018D                     	;# 
  1483  018F                     	;# 
  1484  0190                     	;# 
  1485  0191                     	;# 
  1486  0191                     	;# 
  1487  0192                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0193                     	;# 
  1491  0194                     	;# 
  1492  0195                     	;# 
  1493  0196                     	;# 
  1494  0199                     	;# 
  1495  019A                     	;# 
  1496  019B                     	;# 
  1497  019B                     	;# 
  1498  019B                     	;# 
  1499  019B                     	;# 
  1500  019C                     	;# 
  1501  019C                     	;# 
  1502  019D                     	;# 
  1503  019E                     	;# 
  1504  019F                     	;# 
  1505  020D                     	;# 
  1506  0210                     	;# 
  1507  0211                     	;# 
  1508  0212                     	;# 
  1509  0213                     	;# 
  1510  0214                     	;# 
  1511  0215                     	;# 
  1512  0215                     	;# 
  1513  0216                     	;# 
  1514  0217                     	;# 
  1515  0291                     	;# 
  1516  0291                     	;# 
  1517  0292                     	;# 
  1518  0293                     	;# 
  1519  0294                     	;# 
  1520  0295                     	;# 
  1521  0295                     	;# 
  1522  0296                     	;# 
  1523  0298                     	;# 
  1524  0298                     	;# 
  1525  0299                     	;# 
  1526  029A                     	;# 
  1527  029B                     	;# 
  1528  029C                     	;# 
  1529  029C                     	;# 
  1530  029D                     	;# 
  1531  029E                     	;# 
  1532  029F                     	;# 
  1533  0311                     	;# 
  1534  0311                     	;# 
  1535  0312                     	;# 
  1536  0313                     	;# 
  1537  0314                     	;# 
  1538  0315                     	;# 
  1539  0315                     	;# 
  1540  0316                     	;# 
  1541  0318                     	;# 
  1542  0318                     	;# 
  1543  0319                     	;# 
  1544  031A                     	;# 
  1545  031C                     	;# 
  1546  031C                     	;# 
  1547  031D                     	;# 
  1548  031E                     	;# 
  1549  0394                     	;# 
  1550  0395                     	;# 
  1551  0396                     	;# 
  1552  0415                     	;# 
  1553  0416                     	;# 
  1554  0417                     	;# 
  1555  041C                     	;# 
  1556  041D                     	;# 
  1557  041E                     	;# 
  1558  0791                     	;# 
  1559  0792                     	;# 
  1560  0793                     	;# 
  1561  0794                     	;# 
  1562  0795                     	;# 
  1563  0798                     	;# 
  1564  0799                     	;# 
  1565  079A                     	;# 
  1566  07A0                     	;# 
  1567  07A1                     	;# 
  1568  07A2                     	;# 
  1569  07A3                     	;# 
  1570  07A4                     	;# 
  1571  07A5                     	;# 
  1572  07A6                     	;# 
  1573  07A7                     	;# 
  1574  07A8                     	;# 
  1575  07A9                     	;# 
  1576  07AA                     	;# 
  1577  07AB                     	;# 
  1578  0FE4                     	;# 
  1579  0FE5                     	;# 
  1580  0FE6                     	;# 
  1581  0FE7                     	;# 
  1582  0FE8                     	;# 
  1583  0FE9                     	;# 
  1584  0FEA                     	;# 
  1585  0FEB                     	;# 
  1586  0FED                     	;# 
  1587  0FEE                     	;# 
  1588  0FEF                     	;# 
  1589  0000                     	;# 
  1590  0001                     	;# 
  1591  0002                     	;# 
  1592  0003                     	;# 
  1593  0004                     	;# 
  1594  0005                     	;# 
  1595  0006                     	;# 
  1596  0007                     	;# 
  1597  0008                     	;# 
  1598  0009                     	;# 
  1599  000A                     	;# 
  1600  000B                     	;# 
  1601  000C                     	;# 
  1602  000D                     	;# 
  1603  000E                     	;# 
  1604  000F                     	;# 
  1605  0010                     	;# 
  1606  0011                     	;# 
  1607  0012                     	;# 
  1608  0013                     	;# 
  1609  0015                     	;# 
  1610  0016                     	;# 
  1611  0016                     	;# 
  1612  0017                     	;# 
  1613  0018                     	;# 
  1614  0019                     	;# 
  1615  001A                     	;# 
  1616  001B                     	;# 
  1617  001C                     	;# 
  1618  001E                     	;# 
  1619  001F                     	;# 
  1620  008C                     	;# 
  1621  008D                     	;# 
  1622  008E                     	;# 
  1623  008F                     	;# 
  1624  0090                     	;# 
  1625  0091                     	;# 
  1626  0092                     	;# 
  1627  0093                     	;# 
  1628  0095                     	;# 
  1629  0096                     	;# 
  1630  0097                     	;# 
  1631  0098                     	;# 
  1632  0099                     	;# 
  1633  009A                     	;# 
  1634  009B                     	;# 
  1635  009B                     	;# 
  1636  009C                     	;# 
  1637  009D                     	;# 
  1638  009E                     	;# 
  1639  010C                     	;# 
  1640  010D                     	;# 
  1641  010E                     	;# 
  1642  010F                     	;# 
  1643  0110                     	;# 
  1644  0111                     	;# 
  1645  0112                     	;# 
  1646  0113                     	;# 
  1647  0114                     	;# 
  1648  0115                     	;# 
  1649  0116                     	;# 
  1650  0117                     	;# 
  1651  0118                     	;# 
  1652  0119                     	;# 
  1653  011A                     	;# 
  1654  011B                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018F                     	;# 
  1659  0190                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019C                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020D                     	;# 
  1681  0210                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0214                     	;# 
  1686  0215                     	;# 
  1687  0215                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0294                     	;# 
  1695  0295                     	;# 
  1696  0295                     	;# 
  1697  0296                     	;# 
  1698  0298                     	;# 
  1699  0298                     	;# 
  1700  0299                     	;# 
  1701  029A                     	;# 
  1702  029B                     	;# 
  1703  029C                     	;# 
  1704  029C                     	;# 
  1705  029D                     	;# 
  1706  029E                     	;# 
  1707  029F                     	;# 
  1708  0311                     	;# 
  1709  0311                     	;# 
  1710  0312                     	;# 
  1711  0313                     	;# 
  1712  0314                     	;# 
  1713  0315                     	;# 
  1714  0315                     	;# 
  1715  0316                     	;# 
  1716  0318                     	;# 
  1717  0318                     	;# 
  1718  0319                     	;# 
  1719  031A                     	;# 
  1720  031C                     	;# 
  1721  031C                     	;# 
  1722  031D                     	;# 
  1723  031E                     	;# 
  1724  0394                     	;# 
  1725  0395                     	;# 
  1726  0396                     	;# 
  1727  0415                     	;# 
  1728  0416                     	;# 
  1729  0417                     	;# 
  1730  041C                     	;# 
  1731  041D                     	;# 
  1732  041E                     	;# 
  1733  0791                     	;# 
  1734  0792                     	;# 
  1735  0793                     	;# 
  1736  0794                     	;# 
  1737  0795                     	;# 
  1738  0798                     	;# 
  1739  0799                     	;# 
  1740  079A                     	;# 
  1741  07A0                     	;# 
  1742  07A1                     	;# 
  1743  07A2                     	;# 
  1744  07A3                     	;# 
  1745  07A4                     	;# 
  1746  07A5                     	;# 
  1747  07A6                     	;# 
  1748  07A7                     	;# 
  1749  07A8                     	;# 
  1750  07A9                     	;# 
  1751  07AA                     	;# 
  1752  07AB                     	;# 
  1753  0FE4                     	;# 
  1754  0FE5                     	;# 
  1755  0FE6                     	;# 
  1756  0FE7                     	;# 
  1757  0FE8                     	;# 
  1758  0FE9                     	;# 
  1759  0FEA                     	;# 
  1760  0FEB                     	;# 
  1761  0FED                     	;# 
  1762  0FEE                     	;# 
  1763  0FEF                     	;# 
  1764  0000                     	;# 
  1765  0001                     	;# 
  1766  0002                     	;# 
  1767  0003                     	;# 
  1768  0004                     	;# 
  1769  0005                     	;# 
  1770  0006                     	;# 
  1771  0007                     	;# 
  1772  0008                     	;# 
  1773  0009                     	;# 
  1774  000A                     	;# 
  1775  000B                     	;# 
  1776  000C                     	;# 
  1777  000D                     	;# 
  1778  000E                     	;# 
  1779  000F                     	;# 
  1780  0010                     	;# 
  1781  0011                     	;# 
  1782  0012                     	;# 
  1783  0013                     	;# 
  1784  0015                     	;# 
  1785  0016                     	;# 
  1786  0016                     	;# 
  1787  0017                     	;# 
  1788  0018                     	;# 
  1789  0019                     	;# 
  1790  001A                     	;# 
  1791  001B                     	;# 
  1792  001C                     	;# 
  1793  001E                     	;# 
  1794  001F                     	;# 
  1795  008C                     	;# 
  1796  008D                     	;# 
  1797  008E                     	;# 
  1798  008F                     	;# 
  1799  0090                     	;# 
  1800  0091                     	;# 
  1801  0092                     	;# 
  1802  0093                     	;# 
  1803  0095                     	;# 
  1804  0096                     	;# 
  1805  0097                     	;# 
  1806  0098                     	;# 
  1807  0099                     	;# 
  1808  009A                     	;# 
  1809  009B                     	;# 
  1810  009B                     	;# 
  1811  009C                     	;# 
  1812  009D                     	;# 
  1813  009E                     	;# 
  1814  010C                     	;# 
  1815  010D                     	;# 
  1816  010E                     	;# 
  1817  010F                     	;# 
  1818  0110                     	;# 
  1819  0111                     	;# 
  1820  0112                     	;# 
  1821  0113                     	;# 
  1822  0114                     	;# 
  1823  0115                     	;# 
  1824  0116                     	;# 
  1825  0117                     	;# 
  1826  0118                     	;# 
  1827  0119                     	;# 
  1828  011A                     	;# 
  1829  011B                     	;# 
  1830  011D                     	;# 
  1831  018C                     	;# 
  1832  018D                     	;# 
  1833  018F                     	;# 
  1834  0190                     	;# 
  1835  0191                     	;# 
  1836  0191                     	;# 
  1837  0192                     	;# 
  1838  0193                     	;# 
  1839  0193                     	;# 
  1840  0193                     	;# 
  1841  0194                     	;# 
  1842  0195                     	;# 
  1843  0196                     	;# 
  1844  0199                     	;# 
  1845  019A                     	;# 
  1846  019B                     	;# 
  1847  019B                     	;# 
  1848  019B                     	;# 
  1849  019B                     	;# 
  1850  019C                     	;# 
  1851  019C                     	;# 
  1852  019D                     	;# 
  1853  019E                     	;# 
  1854  019F                     	;# 
  1855  020D                     	;# 
  1856  0210                     	;# 
  1857  0211                     	;# 
  1858  0212                     	;# 
  1859  0213                     	;# 
  1860  0214                     	;# 
  1861  0215                     	;# 
  1862  0215                     	;# 
  1863  0216                     	;# 
  1864  0217                     	;# 
  1865  0291                     	;# 
  1866  0291                     	;# 
  1867  0292                     	;# 
  1868  0293                     	;# 
  1869  0294                     	;# 
  1870  0295                     	;# 
  1871  0295                     	;# 
  1872  0296                     	;# 
  1873  0298                     	;# 
  1874  0298                     	;# 
  1875  0299                     	;# 
  1876  029A                     	;# 
  1877  029B                     	;# 
  1878  029C                     	;# 
  1879  029C                     	;# 
  1880  029D                     	;# 
  1881  029E                     	;# 
  1882  029F                     	;# 
  1883  0311                     	;# 
  1884  0311                     	;# 
  1885  0312                     	;# 
  1886  0313                     	;# 
  1887  0314                     	;# 
  1888  0315                     	;# 
  1889  0315                     	;# 
  1890  0316                     	;# 
  1891  0318                     	;# 
  1892  0318                     	;# 
  1893  0319                     	;# 
  1894  031A                     	;# 
  1895  031C                     	;# 
  1896  031C                     	;# 
  1897  031D                     	;# 
  1898  031E                     	;# 
  1899  0394                     	;# 
  1900  0395                     	;# 
  1901  0396                     	;# 
  1902  0415                     	;# 
  1903  0416                     	;# 
  1904  0417                     	;# 
  1905  041C                     	;# 
  1906  041D                     	;# 
  1907  041E                     	;# 
  1908  0791                     	;# 
  1909  0792                     	;# 
  1910  0793                     	;# 
  1911  0794                     	;# 
  1912  0795                     	;# 
  1913  0798                     	;# 
  1914  0799                     	;# 
  1915  079A                     	;# 
  1916  07A0                     	;# 
  1917  07A1                     	;# 
  1918  07A2                     	;# 
  1919  07A3                     	;# 
  1920  07A4                     	;# 
  1921  07A5                     	;# 
  1922  07A6                     	;# 
  1923  07A7                     	;# 
  1924  07A8                     	;# 
  1925  07A9                     	;# 
  1926  07AA                     	;# 
  1927  07AB                     	;# 
  1928  0FE4                     	;# 
  1929  0FE5                     	;# 
  1930  0FE6                     	;# 
  1931  0FE7                     	;# 
  1932  0FE8                     	;# 
  1933  0FE9                     	;# 
  1934  0FEA                     	;# 
  1935  0FEB                     	;# 
  1936  0FED                     	;# 
  1937  0FEE                     	;# 
  1938  0FEF                     	;# 
  1939  0000                     	;# 
  1940  0001                     	;# 
  1941  0002                     	;# 
  1942  0003                     	;# 
  1943  0004                     	;# 
  1944  0005                     	;# 
  1945  0006                     	;# 
  1946  0007                     	;# 
  1947  0008                     	;# 
  1948  0009                     	;# 
  1949  000A                     	;# 
  1950  000B                     	;# 
  1951  000C                     	;# 
  1952  000D                     	;# 
  1953  000E                     	;# 
  1954  000F                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0013                     	;# 
  1959  0015                     	;# 
  1960  0016                     	;# 
  1961  0016                     	;# 
  1962  0017                     	;# 
  1963  0018                     	;# 
  1964  0019                     	;# 
  1965  001A                     	;# 
  1966  001B                     	;# 
  1967  001C                     	;# 
  1968  001E                     	;# 
  1969  001F                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  008F                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0093                     	;# 
  1978  0095                     	;# 
  1979  0096                     	;# 
  1980  0097                     	;# 
  1981  0098                     	;# 
  1982  0099                     	;# 
  1983  009A                     	;# 
  1984  009B                     	;# 
  1985  009B                     	;# 
  1986  009C                     	;# 
  1987  009D                     	;# 
  1988  009E                     	;# 
  1989  010C                     	;# 
  1990  010D                     	;# 
  1991  010E                     	;# 
  1992  010F                     	;# 
  1993  0110                     	;# 
  1994  0111                     	;# 
  1995  0112                     	;# 
  1996  0113                     	;# 
  1997  0114                     	;# 
  1998  0115                     	;# 
  1999  0116                     	;# 
  2000  0117                     	;# 
  2001  0118                     	;# 
  2002  0119                     	;# 
  2003  011A                     	;# 
  2004  011B                     	;# 
  2005  011D                     	;# 
  2006  018C                     	;# 
  2007  018D                     	;# 
  2008  018F                     	;# 
  2009  0190                     	;# 
  2010  0191                     	;# 
  2011  0191                     	;# 
  2012  0192                     	;# 
  2013  0193                     	;# 
  2014  0193                     	;# 
  2015  0193                     	;# 
  2016  0194                     	;# 
  2017  0195                     	;# 
  2018  0196                     	;# 
  2019  0199                     	;# 
  2020  019A                     	;# 
  2021  019B                     	;# 
  2022  019B                     	;# 
  2023  019B                     	;# 
  2024  019B                     	;# 
  2025  019C                     	;# 
  2026  019C                     	;# 
  2027  019D                     	;# 
  2028  019E                     	;# 
  2029  019F                     	;# 
  2030  020D                     	;# 
  2031  0210                     	;# 
  2032  0211                     	;# 
  2033  0212                     	;# 
  2034  0213                     	;# 
  2035  0214                     	;# 
  2036  0215                     	;# 
  2037  0215                     	;# 
  2038  0216                     	;# 
  2039  0217                     	;# 
  2040  0291                     	;# 
  2041  0291                     	;# 
  2042  0292                     	;# 
  2043  0293                     	;# 
  2044  0294                     	;# 
  2045  0295                     	;# 
  2046  0295                     	;# 
  2047  0296                     	;# 
  2048  0298                     	;# 
  2049  0298                     	;# 
  2050  0299                     	;# 
  2051  029A                     	;# 
  2052  029B                     	;# 
  2053  029C                     	;# 
  2054  029C                     	;# 
  2055  029D                     	;# 
  2056  029E                     	;# 
  2057  029F                     	;# 
  2058  0311                     	;# 
  2059  0311                     	;# 
  2060  0312                     	;# 
  2061  0313                     	;# 
  2062  0314                     	;# 
  2063  0315                     	;# 
  2064  0315                     	;# 
  2065  0316                     	;# 
  2066  0318                     	;# 
  2067  0318                     	;# 
  2068  0319                     	;# 
  2069  031A                     	;# 
  2070  031C                     	;# 
  2071  031C                     	;# 
  2072  031D                     	;# 
  2073  031E                     	;# 
  2074  0394                     	;# 
  2075  0395                     	;# 
  2076  0396                     	;# 
  2077  0415                     	;# 
  2078  0416                     	;# 
  2079  0417                     	;# 
  2080  041C                     	;# 
  2081  041D                     	;# 
  2082  041E                     	;# 
  2083  0791                     	;# 
  2084  0792                     	;# 
  2085  0793                     	;# 
  2086  0794                     	;# 
  2087  0795                     	;# 
  2088  0798                     	;# 
  2089  0799                     	;# 
  2090  079A                     	;# 
  2091  07A0                     	;# 
  2092  07A1                     	;# 
  2093  07A2                     	;# 
  2094  07A3                     	;# 
  2095  07A4                     	;# 
  2096  07A5                     	;# 
  2097  07A6                     	;# 
  2098  07A7                     	;# 
  2099  07A8                     	;# 
  2100  07A9                     	;# 
  2101  07AA                     	;# 
  2102  07AB                     	;# 
  2103  0FE4                     	;# 
  2104  0FE5                     	;# 
  2105  0FE6                     	;# 
  2106  0FE7                     	;# 
  2107  0FE8                     	;# 
  2108  0FE9                     	;# 
  2109  0FEA                     	;# 
  2110  0FEB                     	;# 
  2111  0FED                     	;# 
  2112  0FEE                     	;# 
  2113  0FEF                     	;# 
  2114  0000                     	;# 
  2115  0001                     	;# 
  2116  0002                     	;# 
  2117  0003                     	;# 
  2118  0004                     	;# 
  2119  0005                     	;# 
  2120  0006                     	;# 
  2121  0007                     	;# 
  2122  0008                     	;# 
  2123  0009                     	;# 
  2124  000A                     	;# 
  2125  000B                     	;# 
  2126  000C                     	;# 
  2127  000D                     	;# 
  2128  000E                     	;# 
  2129  000F                     	;# 
  2130  0010                     	;# 
  2131  0011                     	;# 
  2132  0012                     	;# 
  2133  0013                     	;# 
  2134  0015                     	;# 
  2135  0016                     	;# 
  2136  0016                     	;# 
  2137  0017                     	;# 
  2138  0018                     	;# 
  2139  0019                     	;# 
  2140  001A                     	;# 
  2141  001B                     	;# 
  2142  001C                     	;# 
  2143  001E                     	;# 
  2144  001F                     	;# 
  2145  008C                     	;# 
  2146  008D                     	;# 
  2147  008E                     	;# 
  2148  008F                     	;# 
  2149  0090                     	;# 
  2150  0091                     	;# 
  2151  0092                     	;# 
  2152  0093                     	;# 
  2153  0095                     	;# 
  2154  0096                     	;# 
  2155  0097                     	;# 
  2156  0098                     	;# 
  2157  0099                     	;# 
  2158  009A                     	;# 
  2159  009B                     	;# 
  2160  009B                     	;# 
  2161  009C                     	;# 
  2162  009D                     	;# 
  2163  009E                     	;# 
  2164  010C                     	;# 
  2165  010D                     	;# 
  2166  010E                     	;# 
  2167  010F                     	;# 
  2168  0110                     	;# 
  2169  0111                     	;# 
  2170  0112                     	;# 
  2171  0113                     	;# 
  2172  0114                     	;# 
  2173  0115                     	;# 
  2174  0116                     	;# 
  2175  0117                     	;# 
  2176  0118                     	;# 
  2177  0119                     	;# 
  2178  011A                     	;# 
  2179  011B                     	;# 
  2180  011D                     	;# 
  2181  018C                     	;# 
  2182  018D                     	;# 
  2183  018F                     	;# 
  2184  0190                     	;# 
  2185  0191                     	;# 
  2186  0191                     	;# 
  2187  0192                     	;# 
  2188  0193                     	;# 
  2189  0193                     	;# 
  2190  0193                     	;# 
  2191  0194                     	;# 
  2192  0195                     	;# 
  2193  0196                     	;# 
  2194  0199                     	;# 
  2195  019A                     	;# 
  2196  019B                     	;# 
  2197  019B                     	;# 
  2198  019B                     	;# 
  2199  019B                     	;# 
  2200  019C                     	;# 
  2201  019C                     	;# 
  2202  019D                     	;# 
  2203  019E                     	;# 
  2204  019F                     	;# 
  2205  020D                     	;# 
  2206  0210                     	;# 
  2207  0211                     	;# 
  2208  0212                     	;# 
  2209  0213                     	;# 
  2210  0214                     	;# 
  2211  0215                     	;# 
  2212  0215                     	;# 
  2213  0216                     	;# 
  2214  0217                     	;# 
  2215  0291                     	;# 
  2216  0291                     	;# 
  2217  0292                     	;# 
  2218  0293                     	;# 
  2219  0294                     	;# 
  2220  0295                     	;# 
  2221  0295                     	;# 
  2222  0296                     	;# 
  2223  0298                     	;# 
  2224  0298                     	;# 
  2225  0299                     	;# 
  2226  029A                     	;# 
  2227  029B                     	;# 
  2228  029C                     	;# 
  2229  029C                     	;# 
  2230  029D                     	;# 
  2231  029E                     	;# 
  2232  029F                     	;# 
  2233  0311                     	;# 
  2234  0311                     	;# 
  2235  0312                     	;# 
  2236  0313                     	;# 
  2237  0314                     	;# 
  2238  0315                     	;# 
  2239  0315                     	;# 
  2240  0316                     	;# 
  2241  0318                     	;# 
  2242  0318                     	;# 
  2243  0319                     	;# 
  2244  031A                     	;# 
  2245  031C                     	;# 
  2246  031C                     	;# 
  2247  031D                     	;# 
  2248  031E                     	;# 
  2249  0394                     	;# 
  2250  0395                     	;# 
  2251  0396                     	;# 
  2252  0415                     	;# 
  2253  0416                     	;# 
  2254  0417                     	;# 
  2255  041C                     	;# 
  2256  041D                     	;# 
  2257  041E                     	;# 
  2258  0791                     	;# 
  2259  0792                     	;# 
  2260  0793                     	;# 
  2261  0794                     	;# 
  2262  0795                     	;# 
  2263  0798                     	;# 
  2264  0799                     	;# 
  2265  079A                     	;# 
  2266  07A0                     	;# 
  2267  07A1                     	;# 
  2268  07A2                     	;# 
  2269  07A3                     	;# 
  2270  07A4                     	;# 
  2271  07A5                     	;# 
  2272  07A6                     	;# 
  2273  07A7                     	;# 
  2274  07A8                     	;# 
  2275  07A9                     	;# 
  2276  07AA                     	;# 
  2277  07AB                     	;# 
  2278  0FE4                     	;# 
  2279  0FE5                     	;# 
  2280  0FE6                     	;# 
  2281  0FE7                     	;# 
  2282  0FE8                     	;# 
  2283  0FE9                     	;# 
  2284  0FEA                     	;# 
  2285  0FEB                     	;# 
  2286  0FED                     	;# 
  2287  0FEE                     	;# 
  2288  0FEF                     	;# 
  2289                           
  2290 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2291  0000                     
  2292 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2293  0000                     
  2294 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2295  0000                     
  2296                           	psect	stringtext1
  2297  1000                     __pstringtext1:	
  2298  1000                     _fsmStateTable:	
  2299  1000  3489               	retlw	low _do_I2C_IDLE
  2300  1001  3416               	retlw	high _do_I2C_IDLE
  2301  1002  343C               	retlw	low _do_I2C_SEND_ADR_READ
  2302  1003  3417               	retlw	high _do_I2C_SEND_ADR_READ
  2303  1004  340A               	retlw	low _do_I2C_SEND_ADR_WRITE
  2304  1005  3417               	retlw	high _do_I2C_SEND_ADR_WRITE
  2305  1006  34A6               	retlw	low _do_I2C_TX
  2306  1007  340F               	retlw	high _do_I2C_TX
  2307  1008  34A5               	retlw	low _do_I2C_RX
  2308  1009  340E               	retlw	high _do_I2C_RX
  2309  100A  34DB               	retlw	low _do_I2C_RCEN
  2310  100B  3416               	retlw	high _do_I2C_RCEN
  2311  100C  340E               	retlw	low _do_I2C_TX_EMPTY
  2312  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  2313  100E  3492               	retlw	low _do_I2C_SEND_RESTART_READ
  2314  100F  3416               	retlw	high _do_I2C_SEND_RESTART_READ
  2315  1010  349B               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2316  1011  3416               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2317  1012  34A4               	retlw	low _do_I2C_SEND_RESTART
  2318  1013  3416               	retlw	high _do_I2C_SEND_RESTART
  2319  1014  34AD               	retlw	low _do_I2C_SEND_STOP
  2320  1015  3416               	retlw	high _do_I2C_SEND_STOP
  2321  1016  34B6               	retlw	low _do_I2C_DO_ACK
  2322  1017  3416               	retlw	high _do_I2C_DO_ACK
  2323  1018  34BF               	retlw	low _do_I2C_DO_NACK_STOP
  2324  1019  3416               	retlw	high _do_I2C_DO_NACK_STOP
  2325  101A  34C8               	retlw	low _do_I2C_DO_NACK_RESTART
  2326  101B  3416               	retlw	high _do_I2C_DO_NACK_RESTART
  2327  101C  34FE               	retlw	low _do_I2C_RESET
  2328  101D  3416               	retlw	high _do_I2C_RESET
  2329  101E  34FF               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2330  101F  340B               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2331  1020                     __end_of_fsmStateTable:	
  2332                           
  2333                           	psect	stringtext2
  2334  1800                     __pstringtext2:	
  2335  1800                     _displayNum:	
  2336  1800  34FC               	retlw	252
  2337  1801  3460               	retlw	96
  2338  1802  34DA               	retlw	218
  2339  1803  34F2               	retlw	242
  2340  1804  3466               	retlw	102
  2341  1805  34B6               	retlw	182
  2342  1806  34BE               	retlw	190
  2343  1807  34E0               	retlw	224
  2344  1808  34FE               	retlw	254
  2345  1809  34F6               	retlw	246
  2346  180A                     __end_of_displayNum:	
  2347                           
  2348                           	psect	nvBANK1
  2349  00D3                     __pnvBANK1:	
  2350  00D3                     _IOCBF4_InterruptHandler:	
  2351  00D3                     	ds	2
  2352  000D                     _PORTBbits	set	13
  2353  0015                     _TMR0	set	21
  2354  0011                     _PIR1bits	set	17
  2355  0012                     _PIR2bits	set	18
  2356  000B                     _INTCONbits	set	11
  2357  009D                     _ADCON0bits	set	157
  2358  009C                     _ADRESH	set	156
  2359  009B                     _ADRESL	set	155
  2360  009E                     _ADCON1	set	158
  2361  009D                     _ADCON0	set	157
  2362  0095                     _OPTION_REG	set	149
  2363  0095                     _OPTION_REGbits	set	149
  2364  008F                     _TRISD	set	143
  2365  008E                     _TRISC	set	142
  2366  008D                     _TRISB	set	141
  2367  008C                     _TRISA	set	140
  2368  0090                     _TRISE	set	144
  2369  0097                     _WDTCON	set	151
  2370  0098                     _OSCTUNE	set	152
  2371  0099                     _OSCCON	set	153
  2372  0091                     _PIE1bits	set	145
  2373  0092                     _PIE2bits	set	146
  2374  04D6                     _PLLR	set	1238
  2375  010C                     _LATAbits	set	268
  2376  010E                     _LATCbits	set	270
  2377  0110                     _LATEbits	set	272
  2378  0117                     _FVRCONbits	set	279
  2379  0117                     _FVRCON	set	279
  2380  011D                     _APFCON	set	285
  2381  010E                     _LATC	set	270
  2382  010D                     _LATB	set	269
  2383  010C                     _LATA	set	268
  2384  010F                     _LATD	set	271
  2385  0110                     _LATE	set	272
  2386  0116                     _BORCON	set	278
  2387  019A                     _TXREG	set	410
  2388  0199                     _RCREG	set	409
  2389  019D                     _RCSTAbits	set	413
  2390  019E                     _TXSTAbits	set	414
  2391  019C                     _SPBRGH	set	412
  2392  019B                     _SPBRGL	set	411
  2393  019E                     _TXSTA	set	414
  2394  019D                     _RCSTA	set	413
  2395  019F                     _BAUDCON	set	415
  2396  018C                     _ANSELA	set	396
  2397  0190                     _ANSELE	set	400
  2398  018D                     _ANSELB	set	397
  2399  018F                     _ANSELD	set	399
  2400  0196                     _EECON2	set	406
  2401  0193                     _EEDATL	set	403
  2402  0194                     _EEDATH	set	404
  2403  0195                     _EECON1bits	set	405
  2404  0192                     _EEADRH	set	402
  2405  0191                     _EEADRL	set	401
  2406  0214                     _SSPSTATbits	set	532
  2407  0213                     _SSPMSK	set	531
  2408  0211                     _SSPBUF	set	529
  2409  0216                     _SSPCON2bits	set	534
  2410  0212                     _SSPADD	set	530
  2411  0216                     _SSPCON2	set	534
  2412  0215                     _SSPCON1	set	533
  2413  0214                     _SSPSTAT	set	532
  2414  0215                     _SSPCON1bits	set	533
  2415  020D                     _WPUB	set	525
  2416  0210                     _WPUE	set	528
  2417  0394                     _IOCBPbits	set	916
  2418  0395                     _IOCBNbits	set	917
  2419  0396                     _IOCBFbits	set	918
  2420                           
  2421                           ; #config settings
  2422  0000                     
  2423                           	psect	cinit
  2424  0046                     start_initialization:	
  2425  0046                     __initialization:	
  2426                           
  2427                           ; Clear objects allocated to COMMON
  2428  0046  01F9               	clrf	__pbssCOMMON& (0+127)
  2429  0047  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2430  0048  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  2431  0049  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  2432  004A  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
  2433                           
  2434                           ; Clear objects allocated to BANK0
  2435  004B  3020               	movlw	low __pbssBANK0
  2436  004C  0084               	movwf	4
  2437  004D  3000               	movlw	high __pbssBANK0
  2438  004E  0085               	movwf	5
  2439  004F  3036               	movlw	54
  2440  0050  3196  2627  3180   	fcall	clear_ram0
  2441                           
  2442                           ; Clear objects allocated to BANK1
  2443  0053  30A0               	movlw	low __pbssBANK1
  2444  0054  0084               	movwf	4
  2445  0055  3000               	movlw	high __pbssBANK1
  2446  0056  0085               	movwf	5
  2447  0057  3033               	movlw	51
  2448  0058  3196  2627  3180   	fcall	clear_ram0
  2449  005B                     end_of_initialization:	
  2450                           ;End of C runtime variable initialization code
  2451                           
  2452  005B                     __end_of__initialization:	
  2453  005B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2454  005C  0020               	movlb	0
  2455  005D  3180  285F         	ljmp	_main	;jump to C main() function
  2456                           
  2457                           	psect	bssCOMMON
  2458  0079                     __pbssCOMMON:	
  2459  0079                     _TMR0_InterruptHandler:	
  2460  0079                     	ds	2
  2461  007B                     displayRefreshISR@i:	
  2462  007B                     	ds	1
  2463  007C                     _eusartRxLastError:	
  2464  007C                     	ds	1
  2465  007D                     _timer0ReloadVal:	
  2466  007D                     	ds	1
  2467                           
  2468                           	psect	bssBANK0
  2469  0020                     __pbssBANK0:	
  2470  0020                     _button_press_count:	
  2471  0020                     	ds	4
  2472  0024                     _flag_button_press_count:	
  2473  0024                     	ds	4
  2474  0028                     _displayBuff:	
  2475  0028                     	ds	4
  2476  002C                     FIR_filter@oldest:	
  2477  002C                     	ds	2
  2478  002E                     _bcd_temp:	
  2479  002E                     	ds	2
  2480  0030                     _EUSART_OverrunErrorHandler:	
  2481  0030                     	ds	2
  2482  0032                     _EUSART_FramingErrorHandler:	
  2483  0032                     	ds	2
  2484  0034                     _ADC_InterruptHandler:	
  2485  0034                     	ds	2
  2486  0036                     _i2c_driver_i2cISR:	
  2487  0036                     	ds	2
  2488  0038                     _i2c_driver_busCollisionISR:	
  2489  0038                     	ds	2
  2490  003A                     _display_mode:	
  2491  003A                     	ds	1
  2492  003B                     _flag_alarm2:	
  2493  003B                     	ds	1
  2494  003C                     _flag_alarm1:	
  2495  003C                     	ds	1
  2496  003D                     _mode_flash_count:	
  2497  003D                     	ds	1
  2498  003E                     _mode_timeout_count:	
  2499  003E                     	ds	1
  2500  003F                     _mode:	
  2501  003F                     	ds	1
  2502  0040                     _flag_dot_blink:	
  2503  0040                     	ds	1
  2504  0041                     _flag_time_display_update:	
  2505  0041                     	ds	1
  2506  0042                     _rtcData:	
  2507  0042                     	ds	20
  2508                           
  2509                           	psect	bssBANK1
  2510  00A0                     __pbssBANK1:	
  2511  00A0                     _i2c_status:	
  2512  00A0                     	ds	29
  2513  00BD                     FIR_filter@buffer:	
  2514  00BD                     	ds	16
  2515  00CD                     FIR_filter@sum:	
  2516  00CD                     	ds	4
  2517  00D1                     _EUSART_ErrorHandler:	
  2518  00D1                     	ds	2
  2519                           
  2520                           	psect	clrtext
  2521  1627                     clear_ram0:	
  2522                           ;	Called with FSR0 containing the base address, and
  2523                           ;	WREG with the size to clear
  2524                           
  2525  1627  0064               	clrwdt	;clear the watchdog before getting into this loop
  2526  1628                     clrloop0:	
  2527  1628  0180               	clrf	0	;clear RAM location pointed to by FSR
  2528  1629  3101               	addfsr 0,1
  2529  162A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2530  162B  2E28               	goto	clrloop0	;have we reached the end yet?
  2531  162C  3400               	retlw	0	;all done for this memory range, return
  2532                           
  2533                           	psect	cstackCOMMON
  2534  0070                     __pcstackCOMMON:	
  2535  0070                     ?_i2c_driver_open:	
  2536  0070                     ?_mssp_IRQisEnabled:	
  2537                           ; 1 bit 
  2538                           
  2539  0070                     ?_i2c_driver_isNACK:	
  2540                           ; 1 bit 
  2541                           
  2542  0070                     ?i1_i2c_driver_isNACK:	
  2543                           ; 1 bit 
  2544                           
  2545  0070                     ?_mssp_clearIRQ:	
  2546                           ; 1 bit 
  2547                           
  2548  0070                     ?_i2c_busCollisionISR:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ??_i2c_busCollisionISR:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_i2c_ISR:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_mssp_disableIRQ:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ?_i2c_driver_start:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ?_i2c_poller:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     ?_mssp_waitForEvent:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569  0070                     ?_i2c_driver_resetBus:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572  0070                     ?_i2c_driver_restart:	
  2573                           ; 1 bytes @ 0x0
  2574                           
  2575  0070                     ?_i2c_driver_stop:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578  0070                     ?_i2c_driver_TXData:	
  2579                           ; 1 bytes @ 0x0
  2580                           
  2581  0070                     ?_i2c_driver_startRX:	
  2582                           ; 1 bytes @ 0x0
  2583                           
  2584  0070                     ?_i2c_driver_sendACK:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587  0070                     ?_i2c_driver_sendNACK:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590  0070                     ?_i2c_driver_getRXData:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0070                     ?_mssp_setIRQ:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0070                     ?_i2c_driver_clearBusCollision:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599  0070                     ??_i2c_driver_clearBusCollision:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602  0070                     ?_TMR0_ISR:	
  2603                           ; 1 bytes @ 0x0
  2604                           
  2605  0070                     ?_PIN_MANAGER_IOC:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0070                     ??_PIN_MANAGER_IOC:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0070                     ?_PIN_MANAGER_Initialize:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614  0070                     ?_OSCILLATOR_Initialize:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0070                     ?_WDT_Initialize:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0070                     ?_FVR_Initialize:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0070                     ?_ADC_Initialize:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0070                     ?_TMR0_Initialize:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0070                     ?_EUSART_Initialize:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0070                     ?_IOCBF4_DefaultInterruptHandler:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0070                     ??_IOCBF4_DefaultInterruptHandler:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0070                     ?_IOCBF4_ISR:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0070                     ??_IOCBF4_ISR:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0070                     ?_TMR0_DefaultInterruptHandler:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0070                     ??_TMR0_DefaultInterruptHandler:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0070                     ?_TMR0_CallBack:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653  0070                     ?_secondISR:	
  2654                           ; 1 bytes @ 0x0
  2655                           
  2656  0070                     ??_secondISR:	
  2657                           ; 1 bytes @ 0x0
  2658                           
  2659  0070                     ?_displayRefreshISR:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662  0070                     ??_displayRefreshISR:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665  0070                     ?_i2c_open:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668  0070                     ?_i2c_close:	
  2669                           ; 1 bytes @ 0x0
  2670                           
  2671  0070                     ?_i2c_masterOperation:	
  2672                           ; 1 bytes @ 0x0
  2673                           
  2674  0070                     ?_i2c_masterWrite:	
  2675                           ; 1 bytes @ 0x0
  2676                           
  2677  0070                     ?_do_I2C_RESET:	
  2678                           ; 1 bytes @ 0x0
  2679                           
  2680  0070                     ?_do_I2C_IDLE:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683  0070                     ?_do_I2C_SEND_RESTART_READ:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0070                     ?_do_I2C_SEND_RESTART:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0070                     ?_do_I2C_SEND_STOP:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695  0070                     ?_do_I2C_SEND_ADR_READ:	
  2696                           ; 1 bytes @ 0x0
  2697                           
  2698  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  2699                           ; 1 bytes @ 0x0
  2700                           
  2701  0070                     ?_do_I2C_RCEN:	
  2702                           ; 1 bytes @ 0x0
  2703                           
  2704  0070                     ?_do_I2C_DO_ACK:	
  2705                           ; 1 bytes @ 0x0
  2706                           
  2707  0070                     ?_do_I2C_DO_NACK_STOP:	
  2708                           ; 1 bytes @ 0x0
  2709                           
  2710  0070                     ?_do_I2C_DO_NACK_RESTART:	
  2711                           ; 1 bytes @ 0x0
  2712                           
  2713  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0070                     ?_do_I2C_TX:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0070                     ?_do_I2C_RX:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722  0070                     ?_do_I2C_TX_EMPTY:	
  2723                           ; 1 bytes @ 0x0
  2724                           
  2725  0070                     ?_DATAEE_ReadByte:	
  2726                           ; 1 bytes @ 0x0
  2727                           
  2728  0070                     ?_INTERRUPT_InterruptManager:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0070                     ?_SYSTEM_Initialize:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0070                     ?_initRTC:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0070                     ?_updateDate:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0070                     ?_updateMonth:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0070                     ?_bcdHourIncr:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746  0070                     ?_bcdHourDecr:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0070                     ?_bcdMinuteIncr:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0070                     ?_bcdMinuteDecr:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0070                     ?_bcdMonthIncr:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0070                     ?_bcdMonthDecr:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0070                     ?_bcdDateIncr:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764  0070                     ?_bcdDateDecr:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0070                     ?_main:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0070                     ?i1_i2c_setBuffer:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?i1_do_I2C_RESET:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ??i1_do_I2C_RESET:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?i1_do_I2C_IDLE:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ??i1_do_I2C_IDLE:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?i1_do_I2C_SEND_RESTART:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ??i1_do_I2C_SEND_RESTART:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     ?i1_do_I2C_SEND_STOP:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0070                     ??i1_do_I2C_SEND_STOP:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  2810                           ; 1 bytes @ 0x0
  2811                           
  2812  0070                     ??i1_do_I2C_SEND_ADR_READ:	
  2813                           ; 1 bytes @ 0x0
  2814                           
  2815  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0070                     ??i1_do_I2C_SEND_ADR_WRITE:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821  0070                     ?i1_do_I2C_RCEN:	
  2822                           ; 1 bytes @ 0x0
  2823                           
  2824  0070                     ??i1_do_I2C_RCEN:	
  2825                           ; 1 bytes @ 0x0
  2826                           
  2827  0070                     ?i1_do_I2C_DO_ACK:	
  2828                           ; 1 bytes @ 0x0
  2829                           
  2830  0070                     ??i1_do_I2C_DO_ACK:	
  2831                           ; 1 bytes @ 0x0
  2832                           
  2833  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  2834                           ; 1 bytes @ 0x0
  2835                           
  2836  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  2837                           ; 1 bytes @ 0x0
  2838                           
  2839  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  2843                           ; 1 bytes @ 0x0
  2844                           
  2845  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  2846                           ; 1 bytes @ 0x0
  2847                           
  2848  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  2849                           ; 1 bytes @ 0x0
  2850                           
  2851  0070                     ?i1_do_I2C_TX:	
  2852                           ; 1 bytes @ 0x0
  2853                           
  2854  0070                     ??i1_do_I2C_TX:	
  2855                           ; 1 bytes @ 0x0
  2856                           
  2857  0070                     ?i1_do_I2C_RX:	
  2858                           ; 1 bytes @ 0x0
  2859                           
  2860  0070                     ??i1_do_I2C_RX:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0070                     ?i1_do_I2C_TX_EMPTY:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0070                     ??i1_do_I2C_TX_EMPTY:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?i1_i2c_ISR:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?i1_setCallBack:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?i1_mssp_clearIRQ:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ??i1_mssp_clearIRQ:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?i1_mssp_setIRQ:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ??i1_mssp_setIRQ:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?i1_i2c_driver_resetBus:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ??i1_i2c_driver_resetBus:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?i1_i2c_driver_restart:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ??i1_i2c_driver_restart:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?i1_i2c_driver_stop:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ??i1_i2c_driver_stop:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ??i1_i2c_driver_isNACK:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?i1_i2c_driver_startRX:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ??i1_i2c_driver_startRX:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?i1_i2c_driver_getRXData:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ??i1_i2c_driver_getRXData:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?i1_i2c_driver_TXData:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ??i1_i2c_driver_TXData:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?i1_i2c_driver_sendACK:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ??i1_i2c_driver_sendACK:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?i1_i2c_driver_sendNACK:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ??i1_i2c_driver_sendNACK:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     i1i2c_driver_TXData@d:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     i1i2c_setBuffer@bufferSize:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     i1setCallBack@cb:	
  2945                           ; 2 bytes @ 0x0
  2946                           
  2947                           
  2948                           ; 2 bytes @ 0x0
  2949  0070                     	ds	2
  2950  0072                     ??_TMR0_ISR:	
  2951  0072                     ??_TMR0_CallBack:	
  2952                           ; 1 bytes @ 0x2
  2953                           
  2954  0072                     ??i1_i2c_setBuffer:	
  2955                           ; 1 bytes @ 0x2
  2956                           
  2957  0072                     i1setCallBack@p:	
  2958                           ; 1 bytes @ 0x2
  2959                           
  2960                           
  2961                           ; 1 bytes @ 0x2
  2962  0072                     	ds	1
  2963  0073                     ??i1_i2c_ISR:	
  2964  0073                     ??i1_setCallBack:	
  2965                           ; 1 bytes @ 0x3
  2966                           
  2967  0073                     i1i2c_setBuffer@buffer:	
  2968                           ; 1 bytes @ 0x3
  2969                           
  2970                           
  2971                           ; 1 bytes @ 0x3
  2972  0073                     	ds	1
  2973  0074                     i1setCallBack@idx:	
  2974                           
  2975                           ; 1 bytes @ 0x4
  2976  0074                     	ds	1
  2977  0075                     ?i1_i2c_setDataCompleteCallback:	
  2978  0075                     i1i2c_setDataCompleteCallback@cb:	
  2979                           ; 1 bytes @ 0x5
  2980                           
  2981                           
  2982                           ; 2 bytes @ 0x5
  2983  0075                     	ds	1
  2984  0076                     ??_INTERRUPT_InterruptManager:	
  2985                           
  2986                           ; 1 bytes @ 0x6
  2987  0076                     	ds	1
  2988  0077                     i1i2c_setDataCompleteCallback@p:	
  2989                           
  2990                           ; 1 bytes @ 0x7
  2991  0077                     	ds	1
  2992  0078                     ??i1_i2c_setDataCompleteCallback:	
  2993                           
  2994                           ; 1 bytes @ 0x8
  2995  0078                     	ds	1
  2996  0079                     ??i1_returnStop:	
  2997  0079                     ??i1_returnReset:	
  2998                           ; 1 bytes @ 0x9
  2999                           
  3000  0079                     ??i1_wr1RegCompleteHandler:	
  3001                           ; 1 bytes @ 0x9
  3002                           
  3003  0079                     ??i1_rd1RegCompleteHandler:	
  3004                           ; 1 bytes @ 0x9
  3005                           
  3006  0079                     ??i1_rd2RegCompleteHandler:	
  3007                           ; 1 bytes @ 0x9
  3008                           
  3009  0079                     ??i1_wr2RegCompleteHandler:	
  3010                           ; 1 bytes @ 0x9
  3011                           
  3012  0079                     ??i1_rdBlkRegCompleteHandler:	
  3013                           ; 1 bytes @ 0x9
  3014                           
  3015  0079                     ??i1_i2c_restartWrite:	
  3016                           ; 1 bytes @ 0x9
  3017                           
  3018                           
  3019                           	psect	cstackBANK0
  3020  0056                     __pcstackBANK0:	
  3021                           ; 1 bytes @ 0x9
  3022                           
  3023  0056                     ?_setCallBack:	
  3024  0056                     ??_i2c_driver_open:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0056                     ??_mssp_clearIRQ:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0056                     ?_i2c_driver_setBusCollisionISR:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0056                     ?_i2c_driver_setI2cISR:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0056                     ??_mssp_disableIRQ:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0056                     ??_i2c_driver_start:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0056                     ??_mssp_IRQisEnabled:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0056                     ??_mssp_waitForEvent:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0056                     ??_i2c_driver_resetBus:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0056                     ??_i2c_driver_restart:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0056                     ??_i2c_driver_stop:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0056                     ??_i2c_driver_TXData:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0056                     ??_i2c_driver_startRX:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0056                     ??_i2c_driver_sendACK:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0056                     ??_i2c_driver_sendNACK:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0056                     ??_i2c_driver_isNACK:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0056                     ??_i2c_driver_getRXData:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0056                     ??_mssp_setIRQ:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0056                     ??_OSCILLATOR_Initialize:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0056                     ??_WDT_Initialize:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0056                     ??_FVR_Initialize:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0056                     ??_ADC_Initialize:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0056                     ?_IOCBF4_SetInterruptHandler:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0056                     ?_TMR0_SetInterruptHandler:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0056                     ?_EUSART_SetFramingErrorHandler:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0056                     ?_EUSART_SetOverrunErrorHandler:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0056                     ?_EUSART_SetErrorHandler:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0056                     ??_i2c_close:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0056                     ?_i2c_setBuffer:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0056                     ??_do_I2C_RESET:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0056                     ??_do_I2C_IDLE:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0056                     ??_do_I2C_SEND_RESTART_READ:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0056                     ??_do_I2C_SEND_RESTART_WRITE:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0056                     ??_do_I2C_SEND_RESTART:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0056                     ??_do_I2C_SEND_STOP:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0056                     ??_do_I2C_SEND_ADR_READ:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0056                     ??_do_I2C_RCEN:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0056                     ??_do_I2C_DO_ACK:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0056                     ??_do_I2C_DO_NACK_STOP:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0056                     ??_do_I2C_DO_NACK_RESTART:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0056                     ??_do_I2C_DO_ADDRESS_NACK:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0056                     ??_do_I2C_RX:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0056                     ??_do_I2C_TX_EMPTY:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0056                     ?_DATAEE_WriteByte:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0056                     ??_DATAEE_ReadByte:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0056                     ??_bcdHourIncr:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0056                     ??_bcdHourDecr:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0056                     ??_bcdMinuteIncr:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0056                     ??_bcdMinuteDecr:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0056                     ??_bcdMonthIncr:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0056                     ??_bcdMonthDecr:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0056                     ??_bcdDateIncr:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0056                     ??_bcdDateDecr:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0056                     ?i1_returnStop:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0056                     ?i1_returnReset:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0056                     ?i1_wr1RegCompleteHandler:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0056                     ?i1_rd1RegCompleteHandler:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0056                     ?i1_rd2RegCompleteHandler:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0056                     ?i1_wr2RegCompleteHandler:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0056                     ?i1_rdBlkRegCompleteHandler:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0056                     ?i1_i2c_restartWrite:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0056                     ?_ADC_GetConversion:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0056                     ?___lwdiv:	
  3211                           ; 2 bytes @ 0x0
  3212                           
  3213  0056                     ?___lwmod:	
  3214                           ; 2 bytes @ 0x0
  3215                           
  3216  0056                     DATAEE_WriteByte@bData:	
  3217                           ; 2 bytes @ 0x0
  3218                           
  3219  0056                     DATAEE_ReadByte@bAdd:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0056                     mssp_waitForEvent@timeout:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0056                     i2c_driver_TXData@d:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0056                     bcdMonthIncr@mo:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0056                     bcdMonthDecr@mo:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0056                     bcdDateIncr@dt:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0056                     bcdDateDecr@dt:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0056                     i1returnStop@p:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0056                     i1returnReset@p:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0056                     i1wr1RegCompleteHandler@p:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0056                     i1rd1RegCompleteHandler@p:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0056                     i1rd2RegCompleteHandler@p:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0056                     i1wr2RegCompleteHandler@p:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0056                     i1rdBlkRegCompleteHandler@p:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0056                     i1i2c_restartWrite@p:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0056                     i2c_setBuffer@bufferSize:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0056                     setCallBack@cb:	
  3268                           ; 2 bytes @ 0x0
  3269                           
  3270  0056                     IOCBF4_SetInterruptHandler@InterruptHandler:	
  3271                           ; 2 bytes @ 0x0
  3272                           
  3273  0056                     TMR0_SetInterruptHandler@InterruptHandler:	
  3274                           ; 2 bytes @ 0x0
  3275                           
  3276  0056                     i2c_driver_setBusCollisionISR@handler:	
  3277                           ; 2 bytes @ 0x0
  3278                           
  3279  0056                     i2c_driver_setI2cISR@handler:	
  3280                           ; 2 bytes @ 0x0
  3281                           
  3282  0056                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3283                           ; 2 bytes @ 0x0
  3284                           
  3285  0056                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3286                           ; 2 bytes @ 0x0
  3287                           
  3288  0056                     EUSART_SetErrorHandler@interruptHandler:	
  3289                           ; 2 bytes @ 0x0
  3290                           
  3291  0056                     ___lwdiv@divisor:	
  3292                           ; 2 bytes @ 0x0
  3293                           
  3294  0056                     ___lwmod@divisor:	
  3295                           ; 2 bytes @ 0x0
  3296                           
  3297                           
  3298                           ; 2 bytes @ 0x0
  3299  0056                     	ds	1
  3300  0057                     ??_do_I2C_SEND_ADR_WRITE:	
  3301  0057                     ??_do_I2C_TX:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0057                     ??_DATAEE_WriteByte:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0057                     i2c_close@ret:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0057                     DATAEE_WriteByte@bAdd:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0057                     bcdHourIncr@hr:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0057                     bcdHourDecr@hr:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319  0057                     bcdMinuteIncr@mn:	
  3320                           ; 1 bytes @ 0x1
  3321                           
  3322  0057                     bcdMinuteDecr@mn:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325                           
  3326                           ; 1 bytes @ 0x1
  3327  0057                     	ds	1
  3328  0058                     ??_i2c_driver_setBusCollisionISR:	
  3329  0058                     ??_i2c_driver_setI2cISR:	
  3330                           ; 1 bytes @ 0x2
  3331                           
  3332  0058                     ??_PIN_MANAGER_Initialize:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335  0058                     ??_TMR0_Initialize:	
  3336                           ; 1 bytes @ 0x2
  3337                           
  3338  0058                     ??_EUSART_Initialize:	
  3339                           ; 1 bytes @ 0x2
  3340                           
  3341  0058                     ??_IOCBF4_SetInterruptHandler:	
  3342                           ; 1 bytes @ 0x2
  3343                           
  3344  0058                     ??_TMR0_SetInterruptHandler:	
  3345                           ; 1 bytes @ 0x2
  3346                           
  3347  0058                     ??_EUSART_SetFramingErrorHandler:	
  3348                           ; 1 bytes @ 0x2
  3349                           
  3350  0058                     ??_EUSART_SetOverrunErrorHandler:	
  3351                           ; 1 bytes @ 0x2
  3352                           
  3353  0058                     ??_EUSART_SetErrorHandler:	
  3354                           ; 1 bytes @ 0x2
  3355                           
  3356  0058                     ??_i2c_open:	
  3357                           ; 1 bytes @ 0x2
  3358                           
  3359  0058                     ??_i2c_setBuffer:	
  3360                           ; 1 bytes @ 0x2
  3361                           
  3362  0058                     ??_ADC_GetConversion:	
  3363                           ; 1 bytes @ 0x2
  3364                           
  3365  0058                     setCallBack@p:	
  3366                           ; 1 bytes @ 0x2
  3367                           
  3368  0058                     DATAEE_WriteByte@GIEBitValue:	
  3369                           ; 1 bytes @ 0x2
  3370                           
  3371  0058                     ___lwdiv@dividend:	
  3372                           ; 1 bytes @ 0x2
  3373                           
  3374  0058                     ___lwmod@dividend:	
  3375                           ; 2 bytes @ 0x2
  3376                           
  3377                           
  3378                           ; 2 bytes @ 0x2
  3379  0058                     	ds	1
  3380  0059                     ??_setCallBack:	
  3381  0059                     ??_SYSTEM_Initialize:	
  3382                           ; 1 bytes @ 0x3
  3383                           
  3384  0059                     i2c_open@address:	
  3385                           ; 1 bytes @ 0x3
  3386                           
  3387  0059                     i2c_setBuffer@buffer:	
  3388                           ; 1 bytes @ 0x3
  3389                           
  3390  0059                     ADC_GetConversion@channel:	
  3391                           ; 1 bytes @ 0x3
  3392                           
  3393                           
  3394                           ; 1 bytes @ 0x3
  3395  0059                     	ds	1
  3396  005A                     ??_i2c_ISR:	
  3397  005A                     ??___lwdiv:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  005A                     ??___lwmod:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  005A                     ?_FIR_filter:	
  3404                           ; 1 bytes @ 0x4
  3405                           
  3406  005A                     i2c_open@ret:	
  3407                           ; 2 bytes @ 0x4
  3408                           
  3409  005A                     setCallBack@idx:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  005A                     FIR_filter@sample:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415                           
  3416                           ; 2 bytes @ 0x4
  3417  005A                     	ds	1
  3418  005B                     ?_i2c_setDataCompleteCallback:	
  3419  005B                     ?_i2c_setAddressNACKCallback:	
  3420                           ; 1 bytes @ 0x5
  3421                           
  3422  005B                     ___lwdiv@counter:	
  3423                           ; 1 bytes @ 0x5
  3424                           
  3425  005B                     ___lwmod@counter:	
  3426                           ; 1 bytes @ 0x5
  3427                           
  3428  005B                     i2c_setDataCompleteCallback@cb:	
  3429                           ; 1 bytes @ 0x5
  3430                           
  3431  005B                     i2c_setAddressNACKCallback@cb:	
  3432                           ; 2 bytes @ 0x5
  3433                           
  3434                           
  3435                           ; 2 bytes @ 0x5
  3436  005B                     	ds	1
  3437  005C                     ??_FIR_filter:	
  3438  005C                     ___lwdiv@quotient:	
  3439                           ; 1 bytes @ 0x6
  3440                           
  3441                           
  3442                           ; 2 bytes @ 0x6
  3443  005C                     	ds	1
  3444  005D                     ??_i2c_poller:	
  3445  005D                     ??_i2c_masterOperation:	
  3446                           ; 1 bytes @ 0x7
  3447                           
  3448  005D                     i2c_setDataCompleteCallback@p:	
  3449                           ; 1 bytes @ 0x7
  3450                           
  3451  005D                     i2c_setAddressNACKCallback@p:	
  3452                           ; 1 bytes @ 0x7
  3453                           
  3454                           
  3455                           ; 1 bytes @ 0x7
  3456  005D                     	ds	1
  3457  005E                     ??_i2c_setDataCompleteCallback:	
  3458  005E                     ??_i2c_setAddressNACKCallback:	
  3459                           ; 1 bytes @ 0x8
  3460                           
  3461  005E                     i2c_masterOperation@read:	
  3462                           ; 1 bytes @ 0x8
  3463                           
  3464                           
  3465                           ; 1 bytes @ 0x8
  3466  005E                     	ds	1
  3467  005F                     ?_returnStop:	
  3468  005F                     ?_returnReset:	
  3469                           ; 1 bytes @ 0x9
  3470                           
  3471  005F                     ?_i2c_restartWrite:	
  3472                           ; 1 bytes @ 0x9
  3473                           
  3474  005F                     ?_wr1RegCompleteHandler:	
  3475                           ; 1 bytes @ 0x9
  3476                           
  3477  005F                     ?_rd1RegCompleteHandler:	
  3478                           ; 1 bytes @ 0x9
  3479                           
  3480  005F                     ?_rd2RegCompleteHandler:	
  3481                           ; 1 bytes @ 0x9
  3482                           
  3483  005F                     ?_wr2RegCompleteHandler:	
  3484                           ; 1 bytes @ 0x9
  3485                           
  3486  005F                     ?_rdBlkRegCompleteHandler:	
  3487                           ; 1 bytes @ 0x9
  3488                           
  3489  005F                     i2c_masterOperation@ret:	
  3490                           ; 1 bytes @ 0x9
  3491                           
  3492  005F                     returnStop@p:	
  3493                           ; 1 bytes @ 0x9
  3494                           
  3495  005F                     returnReset@p:	
  3496                           ; 1 bytes @ 0x9
  3497                           
  3498  005F                     wr1RegCompleteHandler@p:	
  3499                           ; 1 bytes @ 0x9
  3500                           
  3501  005F                     rd1RegCompleteHandler@p:	
  3502                           ; 1 bytes @ 0x9
  3503                           
  3504  005F                     rd2RegCompleteHandler@p:	
  3505                           ; 1 bytes @ 0x9
  3506                           
  3507  005F                     wr2RegCompleteHandler@p:	
  3508                           ; 1 bytes @ 0x9
  3509                           
  3510  005F                     rdBlkRegCompleteHandler@p:	
  3511                           ; 1 bytes @ 0x9
  3512                           
  3513  005F                     i2c_restartWrite@p:	
  3514                           ; 1 bytes @ 0x9
  3515                           
  3516                           
  3517                           ; 1 bytes @ 0x9
  3518  005F                     	ds	1
  3519  0060                     ??_returnStop:	
  3520  0060                     ??_returnReset:	
  3521                           ; 1 bytes @ 0xA
  3522                           
  3523  0060                     ??_i2c_restartWrite:	
  3524                           ; 1 bytes @ 0xA
  3525                           
  3526  0060                     ??_i2c_masterWrite:	
  3527                           ; 1 bytes @ 0xA
  3528                           
  3529  0060                     ??_wr1RegCompleteHandler:	
  3530                           ; 1 bytes @ 0xA
  3531                           
  3532  0060                     ?_i2c_writeNBytes:	
  3533                           ; 1 bytes @ 0xA
  3534                           
  3535  0060                     ??_rd1RegCompleteHandler:	
  3536                           ; 1 bytes @ 0xA
  3537                           
  3538  0060                     ??_rd2RegCompleteHandler:	
  3539                           ; 1 bytes @ 0xA
  3540                           
  3541  0060                     ??_wr2RegCompleteHandler:	
  3542                           ; 1 bytes @ 0xA
  3543                           
  3544  0060                     ??_rdBlkRegCompleteHandler:	
  3545                           ; 1 bytes @ 0xA
  3546                           
  3547  0060                     ?_i2c_readDataBlock:	
  3548                           ; 1 bytes @ 0xA
  3549                           
  3550  0060                     i2c_writeNBytes@data:	
  3551                           ; 1 bytes @ 0xA
  3552                           
  3553  0060                     i2c_readDataBlock@reg:	
  3554                           ; 1 bytes @ 0xA
  3555                           
  3556                           
  3557                           ; 1 bytes @ 0xA
  3558  0060                     	ds	1
  3559  0061                     i2c_readDataBlock@data:	
  3560  0061                     i2c_writeNBytes@len:	
  3561                           ; 1 bytes @ 0xB
  3562                           
  3563                           
  3564                           ; 2 bytes @ 0xB
  3565  0061                     	ds	1
  3566  0062                     ?_intToBCD:	
  3567  0062                     i2c_readDataBlock@len:	
  3568                           ; 2 bytes @ 0xC
  3569                           
  3570  0062                     intToBCD@binaryInput:	
  3571                           ; 2 bytes @ 0xC
  3572                           
  3573                           
  3574                           ; 2 bytes @ 0xC
  3575  0062                     	ds	1
  3576  0063                     ??_i2c_writeNBytes:	
  3577  0063                     i2c_writeNBytes@address:	
  3578                           ; 1 bytes @ 0xD
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0xD
  3582  0063                     	ds	1
  3583  0064                     ??_i2c_readDataBlock:	
  3584  0064                     ?_updateRTC:	
  3585                           ; 1 bytes @ 0xE
  3586                           
  3587  0064                     ?_updateAlarm1:	
  3588                           ; 1 bytes @ 0xE
  3589                           
  3590  0064                     ?_updateAlarm2:	
  3591                           ; 1 bytes @ 0xE
  3592                           
  3593  0064                     ??_updateDate:	
  3594                           ; 1 bytes @ 0xE
  3595                           
  3596  0064                     ??_updateMonth:	
  3597                           ; 1 bytes @ 0xE
  3598                           
  3599  0064                     ??_intToBCD:	
  3600                           ; 1 bytes @ 0xE
  3601                           
  3602  0064                     updateRTC@bcdMinute:	
  3603                           ; 1 bytes @ 0xE
  3604                           
  3605  0064                     updateAlarm1@bcdMinute:	
  3606                           ; 1 bytes @ 0xE
  3607                           
  3608  0064                     updateAlarm2@bcdMinute:	
  3609                           ; 1 bytes @ 0xE
  3610                           
  3611                           
  3612                           ; 1 bytes @ 0xE
  3613  0064                     	ds	1
  3614  0065                     ??_updateRTC:	
  3615  0065                     ??_updateAlarm1:	
  3616                           ; 1 bytes @ 0xF
  3617                           
  3618  0065                     ??_updateAlarm2:	
  3619                           ; 1 bytes @ 0xF
  3620                           
  3621  0065                     i2c_readDataBlock@address:	
  3622                           ; 1 bytes @ 0xF
  3623                           
  3624  0065                     updateDate@bcdDate:	
  3625                           ; 1 bytes @ 0xF
  3626                           
  3627  0065                     updateMonth@bcdMonth:	
  3628                           ; 1 bytes @ 0xF
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0xF
  3632  0065                     	ds	1
  3633  0066                     updateRTC@bcdHour:	
  3634  0066                     updateAlarm1@bcdHour:	
  3635                           ; 1 bytes @ 0x10
  3636                           
  3637  0066                     updateAlarm2@bcdHour:	
  3638                           ; 1 bytes @ 0x10
  3639                           
  3640  0066                     i2c_readDataBlock@d:	
  3641                           ; 1 bytes @ 0x10
  3642                           
  3643                           
  3644                           ; 3 bytes @ 0x10
  3645  0066                     	ds	1
  3646  0067                     intToBCD@bcdResult:	
  3647                           
  3648                           ; 2 bytes @ 0x11
  3649  0067                     	ds	2
  3650  0069                     ??_initRTC:	
  3651  0069                     intToBCD@shift:	
  3652                           ; 1 bytes @ 0x13
  3653                           
  3654                           
  3655                           ; 2 bytes @ 0x13
  3656  0069                     	ds	2
  3657  006B                     ??_main:	
  3658                           
  3659                           ; 1 bytes @ 0x15
  3660  006B                     	ds	5
  3661                           
  3662                           	psect	maintext
  3663  005F                     __pmaintext:	
  3664 ;;
  3665 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  3666 ;;
  3667 ;; *************** function _main *****************
  3668 ;; Defined at:
  3669 ;;		line 377 in file "main.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;		None
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;		None
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : B1F/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3685 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3686 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3687 ;;Total ram usage:        5 bytes
  3688 ;; Hardware stack levels required when called:   16
  3689 ;; This function calls:
  3690 ;;		_ADC_GetConversion
  3691 ;;		_DATAEE_ReadByte
  3692 ;;		_DATAEE_WriteByte
  3693 ;;		_FIR_filter
  3694 ;;		_IOCBF4_SetInterruptHandler
  3695 ;;		_SYSTEM_Initialize
  3696 ;;		_TMR0_SetInterruptHandler
  3697 ;;		_bcdDateDecr
  3698 ;;		_bcdDateIncr
  3699 ;;		_bcdHourDecr
  3700 ;;		_bcdHourIncr
  3701 ;;		_bcdMinuteDecr
  3702 ;;		_bcdMinuteIncr
  3703 ;;		_bcdMonthDecr
  3704 ;;		_bcdMonthIncr
  3705 ;;		_i2c_readDataBlock
  3706 ;;		_initRTC
  3707 ;;		_intToBCD
  3708 ;;		_updateAlarm1
  3709 ;;		_updateAlarm2
  3710 ;;		_updateDate
  3711 ;;		_updateMonth
  3712 ;;		_updateRTC
  3713 ;; This function is called by:
  3714 ;;		Startup code after reset
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function _main
  3720  005F                     _main:	
  3721  005F                     l7627:	
  3722                           ;incstack = 0
  3723                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3724                           
  3725                           
  3726                           ;main.c: 380:     SYSTEM_Initialize();
  3727  005F  3188  202E  3180   	fcall	_SYSTEM_Initialize
  3728  0062                     l7629:	
  3729  0062  0022               	movlb	2	; select bank2
  3730  0063  1090               	bcf	16,1	;volatile
  3731  0064                     l7631:	
  3732  0064  108E               	bcf	14,1	;volatile
  3733  0065                     l7633:	
  3734  0065  120C               	bcf	12,4	;volatile
  3735  0066                     l7635:	
  3736  0066  118C               	bcf	12,3	;volatile
  3737  0067                     l7637:	
  3738                           
  3739                           ;main.c: 388:     mode = MODE_NORMAL;
  3740  0067  0020               	movlb	0	; select bank0
  3741  0068  01BF               	clrf	_mode	;volatile
  3742  0069                     l7639:	
  3743                           
  3744                           ;main.c: 389:     flag_alarm1 = 0;
  3745  0069  01BC               	clrf	_flag_alarm1
  3746  006A                     l7641:	
  3747                           
  3748                           ;main.c: 390:     flag_alarm2 = 0;
  3749  006A  01BB               	clrf	_flag_alarm2
  3750  006B                     l7643:	
  3751                           
  3752                           ;main.c: 393:     display_mode = DATAEE_ReadByte(0x01);
  3753  006B  3001               	movlw	1
  3754  006C  3197  272F  3180   	fcall	_DATAEE_ReadByte
  3755  006F  0020               	movlb	0	; select bank0
  3756  0070  00EB               	movwf	??_main
  3757  0071  086B               	movf	??_main,w
  3758  0072  00BA               	movwf	_display_mode
  3759  0073                     l7645:	
  3760                           
  3761                           ;main.c: 395:     if(display_mode >= DISPLAY_MODE_END){
  3762  0073  3005               	movlw	5
  3763  0074  023A               	subwf	_display_mode,w
  3764  0075  1C03               	skipc
  3765  0076  2878               	goto	u5891
  3766  0077  2879               	goto	u5890
  3767  0078                     u5891:	
  3768  0078  287A               	goto	l7649
  3769  0079                     u5890:	
  3770  0079                     l7647:	
  3771                           
  3772                           ;main.c: 396:         display_mode = DISPLAY_MODE_TIME;
  3773  0079  01BA               	clrf	_display_mode
  3774  007A                     l7649:	
  3775                           
  3776                           ;main.c: 399:     IOCBF4_SetInterruptHandler(&secondISR);
  3777  007A  3033               	movlw	low _secondISR
  3778  007B  00D6               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
  3779  007C  300C               	movlw	high _secondISR
  3780  007D  00D7               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
  3781  007E  3196  2677  3180   	fcall	_IOCBF4_SetInterruptHandler
  3782  0081                     l7651:	
  3783                           
  3784                           ;main.c: 400:     TMR0_SetInterruptHandler(&displayRefreshISR);
  3785  0081  3008               	movlw	low _displayRefreshISR
  3786  0082  0020               	movlb	0	; select bank0
  3787  0083  00D6               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3788  0084  3007               	movlw	high _displayRefreshISR
  3789  0085  00D7               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3790  0086  3195  25FD  3180   	fcall	_TMR0_SetInterruptHandler
  3791  0089                     l7653:	
  3792                           
  3793                           ;main.c: 405:     (INTCONbits.GIE = 1);
  3794  0089  178B               	bsf	11,7	;volatile
  3795  008A                     l7655:	
  3796                           
  3797                           ;main.c: 408:     (INTCONbits.PEIE = 1);
  3798  008A  170B               	bsf	11,6	;volatile
  3799  008B                     l7657:	
  3800                           
  3801                           ;main.c: 416:     initRTC();
  3802  008B  318F  274D  3180   	fcall	_initRTC
  3803  008E                     l1021:	
  3804                           ;main.c: 418:     while (1)
  3805                           
  3806  008E  0064               	clrwdt	;# 
  3807  008F                     l7659:	
  3808                           
  3809                           ;main.c: 424:         if(PORTBbits.RB0 == 0){
  3810  008F  0020               	movlb	0	; select bank0
  3811  0090  180D               	btfsc	13,0	;volatile
  3812  0091  2893               	goto	u5901
  3813  0092  2894               	goto	u5900
  3814  0093                     u5901:	
  3815  0093  2897               	goto	l1022
  3816  0094                     u5900:	
  3817  0094                     l7661:	
  3818                           
  3819                           ;main.c: 425:             flag_button_press_count[0] = 1;
  3820  0094  01A4               	clrf	_flag_button_press_count
  3821  0095  0AA4               	incf	_flag_button_press_count,f
  3822                           
  3823                           ;main.c: 426:         } else if(PORTBbits.RB1 == 0){
  3824  0096  2B12               	goto	l7943
  3825  0097                     l1022:	
  3826  0097  188D               	btfsc	13,1	;volatile
  3827  0098  289A               	goto	u5911
  3828  0099  289B               	goto	u5910
  3829  009A                     u5911:	
  3830  009A  289E               	goto	l1024
  3831  009B                     u5910:	
  3832  009B                     l7663:	
  3833                           
  3834                           ;main.c: 427:             flag_button_press_count[1] = 1;
  3835  009B  01A5               	clrf	_flag_button_press_count+1
  3836  009C  0AA5               	incf	_flag_button_press_count+1,f
  3837                           
  3838                           ;main.c: 428:         } else if(PORTBbits.RB2 == 0){
  3839  009D  2B12               	goto	l7943
  3840  009E                     l1024:	
  3841  009E  190D               	btfsc	13,2	;volatile
  3842  009F  28A1               	goto	u5921
  3843  00A0  28A2               	goto	u5920
  3844  00A1                     u5921:	
  3845  00A1  28A5               	goto	l1026
  3846  00A2                     u5920:	
  3847  00A2                     l7665:	
  3848                           
  3849                           ;main.c: 429:             flag_button_press_count[2] = 1;
  3850  00A2  01A6               	clrf	_flag_button_press_count+2
  3851  00A3  0AA6               	incf	_flag_button_press_count+2,f
  3852                           
  3853                           ;main.c: 430:         } else if(PORTBbits.RB3 == 0){
  3854  00A4  2B12               	goto	l7943
  3855  00A5                     l1026:	
  3856  00A5  198D               	btfsc	13,3	;volatile
  3857  00A6  28A8               	goto	u5931
  3858  00A7  28A9               	goto	u5930
  3859  00A8                     u5931:	
  3860  00A8  28AC               	goto	l7669
  3861  00A9                     u5930:	
  3862  00A9                     l7667:	
  3863                           
  3864                           ;main.c: 431:             flag_button_press_count[3] = 1;
  3865  00A9  01A7               	clrf	_flag_button_press_count+3
  3866  00AA  0AA7               	incf	_flag_button_press_count+3,f
  3867                           
  3868                           ;main.c: 432:         } else {
  3869  00AB  2B12               	goto	l7943
  3870  00AC                     l7669:	
  3871                           
  3872                           ;main.c: 433:             if(flag_button_press_count[0] == 1){
  3873  00AC  0324               	decf	_flag_button_press_count,w
  3874  00AD  1D03               	btfss	3,2
  3875  00AE  28B0               	goto	u5941
  3876  00AF  28B1               	goto	u5940
  3877  00B0                     u5941:	
  3878  00B0  2954               	goto	l7731
  3879  00B1                     u5940:	
  3880  00B1                     l7671:	
  3881                           
  3882                           ;main.c: 434:                 if(button_press_count[0] > 5 && button_press_count[0] < 10
      +                          0){
  3883  00B1  3006               	movlw	6
  3884  00B2  0220               	subwf	_button_press_count,w
  3885  00B3  1C03               	skipc
  3886  00B4  28B6               	goto	u5951
  3887  00B5  28B7               	goto	u5950
  3888  00B6                     u5951:	
  3889  00B6  2952               	goto	l1031
  3890  00B7                     u5950:	
  3891  00B7                     l7673:	
  3892  00B7  3064               	movlw	100
  3893  00B8  0220               	subwf	_button_press_count,w
  3894  00B9  1803               	skipnc
  3895  00BA  28BC               	goto	u5961
  3896  00BB  28BD               	goto	u5960
  3897  00BC                     u5961:	
  3898  00BC  2952               	goto	l1031
  3899  00BD                     u5960:	
  3900  00BD                     l7675:	
  3901                           
  3902                           ;main.c: 435:                     if(mode == MODE_NORMAL){
  3903  00BD  083F               	movf	_mode,w	;volatile
  3904  00BE  1D03               	btfss	3,2
  3905  00BF  28C1               	goto	u5971
  3906  00C0  28C2               	goto	u5970
  3907  00C1                     u5971:	
  3908  00C1  28CD               	goto	l7681
  3909  00C2                     u5970:	
  3910  00C2                     l7677:	
  3911                           
  3912                           ;main.c: 436:                         mode = MODE_SET_HOUR;
  3913  00C2  3002               	movlw	2
  3914  00C3  00EB               	movwf	??_main
  3915  00C4  086B               	movf	??_main,w
  3916  00C5  00BF               	movwf	_mode	;volatile
  3917                           
  3918                           ;main.c: 437:                         mode_timeout_count = 18;
  3919  00C6  3012               	movlw	18
  3920  00C7  00EB               	movwf	??_main
  3921  00C8  086B               	movf	??_main,w
  3922  00C9  00BE               	movwf	_mode_timeout_count	;volatile
  3923  00CA                     l7679:	
  3924                           
  3925                           ;main.c: 438:                         flag_time_display_update = 1;
  3926  00CA  01C1               	clrf	_flag_time_display_update
  3927  00CB  0AC1               	incf	_flag_time_display_update,f
  3928                           
  3929                           ;main.c: 439:                     } else if(mode == MODE_SET_HOUR){
  3930  00CC  2952               	goto	l1031
  3931  00CD                     l7681:	
  3932  00CD  3002               	movlw	2
  3933  00CE  063F               	xorwf	_mode,w	;volatile
  3934  00CF  1D03               	btfss	3,2
  3935  00D0  28D2               	goto	u5981
  3936  00D1  28D3               	goto	u5980
  3937  00D2                     u5981:	
  3938  00D2  28DC               	goto	l7687
  3939  00D3                     u5980:	
  3940  00D3                     l7683:	
  3941                           
  3942                           ;main.c: 440:                         mode = MODE_SET_MINUTE;
  3943  00D3  3003               	movlw	3
  3944  00D4  00EB               	movwf	??_main
  3945  00D5  086B               	movf	??_main,w
  3946  00D6  00BF               	movwf	_mode	;volatile
  3947                           
  3948                           ;main.c: 441:                         mode_timeout_count = 18;
  3949  00D7  3012               	movlw	18
  3950  00D8  00EB               	movwf	??_main
  3951  00D9  086B               	movf	??_main,w
  3952  00DA  00BE               	movwf	_mode_timeout_count	;volatile
  3953  00DB  28CA               	goto	l7679
  3954  00DC                     l7687:	
  3955  00DC  3003               	movlw	3
  3956  00DD  063F               	xorwf	_mode,w	;volatile
  3957  00DE  1D03               	btfss	3,2
  3958  00DF  28E1               	goto	u5991
  3959  00E0  28E2               	goto	u5990
  3960  00E1                     u5991:	
  3961  00E1  28EF               	goto	l7693
  3962  00E2                     u5990:	
  3963  00E2                     l7689:	
  3964                           
  3965                           ;main.c: 444:                         mode = MODE_SET_MONTH;
  3966  00E2  3004               	movlw	4
  3967  00E3  00EB               	movwf	??_main
  3968  00E4  086B               	movf	??_main,w
  3969  00E5  00BF               	movwf	_mode	;volatile
  3970                           
  3971                           ;main.c: 445:                         mode_timeout_count = 18;
  3972  00E6  3012               	movlw	18
  3973  00E7  00EB               	movwf	??_main
  3974  00E8  086B               	movf	??_main,w
  3975  00E9  00BE               	movwf	_mode_timeout_count	;volatile
  3976                           
  3977                           ;main.c: 446:                         mode_flash_count = 4;
  3978  00EA  3004               	movlw	4
  3979  00EB  00EB               	movwf	??_main
  3980  00EC  086B               	movf	??_main,w
  3981  00ED  00BD               	movwf	_mode_flash_count	;volatile
  3982  00EE  28CA               	goto	l7679
  3983  00EF                     l7693:	
  3984  00EF  3004               	movlw	4
  3985  00F0  063F               	xorwf	_mode,w	;volatile
  3986  00F1  1D03               	btfss	3,2
  3987  00F2  28F4               	goto	u6001
  3988  00F3  28F5               	goto	u6000
  3989  00F4                     u6001:	
  3990  00F4  28FE               	goto	l7699
  3991  00F5                     u6000:	
  3992  00F5                     l7695:	
  3993                           
  3994                           ;main.c: 449:                         mode = MODE_SET_DATE;
  3995  00F5  3005               	movlw	5
  3996  00F6  00EB               	movwf	??_main
  3997  00F7  086B               	movf	??_main,w
  3998  00F8  00BF               	movwf	_mode	;volatile
  3999                           
  4000                           ;main.c: 450:                         mode_timeout_count = 18;
  4001  00F9  3012               	movlw	18
  4002  00FA  00EB               	movwf	??_main
  4003  00FB  086B               	movf	??_main,w
  4004  00FC  00BE               	movwf	_mode_timeout_count	;volatile
  4005  00FD  28CA               	goto	l7679
  4006  00FE                     l7699:	
  4007  00FE  3005               	movlw	5
  4008  00FF  063F               	xorwf	_mode,w	;volatile
  4009  0100  1D03               	btfss	3,2
  4010  0101  2903               	goto	u6011
  4011  0102  2904               	goto	u6010
  4012  0103                     u6011:	
  4013  0103  2911               	goto	l7705
  4014  0104                     u6010:	
  4015  0104                     l7701:	
  4016                           
  4017                           ;main.c: 453:                         mode = MODE_SET_AL1_H;
  4018  0104  3006               	movlw	6
  4019  0105  00EB               	movwf	??_main
  4020  0106  086B               	movf	??_main,w
  4021  0107  00BF               	movwf	_mode	;volatile
  4022                           
  4023                           ;main.c: 454:                         mode_timeout_count = 18;
  4024  0108  3012               	movlw	18
  4025  0109  00EB               	movwf	??_main
  4026  010A  086B               	movf	??_main,w
  4027  010B  00BE               	movwf	_mode_timeout_count	;volatile
  4028                           
  4029                           ;main.c: 455:                         mode_flash_count = 4;
  4030  010C  3004               	movlw	4
  4031  010D  00EB               	movwf	??_main
  4032  010E  086B               	movf	??_main,w
  4033  010F  00BD               	movwf	_mode_flash_count	;volatile
  4034  0110  28CA               	goto	l7679
  4035  0111                     l7705:	
  4036  0111  3006               	movlw	6
  4037  0112  063F               	xorwf	_mode,w	;volatile
  4038  0113  1D03               	btfss	3,2
  4039  0114  2916               	goto	u6021
  4040  0115  2917               	goto	u6020
  4041  0116                     u6021:	
  4042  0116  2920               	goto	l7711
  4043  0117                     u6020:	
  4044  0117                     l7707:	
  4045                           
  4046                           ;main.c: 458:                         mode = MODE_SET_AL1_M;
  4047  0117  3007               	movlw	7
  4048  0118  00EB               	movwf	??_main
  4049  0119  086B               	movf	??_main,w
  4050  011A  00BF               	movwf	_mode	;volatile
  4051                           
  4052                           ;main.c: 459:                         mode_timeout_count = 18;
  4053  011B  3012               	movlw	18
  4054  011C  00EB               	movwf	??_main
  4055  011D  086B               	movf	??_main,w
  4056  011E  00BE               	movwf	_mode_timeout_count	;volatile
  4057  011F  28CA               	goto	l7679
  4058  0120                     l7711:	
  4059  0120  3007               	movlw	7
  4060  0121  063F               	xorwf	_mode,w	;volatile
  4061  0122  1D03               	btfss	3,2
  4062  0123  2925               	goto	u6031
  4063  0124  2926               	goto	u6030
  4064  0125                     u6031:	
  4065  0125  2933               	goto	l7717
  4066  0126                     u6030:	
  4067  0126                     l7713:	
  4068                           
  4069                           ;main.c: 462:                         mode = MODE_SET_AL2_H;
  4070  0126  3008               	movlw	8
  4071  0127  00EB               	movwf	??_main
  4072  0128  086B               	movf	??_main,w
  4073  0129  00BF               	movwf	_mode	;volatile
  4074                           
  4075                           ;main.c: 463:                         mode_timeout_count = 18;
  4076  012A  3012               	movlw	18
  4077  012B  00EB               	movwf	??_main
  4078  012C  086B               	movf	??_main,w
  4079  012D  00BE               	movwf	_mode_timeout_count	;volatile
  4080                           
  4081                           ;main.c: 464:                         mode_flash_count = 4;
  4082  012E  3004               	movlw	4
  4083  012F  00EB               	movwf	??_main
  4084  0130  086B               	movf	??_main,w
  4085  0131  00BD               	movwf	_mode_flash_count	;volatile
  4086  0132  28CA               	goto	l7679
  4087  0133                     l7717:	
  4088  0133  3008               	movlw	8
  4089  0134  063F               	xorwf	_mode,w	;volatile
  4090  0135  1D03               	btfss	3,2
  4091  0136  2938               	goto	u6041
  4092  0137  2939               	goto	u6040
  4093  0138                     u6041:	
  4094  0138  2942               	goto	l7723
  4095  0139                     u6040:	
  4096  0139                     l7719:	
  4097                           
  4098                           ;main.c: 467:                         mode = MODE_SET_AL2_M;
  4099  0139  3009               	movlw	9
  4100  013A  00EB               	movwf	??_main
  4101  013B  086B               	movf	??_main,w
  4102  013C  00BF               	movwf	_mode	;volatile
  4103                           
  4104                           ;main.c: 468:                         mode_timeout_count = 18;
  4105  013D  3012               	movlw	18
  4106  013E  00EB               	movwf	??_main
  4107  013F  086B               	movf	??_main,w
  4108  0140  00BE               	movwf	_mode_timeout_count	;volatile
  4109  0141  28CA               	goto	l7679
  4110  0142                     l7723:	
  4111  0142  3009               	movlw	9
  4112  0143  063F               	xorwf	_mode,w	;volatile
  4113  0144  1D03               	btfss	3,2
  4114  0145  2947               	goto	u6051
  4115  0146  2948               	goto	u6050
  4116  0147                     u6051:	
  4117  0147  2951               	goto	l7729
  4118  0148                     u6050:	
  4119  0148                     l7725:	
  4120                           
  4121                           ;main.c: 471:                         mode = MODE_SET_DISPLAY_MODE;
  4122  0148  300A               	movlw	10
  4123  0149  00EB               	movwf	??_main
  4124  014A  086B               	movf	??_main,w
  4125  014B  00BF               	movwf	_mode	;volatile
  4126                           
  4127                           ;main.c: 472:                         mode_timeout_count = 18;
  4128  014C  3012               	movlw	18
  4129  014D  00EB               	movwf	??_main
  4130  014E  086B               	movf	??_main,w
  4131  014F  00BE               	movwf	_mode_timeout_count	;volatile
  4132  0150  28CA               	goto	l7679
  4133  0151                     l7729:	
  4134                           
  4135                           ;main.c: 475:                         mode = MODE_NORMAL;
  4136  0151  01BF               	clrf	_mode	;volatile
  4137  0152                     l1031:	
  4138                           ;main.c: 478:                 }
  4139                           
  4140                           
  4141                           ;main.c: 479:                 button_press_count[0] = 0;
  4142  0152  01A0               	clrf	_button_press_count
  4143                           
  4144                           ;main.c: 480:                 flag_button_press_count[0] = 0;
  4145  0153  01A4               	clrf	_flag_button_press_count
  4146  0154                     l7731:	
  4147                           
  4148                           ;main.c: 483:             if(flag_button_press_count[1] == 1){
  4149  0154  0325               	decf	_flag_button_press_count+1,w
  4150  0155  1D03               	btfss	3,2
  4151  0156  2958               	goto	u6061
  4152  0157  2959               	goto	u6060
  4153  0158                     u6061:	
  4154  0158  29F7               	goto	l7815
  4155  0159                     u6060:	
  4156  0159                     l7733:	
  4157                           
  4158                           ;main.c: 484:                 if(button_press_count[1] > 5 && button_press_count[1] < 10
      +                          0){
  4159  0159  3006               	movlw	6
  4160  015A  0221               	subwf	_button_press_count+1,w
  4161  015B  1C03               	skipc
  4162  015C  295E               	goto	u6071
  4163  015D  295F               	goto	u6070
  4164  015E                     u6071:	
  4165  015E  29F5               	goto	l7811
  4166  015F                     u6070:	
  4167  015F                     l7735:	
  4168  015F  3064               	movlw	100
  4169  0160  0221               	subwf	_button_press_count+1,w
  4170  0161  1803               	skipnc
  4171  0162  2964               	goto	u6081
  4172  0163  2965               	goto	u6080
  4173  0164                     u6081:	
  4174  0164  29F5               	goto	l7811
  4175  0165                     u6080:	
  4176  0165                     l7737:	
  4177                           
  4178                           ;main.c: 486:                     if(mode == MODE_SET_HOUR){
  4179  0165  3002               	movlw	2
  4180  0166  063F               	xorwf	_mode,w	;volatile
  4181  0167  1D03               	btfss	3,2
  4182  0168  296A               	goto	u6091
  4183  0169  296B               	goto	u6090
  4184  016A                     u6091:	
  4185  016A  297A               	goto	l7745
  4186  016B                     u6090:	
  4187  016B                     l7739:	
  4188                           
  4189                           ;main.c: 487:                         rtcData[0x02] = bcdHourIncr(rtcData[0x02]);
  4190  016B  0844               	movf	_rtcData+2,w
  4191  016C  3189  2177  3180   	fcall	_bcdHourIncr
  4192  016F  0020               	movlb	0	; select bank0
  4193  0170  00EB               	movwf	??_main
  4194  0171  086B               	movf	??_main,w
  4195  0172  00C4               	movwf	_rtcData+2
  4196  0173                     l7741:	
  4197                           
  4198                           ;main.c: 488:                         mode_timeout_count = 18;
  4199  0173  3012               	movlw	18
  4200  0174  00EB               	movwf	??_main
  4201  0175  086B               	movf	??_main,w
  4202  0176  00BE               	movwf	_mode_timeout_count	;volatile
  4203  0177                     l7743:	
  4204                           
  4205                           ;main.c: 489:                         flag_time_display_update = 1;
  4206  0177  01C1               	clrf	_flag_time_display_update
  4207  0178  0AC1               	incf	_flag_time_display_update,f
  4208                           
  4209                           ;main.c: 490:                     } else if(mode == MODE_SET_MINUTE){
  4210  0179  29F5               	goto	l7811
  4211  017A                     l7745:	
  4212  017A  3003               	movlw	3
  4213  017B  063F               	xorwf	_mode,w	;volatile
  4214  017C  1D03               	btfss	3,2
  4215  017D  297F               	goto	u6101
  4216  017E  2980               	goto	u6100
  4217  017F                     u6101:	
  4218  017F  2989               	goto	l7753
  4219  0180                     u6100:	
  4220  0180                     l7747:	
  4221                           
  4222                           ;main.c: 491:                         rtcData[0x01] = bcdMinuteIncr(rtcData[0x01]);
  4223  0180  0843               	movf	_rtcData+1,w
  4224  0181  318C  24D5  3180   	fcall	_bcdMinuteIncr
  4225  0184  0020               	movlb	0	; select bank0
  4226  0185  00EB               	movwf	??_main
  4227  0186  086B               	movf	??_main,w
  4228  0187  00C3               	movwf	_rtcData+1
  4229  0188  2973               	goto	l7741
  4230  0189                     l7753:	
  4231  0189  3004               	movlw	4
  4232  018A  063F               	xorwf	_mode,w	;volatile
  4233  018B  1D03               	btfss	3,2
  4234  018C  298E               	goto	u6111
  4235  018D  298F               	goto	u6110
  4236  018E                     u6111:	
  4237  018E  2998               	goto	l7761
  4238  018F                     u6110:	
  4239  018F                     l7755:	
  4240                           
  4241                           ;main.c: 495:                         rtcData[0x05] = bcdMonthIncr(rtcData[0x05]);
  4242  018F  0847               	movf	_rtcData+5,w
  4243  0190  3188  2003  3180   	fcall	_bcdMonthIncr
  4244  0193  0020               	movlb	0	; select bank0
  4245  0194  00EB               	movwf	??_main
  4246  0195  086B               	movf	??_main,w
  4247  0196  00C7               	movwf	_rtcData+5
  4248  0197  2973               	goto	l7741
  4249  0198                     l7761:	
  4250  0198  3005               	movlw	5
  4251  0199  063F               	xorwf	_mode,w	;volatile
  4252  019A  1D03               	btfss	3,2
  4253  019B  299D               	goto	u6121
  4254  019C  299E               	goto	u6120
  4255  019D                     u6121:	
  4256  019D  29A7               	goto	l7769
  4257  019E                     u6120:	
  4258  019E                     l7763:	
  4259                           
  4260                           ;main.c: 499:                         rtcData[0x04] = bcdDateIncr(rtcData[0x04]);
  4261  019E  0846               	movf	_rtcData+4,w
  4262  019F  318A  222A  3180   	fcall	_bcdDateIncr
  4263  01A2  0020               	movlb	0	; select bank0
  4264  01A3  00EB               	movwf	??_main
  4265  01A4  086B               	movf	??_main,w
  4266  01A5  00C6               	movwf	_rtcData+4
  4267  01A6  2973               	goto	l7741
  4268  01A7                     l7769:	
  4269  01A7  3006               	movlw	6
  4270  01A8  063F               	xorwf	_mode,w	;volatile
  4271  01A9  1D03               	btfss	3,2
  4272  01AA  29AC               	goto	u6131
  4273  01AB  29AD               	goto	u6130
  4274  01AC                     u6131:	
  4275  01AC  29B6               	goto	l7777
  4276  01AD                     u6130:	
  4277  01AD                     l7771:	
  4278                           
  4279                           ;main.c: 503:                         rtcData[0x09] = bcdHourIncr(rtcData[0x09]);
  4280  01AD  084B               	movf	_rtcData+9,w
  4281  01AE  3189  2177  3180   	fcall	_bcdHourIncr
  4282  01B1  0020               	movlb	0	; select bank0
  4283  01B2  00EB               	movwf	??_main
  4284  01B3  086B               	movf	??_main,w
  4285  01B4  00CB               	movwf	_rtcData+9
  4286  01B5  2973               	goto	l7741
  4287  01B6                     l7777:	
  4288  01B6  3007               	movlw	7
  4289  01B7  063F               	xorwf	_mode,w	;volatile
  4290  01B8  1D03               	btfss	3,2
  4291  01B9  29BB               	goto	u6141
  4292  01BA  29BC               	goto	u6140
  4293  01BB                     u6141:	
  4294  01BB  29C5               	goto	l7785
  4295  01BC                     u6140:	
  4296  01BC                     l7779:	
  4297                           
  4298                           ;main.c: 507:                         rtcData[0x08] = bcdMinuteIncr(rtcData[0x08]);
  4299  01BC  084A               	movf	_rtcData+8,w
  4300  01BD  318C  24D5  3180   	fcall	_bcdMinuteIncr
  4301  01C0  0020               	movlb	0	; select bank0
  4302  01C1  00EB               	movwf	??_main
  4303  01C2  086B               	movf	??_main,w
  4304  01C3  00CA               	movwf	_rtcData+8
  4305  01C4  2973               	goto	l7741
  4306  01C5                     l7785:	
  4307  01C5  3008               	movlw	8
  4308  01C6  063F               	xorwf	_mode,w	;volatile
  4309  01C7  1D03               	btfss	3,2
  4310  01C8  29CA               	goto	u6151
  4311  01C9  29CB               	goto	u6150
  4312  01CA                     u6151:	
  4313  01CA  29D4               	goto	l7793
  4314  01CB                     u6150:	
  4315  01CB                     l7787:	
  4316                           
  4317                           ;main.c: 511:                         rtcData[0x0C] = bcdHourIncr(rtcData[0x0C]);
  4318  01CB  084E               	movf	_rtcData+12,w
  4319  01CC  3189  2177  3180   	fcall	_bcdHourIncr
  4320  01CF  0020               	movlb	0	; select bank0
  4321  01D0  00EB               	movwf	??_main
  4322  01D1  086B               	movf	??_main,w
  4323  01D2  00CE               	movwf	_rtcData+12
  4324  01D3  2973               	goto	l7741
  4325  01D4                     l7793:	
  4326  01D4  3009               	movlw	9
  4327  01D5  063F               	xorwf	_mode,w	;volatile
  4328  01D6  1D03               	btfss	3,2
  4329  01D7  29D9               	goto	u6161
  4330  01D8  29DA               	goto	u6160
  4331  01D9                     u6161:	
  4332  01D9  29E3               	goto	l7801
  4333  01DA                     u6160:	
  4334  01DA                     l7795:	
  4335                           
  4336                           ;main.c: 515:                         rtcData[0x0B] = bcdMinuteIncr(rtcData[0x0B]);
  4337  01DA  084D               	movf	_rtcData+11,w
  4338  01DB  318C  24D5  3180   	fcall	_bcdMinuteIncr
  4339  01DE  0020               	movlb	0	; select bank0
  4340  01DF  00EB               	movwf	??_main
  4341  01E0  086B               	movf	??_main,w
  4342  01E1  00CD               	movwf	_rtcData+11
  4343  01E2  2973               	goto	l7741
  4344  01E3                     l7801:	
  4345  01E3  300A               	movlw	10
  4346  01E4  063F               	xorwf	_mode,w	;volatile
  4347  01E5  1D03               	btfss	3,2
  4348  01E6  29E8               	goto	u6171
  4349  01E7  29E9               	goto	u6170
  4350  01E8                     u6171:	
  4351  01E8  29F5               	goto	l1063
  4352  01E9                     u6170:	
  4353  01E9                     l7803:	
  4354                           
  4355                           ;main.c: 519:                         display_mode++;
  4356  01E9  3001               	movlw	1
  4357  01EA  00EB               	movwf	??_main
  4358  01EB  086B               	movf	??_main,w
  4359  01EC  07BA               	addwf	_display_mode,f
  4360                           
  4361                           ;main.c: 521:                         if(display_mode == DISPLAY_MODE_END){
  4362  01ED  3005               	movlw	5
  4363  01EE  063A               	xorwf	_display_mode,w
  4364  01EF  1D03               	btfss	3,2
  4365  01F0  29F2               	goto	u6181
  4366  01F1  29F3               	goto	u6180
  4367  01F2                     u6181:	
  4368  01F2  2973               	goto	l7741
  4369  01F3                     u6180:	
  4370  01F3                     l7805:	
  4371                           
  4372                           ;main.c: 522:                             display_mode = 0;
  4373  01F3  01BA               	clrf	_display_mode
  4374  01F4  2973               	goto	l7741
  4375  01F5                     l1063:	
  4376  01F5                     l7811:	
  4377                           
  4378                           ;main.c: 530:                 button_press_count[1] = 0;
  4379  01F5  01A1               	clrf	_button_press_count+1
  4380  01F6                     l7813:	
  4381                           
  4382                           ;main.c: 531:                 flag_button_press_count[1] = 0;
  4383  01F6  01A5               	clrf	_flag_button_press_count+1
  4384  01F7                     l7815:	
  4385                           
  4386                           ;main.c: 534:             if(flag_button_press_count[2] == 1){
  4387  01F7  0326               	decf	_flag_button_press_count+2,w
  4388  01F8  1D03               	btfss	3,2
  4389  01F9  29FB               	goto	u6191
  4390  01FA  29FC               	goto	u6190
  4391  01FB                     u6191:	
  4392  01FB  2A96               	goto	l7899
  4393  01FC                     u6190:	
  4394  01FC                     l7817:	
  4395                           
  4396                           ;main.c: 535:                 if(button_press_count[2] > 5 && button_press_count[2] < 10
      +                          0){
  4397  01FC  3006               	movlw	6
  4398  01FD  0222               	subwf	_button_press_count+2,w
  4399  01FE  1C03               	skipc
  4400  01FF  2A01               	goto	u6201
  4401  0200  2A02               	goto	u6200
  4402  0201                     u6201:	
  4403  0201  2A94               	goto	l7895
  4404  0202                     u6200:	
  4405  0202                     l7819:	
  4406  0202  3064               	movlw	100
  4407  0203  0222               	subwf	_button_press_count+2,w
  4408  0204  1803               	skipnc
  4409  0205  2A07               	goto	u6211
  4410  0206  2A08               	goto	u6210
  4411  0207                     u6211:	
  4412  0207  2A94               	goto	l7895
  4413  0208                     u6210:	
  4414  0208                     l7821:	
  4415                           
  4416                           ;main.c: 537:                     if(mode == MODE_SET_HOUR){
  4417  0208  3002               	movlw	2
  4418  0209  063F               	xorwf	_mode,w	;volatile
  4419  020A  1D03               	btfss	3,2
  4420  020B  2A0D               	goto	u6221
  4421  020C  2A0E               	goto	u6220
  4422  020D                     u6221:	
  4423  020D  2A1D               	goto	l7829
  4424  020E                     u6220:	
  4425  020E                     l7823:	
  4426                           
  4427                           ;main.c: 538:                         rtcData[0x02] = bcdHourDecr(rtcData[0x02]);
  4428  020E  0844               	movf	_rtcData+2,w
  4429  020F  3189  2157  3180   	fcall	_bcdHourDecr
  4430  0212  0020               	movlb	0	; select bank0
  4431  0213  00EB               	movwf	??_main
  4432  0214  086B               	movf	??_main,w
  4433  0215  00C4               	movwf	_rtcData+2
  4434  0216                     l7825:	
  4435                           
  4436                           ;main.c: 539:                         mode_timeout_count = 18;
  4437  0216  3012               	movlw	18
  4438  0217  00EB               	movwf	??_main
  4439  0218  086B               	movf	??_main,w
  4440  0219  00BE               	movwf	_mode_timeout_count	;volatile
  4441  021A                     l7827:	
  4442                           
  4443                           ;main.c: 540:                         flag_time_display_update = 1;
  4444  021A  01C1               	clrf	_flag_time_display_update
  4445  021B  0AC1               	incf	_flag_time_display_update,f
  4446                           
  4447                           ;main.c: 541:                     } else if(mode == MODE_SET_MINUTE){
  4448  021C  2A94               	goto	l7895
  4449  021D                     l7829:	
  4450  021D  3003               	movlw	3
  4451  021E  063F               	xorwf	_mode,w	;volatile
  4452  021F  1D03               	btfss	3,2
  4453  0220  2A22               	goto	u6231
  4454  0221  2A23               	goto	u6230
  4455  0222                     u6231:	
  4456  0222  2A2C               	goto	l7837
  4457  0223                     u6230:	
  4458  0223                     l7831:	
  4459                           
  4460                           ;main.c: 542:                         rtcData[0x01] = bcdMinuteDecr(rtcData[0x01]);
  4461  0223  0843               	movf	_rtcData+1,w
  4462  0224  318C  249D  3180   	fcall	_bcdMinuteDecr
  4463  0227  0020               	movlb	0	; select bank0
  4464  0228  00EB               	movwf	??_main
  4465  0229  086B               	movf	??_main,w
  4466  022A  00C3               	movwf	_rtcData+1
  4467  022B  2A16               	goto	l7825
  4468  022C                     l7837:	
  4469  022C  3004               	movlw	4
  4470  022D  063F               	xorwf	_mode,w	;volatile
  4471  022E  1D03               	btfss	3,2
  4472  022F  2A31               	goto	u6241
  4473  0230  2A32               	goto	u6240
  4474  0231                     u6241:	
  4475  0231  2A3B               	goto	l7845
  4476  0232                     u6240:	
  4477  0232                     l7839:	
  4478                           
  4479                           ;main.c: 546:                         rtcData[0x05] = bcdMonthDecr(rtcData[0x05]);
  4480  0232  0847               	movf	_rtcData+5,w
  4481  0233  3197  27EB  3180   	fcall	_bcdMonthDecr
  4482  0236  0020               	movlb	0	; select bank0
  4483  0237  00EB               	movwf	??_main
  4484  0238  086B               	movf	??_main,w
  4485  0239  00C7               	movwf	_rtcData+5
  4486  023A  2A16               	goto	l7825
  4487  023B                     l7845:	
  4488  023B  3005               	movlw	5
  4489  023C  063F               	xorwf	_mode,w	;volatile
  4490  023D  1D03               	btfss	3,2
  4491  023E  2A40               	goto	u6251
  4492  023F  2A41               	goto	u6250
  4493  0240                     u6251:	
  4494  0240  2A4A               	goto	l7853
  4495  0241                     u6250:	
  4496  0241                     l7847:	
  4497                           
  4498                           ;main.c: 550:                         rtcData[0x04] = bcdDateDecr(rtcData[0x04]);
  4499  0241  0846               	movf	_rtcData+4,w
  4500  0242  318A  2205  3180   	fcall	_bcdDateDecr
  4501  0245  0020               	movlb	0	; select bank0
  4502  0246  00EB               	movwf	??_main
  4503  0247  086B               	movf	??_main,w
  4504  0248  00C6               	movwf	_rtcData+4
  4505  0249  2A16               	goto	l7825
  4506  024A                     l7853:	
  4507  024A  3006               	movlw	6
  4508  024B  063F               	xorwf	_mode,w	;volatile
  4509  024C  1D03               	btfss	3,2
  4510  024D  2A4F               	goto	u6261
  4511  024E  2A50               	goto	u6260
  4512  024F                     u6261:	
  4513  024F  2A59               	goto	l7861
  4514  0250                     u6260:	
  4515  0250                     l7855:	
  4516                           
  4517                           ;main.c: 554:                         rtcData[0x09] = bcdHourDecr(rtcData[0x09]);
  4518  0250  084B               	movf	_rtcData+9,w
  4519  0251  3189  2157  3180   	fcall	_bcdHourDecr
  4520  0254  0020               	movlb	0	; select bank0
  4521  0255  00EB               	movwf	??_main
  4522  0256  086B               	movf	??_main,w
  4523  0257  00CB               	movwf	_rtcData+9
  4524  0258  2A16               	goto	l7825
  4525  0259                     l7861:	
  4526  0259  3007               	movlw	7
  4527  025A  063F               	xorwf	_mode,w	;volatile
  4528  025B  1D03               	btfss	3,2
  4529  025C  2A5E               	goto	u6271
  4530  025D  2A5F               	goto	u6270
  4531  025E                     u6271:	
  4532  025E  2A68               	goto	l7869
  4533  025F                     u6270:	
  4534  025F                     l7863:	
  4535                           
  4536                           ;main.c: 558:                         rtcData[0x08] = bcdMinuteDecr(rtcData[0x08]);
  4537  025F  084A               	movf	_rtcData+8,w
  4538  0260  318C  249D  3180   	fcall	_bcdMinuteDecr
  4539  0263  0020               	movlb	0	; select bank0
  4540  0264  00EB               	movwf	??_main
  4541  0265  086B               	movf	??_main,w
  4542  0266  00CA               	movwf	_rtcData+8
  4543  0267  2A16               	goto	l7825
  4544  0268                     l7869:	
  4545  0268  3008               	movlw	8
  4546  0269  063F               	xorwf	_mode,w	;volatile
  4547  026A  1D03               	btfss	3,2
  4548  026B  2A6D               	goto	u6281
  4549  026C  2A6E               	goto	u6280
  4550  026D                     u6281:	
  4551  026D  2A77               	goto	l7877
  4552  026E                     u6280:	
  4553  026E                     l7871:	
  4554                           
  4555                           ;main.c: 562:                         rtcData[0x0C] = bcdHourDecr(rtcData[0x0C]);
  4556  026E  084E               	movf	_rtcData+12,w
  4557  026F  3189  2157  3180   	fcall	_bcdHourDecr
  4558  0272  0020               	movlb	0	; select bank0
  4559  0273  00EB               	movwf	??_main
  4560  0274  086B               	movf	??_main,w
  4561  0275  00CE               	movwf	_rtcData+12
  4562  0276  2A16               	goto	l7825
  4563  0277                     l7877:	
  4564  0277  3009               	movlw	9
  4565  0278  063F               	xorwf	_mode,w	;volatile
  4566  0279  1D03               	btfss	3,2
  4567  027A  2A7C               	goto	u6291
  4568  027B  2A7D               	goto	u6290
  4569  027C                     u6291:	
  4570  027C  2A86               	goto	l7885
  4571  027D                     u6290:	
  4572  027D                     l7879:	
  4573                           
  4574                           ;main.c: 566:                         rtcData[0x0B] = bcdMinuteDecr(rtcData[0x0B]);
  4575  027D  084D               	movf	_rtcData+11,w
  4576  027E  318C  249D  3180   	fcall	_bcdMinuteDecr
  4577  0281  0020               	movlb	0	; select bank0
  4578  0282  00EB               	movwf	??_main
  4579  0283  086B               	movf	??_main,w
  4580  0284  00CD               	movwf	_rtcData+11
  4581  0285  2A16               	goto	l7825
  4582  0286                     l7885:	
  4583  0286  300A               	movlw	10
  4584  0287  063F               	xorwf	_mode,w	;volatile
  4585  0288  1D03               	btfss	3,2
  4586  0289  2A8B               	goto	u6301
  4587  028A  2A8C               	goto	u6300
  4588  028B                     u6301:	
  4589  028B  2A94               	goto	l1083
  4590  028C                     u6300:	
  4591  028C                     l7887:	
  4592                           
  4593                           ;main.c: 570:                         if(display_mode) display_mode--;
  4594  028C  083A               	movf	_display_mode,w
  4595  028D  1903               	btfsc	3,2
  4596  028E  2A90               	goto	u6311
  4597  028F  2A91               	goto	u6310
  4598  0290                     u6311:	
  4599  0290  2A16               	goto	l7825
  4600  0291                     u6310:	
  4601  0291                     l7889:	
  4602  0291  3001               	movlw	1
  4603  0292  02BA               	subwf	_display_mode,f
  4604  0293  2A16               	goto	l7825
  4605  0294                     l1083:	
  4606  0294                     l7895:	
  4607                           
  4608                           ;main.c: 575:                 button_press_count[2] = 0;
  4609  0294  01A2               	clrf	_button_press_count+2
  4610  0295                     l7897:	
  4611                           
  4612                           ;main.c: 576:                 flag_button_press_count[2] = 0;
  4613  0295  01A6               	clrf	_flag_button_press_count+2
  4614  0296                     l7899:	
  4615                           
  4616                           ;main.c: 579:             if(flag_button_press_count[3] == 1){
  4617  0296  0327               	decf	_flag_button_press_count+3,w
  4618  0297  1D03               	btfss	3,2
  4619  0298  2A9A               	goto	u6321
  4620  0299  2A9B               	goto	u6320
  4621  029A                     u6321:	
  4622  029A  2B12               	goto	l1025
  4623  029B                     u6320:	
  4624  029B                     l7901:	
  4625                           
  4626                           ;main.c: 580:                 if(button_press_count[3] > 5 && button_press_count[3] < 10
      +                          0){
  4627  029B  3006               	movlw	6
  4628  029C  0223               	subwf	_button_press_count+3,w
  4629  029D  1C03               	skipc
  4630  029E  2AA0               	goto	u6331
  4631  029F  2AA1               	goto	u6330
  4632  02A0                     u6331:	
  4633  02A0  2B0F               	goto	l7939
  4634  02A1                     u6330:	
  4635  02A1                     l7903:	
  4636  02A1  3064               	movlw	100
  4637  02A2  0223               	subwf	_button_press_count+3,w
  4638  02A3  1803               	skipnc
  4639  02A4  2AA6               	goto	u6341
  4640  02A5  2AA7               	goto	u6340
  4641  02A6                     u6341:	
  4642  02A6  2B0F               	goto	l7939
  4643  02A7                     u6340:	
  4644  02A7                     l7905:	
  4645                           
  4646                           ;main.c: 582:                     if((mode == MODE_SET_HOUR) || (mode == MODE_SET_MINUTE
      +                          )){
  4647  02A7  3002               	movlw	2
  4648  02A8  063F               	xorwf	_mode,w	;volatile
  4649  02A9  1903               	btfsc	3,2
  4650  02AA  2AAC               	goto	u6351
  4651  02AB  2AAD               	goto	u6350
  4652  02AC                     u6351:	
  4653  02AC  2AB3               	goto	l7909
  4654  02AD                     u6350:	
  4655  02AD                     l7907:	
  4656  02AD  3003               	movlw	3
  4657  02AE  063F               	xorwf	_mode,w	;volatile
  4658  02AF  1D03               	btfss	3,2
  4659  02B0  2AB2               	goto	u6361
  4660  02B1  2AB3               	goto	u6360
  4661  02B2                     u6361:	
  4662  02B2  2ABC               	goto	l7911
  4663  02B3                     u6360:	
  4664  02B3                     l7909:	
  4665                           
  4666                           ;main.c: 583:                         updateRTC(rtcData[0x02],rtcData[0x01]);
  4667  02B3  0843               	movf	_rtcData+1,w
  4668  02B4  00EB               	movwf	??_main
  4669  02B5  086B               	movf	??_main,w
  4670  02B6  00E4               	movwf	updateRTC@bcdMinute
  4671  02B7  0844               	movf	_rtcData+2,w
  4672  02B8  3189  2100  3180   	fcall	_updateRTC
  4673                           
  4674                           ;main.c: 584:                     } else if(mode == MODE_SET_MONTH){
  4675  02BB  2B0B               	goto	l7935
  4676  02BC                     l7911:	
  4677  02BC  3004               	movlw	4
  4678  02BD  063F               	xorwf	_mode,w	;volatile
  4679  02BE  1D03               	btfss	3,2
  4680  02BF  2AC1               	goto	u6371
  4681  02C0  2AC2               	goto	u6370
  4682  02C1                     u6371:	
  4683  02C1  2AC7               	goto	l7915
  4684  02C2                     u6370:	
  4685  02C2                     l7913:	
  4686                           
  4687                           ;main.c: 585:                         updateMonth(rtcData[0x05]);
  4688  02C2  0847               	movf	_rtcData+5,w
  4689  02C3  3188  20CF  3180   	fcall	_updateMonth
  4690                           
  4691                           ;main.c: 586:                     } else if (mode == MODE_SET_DATE){
  4692  02C6  2B0B               	goto	l7935
  4693  02C7                     l7915:	
  4694  02C7  3005               	movlw	5
  4695  02C8  063F               	xorwf	_mode,w	;volatile
  4696  02C9  1D03               	btfss	3,2
  4697  02CA  2ACC               	goto	u6381
  4698  02CB  2ACD               	goto	u6380
  4699  02CC                     u6381:	
  4700  02CC  2AD2               	goto	l7919
  4701  02CD                     u6380:	
  4702  02CD                     l7917:	
  4703                           
  4704                           ;main.c: 587:                         updateDate(rtcData[0x04]);
  4705  02CD  0846               	movf	_rtcData+4,w
  4706  02CE  3188  20B7  3180   	fcall	_updateDate
  4707                           
  4708                           ;main.c: 588:                     } else if ((mode == MODE_SET_AL1_H) || (mode == MODE_S
      +                          ET_AL1_M)){
  4709  02D1  2B0B               	goto	l7935
  4710  02D2                     l7919:	
  4711  02D2  3006               	movlw	6
  4712  02D3  063F               	xorwf	_mode,w	;volatile
  4713  02D4  1903               	btfsc	3,2
  4714  02D5  2AD7               	goto	u6391
  4715  02D6  2AD8               	goto	u6390
  4716  02D7                     u6391:	
  4717  02D7  2ADE               	goto	l7923
  4718  02D8                     u6390:	
  4719  02D8                     l7921:	
  4720  02D8  3007               	movlw	7
  4721  02D9  063F               	xorwf	_mode,w	;volatile
  4722  02DA  1D03               	btfss	3,2
  4723  02DB  2ADD               	goto	u6401
  4724  02DC  2ADE               	goto	u6400
  4725  02DD                     u6401:	
  4726  02DD  2AE7               	goto	l7925
  4727  02DE                     u6400:	
  4728  02DE                     l7923:	
  4729                           
  4730                           ;main.c: 589:                         updateAlarm1(rtcData[0x09], rtcData[0x08]);
  4731  02DE  084A               	movf	_rtcData+8,w
  4732  02DF  00EB               	movwf	??_main
  4733  02E0  086B               	movf	??_main,w
  4734  02E1  00E4               	movwf	updateAlarm1@bcdMinute
  4735  02E2  084B               	movf	_rtcData+9,w
  4736  02E3  318A  229C  3180   	fcall	_updateAlarm1
  4737                           
  4738                           ;main.c: 590:                     } else if ((mode == MODE_SET_AL2_H) || (mode == MODE_S
      +                          ET_AL2_M)){
  4739  02E6  2B0B               	goto	l7935
  4740  02E7                     l7925:	
  4741  02E7  3008               	movlw	8
  4742  02E8  063F               	xorwf	_mode,w	;volatile
  4743  02E9  1903               	btfsc	3,2
  4744  02EA  2AEC               	goto	u6411
  4745  02EB  2AED               	goto	u6410
  4746  02EC                     u6411:	
  4747  02EC  2AF3               	goto	l7929
  4748  02ED                     u6410:	
  4749  02ED                     l7927:	
  4750  02ED  3009               	movlw	9
  4751  02EE  063F               	xorwf	_mode,w	;volatile
  4752  02EF  1D03               	btfss	3,2
  4753  02F0  2AF2               	goto	u6421
  4754  02F1  2AF3               	goto	u6420
  4755  02F2                     u6421:	
  4756  02F2  2AFC               	goto	l7931
  4757  02F3                     u6420:	
  4758  02F3                     l7929:	
  4759                           
  4760                           ;main.c: 591:                         updateAlarm2(rtcData[0x0C], rtcData[0x0B]);
  4761  02F3  084D               	movf	_rtcData+11,w
  4762  02F4  00EB               	movwf	??_main
  4763  02F5  086B               	movf	??_main,w
  4764  02F6  00E4               	movwf	updateAlarm2@bcdMinute
  4765  02F7  084E               	movf	_rtcData+12,w
  4766  02F8  318A  22C4  3180   	fcall	_updateAlarm2
  4767                           
  4768                           ;main.c: 592:                     } else if(mode == MODE_SET_DISPLAY_MODE){
  4769  02FB  2B0B               	goto	l7935
  4770  02FC                     l7931:	
  4771  02FC  300A               	movlw	10
  4772  02FD  063F               	xorwf	_mode,w	;volatile
  4773  02FE  1D03               	btfss	3,2
  4774  02FF  2B01               	goto	u6431
  4775  0300  2B02               	goto	u6430
  4776  0301                     u6431:	
  4777  0301  2B0B               	goto	l1099
  4778  0302                     u6430:	
  4779  0302                     l7933:	
  4780                           
  4781                           ;main.c: 594:                         DATAEE_WriteByte(0x01, display_mode);
  4782  0302  083A               	movf	_display_mode,w
  4783  0303  00EB               	movwf	??_main
  4784  0304  086B               	movf	??_main,w
  4785  0305  00D6               	movwf	DATAEE_WriteByte@bData
  4786  0306  3001               	movlw	1
  4787  0307  3189  21BC  3180   	fcall	_DATAEE_WriteByte
  4788  030A  2B0B               	goto	l7935
  4789  030B                     l1099:	
  4790  030B                     l7935:	
  4791                           
  4792                           ;main.c: 597:                     mode = MODE_NORMAL;
  4793  030B  0020               	movlb	0	; select bank0
  4794  030C  01BF               	clrf	_mode	;volatile
  4795  030D                     l7937:	
  4796                           
  4797                           ;main.c: 598:                     flag_time_display_update = 1;
  4798  030D  01C1               	clrf	_flag_time_display_update
  4799  030E  0AC1               	incf	_flag_time_display_update,f
  4800  030F                     l7939:	
  4801                           
  4802                           ;main.c: 600:                 button_press_count[3] = 0;
  4803  030F  01A3               	clrf	_button_press_count+3
  4804  0310                     l7941:	
  4805                           
  4806                           ;main.c: 601:                 flag_button_press_count[3] = 0;
  4807  0310  01A7               	clrf	_flag_button_press_count+3
  4808  0311  2B12               	goto	l7943
  4809  0312                     l1025:	
  4810  0312                     l7943:	
  4811                           
  4812                           ;main.c: 605:         if(mode == MODE_NORMAL){
  4813  0312  083F               	movf	_mode,w	;volatile
  4814  0313  1D03               	btfss	3,2
  4815  0314  2B16               	goto	u6441
  4816  0315  2B17               	goto	u6440
  4817  0316                     u6441:	
  4818  0316  2B78               	goto	l7965
  4819  0317                     u6440:	
  4820  0317                     l7945:	
  4821                           
  4822                           ;main.c: 606:             if(flag_time_display_update == 1){
  4823  0317  0341               	decf	_flag_time_display_update,w
  4824  0318  1D03               	btfss	3,2
  4825  0319  2B1B               	goto	u6451
  4826  031A  2B1C               	goto	u6450
  4827  031B                     u6451:	
  4828  031B  2EF9               	goto	l8145
  4829  031C                     u6450:	
  4830  031C                     l7947:	
  4831                           
  4832                           ;main.c: 607:                 if(PORTBbits.RB4) {
  4833  031C  1E0D               	btfss	13,4	;volatile
  4834  031D  2B1F               	goto	u6461
  4835  031E  2B20               	goto	u6460
  4836  031F                     u6461:	
  4837  031F  2B3A               	goto	l7957
  4838  0320                     u6460:	
  4839  0320                     l7949:	
  4840                           
  4841                           ;main.c: 609:                     i2c_readDataBlock(0x68,0x00,rtcData,0x10);
  4842  0320  01E0               	clrf	i2c_readDataBlock@reg
  4843  0321  3042               	movlw	(low (_rtcData| 0))& (0+255)
  4844  0322  00EB               	movwf	??_main
  4845  0323  086B               	movf	??_main,w
  4846  0324  00E1               	movwf	i2c_readDataBlock@data
  4847  0325  3010               	movlw	16
  4848  0326  00E2               	movwf	i2c_readDataBlock@len
  4849  0327  3000               	movlw	0
  4850  0328  00E3               	movwf	i2c_readDataBlock@len+1
  4851  0329  3068               	movlw	104
  4852  032A  318D  2584  3180   	fcall	_i2c_readDataBlock
  4853  032D                     l7951:	
  4854                           
  4855                           ;main.c: 611:                     if((rtcData[0x0F] & 0x01) != 0) {
  4856  032D  0020               	movlb	0	; select bank0
  4857  032E  1C51               	btfss	_rtcData+15,0
  4858  032F  2B31               	goto	u6471
  4859  0330  2B32               	goto	u6470
  4860  0331                     u6471:	
  4861  0331  2B34               	goto	l1112
  4862  0332                     u6470:	
  4863  0332                     l7953:	
  4864                           
  4865                           ;main.c: 612:                         flag_alarm1 = 1;
  4866  0332  01BC               	clrf	_flag_alarm1
  4867  0333  0ABC               	incf	_flag_alarm1,f
  4868  0334                     l1112:	
  4869                           ;main.c: 613:                     }
  4870                           
  4871                           
  4872                           ;main.c: 614:                     if((rtcData[0x0F] & 0x02) != 0) {
  4873  0334  1CD1               	btfss	_rtcData+15,1
  4874  0335  2B37               	goto	u6481
  4875  0336  2B38               	goto	u6480
  4876  0337                     u6481:	
  4877  0337  2B3A               	goto	l7957
  4878  0338                     u6480:	
  4879  0338                     l7955:	
  4880                           
  4881                           ;main.c: 615:                         flag_alarm2 = 1;
  4882  0338  01BB               	clrf	_flag_alarm2
  4883  0339  0ABB               	incf	_flag_alarm2,f
  4884  033A                     l7957:	
  4885                           
  4886                           ;main.c: 622:                 displayBuff[0] = displayNum[((rtcData[0x02] >> 4) & 0x03)]
      +                          ;
  4887  033A  0844               	movf	_rtcData+2,w
  4888  033B  00EB               	movwf	??_main
  4889  033C  3004               	movlw	4
  4890  033D                     u6495:	
  4891  033D  36EB               	lsrf	??_main,f
  4892  033E  0B89               	decfsz	9,f
  4893  033F  2B3D               	goto	u6495
  4894  0340  086B               	movf	??_main,w
  4895  0341  3903               	andlw	3
  4896  0342  3E00               	addlw	low (_displayNum| (0+32768))
  4897  0343  0084               	movwf	4
  4898  0344  3098               	movlw	high (_displayNum| (0+32768))
  4899  0345  1803               	skipnc
  4900  0346  3E01               	addlw	1
  4901  0347  0085               	movwf	5
  4902  0348  0800               	movf	0,w	;code access
  4903  0349  00EC               	movwf	??_main+1
  4904  034A  086C               	movf	??_main+1,w
  4905  034B  00A8               	movwf	_displayBuff
  4906  034C                     l7959:	
  4907                           
  4908                           ;main.c: 623:                 displayBuff[1] = displayNum[(rtcData[0x02]& 0x0F)];
  4909  034C  0844               	movf	_rtcData+2,w
  4910  034D  390F               	andlw	15
  4911  034E  3E00               	addlw	low (_displayNum| (0+32768))
  4912  034F  0084               	movwf	4
  4913  0350  3098               	movlw	high (_displayNum| (0+32768))
  4914  0351  1803               	skipnc
  4915  0352  3E01               	addlw	1
  4916  0353  0085               	movwf	5
  4917  0354  0800               	movf	0,w	;code access
  4918  0355  00EB               	movwf	??_main
  4919  0356  086B               	movf	??_main,w
  4920  0357  00A9               	movwf	_displayBuff+1
  4921  0358                     l7961:	
  4922                           
  4923                           ;main.c: 624:                 displayBuff[2] = displayNum[((rtcData[0x01] >> 4) & 0x07)]
      +                          ;
  4924  0358  0843               	movf	_rtcData+1,w
  4925  0359  00EB               	movwf	??_main
  4926  035A  3004               	movlw	4
  4927  035B                     u6505:	
  4928  035B  36EB               	lsrf	??_main,f
  4929  035C  0B89               	decfsz	9,f
  4930  035D  2B5B               	goto	u6505
  4931  035E  086B               	movf	??_main,w
  4932  035F  3907               	andlw	7
  4933  0360  3E00               	addlw	low (_displayNum| (0+32768))
  4934  0361  0084               	movwf	4
  4935  0362  3098               	movlw	high (_displayNum| (0+32768))
  4936  0363  1803               	skipnc
  4937  0364  3E01               	addlw	1
  4938  0365  0085               	movwf	5
  4939  0366  0800               	movf	0,w	;code access
  4940  0367  00EC               	movwf	??_main+1
  4941  0368  086C               	movf	??_main+1,w
  4942  0369  00AA               	movwf	_displayBuff+2
  4943                           
  4944                           ;main.c: 625:                 displayBuff[3] = displayNum[(rtcData[0x01]& 0x0F)];
  4945  036A  0843               	movf	_rtcData+1,w
  4946  036B  390F               	andlw	15
  4947  036C  3E00               	addlw	low (_displayNum| (0+32768))
  4948  036D  0084               	movwf	4
  4949  036E  3098               	movlw	high (_displayNum| (0+32768))
  4950  036F  1803               	skipnc
  4951  0370  3E01               	addlw	1
  4952  0371  0085               	movwf	5
  4953  0372  0800               	movf	0,w	;code access
  4954  0373  00EB               	movwf	??_main
  4955  0374  086B               	movf	??_main,w
  4956  0375  00AB               	movwf	_displayBuff+3
  4957  0376                     l7963:	
  4958                           
  4959                           ;main.c: 627:                 flag_time_display_update = 0;
  4960  0376  01C1               	clrf	_flag_time_display_update
  4961  0377  2EF9               	goto	l8145
  4962  0378                     l7965:	
  4963  0378  033F               	decf	_mode,w	;volatile
  4964  0379  1D03               	btfss	3,2
  4965  037A  2B7C               	goto	u6511
  4966  037B  2B7D               	goto	u6510
  4967  037C                     u6511:	
  4968  037C  2BE3               	goto	l7981
  4969  037D                     u6510:	
  4970  037D                     l7967:	
  4971                           
  4972                           ;main.c: 635:             if(flag_time_display_update == 1){
  4973  037D  0341               	decf	_flag_time_display_update,w
  4974  037E  1D03               	btfss	3,2
  4975  037F  2B81               	goto	u6521
  4976  0380  2B82               	goto	u6520
  4977  0381                     u6521:	
  4978  0381  2EF9               	goto	l8145
  4979  0382                     u6520:	
  4980  0382                     l1117:	
  4981                           ;main.c: 637:                 do { LATAbits.LATA7 = 0; } while(0);
  4982                           
  4983  0382  0022               	movlb	2	; select bank2
  4984  0383  138C               	bcf	12,7	;volatile
  4985  0384                     l7969:	
  4986                           
  4987                           ;main.c: 639:                 bcd_temp = intToBCD(FIR_filter(ADC_GetConversion(channel_A
      +                          N13)));
  4988  0384  300D               	movlw	13
  4989  0385  3189  2198  3180   	fcall	_ADC_GetConversion
  4990  0388  0020               	movlb	0	; select bank0
  4991  0389  0857               	movf	?_ADC_GetConversion+1,w
  4992  038A  00DB               	movwf	FIR_filter@sample+1
  4993  038B  0856               	movf	?_ADC_GetConversion,w
  4994  038C  00DA               	movwf	FIR_filter@sample
  4995  038D  3187  2778  3180   	fcall	_FIR_filter
  4996  0390  0020               	movlb	0	; select bank0
  4997  0391  085B               	movf	?_FIR_filter+1,w
  4998  0392  00E3               	movwf	intToBCD@binaryInput+1
  4999  0393  085A               	movf	?_FIR_filter,w
  5000  0394  00E2               	movwf	intToBCD@binaryInput
  5001  0395  318D  25C2  3180   	fcall	_intToBCD
  5002  0398  0020               	movlb	0	; select bank0
  5003  0399  0863               	movf	?_intToBCD+1,w
  5004  039A  00AF               	movwf	_bcd_temp+1
  5005  039B  0862               	movf	?_intToBCD,w
  5006  039C  00AE               	movwf	_bcd_temp
  5007  039D                     l7971:	
  5008                           
  5009                           ;main.c: 641:                 displayBuff[0] = displayNum[((bcd_temp >> 8) & 0x0F)];
  5010  039D  082F               	movf	_bcd_temp+1,w
  5011  039E  00EC               	movwf	??_main+1
  5012  039F  082E               	movf	_bcd_temp,w
  5013  03A0  00EB               	movwf	??_main
  5014  03A1  086C               	movf	??_main+1,w
  5015  03A2  00EB               	movwf	??_main
  5016  03A3  01EC               	clrf	??_main+1
  5017  03A4  300F               	movlw	15
  5018  03A5  056B               	andwf	??_main,w
  5019  03A6  00ED               	movwf	??_main+2
  5020  03A7  3000               	movlw	0
  5021  03A8  056C               	andwf	??_main+1,w
  5022  03A9  00EE               	movwf	??_main+3
  5023  03AA  3000               	movlw	low (_displayNum| (0+32768))
  5024  03AB  076D               	addwf	??_main+2,w
  5025  03AC  0084               	movwf	4
  5026  03AD  3098               	movlw	high (_displayNum| (0+32768))
  5027  03AE  3D6E               	addwfc	??_main+3,w
  5028  03AF  0085               	movwf	5
  5029  03B0  0800               	movf	0,w	;code access
  5030  03B1  00EF               	movwf	??_main+4
  5031  03B2  086F               	movf	??_main+4,w
  5032  03B3  00A8               	movwf	_displayBuff
  5033  03B4                     l7973:	
  5034                           
  5035                           ;main.c: 642:                 displayBuff[1] = displayNum[((bcd_temp >> 4) & 0x0F)] | (1
      +                           << 0);
  5036  03B4  082F               	movf	_bcd_temp+1,w
  5037  03B5  00EC               	movwf	??_main+1
  5038  03B6  082E               	movf	_bcd_temp,w
  5039  03B7  00EB               	movwf	??_main
  5040  03B8  3004               	movlw	4
  5041  03B9                     u6535:	
  5042  03B9  36EC               	lsrf	??_main+1,f
  5043  03BA  0CEB               	rrf	??_main,f
  5044  03BB  0B89               	decfsz	9,f
  5045  03BC  2BB9               	goto	u6535
  5046  03BD  300F               	movlw	15
  5047  03BE  056B               	andwf	??_main,w
  5048  03BF  00ED               	movwf	??_main+2
  5049  03C0  3000               	movlw	0
  5050  03C1  056C               	andwf	??_main+1,w
  5051  03C2  00EE               	movwf	??_main+3
  5052  03C3  3000               	movlw	low (_displayNum| (0+32768))
  5053  03C4  076D               	addwf	??_main+2,w
  5054  03C5  0084               	movwf	4
  5055  03C6  3098               	movlw	high (_displayNum| (0+32768))
  5056  03C7  3D6E               	addwfc	??_main+3,w
  5057  03C8  0085               	movwf	5
  5058  03C9  0800               	movf	0,w	;code access
  5059  03CA  3801               	iorlw	1
  5060  03CB  00EF               	movwf	??_main+4
  5061  03CC  086F               	movf	??_main+4,w
  5062  03CD  00A9               	movwf	_displayBuff+1
  5063  03CE                     l7975:	
  5064                           
  5065                           ;main.c: 643:                 displayBuff[2] = displayNum[(bcd_temp & 0x0F)];
  5066  03CE  300F               	movlw	15
  5067  03CF  052E               	andwf	_bcd_temp,w
  5068  03D0  00EB               	movwf	??_main
  5069  03D1  3000               	movlw	0
  5070  03D2  052F               	andwf	_bcd_temp+1,w
  5071  03D3  00EC               	movwf	??_main+1
  5072  03D4  3000               	movlw	low (_displayNum| (0+32768))
  5073  03D5  076B               	addwf	??_main,w
  5074  03D6  0084               	movwf	4
  5075  03D7  3098               	movlw	high (_displayNum| (0+32768))
  5076  03D8  3D6C               	addwfc	??_main+1,w
  5077  03D9  0085               	movwf	5
  5078  03DA  0800               	movf	0,w	;code access
  5079  03DB  00ED               	movwf	??_main+2
  5080  03DC  086D               	movf	??_main+2,w
  5081  03DD  00AA               	movwf	_displayBuff+2
  5082  03DE                     l7977:	
  5083                           
  5084                           ;main.c: 644:                 displayBuff[3] = ((1 << 7) | (1 << 4) | (1 << 3) | (1 << 2
      +                          ));
  5085  03DE  309C               	movlw	156
  5086  03DF  00EB               	movwf	??_main
  5087  03E0  086B               	movf	??_main,w
  5088  03E1  00AB               	movwf	_displayBuff+3
  5089  03E2  2B76               	goto	l7963
  5090  03E3                     l7981:	
  5091  03E3  3002               	movlw	2
  5092  03E4  063F               	xorwf	_mode,w	;volatile
  5093  03E5  1D03               	btfss	3,2
  5094  03E6  2BE8               	goto	u6541
  5095  03E7  2BE9               	goto	u6540
  5096  03E8                     u6541:	
  5097  03E8  2C34               	goto	l7997
  5098  03E9                     u6540:	
  5099  03E9                     l7983:	
  5100                           
  5101                           ;main.c: 649:             if(flag_time_display_update == 1){
  5102  03E9  0341               	decf	_flag_time_display_update,w
  5103  03EA  1D03               	btfss	3,2
  5104  03EB  2BED               	goto	u6551
  5105  03EC  2BEE               	goto	u6550
  5106  03ED                     u6551:	
  5107  03ED  2EF9               	goto	l8145
  5108  03EE                     u6550:	
  5109  03EE                     l1122:	
  5110                           ;main.c: 650:                 do { LATAbits.LATA7 = 1; } while(0);
  5111                           
  5112  03EE  0022               	movlb	2	; select bank2
  5113  03EF  178C               	bsf	12,7	;volatile
  5114  03F0                     l7985:	
  5115                           
  5116                           ;main.c: 651:                 displayBuff[0] = displayNum[((rtcData[0x02] >> 4) & 0x03)]
      +                          ;
  5117  03F0  0020               	movlb	0	; select bank0
  5118  03F1  0844               	movf	_rtcData+2,w
  5119  03F2  00EB               	movwf	??_main
  5120  03F3  3004               	movlw	4
  5121  03F4                     u6565:	
  5122  03F4  36EB               	lsrf	??_main,f
  5123  03F5  0B89               	decfsz	9,f
  5124  03F6  2BF4               	goto	u6565
  5125  03F7  086B               	movf	??_main,w
  5126  03F8  3903               	andlw	3
  5127  03F9  3E00               	addlw	low (_displayNum| (0+32768))
  5128  03FA  0084               	movwf	4
  5129  03FB  3098               	movlw	high (_displayNum| (0+32768))
  5130  03FC  1803               	skipnc
  5131  03FD  3E01               	addlw	1
  5132  03FE  0085               	movwf	5
  5133  03FF  0800               	movf	0,w	;code access
  5134  0400  00EC               	movwf	??_main+1
  5135  0401  086C               	movf	??_main+1,w
  5136  0402  00A8               	movwf	_displayBuff
  5137  0403                     l7987:	
  5138                           
  5139                           ;main.c: 652:                 displayBuff[1] = displayNum[(rtcData[0x02]& 0x0F)];
  5140  0403  0844               	movf	_rtcData+2,w
  5141  0404  390F               	andlw	15
  5142  0405  3E00               	addlw	low (_displayNum| (0+32768))
  5143  0406  0084               	movwf	4
  5144  0407  3098               	movlw	high (_displayNum| (0+32768))
  5145  0408  1803               	skipnc
  5146  0409  3E01               	addlw	1
  5147  040A  0085               	movwf	5
  5148  040B  0800               	movf	0,w	;code access
  5149  040C  00EB               	movwf	??_main
  5150  040D  086B               	movf	??_main,w
  5151  040E  00A9               	movwf	_displayBuff+1
  5152  040F                     l7989:	
  5153                           
  5154                           ;main.c: 653:                 displayBuff[2] = displayNum[((rtcData[0x01] >> 4) & 0x07)]
      +                          ;
  5155  040F  0843               	movf	_rtcData+1,w
  5156  0410  00EB               	movwf	??_main
  5157  0411  3004               	movlw	4
  5158  0412                     u6575:	
  5159  0412  36EB               	lsrf	??_main,f
  5160  0413  0B89               	decfsz	9,f
  5161  0414  2C12               	goto	u6575
  5162  0415  086B               	movf	??_main,w
  5163  0416  3907               	andlw	7
  5164  0417  3E00               	addlw	low (_displayNum| (0+32768))
  5165  0418  0084               	movwf	4
  5166  0419  3098               	movlw	high (_displayNum| (0+32768))
  5167  041A  1803               	skipnc
  5168  041B  3E01               	addlw	1
  5169  041C  0085               	movwf	5
  5170  041D  0800               	movf	0,w	;code access
  5171  041E  00EC               	movwf	??_main+1
  5172  041F  086C               	movf	??_main+1,w
  5173  0420  00AA               	movwf	_displayBuff+2
  5174                           
  5175                           ;main.c: 654:                 displayBuff[3] = displayNum[(rtcData[0x01]& 0x0F)];
  5176  0421  0843               	movf	_rtcData+1,w
  5177  0422  390F               	andlw	15
  5178  0423  3E00               	addlw	low (_displayNum| (0+32768))
  5179  0424  0084               	movwf	4
  5180  0425  3098               	movlw	high (_displayNum| (0+32768))
  5181  0426  1803               	skipnc
  5182  0427  3E01               	addlw	1
  5183  0428  0085               	movwf	5
  5184  0429  0800               	movf	0,w	;code access
  5185  042A  00EB               	movwf	??_main
  5186  042B  086B               	movf	??_main,w
  5187  042C  00AB               	movwf	_displayBuff+3
  5188  042D                     l7991:	
  5189                           
  5190                           ;main.c: 655:                 if(flag_dot_blink){
  5191  042D  0840               	movf	_flag_dot_blink,w
  5192  042E  1903               	btfsc	3,2
  5193  042F  2C31               	goto	u6581
  5194  0430  2C32               	goto	u6580
  5195  0431                     u6581:	
  5196  0431  2B76               	goto	l7963
  5197  0432                     u6580:	
  5198  0432                     l7993:	
  5199                           
  5200                           ;main.c: 656:                     displayBuff[1] |= (1 << 0);
  5201  0432  1429               	bsf	_displayBuff+1,0
  5202  0433  2B76               	goto	l7963
  5203  0434                     l7997:	
  5204  0434  3003               	movlw	3
  5205  0435  063F               	xorwf	_mode,w	;volatile
  5206  0436  1D03               	btfss	3,2
  5207  0437  2C39               	goto	u6591
  5208  0438  2C3A               	goto	u6590
  5209  0439                     u6591:	
  5210  0439  2C85               	goto	l8013
  5211  043A                     u6590:	
  5212  043A                     l7999:	
  5213                           
  5214                           ;main.c: 661:             if(flag_time_display_update == 1){
  5215  043A  0341               	decf	_flag_time_display_update,w
  5216  043B  1D03               	btfss	3,2
  5217  043C  2C3E               	goto	u6601
  5218  043D  2C3F               	goto	u6600
  5219  043E                     u6601:	
  5220  043E  2EF9               	goto	l8145
  5221  043F                     u6600:	
  5222  043F                     l1128:	
  5223                           ;main.c: 662:                 do { LATAbits.LATA7 = 1; } while(0);
  5224                           
  5225  043F  0022               	movlb	2	; select bank2
  5226  0440  178C               	bsf	12,7	;volatile
  5227  0441                     l8001:	
  5228                           
  5229                           ;main.c: 663:                 displayBuff[0] = displayNum[((rtcData[0x02] >> 4) & 0x03)]
      +                          ;
  5230  0441  0020               	movlb	0	; select bank0
  5231  0442  0844               	movf	_rtcData+2,w
  5232  0443  00EB               	movwf	??_main
  5233  0444  3004               	movlw	4
  5234  0445                     u6615:	
  5235  0445  36EB               	lsrf	??_main,f
  5236  0446  0B89               	decfsz	9,f
  5237  0447  2C45               	goto	u6615
  5238  0448  086B               	movf	??_main,w
  5239  0449  3903               	andlw	3
  5240  044A  3E00               	addlw	low (_displayNum| (0+32768))
  5241  044B  0084               	movwf	4
  5242  044C  3098               	movlw	high (_displayNum| (0+32768))
  5243  044D  1803               	skipnc
  5244  044E  3E01               	addlw	1
  5245  044F  0085               	movwf	5
  5246  0450  0800               	movf	0,w	;code access
  5247  0451  00EC               	movwf	??_main+1
  5248  0452  086C               	movf	??_main+1,w
  5249  0453  00A8               	movwf	_displayBuff
  5250  0454                     l8003:	
  5251                           
  5252                           ;main.c: 664:                 displayBuff[1] = displayNum[(rtcData[0x02]& 0x0F)];
  5253  0454  0844               	movf	_rtcData+2,w
  5254  0455  390F               	andlw	15
  5255  0456  3E00               	addlw	low (_displayNum| (0+32768))
  5256  0457  0084               	movwf	4
  5257  0458  3098               	movlw	high (_displayNum| (0+32768))
  5258  0459  1803               	skipnc
  5259  045A  3E01               	addlw	1
  5260  045B  0085               	movwf	5
  5261  045C  0800               	movf	0,w	;code access
  5262  045D  00EB               	movwf	??_main
  5263  045E  086B               	movf	??_main,w
  5264  045F  00A9               	movwf	_displayBuff+1
  5265  0460                     l8005:	
  5266                           
  5267                           ;main.c: 665:                 displayBuff[2] = displayNum[((rtcData[0x01] >> 4) & 0x07)]
      +                          ;
  5268  0460  0843               	movf	_rtcData+1,w
  5269  0461  00EB               	movwf	??_main
  5270  0462  3004               	movlw	4
  5271  0463                     u6625:	
  5272  0463  36EB               	lsrf	??_main,f
  5273  0464  0B89               	decfsz	9,f
  5274  0465  2C63               	goto	u6625
  5275  0466  086B               	movf	??_main,w
  5276  0467  3907               	andlw	7
  5277  0468  3E00               	addlw	low (_displayNum| (0+32768))
  5278  0469  0084               	movwf	4
  5279  046A  3098               	movlw	high (_displayNum| (0+32768))
  5280  046B  1803               	skipnc
  5281  046C  3E01               	addlw	1
  5282  046D  0085               	movwf	5
  5283  046E  0800               	movf	0,w	;code access
  5284  046F  00EC               	movwf	??_main+1
  5285  0470  086C               	movf	??_main+1,w
  5286  0471  00AA               	movwf	_displayBuff+2
  5287                           
  5288                           ;main.c: 666:                 displayBuff[3] = displayNum[(rtcData[0x01]& 0x0F)];
  5289  0472  0843               	movf	_rtcData+1,w
  5290  0473  390F               	andlw	15
  5291  0474  3E00               	addlw	low (_displayNum| (0+32768))
  5292  0475  0084               	movwf	4
  5293  0476  3098               	movlw	high (_displayNum| (0+32768))
  5294  0477  1803               	skipnc
  5295  0478  3E01               	addlw	1
  5296  0479  0085               	movwf	5
  5297  047A  0800               	movf	0,w	;code access
  5298  047B  00EB               	movwf	??_main
  5299  047C  086B               	movf	??_main,w
  5300  047D  00AB               	movwf	_displayBuff+3
  5301  047E                     l8007:	
  5302                           
  5303                           ;main.c: 667:                 if(flag_dot_blink){
  5304  047E  0840               	movf	_flag_dot_blink,w
  5305  047F  1903               	btfsc	3,2
  5306  0480  2C82               	goto	u6631
  5307  0481  2C83               	goto	u6630
  5308  0482                     u6631:	
  5309  0482  2B76               	goto	l7963
  5310  0483                     u6630:	
  5311  0483                     l8009:	
  5312                           
  5313                           ;main.c: 668:                     displayBuff[3] |= (1 << 0);
  5314  0483  142B               	bsf	_displayBuff+3,0
  5315  0484  2B76               	goto	l7963
  5316  0485                     l8013:	
  5317  0485  3004               	movlw	4
  5318  0486  063F               	xorwf	_mode,w	;volatile
  5319  0487  1D03               	btfss	3,2
  5320  0488  2C8A               	goto	u6641
  5321  0489  2C8B               	goto	u6640
  5322  048A                     u6641:	
  5323  048A  2CEE               	goto	l8033
  5324  048B                     u6640:	
  5325  048B                     l8015:	
  5326                           
  5327                           ;main.c: 673:             if(flag_time_display_update == 1){
  5328  048B  0341               	decf	_flag_time_display_update,w
  5329  048C  1D03               	btfss	3,2
  5330  048D  2C8F               	goto	u6651
  5331  048E  2C90               	goto	u6650
  5332  048F                     u6651:	
  5333  048F  2EF9               	goto	l8145
  5334  0490                     u6650:	
  5335  0490                     l8017:	
  5336                           
  5337                           ;main.c: 674:                 if(mode_flash_count){
  5338  0490  083D               	movf	_mode_flash_count,w	;volatile
  5339  0491  1903               	btfsc	3,2
  5340  0492  2C94               	goto	u6661
  5341  0493  2C95               	goto	u6660
  5342  0494                     u6661:	
  5343  0494  2CA9               	goto	l1138
  5344  0495                     u6660:	
  5345  0495                     l1135:	
  5346                           ;main.c: 676:                     do { LATAbits.LATA7 = 0; } while(0);
  5347                           
  5348  0495  0022               	movlb	2	; select bank2
  5349  0496  138C               	bcf	12,7	;volatile
  5350  0497                     l8019:	
  5351                           
  5352                           ;main.c: 677:                     displayBuff[0] = ((1 << 6) | (1 << 5) | (1 << 4) | (1 
      +                          << 3) | (1 << 1));
  5353  0497  307A               	movlw	122
  5354  0498  0020               	movlb	0	; select bank0
  5355  0499  00EB               	movwf	??_main
  5356  049A  086B               	movf	??_main,w
  5357  049B  00A8               	movwf	_displayBuff
  5358                           
  5359                           ;main.c: 678:                     displayBuff[1] = ((1 << 6) | (1 << 5) | (1 << 4) | (1 
      +                          << 3) | (1 << 1));
  5360  049C  307A               	movlw	122
  5361  049D  00EB               	movwf	??_main
  5362  049E  086B               	movf	??_main,w
  5363  049F  00A9               	movwf	_displayBuff+1
  5364                           
  5365                           ;main.c: 679:                     displayBuff[2] = ((1 << 7) | (1 << 6) | (1 << 3) | (1 
      +                          << 2));
  5366  04A0  30CC               	movlw	204
  5367  04A1  00EB               	movwf	??_main
  5368  04A2  086B               	movf	??_main,w
  5369  04A3  00AA               	movwf	_displayBuff+2
  5370                           
  5371                           ;main.c: 680:                     displayBuff[3] = ((1 << 7) | (1 << 6) | (1 << 5) | (1 
      +                          << 2));
  5372  04A4  30E4               	movlw	228
  5373  04A5  00EB               	movwf	??_main
  5374  04A6  086B               	movf	??_main,w
  5375  04A7  00AB               	movwf	_displayBuff+3
  5376                           
  5377                           ;main.c: 681:                 } else {
  5378  04A8  2B76               	goto	l7963
  5379  04A9                     l1138:	
  5380                           ;main.c: 682:                     do { LATAbits.LATA7 = 0; } while(0);
  5381                           
  5382  04A9  0022               	movlb	2	; select bank2
  5383  04AA  138C               	bcf	12,7	;volatile
  5384  04AB                     l8021:	
  5385                           
  5386                           ;main.c: 683:                     displayBuff[0] = displayNum[((rtcData[0x04] >> 4) & 0x
      +                          03)];
  5387  04AB  0020               	movlb	0	; select bank0
  5388  04AC  0846               	movf	_rtcData+4,w
  5389  04AD  00EB               	movwf	??_main
  5390  04AE  3004               	movlw	4
  5391  04AF                     u6675:	
  5392  04AF  36EB               	lsrf	??_main,f
  5393  04B0  0B89               	decfsz	9,f
  5394  04B1  2CAF               	goto	u6675
  5395  04B2  086B               	movf	??_main,w
  5396  04B3  3903               	andlw	3
  5397  04B4  3E00               	addlw	low (_displayNum| (0+32768))
  5398  04B5  0084               	movwf	4
  5399  04B6  3098               	movlw	high (_displayNum| (0+32768))
  5400  04B7  1803               	skipnc
  5401  04B8  3E01               	addlw	1
  5402  04B9  0085               	movwf	5
  5403  04BA  0800               	movf	0,w	;code access
  5404  04BB  00EC               	movwf	??_main+1
  5405  04BC  086C               	movf	??_main+1,w
  5406  04BD  00A8               	movwf	_displayBuff
  5407  04BE                     l8023:	
  5408                           
  5409                           ;main.c: 684:                     displayBuff[1] = displayNum[(rtcData[0x04]& 0x0F)];
  5410  04BE  0846               	movf	_rtcData+4,w
  5411  04BF  390F               	andlw	15
  5412  04C0  3E00               	addlw	low (_displayNum| (0+32768))
  5413  04C1  0084               	movwf	4
  5414  04C2  3098               	movlw	high (_displayNum| (0+32768))
  5415  04C3  1803               	skipnc
  5416  04C4  3E01               	addlw	1
  5417  04C5  0085               	movwf	5
  5418  04C6  0800               	movf	0,w	;code access
  5419  04C7  00EB               	movwf	??_main
  5420  04C8  086B               	movf	??_main,w
  5421  04C9  00A9               	movwf	_displayBuff+1
  5422  04CA                     l8025:	
  5423                           
  5424                           ;main.c: 685:                     displayBuff[2] = displayNum[((rtcData[0x05] >> 4) & 0x
      +                          01)];
  5425  04CA  0847               	movf	_rtcData+5,w
  5426  04CB  00EB               	movwf	??_main
  5427  04CC  3004               	movlw	4
  5428  04CD                     u6685:	
  5429  04CD  36EB               	lsrf	??_main,f
  5430  04CE  0B89               	decfsz	9,f
  5431  04CF  2CCD               	goto	u6685
  5432  04D0  086B               	movf	??_main,w
  5433  04D1  3901               	andlw	1
  5434  04D2  3E00               	addlw	low (_displayNum| (0+32768))
  5435  04D3  0084               	movwf	4
  5436  04D4  3098               	movlw	high (_displayNum| (0+32768))
  5437  04D5  1803               	skipnc
  5438  04D6  3E01               	addlw	1
  5439  04D7  0085               	movwf	5
  5440  04D8  0800               	movf	0,w	;code access
  5441  04D9  00EC               	movwf	??_main+1
  5442  04DA  086C               	movf	??_main+1,w
  5443  04DB  00AA               	movwf	_displayBuff+2
  5444                           
  5445                           ;main.c: 686:                     displayBuff[3] = displayNum[(rtcData[0x05]& 0x0F)];
  5446  04DC  0847               	movf	_rtcData+5,w
  5447  04DD  390F               	andlw	15
  5448  04DE  3E00               	addlw	low (_displayNum| (0+32768))
  5449  04DF  0084               	movwf	4
  5450  04E0  3098               	movlw	high (_displayNum| (0+32768))
  5451  04E1  1803               	skipnc
  5452  04E2  3E01               	addlw	1
  5453  04E3  0085               	movwf	5
  5454  04E4  0800               	movf	0,w	;code access
  5455  04E5  00EB               	movwf	??_main
  5456  04E6  086B               	movf	??_main,w
  5457  04E7  00AB               	movwf	_displayBuff+3
  5458  04E8                     l8027:	
  5459                           
  5460                           ;main.c: 687:                     if(flag_dot_blink){
  5461  04E8  0840               	movf	_flag_dot_blink,w
  5462  04E9  1903               	btfsc	3,2
  5463  04EA  2CEC               	goto	u6691
  5464  04EB  2CED               	goto	u6690
  5465  04EC                     u6691:	
  5466  04EC  2B76               	goto	l7963
  5467  04ED                     u6690:	
  5468  04ED  2C83               	goto	l8009
  5469  04EE                     l8033:	
  5470  04EE  3005               	movlw	5
  5471  04EF  063F               	xorwf	_mode,w	;volatile
  5472  04F0  1D03               	btfss	3,2
  5473  04F1  2CF3               	goto	u6701
  5474  04F2  2CF4               	goto	u6700
  5475  04F3                     u6701:	
  5476  04F3  2D3E               	goto	l8049
  5477  04F4                     u6700:	
  5478  04F4                     l8035:	
  5479                           
  5480                           ;main.c: 694:             if(flag_time_display_update == 1){
  5481  04F4  0341               	decf	_flag_time_display_update,w
  5482  04F5  1D03               	btfss	3,2
  5483  04F6  2CF8               	goto	u6711
  5484  04F7  2CF9               	goto	u6710
  5485  04F8                     u6711:	
  5486  04F8  2EF9               	goto	l8145
  5487  04F9                     u6710:	
  5488  04F9                     l1144:	
  5489                           ;main.c: 695:                 do { LATAbits.LATA7 = 0; } while(0);
  5490                           
  5491  04F9  0022               	movlb	2	; select bank2
  5492  04FA  138C               	bcf	12,7	;volatile
  5493  04FB                     l8037:	
  5494                           
  5495                           ;main.c: 696:                 displayBuff[0] = displayNum[((rtcData[0x04] >> 4) & 0x03)]
      +                          ;
  5496  04FB  0020               	movlb	0	; select bank0
  5497  04FC  0846               	movf	_rtcData+4,w
  5498  04FD  00EB               	movwf	??_main
  5499  04FE  3004               	movlw	4
  5500  04FF                     u6725:	
  5501  04FF  36EB               	lsrf	??_main,f
  5502  0500  0B89               	decfsz	9,f
  5503  0501  2CFF               	goto	u6725
  5504  0502  086B               	movf	??_main,w
  5505  0503  3903               	andlw	3
  5506  0504  3E00               	addlw	low (_displayNum| (0+32768))
  5507  0505  0084               	movwf	4
  5508  0506  3098               	movlw	high (_displayNum| (0+32768))
  5509  0507  1803               	skipnc
  5510  0508  3E01               	addlw	1
  5511  0509  0085               	movwf	5
  5512  050A  0800               	movf	0,w	;code access
  5513  050B  00EC               	movwf	??_main+1
  5514  050C  086C               	movf	??_main+1,w
  5515  050D  00A8               	movwf	_displayBuff
  5516  050E                     l8039:	
  5517                           
  5518                           ;main.c: 697:                 displayBuff[1] = displayNum[(rtcData[0x04]& 0x0F)];
  5519  050E  0846               	movf	_rtcData+4,w
  5520  050F  390F               	andlw	15
  5521  0510  3E00               	addlw	low (_displayNum| (0+32768))
  5522  0511  0084               	movwf	4
  5523  0512  3098               	movlw	high (_displayNum| (0+32768))
  5524  0513  1803               	skipnc
  5525  0514  3E01               	addlw	1
  5526  0515  0085               	movwf	5
  5527  0516  0800               	movf	0,w	;code access
  5528  0517  00EB               	movwf	??_main
  5529  0518  086B               	movf	??_main,w
  5530  0519  00A9               	movwf	_displayBuff+1
  5531  051A                     l8041:	
  5532                           
  5533                           ;main.c: 698:                 displayBuff[2] = displayNum[((rtcData[0x05] >> 4) & 0x01)]
      +                          ;
  5534  051A  0847               	movf	_rtcData+5,w
  5535  051B  00EB               	movwf	??_main
  5536  051C  3004               	movlw	4
  5537  051D                     u6735:	
  5538  051D  36EB               	lsrf	??_main,f
  5539  051E  0B89               	decfsz	9,f
  5540  051F  2D1D               	goto	u6735
  5541  0520  086B               	movf	??_main,w
  5542  0521  3901               	andlw	1
  5543  0522  3E00               	addlw	low (_displayNum| (0+32768))
  5544  0523  0084               	movwf	4
  5545  0524  3098               	movlw	high (_displayNum| (0+32768))
  5546  0525  1803               	skipnc
  5547  0526  3E01               	addlw	1
  5548  0527  0085               	movwf	5
  5549  0528  0800               	movf	0,w	;code access
  5550  0529  00EC               	movwf	??_main+1
  5551  052A  086C               	movf	??_main+1,w
  5552  052B  00AA               	movwf	_displayBuff+2
  5553                           
  5554                           ;main.c: 699:                 displayBuff[3] = displayNum[(rtcData[0x05]& 0x0F)];
  5555  052C  0847               	movf	_rtcData+5,w
  5556  052D  390F               	andlw	15
  5557  052E  3E00               	addlw	low (_displayNum| (0+32768))
  5558  052F  0084               	movwf	4
  5559  0530  3098               	movlw	high (_displayNum| (0+32768))
  5560  0531  1803               	skipnc
  5561  0532  3E01               	addlw	1
  5562  0533  0085               	movwf	5
  5563  0534  0800               	movf	0,w	;code access
  5564  0535  00EB               	movwf	??_main
  5565  0536  086B               	movf	??_main,w
  5566  0537  00AB               	movwf	_displayBuff+3
  5567  0538                     l8043:	
  5568                           
  5569                           ;main.c: 700:                 if(flag_dot_blink){
  5570  0538  0840               	movf	_flag_dot_blink,w
  5571  0539  1903               	btfsc	3,2
  5572  053A  2D3C               	goto	u6741
  5573  053B  2D3D               	goto	u6740
  5574  053C                     u6741:	
  5575  053C  2B76               	goto	l7963
  5576  053D                     u6740:	
  5577  053D  2C32               	goto	l7993
  5578  053E                     l8049:	
  5579  053E  3006               	movlw	6
  5580  053F  063F               	xorwf	_mode,w	;volatile
  5581  0540  1D03               	btfss	3,2
  5582  0541  2D43               	goto	u6751
  5583  0542  2D44               	goto	u6750
  5584  0543                     u6751:	
  5585  0543  2DA4               	goto	l8073
  5586  0544                     u6750:	
  5587  0544                     l8051:	
  5588                           
  5589                           ;main.c: 706:             if(flag_time_display_update == 1){
  5590  0544  0341               	decf	_flag_time_display_update,w
  5591  0545  1D03               	btfss	3,2
  5592  0546  2D48               	goto	u6761
  5593  0547  2D49               	goto	u6760
  5594  0548                     u6761:	
  5595  0548  2EF9               	goto	l8145
  5596  0549                     u6760:	
  5597  0549                     l8053:	
  5598                           
  5599                           ;main.c: 707:                 if(mode_flash_count){
  5600  0549  083D               	movf	_mode_flash_count,w	;volatile
  5601  054A  1903               	btfsc	3,2
  5602  054B  2D4D               	goto	u6771
  5603  054C  2D4E               	goto	u6770
  5604  054D                     u6771:	
  5605  054D  2D5F               	goto	l1154
  5606  054E                     u6770:	
  5607  054E                     l1151:	
  5608                           ;main.c: 709:                     do { LATAbits.LATA7 = 0; } while(0);
  5609                           
  5610  054E  0022               	movlb	2	; select bank2
  5611  054F  138C               	bcf	12,7	;volatile
  5612  0550                     l8055:	
  5613                           
  5614                           ;main.c: 710:                     displayBuff[0] = ((1 << 7) | (1 << 6) | (1 << 5) | (1 
      +                          << 3) | (1 << 2) | (1 << 1));
  5615  0550  30EE               	movlw	238
  5616  0551  0020               	movlb	0	; select bank0
  5617  0552  00EB               	movwf	??_main
  5618  0553  086B               	movf	??_main,w
  5619  0554  00A8               	movwf	_displayBuff
  5620                           
  5621                           ;main.c: 711:                     displayBuff[1] = ((1 << 4) | (1 << 3) | (1 << 2));
  5622  0555  301C               	movlw	28
  5623  0556  00EB               	movwf	??_main
  5624  0557  086B               	movf	??_main,w
  5625  0558  00A9               	movwf	_displayBuff+1
  5626  0559                     l8057:	
  5627                           
  5628                           ;main.c: 712:                     displayBuff[2] = 0x00;
  5629  0559  01AA               	clrf	_displayBuff+2
  5630  055A                     l8059:	
  5631                           
  5632                           ;main.c: 713:                     displayBuff[3] = ((1 << 6) | (1 << 5));
  5633  055A  3060               	movlw	96
  5634  055B  00EB               	movwf	??_main
  5635  055C  086B               	movf	??_main,w
  5636  055D  00AB               	movwf	_displayBuff+3
  5637                           
  5638                           ;main.c: 714:                 } else {
  5639  055E  2B76               	goto	l7963
  5640  055F                     l1154:	
  5641                           ;main.c: 715:                     do { LATAbits.LATA7 = 1; } while(0);
  5642                           
  5643  055F  0022               	movlb	2	; select bank2
  5644  0560  178C               	bsf	12,7	;volatile
  5645  0561                     l8061:	
  5646                           
  5647                           ;main.c: 716:                     displayBuff[0] = displayNum[((rtcData[0x09] >> 4) & 0x
      +                          03)];
  5648  0561  0020               	movlb	0	; select bank0
  5649  0562  084B               	movf	_rtcData+9,w
  5650  0563  00EB               	movwf	??_main
  5651  0564  3004               	movlw	4
  5652  0565                     u6785:	
  5653  0565  36EB               	lsrf	??_main,f
  5654  0566  0B89               	decfsz	9,f
  5655  0567  2D65               	goto	u6785
  5656  0568  086B               	movf	??_main,w
  5657  0569  3903               	andlw	3
  5658  056A  3E00               	addlw	low (_displayNum| (0+32768))
  5659  056B  0084               	movwf	4
  5660  056C  3098               	movlw	high (_displayNum| (0+32768))
  5661  056D  1803               	skipnc
  5662  056E  3E01               	addlw	1
  5663  056F  0085               	movwf	5
  5664  0570  0800               	movf	0,w	;code access
  5665  0571  00EC               	movwf	??_main+1
  5666  0572  086C               	movf	??_main+1,w
  5667  0573  00A8               	movwf	_displayBuff
  5668  0574                     l8063:	
  5669                           
  5670                           ;main.c: 717:                     displayBuff[1] = displayNum[(rtcData[0x09]& 0x0F)];
  5671  0574  084B               	movf	_rtcData+9,w
  5672  0575  390F               	andlw	15
  5673  0576  3E00               	addlw	low (_displayNum| (0+32768))
  5674  0577  0084               	movwf	4
  5675  0578  3098               	movlw	high (_displayNum| (0+32768))
  5676  0579  1803               	skipnc
  5677  057A  3E01               	addlw	1
  5678  057B  0085               	movwf	5
  5679  057C  0800               	movf	0,w	;code access
  5680  057D  00EB               	movwf	??_main
  5681  057E  086B               	movf	??_main,w
  5682  057F  00A9               	movwf	_displayBuff+1
  5683  0580                     l8065:	
  5684                           
  5685                           ;main.c: 718:                     displayBuff[2] = displayNum[((rtcData[0x08] >> 4) & 0x
      +                          07)];
  5686  0580  084A               	movf	_rtcData+8,w
  5687  0581  00EB               	movwf	??_main
  5688  0582  3004               	movlw	4
  5689  0583                     u6795:	
  5690  0583  36EB               	lsrf	??_main,f
  5691  0584  0B89               	decfsz	9,f
  5692  0585  2D83               	goto	u6795
  5693  0586  086B               	movf	??_main,w
  5694  0587  3907               	andlw	7
  5695  0588  3E00               	addlw	low (_displayNum| (0+32768))
  5696  0589  0084               	movwf	4
  5697  058A  3098               	movlw	high (_displayNum| (0+32768))
  5698  058B  1803               	skipnc
  5699  058C  3E01               	addlw	1
  5700  058D  0085               	movwf	5
  5701  058E  0800               	movf	0,w	;code access
  5702  058F  00EC               	movwf	??_main+1
  5703  0590  086C               	movf	??_main+1,w
  5704  0591  00AA               	movwf	_displayBuff+2
  5705                           
  5706                           ;main.c: 719:                     displayBuff[3] = displayNum[(rtcData[0x08]& 0x0F)];
  5707  0592  084A               	movf	_rtcData+8,w
  5708  0593  390F               	andlw	15
  5709  0594  3E00               	addlw	low (_displayNum| (0+32768))
  5710  0595  0084               	movwf	4
  5711  0596  3098               	movlw	high (_displayNum| (0+32768))
  5712  0597  1803               	skipnc
  5713  0598  3E01               	addlw	1
  5714  0599  0085               	movwf	5
  5715  059A  0800               	movf	0,w	;code access
  5716  059B  00EB               	movwf	??_main
  5717  059C  086B               	movf	??_main,w
  5718  059D  00AB               	movwf	_displayBuff+3
  5719  059E                     l8067:	
  5720                           
  5721                           ;main.c: 720:                     if(flag_dot_blink){
  5722  059E  0840               	movf	_flag_dot_blink,w
  5723  059F  1903               	btfsc	3,2
  5724  05A0  2DA2               	goto	u6801
  5725  05A1  2DA3               	goto	u6800
  5726  05A2                     u6801:	
  5727  05A2  2B76               	goto	l7963
  5728  05A3                     u6800:	
  5729  05A3  2C32               	goto	l7993
  5730  05A4                     l8073:	
  5731  05A4  3007               	movlw	7
  5732  05A5  063F               	xorwf	_mode,w	;volatile
  5733  05A6  1D03               	btfss	3,2
  5734  05A7  2DA9               	goto	u6811
  5735  05A8  2DAA               	goto	u6810
  5736  05A9                     u6811:	
  5737  05A9  2DF4               	goto	l8089
  5738  05AA                     u6810:	
  5739  05AA                     l8075:	
  5740                           
  5741                           ;main.c: 727:             if(flag_time_display_update == 1){
  5742  05AA  0341               	decf	_flag_time_display_update,w
  5743  05AB  1D03               	btfss	3,2
  5744  05AC  2DAE               	goto	u6821
  5745  05AD  2DAF               	goto	u6820
  5746  05AE                     u6821:	
  5747  05AE  2EF9               	goto	l8145
  5748  05AF                     u6820:	
  5749  05AF                     l1160:	
  5750                           ;main.c: 728:                 do { LATAbits.LATA7 = 1; } while(0);
  5751                           
  5752  05AF  0022               	movlb	2	; select bank2
  5753  05B0  178C               	bsf	12,7	;volatile
  5754  05B1                     l8077:	
  5755                           
  5756                           ;main.c: 729:                 displayBuff[0] = displayNum[((rtcData[0x09] >> 4) & 0x03)]
      +                          ;
  5757  05B1  0020               	movlb	0	; select bank0
  5758  05B2  084B               	movf	_rtcData+9,w
  5759  05B3  00EB               	movwf	??_main
  5760  05B4  3004               	movlw	4
  5761  05B5                     u6835:	
  5762  05B5  36EB               	lsrf	??_main,f
  5763  05B6  0B89               	decfsz	9,f
  5764  05B7  2DB5               	goto	u6835
  5765  05B8  086B               	movf	??_main,w
  5766  05B9  3903               	andlw	3
  5767  05BA  3E00               	addlw	low (_displayNum| (0+32768))
  5768  05BB  0084               	movwf	4
  5769  05BC  3098               	movlw	high (_displayNum| (0+32768))
  5770  05BD  1803               	skipnc
  5771  05BE  3E01               	addlw	1
  5772  05BF  0085               	movwf	5
  5773  05C0  0800               	movf	0,w	;code access
  5774  05C1  00EC               	movwf	??_main+1
  5775  05C2  086C               	movf	??_main+1,w
  5776  05C3  00A8               	movwf	_displayBuff
  5777  05C4                     l8079:	
  5778                           
  5779                           ;main.c: 730:                 displayBuff[1] = displayNum[(rtcData[0x09]& 0x0F)];
  5780  05C4  084B               	movf	_rtcData+9,w
  5781  05C5  390F               	andlw	15
  5782  05C6  3E00               	addlw	low (_displayNum| (0+32768))
  5783  05C7  0084               	movwf	4
  5784  05C8  3098               	movlw	high (_displayNum| (0+32768))
  5785  05C9  1803               	skipnc
  5786  05CA  3E01               	addlw	1
  5787  05CB  0085               	movwf	5
  5788  05CC  0800               	movf	0,w	;code access
  5789  05CD  00EB               	movwf	??_main
  5790  05CE  086B               	movf	??_main,w
  5791  05CF  00A9               	movwf	_displayBuff+1
  5792  05D0                     l8081:	
  5793                           
  5794                           ;main.c: 731:                 displayBuff[2] = displayNum[((rtcData[0x08] >> 4) & 0x07)]
      +                          ;
  5795  05D0  084A               	movf	_rtcData+8,w
  5796  05D1  00EB               	movwf	??_main
  5797  05D2  3004               	movlw	4
  5798  05D3                     u6845:	
  5799  05D3  36EB               	lsrf	??_main,f
  5800  05D4  0B89               	decfsz	9,f
  5801  05D5  2DD3               	goto	u6845
  5802  05D6  086B               	movf	??_main,w
  5803  05D7  3907               	andlw	7
  5804  05D8  3E00               	addlw	low (_displayNum| (0+32768))
  5805  05D9  0084               	movwf	4
  5806  05DA  3098               	movlw	high (_displayNum| (0+32768))
  5807  05DB  1803               	skipnc
  5808  05DC  3E01               	addlw	1
  5809  05DD  0085               	movwf	5
  5810  05DE  0800               	movf	0,w	;code access
  5811  05DF  00EC               	movwf	??_main+1
  5812  05E0  086C               	movf	??_main+1,w
  5813  05E1  00AA               	movwf	_displayBuff+2
  5814                           
  5815                           ;main.c: 732:                 displayBuff[3] = displayNum[(rtcData[0x08]& 0x0F)];
  5816  05E2  084A               	movf	_rtcData+8,w
  5817  05E3  390F               	andlw	15
  5818  05E4  3E00               	addlw	low (_displayNum| (0+32768))
  5819  05E5  0084               	movwf	4
  5820  05E6  3098               	movlw	high (_displayNum| (0+32768))
  5821  05E7  1803               	skipnc
  5822  05E8  3E01               	addlw	1
  5823  05E9  0085               	movwf	5
  5824  05EA  0800               	movf	0,w	;code access
  5825  05EB  00EB               	movwf	??_main
  5826  05EC  086B               	movf	??_main,w
  5827  05ED  00AB               	movwf	_displayBuff+3
  5828  05EE                     l8083:	
  5829                           
  5830                           ;main.c: 733:                 if(flag_dot_blink){
  5831  05EE  0840               	movf	_flag_dot_blink,w
  5832  05EF  1903               	btfsc	3,2
  5833  05F0  2DF2               	goto	u6851
  5834  05F1  2DF3               	goto	u6850
  5835  05F2                     u6851:	
  5836  05F2  2B76               	goto	l7963
  5837  05F3                     u6850:	
  5838  05F3  2C83               	goto	l8009
  5839  05F4                     l8089:	
  5840  05F4  3008               	movlw	8
  5841  05F5  063F               	xorwf	_mode,w	;volatile
  5842  05F6  1D03               	btfss	3,2
  5843  05F7  2DF9               	goto	u6861
  5844  05F8  2DFA               	goto	u6860
  5845  05F9                     u6861:	
  5846  05F9  2E5A               	goto	l8113
  5847  05FA                     u6860:	
  5848  05FA                     l8091:	
  5849                           
  5850                           ;main.c: 739:             if(flag_time_display_update == 1){
  5851  05FA  0341               	decf	_flag_time_display_update,w
  5852  05FB  1D03               	btfss	3,2
  5853  05FC  2DFE               	goto	u6871
  5854  05FD  2DFF               	goto	u6870
  5855  05FE                     u6871:	
  5856  05FE  2EF9               	goto	l8145
  5857  05FF                     u6870:	
  5858  05FF                     l8093:	
  5859                           
  5860                           ;main.c: 740:                 if(mode_flash_count){
  5861  05FF  083D               	movf	_mode_flash_count,w	;volatile
  5862  0600  1903               	btfsc	3,2
  5863  0601  2E03               	goto	u6881
  5864  0602  2E04               	goto	u6880
  5865  0603                     u6881:	
  5866  0603  2E15               	goto	l1170
  5867  0604                     u6880:	
  5868  0604                     l1167:	
  5869                           ;main.c: 742:                     do { LATAbits.LATA7 = 0; } while(0);
  5870                           
  5871  0604  0022               	movlb	2	; select bank2
  5872  0605  138C               	bcf	12,7	;volatile
  5873  0606                     l8095:	
  5874                           
  5875                           ;main.c: 743:                     displayBuff[0] = ((1 << 7) | (1 << 6) | (1 << 5) | (1 
      +                          << 3) | (1 << 2) | (1 << 1));
  5876  0606  30EE               	movlw	238
  5877  0607  0020               	movlb	0	; select bank0
  5878  0608  00EB               	movwf	??_main
  5879  0609  086B               	movf	??_main,w
  5880  060A  00A8               	movwf	_displayBuff
  5881                           
  5882                           ;main.c: 744:                     displayBuff[1] = ((1 << 4) | (1 << 3) | (1 << 2));
  5883  060B  301C               	movlw	28
  5884  060C  00EB               	movwf	??_main
  5885  060D  086B               	movf	??_main,w
  5886  060E  00A9               	movwf	_displayBuff+1
  5887  060F                     l8097:	
  5888                           
  5889                           ;main.c: 745:                     displayBuff[2] = 0x00;
  5890  060F  01AA               	clrf	_displayBuff+2
  5891  0610                     l8099:	
  5892                           
  5893                           ;main.c: 746:                     displayBuff[3] = ((1 << 7) | (1 << 6) | (1 << 4) | (1 
      +                          << 3) | (1 << 1));
  5894  0610  30DA               	movlw	218
  5895  0611  00EB               	movwf	??_main
  5896  0612  086B               	movf	??_main,w
  5897  0613  00AB               	movwf	_displayBuff+3
  5898                           
  5899                           ;main.c: 747:                 } else {
  5900  0614  2B76               	goto	l7963
  5901  0615                     l1170:	
  5902                           ;main.c: 748:                     do { LATAbits.LATA7 = 1; } while(0);
  5903                           
  5904  0615  0022               	movlb	2	; select bank2
  5905  0616  178C               	bsf	12,7	;volatile
  5906  0617                     l8101:	
  5907                           
  5908                           ;main.c: 749:                     displayBuff[0] = displayNum[((rtcData[0x0C] >> 4) & 0x
      +                          03)];
  5909  0617  0020               	movlb	0	; select bank0
  5910  0618  084E               	movf	_rtcData+12,w
  5911  0619  00EB               	movwf	??_main
  5912  061A  3004               	movlw	4
  5913  061B                     u6895:	
  5914  061B  36EB               	lsrf	??_main,f
  5915  061C  0B89               	decfsz	9,f
  5916  061D  2E1B               	goto	u6895
  5917  061E  086B               	movf	??_main,w
  5918  061F  3903               	andlw	3
  5919  0620  3E00               	addlw	low (_displayNum| (0+32768))
  5920  0621  0084               	movwf	4
  5921  0622  3098               	movlw	high (_displayNum| (0+32768))
  5922  0623  1803               	skipnc
  5923  0624  3E01               	addlw	1
  5924  0625  0085               	movwf	5
  5925  0626  0800               	movf	0,w	;code access
  5926  0627  00EC               	movwf	??_main+1
  5927  0628  086C               	movf	??_main+1,w
  5928  0629  00A8               	movwf	_displayBuff
  5929  062A                     l8103:	
  5930                           
  5931                           ;main.c: 750:                     displayBuff[1] = displayNum[(rtcData[0x0C]& 0x0F)];
  5932  062A  084E               	movf	_rtcData+12,w
  5933  062B  390F               	andlw	15
  5934  062C  3E00               	addlw	low (_displayNum| (0+32768))
  5935  062D  0084               	movwf	4
  5936  062E  3098               	movlw	high (_displayNum| (0+32768))
  5937  062F  1803               	skipnc
  5938  0630  3E01               	addlw	1
  5939  0631  0085               	movwf	5
  5940  0632  0800               	movf	0,w	;code access
  5941  0633  00EB               	movwf	??_main
  5942  0634  086B               	movf	??_main,w
  5943  0635  00A9               	movwf	_displayBuff+1
  5944  0636                     l8105:	
  5945                           
  5946                           ;main.c: 751:                     displayBuff[2] = displayNum[((rtcData[0x0B] >> 4) & 0x
      +                          07)];
  5947  0636  084D               	movf	_rtcData+11,w
  5948  0637  00EB               	movwf	??_main
  5949  0638  3004               	movlw	4
  5950  0639                     u6905:	
  5951  0639  36EB               	lsrf	??_main,f
  5952  063A  0B89               	decfsz	9,f
  5953  063B  2E39               	goto	u6905
  5954  063C  086B               	movf	??_main,w
  5955  063D  3907               	andlw	7
  5956  063E  3E00               	addlw	low (_displayNum| (0+32768))
  5957  063F  0084               	movwf	4
  5958  0640  3098               	movlw	high (_displayNum| (0+32768))
  5959  0641  1803               	skipnc
  5960  0642  3E01               	addlw	1
  5961  0643  0085               	movwf	5
  5962  0644  0800               	movf	0,w	;code access
  5963  0645  00EC               	movwf	??_main+1
  5964  0646  086C               	movf	??_main+1,w
  5965  0647  00AA               	movwf	_displayBuff+2
  5966                           
  5967                           ;main.c: 752:                     displayBuff[3] = displayNum[(rtcData[0x0B]& 0x0F)];
  5968  0648  084D               	movf	_rtcData+11,w
  5969  0649  390F               	andlw	15
  5970  064A  3E00               	addlw	low (_displayNum| (0+32768))
  5971  064B  0084               	movwf	4
  5972  064C  3098               	movlw	high (_displayNum| (0+32768))
  5973  064D  1803               	skipnc
  5974  064E  3E01               	addlw	1
  5975  064F  0085               	movwf	5
  5976  0650  0800               	movf	0,w	;code access
  5977  0651  00EB               	movwf	??_main
  5978  0652  086B               	movf	??_main,w
  5979  0653  00AB               	movwf	_displayBuff+3
  5980  0654                     l8107:	
  5981                           
  5982                           ;main.c: 753:                     if(flag_dot_blink){
  5983  0654  0840               	movf	_flag_dot_blink,w
  5984  0655  1903               	btfsc	3,2
  5985  0656  2E58               	goto	u6911
  5986  0657  2E59               	goto	u6910
  5987  0658                     u6911:	
  5988  0658  2B76               	goto	l7963
  5989  0659                     u6910:	
  5990  0659  2C32               	goto	l7993
  5991  065A                     l8113:	
  5992  065A  3009               	movlw	9
  5993  065B  063F               	xorwf	_mode,w	;volatile
  5994  065C  1D03               	btfss	3,2
  5995  065D  2E5F               	goto	u6921
  5996  065E  2E60               	goto	u6920
  5997  065F                     u6921:	
  5998  065F  2EAA               	goto	l8129
  5999  0660                     u6920:	
  6000  0660                     l8115:	
  6001                           
  6002                           ;main.c: 760:             if(flag_time_display_update == 1){
  6003  0660  0341               	decf	_flag_time_display_update,w
  6004  0661  1D03               	btfss	3,2
  6005  0662  2E64               	goto	u6931
  6006  0663  2E65               	goto	u6930
  6007  0664                     u6931:	
  6008  0664  2EF9               	goto	l8145
  6009  0665                     u6930:	
  6010  0665                     l1176:	
  6011                           ;main.c: 761:                 do { LATAbits.LATA7 = 1; } while(0);
  6012                           
  6013  0665  0022               	movlb	2	; select bank2
  6014  0666  178C               	bsf	12,7	;volatile
  6015  0667                     l8117:	
  6016                           
  6017                           ;main.c: 762:                 displayBuff[0] = displayNum[((rtcData[0x0C] >> 4) & 0x03)]
      +                          ;
  6018  0667  0020               	movlb	0	; select bank0
  6019  0668  084E               	movf	_rtcData+12,w
  6020  0669  00EB               	movwf	??_main
  6021  066A  3004               	movlw	4
  6022  066B                     u6945:	
  6023  066B  36EB               	lsrf	??_main,f
  6024  066C  0B89               	decfsz	9,f
  6025  066D  2E6B               	goto	u6945
  6026  066E  086B               	movf	??_main,w
  6027  066F  3903               	andlw	3
  6028  0670  3E00               	addlw	low (_displayNum| (0+32768))
  6029  0671  0084               	movwf	4
  6030  0672  3098               	movlw	high (_displayNum| (0+32768))
  6031  0673  1803               	skipnc
  6032  0674  3E01               	addlw	1
  6033  0675  0085               	movwf	5
  6034  0676  0800               	movf	0,w	;code access
  6035  0677  00EC               	movwf	??_main+1
  6036  0678  086C               	movf	??_main+1,w
  6037  0679  00A8               	movwf	_displayBuff
  6038  067A                     l8119:	
  6039                           
  6040                           ;main.c: 763:                 displayBuff[1] = displayNum[(rtcData[0x0C]& 0x0F)];
  6041  067A  084E               	movf	_rtcData+12,w
  6042  067B  390F               	andlw	15
  6043  067C  3E00               	addlw	low (_displayNum| (0+32768))
  6044  067D  0084               	movwf	4
  6045  067E  3098               	movlw	high (_displayNum| (0+32768))
  6046  067F  1803               	skipnc
  6047  0680  3E01               	addlw	1
  6048  0681  0085               	movwf	5
  6049  0682  0800               	movf	0,w	;code access
  6050  0683  00EB               	movwf	??_main
  6051  0684  086B               	movf	??_main,w
  6052  0685  00A9               	movwf	_displayBuff+1
  6053  0686                     l8121:	
  6054                           
  6055                           ;main.c: 764:                 displayBuff[2] = displayNum[((rtcData[0x0B] >> 4) & 0x07)]
      +                          ;
  6056  0686  084D               	movf	_rtcData+11,w
  6057  0687  00EB               	movwf	??_main
  6058  0688  3004               	movlw	4
  6059  0689                     u6955:	
  6060  0689  36EB               	lsrf	??_main,f
  6061  068A  0B89               	decfsz	9,f
  6062  068B  2E89               	goto	u6955
  6063  068C  086B               	movf	??_main,w
  6064  068D  3907               	andlw	7
  6065  068E  3E00               	addlw	low (_displayNum| (0+32768))
  6066  068F  0084               	movwf	4
  6067  0690  3098               	movlw	high (_displayNum| (0+32768))
  6068  0691  1803               	skipnc
  6069  0692  3E01               	addlw	1
  6070  0693  0085               	movwf	5
  6071  0694  0800               	movf	0,w	;code access
  6072  0695  00EC               	movwf	??_main+1
  6073  0696  086C               	movf	??_main+1,w
  6074  0697  00AA               	movwf	_displayBuff+2
  6075                           
  6076                           ;main.c: 765:                 displayBuff[3] = displayNum[(rtcData[0x0B]& 0x0F)];
  6077  0698  084D               	movf	_rtcData+11,w
  6078  0699  390F               	andlw	15
  6079  069A  3E00               	addlw	low (_displayNum| (0+32768))
  6080  069B  0084               	movwf	4
  6081  069C  3098               	movlw	high (_displayNum| (0+32768))
  6082  069D  1803               	skipnc
  6083  069E  3E01               	addlw	1
  6084  069F  0085               	movwf	5
  6085  06A0  0800               	movf	0,w	;code access
  6086  06A1  00EB               	movwf	??_main
  6087  06A2  086B               	movf	??_main,w
  6088  06A3  00AB               	movwf	_displayBuff+3
  6089  06A4                     l8123:	
  6090                           
  6091                           ;main.c: 766:                 if(flag_dot_blink){
  6092  06A4  0840               	movf	_flag_dot_blink,w
  6093  06A5  1903               	btfsc	3,2
  6094  06A6  2EA8               	goto	u6961
  6095  06A7  2EA9               	goto	u6960
  6096  06A8                     u6961:	
  6097  06A8  2B76               	goto	l7963
  6098  06A9                     u6960:	
  6099  06A9  2C83               	goto	l8009
  6100  06AA                     l8129:	
  6101  06AA  300A               	movlw	10
  6102  06AB  063F               	xorwf	_mode,w	;volatile
  6103  06AC  1D03               	btfss	3,2
  6104  06AD  2EAF               	goto	u6971
  6105  06AE  2EB0               	goto	u6970
  6106  06AF                     u6971:	
  6107  06AF  2EF9               	goto	l8145
  6108  06B0                     u6970:	
  6109  06B0                     l8131:	
  6110                           
  6111                           ;main.c: 772:             if(flag_time_display_update == 1){
  6112  06B0  0341               	decf	_flag_time_display_update,w
  6113  06B1  1D03               	btfss	3,2
  6114  06B2  2EB4               	goto	u6981
  6115  06B3  2EB5               	goto	u6980
  6116  06B4                     u6981:	
  6117  06B4  2EF9               	goto	l8145
  6118  06B5                     u6980:	
  6119  06B5                     l1182:	
  6120                           ;main.c: 773:                 do { LATAbits.LATA7 = 0; } while(0);
  6121                           
  6122  06B5  0022               	movlb	2	; select bank2
  6123  06B6  138C               	bcf	12,7	;volatile
  6124  06B7                     l8133:	
  6125                           
  6126                           ;main.c: 774:                 bcd_temp = (uint8_t) intToBCD((uint16_t)display_mode);
  6127  06B7  0020               	movlb	0	; select bank0
  6128  06B8  083A               	movf	_display_mode,w
  6129  06B9  00EB               	movwf	??_main
  6130  06BA  01EC               	clrf	??_main+1
  6131  06BB  086B               	movf	??_main,w
  6132  06BC  00E2               	movwf	intToBCD@binaryInput
  6133  06BD  086C               	movf	??_main+1,w
  6134  06BE  00E3               	movwf	intToBCD@binaryInput+1
  6135  06BF  318D  25C2  3180   	fcall	_intToBCD
  6136  06C2  0020               	movlb	0	; select bank0
  6137  06C3  0862               	movf	?_intToBCD,w
  6138  06C4  00ED               	movwf	??_main+2
  6139  06C5  01EE               	clrf	??_main+3
  6140  06C6  086D               	movf	??_main+2,w
  6141  06C7  00AE               	movwf	_bcd_temp
  6142  06C8  086E               	movf	??_main+3,w
  6143  06C9  00AF               	movwf	_bcd_temp+1
  6144  06CA                     l8135:	
  6145                           
  6146                           ;main.c: 775:                 displayBuff[0] = ((1 << 6) | (1 << 5) | (1 << 4) | (1 << 3
      +                          ) | (1 << 1));
  6147  06CA  307A               	movlw	122
  6148  06CB  00EB               	movwf	??_main
  6149  06CC  086B               	movf	??_main,w
  6150  06CD  00A8               	movwf	_displayBuff
  6151  06CE                     l8137:	
  6152                           
  6153                           ;main.c: 776:                 displayBuff[1] = 0x00;
  6154  06CE  01A9               	clrf	_displayBuff+1
  6155  06CF                     l8139:	
  6156                           
  6157                           ;main.c: 777:                 displayBuff[2] = displayNum[((bcd_temp >> 4) & 0x0F)];
  6158  06CF  082F               	movf	_bcd_temp+1,w
  6159  06D0  00EC               	movwf	??_main+1
  6160  06D1  082E               	movf	_bcd_temp,w
  6161  06D2  00EB               	movwf	??_main
  6162  06D3  3004               	movlw	4
  6163  06D4                     u6995:	
  6164  06D4  36EC               	lsrf	??_main+1,f
  6165  06D5  0CEB               	rrf	??_main,f
  6166  06D6  0B89               	decfsz	9,f
  6167  06D7  2ED4               	goto	u6995
  6168  06D8  300F               	movlw	15
  6169  06D9  056B               	andwf	??_main,w
  6170  06DA  00ED               	movwf	??_main+2
  6171  06DB  3000               	movlw	0
  6172  06DC  056C               	andwf	??_main+1,w
  6173  06DD  00EE               	movwf	??_main+3
  6174  06DE  3000               	movlw	low (_displayNum| (0+32768))
  6175  06DF  076D               	addwf	??_main+2,w
  6176  06E0  0084               	movwf	4
  6177  06E1  3098               	movlw	high (_displayNum| (0+32768))
  6178  06E2  3D6E               	addwfc	??_main+3,w
  6179  06E3  0085               	movwf	5
  6180  06E4  0800               	movf	0,w	;code access
  6181  06E5  00EF               	movwf	??_main+4
  6182  06E6  086F               	movf	??_main+4,w
  6183  06E7  00AA               	movwf	_displayBuff+2
  6184  06E8                     l8141:	
  6185                           
  6186                           ;main.c: 778:                 displayBuff[3] = displayNum[(bcd_temp& 0x0F)];
  6187  06E8  300F               	movlw	15
  6188  06E9  052E               	andwf	_bcd_temp,w
  6189  06EA  00EB               	movwf	??_main
  6190  06EB  3000               	movlw	0
  6191  06EC  052F               	andwf	_bcd_temp+1,w
  6192  06ED  00EC               	movwf	??_main+1
  6193  06EE  3000               	movlw	low (_displayNum| (0+32768))
  6194  06EF  076B               	addwf	??_main,w
  6195  06F0  0084               	movwf	4
  6196  06F1  3098               	movlw	high (_displayNum| (0+32768))
  6197  06F2  3D6C               	addwfc	??_main+1,w
  6198  06F3  0085               	movwf	5
  6199  06F4  0800               	movf	0,w	;code access
  6200  06F5  00ED               	movwf	??_main+2
  6201  06F6  086D               	movf	??_main+2,w
  6202  06F7  00AB               	movwf	_displayBuff+3
  6203  06F8  2B76               	goto	l7963
  6204  06F9                     l8145:	
  6205                           
  6206                           ;main.c: 785:         if(flag_alarm1){
  6207  06F9  083C               	movf	_flag_alarm1,w
  6208  06FA  1903               	btfsc	3,2
  6209  06FB  2EFD               	goto	u7001
  6210  06FC  2EFE               	goto	u7000
  6211  06FD                     u7001:	
  6212  06FD  2EFF               	goto	l8149
  6213  06FE                     u7000:	
  6214  06FE                     l8147:	
  6215                           
  6216                           ;main.c: 786:             flag_alarm1 = 0;
  6217  06FE  01BC               	clrf	_flag_alarm1
  6218  06FF                     l8149:	
  6219                           
  6220                           ;main.c: 791:         if(flag_alarm2){
  6221  06FF  083B               	movf	_flag_alarm2,w
  6222  0700  1903               	btfsc	3,2
  6223  0701  2F03               	goto	u7011
  6224  0702  2F04               	goto	u7010
  6225  0703                     u7011:	
  6226  0703  288E               	goto	l1021
  6227  0704                     u7010:	
  6228  0704                     l8151:	
  6229                           
  6230                           ;main.c: 792:             flag_alarm2 = 0;
  6231  0704  01BB               	clrf	_flag_alarm2
  6232  0705  288E               	goto	l1021
  6233  0706  3180  2844         	ljmp	start
  6234  0708                     __end_of_main:	
  6235                           
  6236                           	psect	text1
  6237  0900                     __ptext1:	
  6238 ;; *************** function _updateRTC *****************
  6239 ;; Defined at:
  6240 ;;		line 208 in file "main.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;  bcdHour         1    wreg     unsigned char 
  6243 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6255 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;Total ram usage:        3 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; Hardware stack levels required when called:   15
  6262 ;; This function calls:
  6263 ;;		_i2c_writeNBytes
  6264 ;; This function is called by:
  6265 ;;		_main
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           
  6270                           ;psect for function _updateRTC
  6271  0900                     _updateRTC:	
  6272                           
  6273                           ;incstack = 0
  6274                           ; Regs used in _updateRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6275                           ;updateRTC@bcdHour stored from wreg
  6276  0900  0020               	movlb	0	; select bank0
  6277  0901  00E6               	movwf	updateRTC@bcdHour
  6278  0902                     l7221:	
  6279                           
  6280                           ;main.c: 209:     rtcData[0] = 0x00;
  6281  0902  01C2               	clrf	_rtcData
  6282                           
  6283                           ;main.c: 210:     rtcData[1] = 0x00;
  6284  0903  01C3               	clrf	_rtcData+1
  6285  0904                     l7223:	
  6286                           
  6287                           ;main.c: 211:     rtcData[2] = bcdMinute & 0x7F;
  6288  0904  0864               	movf	updateRTC@bcdMinute,w
  6289  0905  397F               	andlw	127
  6290  0906  00E5               	movwf	??_updateRTC
  6291  0907  0865               	movf	??_updateRTC,w
  6292  0908  00C4               	movwf	_rtcData+2
  6293  0909                     l7225:	
  6294                           
  6295                           ;main.c: 212:     rtcData[3] = bcdHour & 0x3F;
  6296  0909  0866               	movf	updateRTC@bcdHour,w
  6297  090A  393F               	andlw	63
  6298  090B  00E5               	movwf	??_updateRTC
  6299  090C  0865               	movf	??_updateRTC,w
  6300  090D  00C5               	movwf	_rtcData+3
  6301  090E                     l7227:	
  6302                           
  6303                           ;main.c: 213:     i2c_writeNBytes(0x68,rtcData,4);
  6304  090E  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6305  090F  00E5               	movwf	??_updateRTC
  6306  0910  0865               	movf	??_updateRTC,w
  6307  0911  00E0               	movwf	i2c_writeNBytes@data
  6308  0912  3004               	movlw	4
  6309  0913  00E1               	movwf	i2c_writeNBytes@len
  6310  0914  3000               	movlw	0
  6311  0915  00E2               	movwf	i2c_writeNBytes@len+1
  6312  0916  3068               	movlw	104
  6313  0917  3187  27D5  3189   	fcall	_i2c_writeNBytes
  6314  091A                     l912:	
  6315  091A  0008               	return
  6316  091B                     __end_of_updateRTC:	
  6317                           
  6318                           	psect	text2
  6319  08CF                     __ptext2:	
  6320 ;; *************** function _updateMonth *****************
  6321 ;; Defined at:
  6322 ;;		line 252 in file "main.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  bcdMonth        1    wreg     unsigned char 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  bcdMonth        1   15[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  1    wreg      void 
  6329 ;; Registers used:
  6330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        2 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:   15
  6343 ;; This function calls:
  6344 ;;		_i2c_writeNBytes
  6345 ;; This function is called by:
  6346 ;;		_main
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function _updateMonth
  6352  08CF                     _updateMonth:	
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in _updateMonth: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6356                           ;updateMonth@bcdMonth stored from wreg
  6357  08CF  0020               	movlb	0	; select bank0
  6358  08D0  00E5               	movwf	updateMonth@bcdMonth
  6359  08D1                     l7255:	
  6360                           
  6361                           ;main.c: 253:     rtcData[0] = 0x05;
  6362  08D1  3005               	movlw	5
  6363  08D2  00E4               	movwf	??_updateMonth
  6364  08D3  0864               	movf	??_updateMonth,w
  6365  08D4  00C2               	movwf	_rtcData
  6366  08D5                     l7257:	
  6367                           
  6368                           ;main.c: 254:     rtcData[1] = bcdMonth & 0x9F;
  6369  08D5  0865               	movf	updateMonth@bcdMonth,w
  6370  08D6  399F               	andlw	159
  6371  08D7  00E4               	movwf	??_updateMonth
  6372  08D8  0864               	movf	??_updateMonth,w
  6373  08D9  00C3               	movwf	_rtcData+1
  6374  08DA                     l7259:	
  6375                           
  6376                           ;main.c: 255:     i2c_writeNBytes(0x68,rtcData,2);
  6377  08DA  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6378  08DB  00E4               	movwf	??_updateMonth
  6379  08DC  0864               	movf	??_updateMonth,w
  6380  08DD  00E0               	movwf	i2c_writeNBytes@data
  6381  08DE  3002               	movlw	2
  6382  08DF  00E1               	movwf	i2c_writeNBytes@len
  6383  08E0  3000               	movlw	0
  6384  08E1  00E2               	movwf	i2c_writeNBytes@len+1
  6385  08E2  3068               	movlw	104
  6386  08E3  3187  27D5  3188   	fcall	_i2c_writeNBytes
  6387  08E6                     l933:	
  6388  08E6  0008               	return
  6389  08E7                     __end_of_updateMonth:	
  6390                           
  6391                           	psect	text3
  6392  08B7                     __ptext3:	
  6393 ;; *************** function _updateDate *****************
  6394 ;; Defined at:
  6395 ;;		line 246 in file "main.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;  bcdDate         1    wreg     unsigned char 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  bcdDate         1   15[BANK0 ] unsigned char 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;Total ram usage:        2 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:   15
  6416 ;; This function calls:
  6417 ;;		_i2c_writeNBytes
  6418 ;; This function is called by:
  6419 ;;		_main
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function _updateDate
  6425  08B7                     _updateDate:	
  6426                           
  6427                           ;incstack = 0
  6428                           ; Regs used in _updateDate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6429                           ;updateDate@bcdDate stored from wreg
  6430  08B7  0020               	movlb	0	; select bank0
  6431  08B8  00E5               	movwf	updateDate@bcdDate
  6432  08B9                     l7249:	
  6433                           
  6434                           ;main.c: 247:     rtcData[0] = 0x04;
  6435  08B9  3004               	movlw	4
  6436  08BA  00E4               	movwf	??_updateDate
  6437  08BB  0864               	movf	??_updateDate,w
  6438  08BC  00C2               	movwf	_rtcData
  6439  08BD                     l7251:	
  6440                           
  6441                           ;main.c: 248:     rtcData[1] = bcdDate & 0x3F;
  6442  08BD  0865               	movf	updateDate@bcdDate,w
  6443  08BE  393F               	andlw	63
  6444  08BF  00E4               	movwf	??_updateDate
  6445  08C0  0864               	movf	??_updateDate,w
  6446  08C1  00C3               	movwf	_rtcData+1
  6447  08C2                     l7253:	
  6448                           
  6449                           ;main.c: 249:     i2c_writeNBytes(0x68,rtcData,2);
  6450  08C2  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6451  08C3  00E4               	movwf	??_updateDate
  6452  08C4  0864               	movf	??_updateDate,w
  6453  08C5  00E0               	movwf	i2c_writeNBytes@data
  6454  08C6  3002               	movlw	2
  6455  08C7  00E1               	movwf	i2c_writeNBytes@len
  6456  08C8  3000               	movlw	0
  6457  08C9  00E2               	movwf	i2c_writeNBytes@len+1
  6458  08CA  3068               	movlw	104
  6459  08CB  3187  27D5  3188   	fcall	_i2c_writeNBytes
  6460  08CE                     l930:	
  6461  08CE  0008               	return
  6462  08CF                     __end_of_updateDate:	
  6463                           
  6464                           	psect	text4
  6465  0AC4                     __ptext4:	
  6466 ;; *************** function _updateAlarm2 *****************
  6467 ;; Defined at:
  6468 ;;		line 228 in file "main.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  bcdHour         1    wreg     unsigned char 
  6471 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  1    wreg      void 
  6476 ;; Registers used:
  6477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6483 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;Total ram usage:        3 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:   15
  6490 ;; This function calls:
  6491 ;;		_i2c_writeNBytes
  6492 ;; This function is called by:
  6493 ;;		_main
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497                           
  6498                           ;psect for function _updateAlarm2
  6499  0AC4                     _updateAlarm2:	
  6500                           
  6501                           ;incstack = 0
  6502                           ; Regs used in _updateAlarm2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6503                           ;updateAlarm2@bcdHour stored from wreg
  6504  0AC4  0020               	movlb	0	; select bank0
  6505  0AC5  00E6               	movwf	updateAlarm2@bcdHour
  6506  0AC6                     l7239:	
  6507                           
  6508                           ;main.c: 229:     rtcData[0] = 0x0B;
  6509  0AC6  300B               	movlw	11
  6510  0AC7  00E5               	movwf	??_updateAlarm2
  6511  0AC8  0865               	movf	??_updateAlarm2,w
  6512  0AC9  00C2               	movwf	_rtcData
  6513                           
  6514                           ;main.c: 230:     rtcData[1] = bcdMinute;
  6515  0ACA  0864               	movf	updateAlarm2@bcdMinute,w
  6516  0ACB  00E5               	movwf	??_updateAlarm2
  6517  0ACC  0865               	movf	??_updateAlarm2,w
  6518  0ACD  00C3               	movwf	_rtcData+1
  6519  0ACE                     l7241:	
  6520                           
  6521                           ;main.c: 231:     rtcData[2] = bcdHour & 0xBF;
  6522  0ACE  0866               	movf	updateAlarm2@bcdHour,w
  6523  0ACF  39BF               	andlw	191
  6524  0AD0  00E5               	movwf	??_updateAlarm2
  6525  0AD1  0865               	movf	??_updateAlarm2,w
  6526  0AD2  00C4               	movwf	_rtcData+2
  6527  0AD3                     l7243:	
  6528                           
  6529                           ;main.c: 232:     if((bcdMinute != 0) || (bcdHour != 0)){
  6530  0AD3  0864               	movf	updateAlarm2@bcdMinute,w
  6531  0AD4  1D03               	btfss	3,2
  6532  0AD5  2AD7               	goto	u5301
  6533  0AD6  2AD8               	goto	u5300
  6534  0AD7                     u5301:	
  6535  0AD7  2ADD               	goto	l923
  6536  0AD8                     u5300:	
  6537  0AD8                     l7245:	
  6538  0AD8  0866               	movf	updateAlarm2@bcdHour,w
  6539  0AD9  1903               	btfsc	3,2
  6540  0ADA  2ADC               	goto	u5311
  6541  0ADB  2ADD               	goto	u5310
  6542  0ADC                     u5311:	
  6543  0ADC  2ADF               	goto	l7247
  6544  0ADD                     u5310:	
  6545  0ADD                     l923:	
  6546                           
  6547                           ;main.c: 234:         rtcData[1] |= 0x80;
  6548  0ADD  17C3               	bsf	_rtcData+1,7
  6549                           
  6550                           ;main.c: 235:         rtcData[2] |= 0x80;
  6551  0ADE  17C4               	bsf	_rtcData+2,7
  6552  0ADF                     l7247:	
  6553                           
  6554                           ;main.c: 237:     i2c_writeNBytes(0x68,rtcData,3);
  6555  0ADF  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6556  0AE0  00E5               	movwf	??_updateAlarm2
  6557  0AE1  0865               	movf	??_updateAlarm2,w
  6558  0AE2  00E0               	movwf	i2c_writeNBytes@data
  6559  0AE3  3003               	movlw	3
  6560  0AE4  00E1               	movwf	i2c_writeNBytes@len
  6561  0AE5  3000               	movlw	0
  6562  0AE6  00E2               	movwf	i2c_writeNBytes@len+1
  6563  0AE7  3068               	movlw	104
  6564  0AE8  3187  27D5  318A   	fcall	_i2c_writeNBytes
  6565  0AEB                     l924:	
  6566  0AEB  0008               	return
  6567  0AEC                     __end_of_updateAlarm2:	
  6568                           
  6569                           	psect	text5
  6570  0A9C                     __ptext5:	
  6571 ;; *************** function _updateAlarm1 *****************
  6572 ;; Defined at:
  6573 ;;		line 216 in file "main.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  bcdHour         1    wreg     unsigned char 
  6576 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      void 
  6581 ;; Registers used:
  6582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6588 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;Total ram usage:        3 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:   15
  6595 ;; This function calls:
  6596 ;;		_i2c_writeNBytes
  6597 ;; This function is called by:
  6598 ;;		_main
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           
  6603                           ;psect for function _updateAlarm1
  6604  0A9C                     _updateAlarm1:	
  6605                           
  6606                           ;incstack = 0
  6607                           ; Regs used in _updateAlarm1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6608                           ;updateAlarm1@bcdHour stored from wreg
  6609  0A9C  0020               	movlb	0	; select bank0
  6610  0A9D  00E6               	movwf	updateAlarm1@bcdHour
  6611  0A9E                     l7229:	
  6612                           
  6613                           ;main.c: 217:     rtcData[0] = 0x08;
  6614  0A9E  3008               	movlw	8
  6615  0A9F  00E5               	movwf	??_updateAlarm1
  6616  0AA0  0865               	movf	??_updateAlarm1,w
  6617  0AA1  00C2               	movwf	_rtcData
  6618                           
  6619                           ;main.c: 218:     rtcData[1] = bcdMinute;
  6620  0AA2  0864               	movf	updateAlarm1@bcdMinute,w
  6621  0AA3  00E5               	movwf	??_updateAlarm1
  6622  0AA4  0865               	movf	??_updateAlarm1,w
  6623  0AA5  00C3               	movwf	_rtcData+1
  6624  0AA6                     l7231:	
  6625                           
  6626                           ;main.c: 219:     rtcData[2] = (bcdHour & 0xBF) ;
  6627  0AA6  0866               	movf	updateAlarm1@bcdHour,w
  6628  0AA7  39BF               	andlw	191
  6629  0AA8  00E5               	movwf	??_updateAlarm1
  6630  0AA9  0865               	movf	??_updateAlarm1,w
  6631  0AAA  00C4               	movwf	_rtcData+2
  6632  0AAB                     l7233:	
  6633                           
  6634                           ;main.c: 220:     if((bcdMinute != 0) || (bcdHour != 0)){
  6635  0AAB  0864               	movf	updateAlarm1@bcdMinute,w
  6636  0AAC  1D03               	btfss	3,2
  6637  0AAD  2AAF               	goto	u5281
  6638  0AAE  2AB0               	goto	u5280
  6639  0AAF                     u5281:	
  6640  0AAF  2AB5               	goto	l917
  6641  0AB0                     u5280:	
  6642  0AB0                     l7235:	
  6643  0AB0  0866               	movf	updateAlarm1@bcdHour,w
  6644  0AB1  1903               	btfsc	3,2
  6645  0AB2  2AB4               	goto	u5291
  6646  0AB3  2AB5               	goto	u5290
  6647  0AB4                     u5291:	
  6648  0AB4  2AB7               	goto	l7237
  6649  0AB5                     u5290:	
  6650  0AB5                     l917:	
  6651                           
  6652                           ;main.c: 222:         rtcData[1] |= 0x80;
  6653  0AB5  17C3               	bsf	_rtcData+1,7
  6654                           
  6655                           ;main.c: 223:         rtcData[2] |= 0x80;
  6656  0AB6  17C4               	bsf	_rtcData+2,7
  6657  0AB7                     l7237:	
  6658                           
  6659                           ;main.c: 225:     i2c_writeNBytes(0x68,rtcData,3);
  6660  0AB7  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6661  0AB8  00E5               	movwf	??_updateAlarm1
  6662  0AB9  0865               	movf	??_updateAlarm1,w
  6663  0ABA  00E0               	movwf	i2c_writeNBytes@data
  6664  0ABB  3003               	movlw	3
  6665  0ABC  00E1               	movwf	i2c_writeNBytes@len
  6666  0ABD  3000               	movlw	0
  6667  0ABE  00E2               	movwf	i2c_writeNBytes@len+1
  6668  0ABF  3068               	movlw	104
  6669  0AC0  3187  27D5  318A   	fcall	_i2c_writeNBytes
  6670  0AC3                     l918:	
  6671  0AC3  0008               	return
  6672  0AC4                     __end_of_updateAlarm1:	
  6673                           
  6674                           	psect	text6
  6675  0DC2                     __ptext6:	
  6676 ;; *************** function _intToBCD *****************
  6677 ;; Defined at:
  6678 ;;		line 335 in file "main.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  binaryInput     2   12[BANK0 ] unsigned short 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  shift           2   19[BANK0 ] unsigned short 
  6683 ;;  bcdResult       2   17[BANK0 ] unsigned short 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  2   12[BANK0 ] unsigned short 
  6686 ;; Registers used:
  6687 ;;		wreg, status,2, status,0, pclath, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6693 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;Total ram usage:        9 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    7
  6700 ;; This function calls:
  6701 ;;		___lwdiv
  6702 ;;		___lwmod
  6703 ;; This function is called by:
  6704 ;;		_main
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           
  6709                           ;psect for function _intToBCD
  6710  0DC2                     _intToBCD:	
  6711  0DC2                     l7481:	
  6712                           ;incstack = 0
  6713                           ; Regs used in _intToBCD: [wreg+status,2+status,0+pclath+cstack]
  6714                           
  6715                           
  6716                           ;main.c: 336:     uint16_t bcdResult = 0;
  6717  0DC2  0020               	movlb	0	; select bank0
  6718  0DC3  01E7               	clrf	intToBCD@bcdResult
  6719  0DC4  01E8               	clrf	intToBCD@bcdResult+1
  6720                           
  6721                           ;main.c: 337:     uint16_t shift = 0;
  6722  0DC5  01E9               	clrf	intToBCD@shift
  6723  0DC6  01EA               	clrf	intToBCD@shift+1
  6724                           
  6725                           ;main.c: 339:     while (binaryInput > 0) {
  6726  0DC7  2DFE               	goto	l7489
  6727  0DC8                     l7483:	
  6728                           
  6729                           ;main.c: 340:       bcdResult |= (binaryInput % 10) << (shift++ << 2);
  6730  0DC8  300A               	movlw	10
  6731  0DC9  00D6               	movwf	___lwmod@divisor
  6732  0DCA  3000               	movlw	0
  6733  0DCB  00D7               	movwf	___lwmod@divisor+1
  6734  0DCC  0863               	movf	intToBCD@binaryInput+1,w
  6735  0DCD  00D9               	movwf	___lwmod@dividend+1
  6736  0DCE  0862               	movf	intToBCD@binaryInput,w
  6737  0DCF  00D8               	movwf	___lwmod@dividend
  6738  0DD0  318C  2468  318D   	fcall	___lwmod
  6739  0DD3  0020               	movlb	0	; select bank0
  6740  0DD4  0856               	movf	?___lwmod,w
  6741  0DD5  00E4               	movwf	??_intToBCD
  6742  0DD6  0857               	movf	?___lwmod+1,w
  6743  0DD7  00E5               	movwf	??_intToBCD+1
  6744  0DD8  0869               	movf	intToBCD@shift,w
  6745  0DD9  00E6               	movwf	??_intToBCD+2
  6746  0DDA  3001               	movlw	1
  6747  0DDB                     u5625:	
  6748  0DDB  35E6               	lslf	??_intToBCD+2,f
  6749  0DDC  3EFF               	addlw	-1
  6750  0DDD  1D03               	skipz
  6751  0DDE  2DDB               	goto	u5625
  6752  0DDF  3566               	lslf	??_intToBCD+2,w
  6753  0DE0  0A89               	incf	9,f
  6754  0DE1  2DE4               	goto	u5634
  6755  0DE2                     u5635:	
  6756  0DE2  35E4               	lslf	??_intToBCD,f
  6757  0DE3  0DE5               	rlf	??_intToBCD+1,f
  6758  0DE4                     u5634:	
  6759  0DE4  0B89               	decfsz	9,f
  6760  0DE5  2DE2               	goto	u5635
  6761  0DE6  0864               	movf	??_intToBCD,w
  6762  0DE7  04E7               	iorwf	intToBCD@bcdResult,f
  6763  0DE8  0865               	movf	??_intToBCD+1,w
  6764  0DE9  04E8               	iorwf	intToBCD@bcdResult+1,f
  6765  0DEA                     l7485:	
  6766  0DEA  3001               	movlw	1
  6767  0DEB  07E9               	addwf	intToBCD@shift,f
  6768  0DEC  3000               	movlw	0
  6769  0DED  3DEA               	addwfc	intToBCD@shift+1,f
  6770  0DEE                     l7487:	
  6771                           
  6772                           ;main.c: 341:       binaryInput /= 10;
  6773  0DEE  300A               	movlw	10
  6774  0DEF  00D6               	movwf	___lwdiv@divisor
  6775  0DF0  3000               	movlw	0
  6776  0DF1  00D7               	movwf	___lwdiv@divisor+1
  6777  0DF2  0863               	movf	intToBCD@binaryInput+1,w
  6778  0DF3  00D9               	movwf	___lwdiv@dividend+1
  6779  0DF4  0862               	movf	intToBCD@binaryInput,w
  6780  0DF5  00D8               	movwf	___lwdiv@dividend
  6781  0DF6  318D  2547  318D   	fcall	___lwdiv
  6782  0DF9  0020               	movlb	0	; select bank0
  6783  0DFA  0857               	movf	?___lwdiv+1,w
  6784  0DFB  00E3               	movwf	intToBCD@binaryInput+1
  6785  0DFC  0856               	movf	?___lwdiv,w
  6786  0DFD  00E2               	movwf	intToBCD@binaryInput
  6787  0DFE                     l7489:	
  6788                           
  6789                           ;main.c: 339:     while (binaryInput > 0) {
  6790  0DFE  0862               	movf	intToBCD@binaryInput,w
  6791  0DFF  0463               	iorwf	intToBCD@binaryInput+1,w
  6792  0E00  1D03               	btfss	3,2
  6793  0E01  2E03               	goto	u5641
  6794  0E02  2E04               	goto	u5640
  6795  0E03                     u5641:	
  6796  0E03  2DC8               	goto	l7483
  6797  0E04                     u5640:	
  6798  0E04                     l7491:	
  6799                           
  6800                           ;main.c: 344:     return bcdResult;
  6801  0E04  0868               	movf	intToBCD@bcdResult+1,w
  6802  0E05  00E3               	movwf	?_intToBCD+1
  6803  0E06  0867               	movf	intToBCD@bcdResult,w
  6804  0E07  00E2               	movwf	?_intToBCD
  6805  0E08                     l997:	
  6806  0E08  0008               	return
  6807  0E09                     __end_of_intToBCD:	
  6808                           
  6809                           	psect	text7
  6810  0C68                     __ptext7:	
  6811 ;; *************** function ___lwmod *****************
  6812 ;; Defined at:
  6813 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lwmod.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;  divisor         2    0[BANK0 ] unsigned int 
  6816 ;;  dividend        2    2[BANK0 ] unsigned int 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  counter         1    5[BANK0 ] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  2    0[BANK0 ] unsigned int 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2, status,0
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6828 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6831 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6832 ;;Total ram usage:        6 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    6
  6835 ;; This function calls:
  6836 ;;		Nothing
  6837 ;; This function is called by:
  6838 ;;		_intToBCD
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           
  6843                           ;psect for function ___lwmod
  6844  0C68                     ___lwmod:	
  6845  0C68                     l6991:	
  6846                           ;incstack = 0
  6847                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6848                           
  6849  0C68  0020               	movlb	0	; select bank0
  6850  0C69  0856               	movf	___lwmod@divisor,w
  6851  0C6A  0457               	iorwf	___lwmod@divisor+1,w
  6852  0C6B  1903               	btfsc	3,2
  6853  0C6C  2C6E               	goto	u5151
  6854  0C6D  2C6F               	goto	u5150
  6855  0C6E                     u5151:	
  6856  0C6E  2C98               	goto	l7009
  6857  0C6F                     u5150:	
  6858  0C6F                     l6993:	
  6859  0C6F  01DB               	clrf	___lwmod@counter
  6860  0C70  0ADB               	incf	___lwmod@counter,f
  6861  0C71  2C7B               	goto	l6999
  6862  0C72                     l6995:	
  6863  0C72  3001               	movlw	1
  6864  0C73                     u5165:	
  6865  0C73  35D6               	lslf	___lwmod@divisor,f
  6866  0C74  0DD7               	rlf	___lwmod@divisor+1,f
  6867  0C75  0B89               	decfsz	9,f
  6868  0C76  2C73               	goto	u5165
  6869  0C77                     l6997:	
  6870  0C77  3001               	movlw	1
  6871  0C78  00DA               	movwf	??___lwmod
  6872  0C79  085A               	movf	??___lwmod,w
  6873  0C7A  07DB               	addwf	___lwmod@counter,f
  6874  0C7B                     l6999:	
  6875  0C7B  1FD7               	btfss	___lwmod@divisor+1,7
  6876  0C7C  2C7E               	goto	u5171
  6877  0C7D  2C7F               	goto	u5170
  6878  0C7E                     u5171:	
  6879  0C7E  2C72               	goto	l6995
  6880  0C7F                     u5170:	
  6881  0C7F                     l7001:	
  6882  0C7F  0857               	movf	___lwmod@divisor+1,w
  6883  0C80  0259               	subwf	___lwmod@dividend+1,w
  6884  0C81  1D03               	skipz
  6885  0C82  2C85               	goto	u5185
  6886  0C83  0856               	movf	___lwmod@divisor,w
  6887  0C84  0258               	subwf	___lwmod@dividend,w
  6888  0C85                     u5185:	
  6889  0C85  1C03               	skipc
  6890  0C86  2C88               	goto	u5181
  6891  0C87  2C89               	goto	u5180
  6892  0C88                     u5181:	
  6893  0C88  2C8D               	goto	l7005
  6894  0C89                     u5180:	
  6895  0C89                     l7003:	
  6896  0C89  0856               	movf	___lwmod@divisor,w
  6897  0C8A  02D8               	subwf	___lwmod@dividend,f
  6898  0C8B  0857               	movf	___lwmod@divisor+1,w
  6899  0C8C  3BD9               	subwfb	___lwmod@dividend+1,f
  6900  0C8D                     l7005:	
  6901  0C8D  3001               	movlw	1
  6902  0C8E                     u5195:	
  6903  0C8E  36D7               	lsrf	___lwmod@divisor+1,f
  6904  0C8F  0CD6               	rrf	___lwmod@divisor,f
  6905  0C90  0B89               	decfsz	9,f
  6906  0C91  2C8E               	goto	u5195
  6907  0C92                     l7007:	
  6908  0C92  3001               	movlw	1
  6909  0C93  02DB               	subwf	___lwmod@counter,f
  6910  0C94  1D03               	btfss	3,2
  6911  0C95  2C97               	goto	u5201
  6912  0C96  2C98               	goto	u5200
  6913  0C97                     u5201:	
  6914  0C97  2C7F               	goto	l7001
  6915  0C98                     u5200:	
  6916  0C98                     l7009:	
  6917  0C98  0859               	movf	___lwmod@dividend+1,w
  6918  0C99  00D7               	movwf	?___lwmod+1
  6919  0C9A  0858               	movf	___lwmod@dividend,w
  6920  0C9B  00D6               	movwf	?___lwmod
  6921  0C9C                     l1675:	
  6922  0C9C  0008               	return
  6923  0C9D                     __end_of___lwmod:	
  6924                           
  6925                           	psect	text8
  6926  0D47                     __ptext8:	
  6927 ;; *************** function ___lwdiv *****************
  6928 ;; Defined at:
  6929 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lwdiv.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  divisor         2    0[BANK0 ] unsigned int 
  6932 ;;  dividend        2    2[BANK0 ] unsigned int 
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;  quotient        2    6[BANK0 ] unsigned int 
  6935 ;;  counter         1    5[BANK0 ] unsigned char 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  2    0[BANK0 ] unsigned int 
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6945 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6949 ;;Total ram usage:        8 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    6
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_intToBCD
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           
  6960                           ;psect for function ___lwdiv
  6961  0D47                     ___lwdiv:	
  6962  0D47                     l6965:	
  6963                           ;incstack = 0
  6964                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6965                           
  6966  0D47  0020               	movlb	0	; select bank0
  6967  0D48  01DC               	clrf	___lwdiv@quotient
  6968  0D49  01DD               	clrf	___lwdiv@quotient+1
  6969  0D4A                     l6967:	
  6970  0D4A  0856               	movf	___lwdiv@divisor,w
  6971  0D4B  0457               	iorwf	___lwdiv@divisor+1,w
  6972  0D4C  1903               	btfsc	3,2
  6973  0D4D  2D4F               	goto	u5081
  6974  0D4E  2D50               	goto	u5080
  6975  0D4F                     u5081:	
  6976  0D4F  2D7F               	goto	l6987
  6977  0D50                     u5080:	
  6978  0D50                     l6969:	
  6979  0D50  01DB               	clrf	___lwdiv@counter
  6980  0D51  0ADB               	incf	___lwdiv@counter,f
  6981  0D52  2D5C               	goto	l6975
  6982  0D53                     l6971:	
  6983  0D53  3001               	movlw	1
  6984  0D54                     u5095:	
  6985  0D54  35D6               	lslf	___lwdiv@divisor,f
  6986  0D55  0DD7               	rlf	___lwdiv@divisor+1,f
  6987  0D56  0B89               	decfsz	9,f
  6988  0D57  2D54               	goto	u5095
  6989  0D58                     l6973:	
  6990  0D58  3001               	movlw	1
  6991  0D59  00DA               	movwf	??___lwdiv
  6992  0D5A  085A               	movf	??___lwdiv,w
  6993  0D5B  07DB               	addwf	___lwdiv@counter,f
  6994  0D5C                     l6975:	
  6995  0D5C  1FD7               	btfss	___lwdiv@divisor+1,7
  6996  0D5D  2D5F               	goto	u5101
  6997  0D5E  2D60               	goto	u5100
  6998  0D5F                     u5101:	
  6999  0D5F  2D53               	goto	l6971
  7000  0D60                     u5100:	
  7001  0D60                     l6977:	
  7002  0D60  3001               	movlw	1
  7003  0D61                     u5115:	
  7004  0D61  35DC               	lslf	___lwdiv@quotient,f
  7005  0D62  0DDD               	rlf	___lwdiv@quotient+1,f
  7006  0D63  0B89               	decfsz	9,f
  7007  0D64  2D61               	goto	u5115
  7008  0D65  0857               	movf	___lwdiv@divisor+1,w
  7009  0D66  0259               	subwf	___lwdiv@dividend+1,w
  7010  0D67  1D03               	skipz
  7011  0D68  2D6B               	goto	u5125
  7012  0D69  0856               	movf	___lwdiv@divisor,w
  7013  0D6A  0258               	subwf	___lwdiv@dividend,w
  7014  0D6B                     u5125:	
  7015  0D6B  1C03               	skipc
  7016  0D6C  2D6E               	goto	u5121
  7017  0D6D  2D6F               	goto	u5120
  7018  0D6E                     u5121:	
  7019  0D6E  2D74               	goto	l6983
  7020  0D6F                     u5120:	
  7021  0D6F                     l6979:	
  7022  0D6F  0856               	movf	___lwdiv@divisor,w
  7023  0D70  02D8               	subwf	___lwdiv@dividend,f
  7024  0D71  0857               	movf	___lwdiv@divisor+1,w
  7025  0D72  3BD9               	subwfb	___lwdiv@dividend+1,f
  7026  0D73                     l6981:	
  7027  0D73  145C               	bsf	___lwdiv@quotient,0
  7028  0D74                     l6983:	
  7029  0D74  3001               	movlw	1
  7030  0D75                     u5135:	
  7031  0D75  36D7               	lsrf	___lwdiv@divisor+1,f
  7032  0D76  0CD6               	rrf	___lwdiv@divisor,f
  7033  0D77  0B89               	decfsz	9,f
  7034  0D78  2D75               	goto	u5135
  7035  0D79                     l6985:	
  7036  0D79  3001               	movlw	1
  7037  0D7A  02DB               	subwf	___lwdiv@counter,f
  7038  0D7B  1D03               	btfss	3,2
  7039  0D7C  2D7E               	goto	u5141
  7040  0D7D  2D7F               	goto	u5140
  7041  0D7E                     u5141:	
  7042  0D7E  2D60               	goto	l6977
  7043  0D7F                     u5140:	
  7044  0D7F                     l6987:	
  7045  0D7F  085D               	movf	___lwdiv@quotient+1,w
  7046  0D80  00D7               	movwf	?___lwdiv+1
  7047  0D81  085C               	movf	___lwdiv@quotient,w
  7048  0D82  00D6               	movwf	?___lwdiv
  7049  0D83                     l1665:	
  7050  0D83  0008               	return
  7051  0D84                     __end_of___lwdiv:	
  7052                           
  7053                           	psect	text9
  7054  0F4D                     __ptext9:	
  7055 ;; *************** function _initRTC *****************
  7056 ;; Defined at:
  7057 ;;		line 157 in file "main.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;		None
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  1    wreg      void 
  7064 ;; Registers used:
  7065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;Total ram usage:        2 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:   15
  7078 ;; This function calls:
  7079 ;;		_i2c_readDataBlock
  7080 ;;		_i2c_writeNBytes
  7081 ;; This function is called by:
  7082 ;;		_main
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           
  7087                           ;psect for function _initRTC
  7088  0F4D                     _initRTC:	
  7089  0F4D                     l7179:	
  7090                           ;incstack = 0
  7091                           ; Regs used in _initRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7092                           
  7093                           
  7094                           ;main.c: 158:     _delay((unsigned long)((30)*(32000000/4000.0)));
  7095  0F4D  3002               	movlw	2
  7096  0F4E  0020               	movlb	0	; select bank0
  7097  0F4F  00EA               	movwf	??_initRTC+1
  7098  0F50  3038               	movlw	56
  7099  0F51  00E9               	movwf	??_initRTC
  7100  0F52  30AD               	movlw	173
  7101  0F53                     u7027:	
  7102  0F53  0B89               	decfsz	9,f
  7103  0F54  2F53               	goto	u7027
  7104  0F55  0BE9               	decfsz	??_initRTC,f
  7105  0F56  2F53               	goto	u7027
  7106  0F57  0BEA               	decfsz	??_initRTC+1,f
  7107  0F58  2F53               	goto	u7027
  7108  0F59                     l7181:	
  7109                           
  7110                           ;main.c: 162:     i2c_readDataBlock(0x68,0x00,rtcData,sizeof(rtcData));
  7111  0F59  0020               	movlb	0	; select bank0
  7112  0F5A  01E0               	clrf	i2c_readDataBlock@reg
  7113  0F5B  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7114  0F5C  00E9               	movwf	??_initRTC
  7115  0F5D  0869               	movf	??_initRTC,w
  7116  0F5E  00E1               	movwf	i2c_readDataBlock@data
  7117  0F5F  3014               	movlw	20
  7118  0F60  00E2               	movwf	i2c_readDataBlock@len
  7119  0F61  3000               	movlw	0
  7120  0F62  00E3               	movwf	i2c_readDataBlock@len+1
  7121  0F63  3068               	movlw	104
  7122  0F64  318D  2584  318F   	fcall	_i2c_readDataBlock
  7123  0F67                     l7183:	
  7124                           
  7125                           ;main.c: 165:     if((rtcData[0x0F] & 0x80) == 0x80){
  7126  0F67  0020               	movlb	0	; select bank0
  7127  0F68  1FD1               	btfss	_rtcData+15,7
  7128  0F69  2F6B               	goto	u5261
  7129  0F6A  2F6C               	goto	u5260
  7130  0F6B                     u5261:	
  7131  0F6B  2F90               	goto	l906
  7132  0F6C                     u5260:	
  7133  0F6C                     l7185:	
  7134                           
  7135                           ;main.c: 166:         rtcData[0] = 0x00;
  7136  0F6C  01C2               	clrf	_rtcData
  7137                           
  7138                           ;main.c: 167:         rtcData[0x00 +1] = 0x00;
  7139  0F6D  01C3               	clrf	_rtcData+1
  7140                           
  7141                           ;main.c: 168:         rtcData[0x01 +1] = 0x00;
  7142  0F6E  01C4               	clrf	_rtcData+2
  7143                           
  7144                           ;main.c: 169:         rtcData[0x02 +1] = 0x00;
  7145  0F6F  01C5               	clrf	_rtcData+3
  7146  0F70                     l7187:	
  7147                           
  7148                           ;main.c: 170:         rtcData[0x03 +1] = 0x01;
  7149  0F70  01C6               	clrf	_rtcData+4
  7150  0F71  0AC6               	incf	_rtcData+4,f
  7151  0F72                     l7189:	
  7152                           
  7153                           ;main.c: 171:         rtcData[0x04 +1] = 0x01;
  7154  0F72  01C7               	clrf	_rtcData+5
  7155  0F73  0AC7               	incf	_rtcData+5,f
  7156  0F74                     l7191:	
  7157                           
  7158                           ;main.c: 172:         rtcData[0x05 +1] = 0x01;
  7159  0F74  01C8               	clrf	_rtcData+6
  7160  0F75  0AC8               	incf	_rtcData+6,f
  7161  0F76                     l7193:	
  7162                           
  7163                           ;main.c: 173:         rtcData[0x06 +1] = 0x20;
  7164  0F76  3020               	movlw	32
  7165  0F77  00E9               	movwf	??_initRTC
  7166  0F78  0869               	movf	??_initRTC,w
  7167  0F79  00C9               	movwf	_rtcData+7
  7168  0F7A                     l7195:	
  7169                           
  7170                           ;main.c: 174:         rtcData[0x07 +1] = 0x00;
  7171  0F7A  01CA               	clrf	_rtcData+8
  7172  0F7B                     l7197:	
  7173                           
  7174                           ;main.c: 175:         rtcData[0x08 +1] = 0x00;
  7175  0F7B  01CB               	clrf	_rtcData+9
  7176  0F7C                     l7199:	
  7177                           
  7178                           ;main.c: 176:         rtcData[0x09 +1] = 0x00;
  7179  0F7C  01CC               	clrf	_rtcData+10
  7180  0F7D                     l7201:	
  7181                           
  7182                           ;main.c: 177:         rtcData[0x0A +1] = 0x00;
  7183  0F7D  01CD               	clrf	_rtcData+11
  7184  0F7E                     l7203:	
  7185                           
  7186                           ;main.c: 178:         rtcData[0x0B +1] = 0x00;
  7187  0F7E  01CE               	clrf	_rtcData+12
  7188  0F7F                     l7205:	
  7189                           
  7190                           ;main.c: 179:         rtcData[0x09 +1] = 0x00;
  7191  0F7F  01CC               	clrf	_rtcData+10
  7192  0F80                     l7207:	
  7193                           
  7194                           ;main.c: 180:         rtcData[0x0A +1] = 0x00;
  7195  0F80  01CD               	clrf	_rtcData+11
  7196  0F81                     l7209:	
  7197                           
  7198                           ;main.c: 181:         rtcData[0x0E +1] = 0x00;
  7199  0F81  01D1               	clrf	_rtcData+15
  7200  0F82                     l7211:	
  7201                           
  7202                           ;main.c: 182:         rtcData[0x0F +1] = 0x00;
  7203  0F82  01D2               	clrf	_rtcData+16
  7204  0F83                     l7213:	
  7205                           
  7206                           ;main.c: 184:         i2c_writeNBytes(0x68,rtcData,sizeof(rtcData));
  7207  0F83  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7208  0F84  00E9               	movwf	??_initRTC
  7209  0F85  0869               	movf	??_initRTC,w
  7210  0F86  00E0               	movwf	i2c_writeNBytes@data
  7211  0F87  3014               	movlw	20
  7212  0F88  00E1               	movwf	i2c_writeNBytes@len
  7213  0F89  3000               	movlw	0
  7214  0F8A  00E2               	movwf	i2c_writeNBytes@len+1
  7215  0F8B  3068               	movlw	104
  7216  0F8C  3187  27D5  318F   	fcall	_i2c_writeNBytes
  7217                           
  7218                           ;main.c: 185:     } else if((rtcData[0x0E] & 0x04) == 0x04){
  7219  0F8F  2FA5               	goto	l909
  7220  0F90                     l906:	
  7221  0F90  1D50               	btfss	_rtcData+14,2
  7222  0F91  2F93               	goto	u5271
  7223  0F92  2F94               	goto	u5270
  7224  0F93                     u5271:	
  7225  0F93  2FA5               	goto	l909
  7226  0F94                     u5270:	
  7227  0F94                     l7215:	
  7228                           
  7229                           ;main.c: 186:         rtcData[0] = 0x0E;
  7230  0F94  300E               	movlw	14
  7231  0F95  00E9               	movwf	??_initRTC
  7232  0F96  0869               	movf	??_initRTC,w
  7233  0F97  00C2               	movwf	_rtcData
  7234  0F98                     l7217:	
  7235                           
  7236                           ;main.c: 187:         rtcData[1] = 0x00;
  7237  0F98  01C3               	clrf	_rtcData+1
  7238  0F99                     l7219:	
  7239                           
  7240                           ;main.c: 188:         i2c_writeNBytes(0x68,rtcData,2);
  7241  0F99  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7242  0F9A  00E9               	movwf	??_initRTC
  7243  0F9B  0869               	movf	??_initRTC,w
  7244  0F9C  00E0               	movwf	i2c_writeNBytes@data
  7245  0F9D  3002               	movlw	2
  7246  0F9E  00E1               	movwf	i2c_writeNBytes@len
  7247  0F9F  3000               	movlw	0
  7248  0FA0  00E2               	movwf	i2c_writeNBytes@len+1
  7249  0FA1  3068               	movlw	104
  7250  0FA2  3187  27D5  318F   	fcall	_i2c_writeNBytes
  7251  0FA5                     l909:	
  7252  0FA5  0008               	return
  7253  0FA6                     __end_of_initRTC:	
  7254                           
  7255                           	psect	text10
  7256  07D5                     __ptext10:	
  7257 ;; *************** function _i2c_writeNBytes *****************
  7258 ;; Defined at:
  7259 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  address         1    wreg     unsigned char 
  7262 ;;  data            1   10[BANK0 ] PTR void 
  7263 ;;		 -> rtcData(20), 
  7264 ;;  len             2   11[BANK0 ] unsigned int 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  address         1   13[BANK0 ] unsigned char 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      void 
  7269 ;; Registers used:
  7270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7276 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;Total ram usage:        4 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:   14
  7283 ;; This function calls:
  7284 ;;		_i2c_close
  7285 ;;		_i2c_masterWrite
  7286 ;;		_i2c_open
  7287 ;;		_i2c_setAddressNACKCallback
  7288 ;;		_i2c_setBuffer
  7289 ;; This function is called by:
  7290 ;;		_initRTC
  7291 ;;		_updateRTC
  7292 ;;		_updateAlarm1
  7293 ;;		_updateAlarm2
  7294 ;;		_updateDate
  7295 ;;		_updateMonth
  7296 ;;		_updateDay
  7297 ;;		_updateYear
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           
  7302                           ;psect for function _i2c_writeNBytes
  7303  07D5                     _i2c_writeNBytes:	
  7304                           
  7305                           ;incstack = 0
  7306                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7307                           ;i2c_writeNBytes@address stored from wreg
  7308  07D5  0020               	movlb	0	; select bank0
  7309  07D6  00E3               	movwf	i2c_writeNBytes@address
  7310  07D7                     l6867:	
  7311  07D7                     l6869:	
  7312                           ;mcc_generated_files/drivers/i2c_simple_master.c: 48: void i2c_writeNBytes(i2c_address_t
      +                           address, void* data, size_t len);mcc_generated_files/drivers/i2c_simple_master.c: 49: {
      +                          ;mcc_generated_files/drivers/i2c_simple_master.c: 50:     while(!i2c_open(address));
  7313                           
  7314  07D7  0020               	movlb	0	; select bank0
  7315  07D8  0863               	movf	i2c_writeNBytes@address,w
  7316  07D9  318E  2654  3187   	fcall	_i2c_open
  7317  07DC  3A00               	xorlw	0
  7318  07DD  1903               	skipnz
  7319  07DE  2FE0               	goto	u5031
  7320  07DF  2FE1               	goto	u5030
  7321  07E0                     u5031:	
  7322  07E0  2FD7               	goto	l6869
  7323  07E1                     u5030:	
  7324  07E1                     l6871:	
  7325                           
  7326                           ;mcc_generated_files/drivers/i2c_simple_master.c: 51:     i2c_setBuffer(data,len);
  7327  07E1  0020               	movlb	0	; select bank0
  7328  07E2  0862               	movf	i2c_writeNBytes@len+1,w
  7329  07E3  00D7               	movwf	i2c_setBuffer@bufferSize+1
  7330  07E4  0861               	movf	i2c_writeNBytes@len,w
  7331  07E5  00D6               	movwf	i2c_setBuffer@bufferSize
  7332  07E6  0860               	movf	i2c_writeNBytes@data,w
  7333  07E7  3188  2044  3187   	fcall	_i2c_setBuffer
  7334  07EA                     l6873:	
  7335                           
  7336                           ;mcc_generated_files/drivers/i2c_simple_master.c: 52:     i2c_setAddressNACKCallback(i2c
      +                          _restartWrite,((void*)0));
  7337  07EA  300F               	movlw	low _i2c_restartWrite
  7338  07EB  0020               	movlb	0	; select bank0
  7339  07EC  00DB               	movwf	i2c_setAddressNACKCallback@cb
  7340  07ED  3016               	movlw	high _i2c_restartWrite
  7341  07EE  00DC               	movwf	i2c_setAddressNACKCallback@cb+1
  7342  07EF  01DD               	clrf	i2c_setAddressNACKCallback@p
  7343  07F0  3197  2765  3187   	fcall	_i2c_setAddressNACKCallback
  7344  07F3                     l6875:	
  7345                           
  7346                           ;mcc_generated_files/drivers/i2c_simple_master.c: 53:     i2c_masterWrite();
  7347  07F3  3195  25EC  3187   	fcall	_i2c_masterWrite
  7348  07F6                     l6877:	
  7349                           ;mcc_generated_files/drivers/i2c_simple_master.c: 54:     while(I2C_BUSY == i2c_close())
      +                          ;
  7350                           
  7351  07F6  3189  211B  3187   	fcall	_i2c_close
  7352  07F9  3A01               	xorlw	1
  7353  07FA  1903               	skipnz
  7354  07FB  2FFD               	goto	u5041
  7355  07FC  2FFE               	goto	u5040
  7356  07FD                     u5041:	
  7357  07FD  2FF6               	goto	l6877
  7358  07FE                     u5040:	
  7359  07FE                     l249:	
  7360  07FE  0008               	return
  7361  07FF                     __end_of_i2c_writeNBytes:	
  7362                           
  7363                           	psect	text11
  7364  0D84                     __ptext11:	
  7365 ;; *************** function _i2c_readDataBlock *****************
  7366 ;; Defined at:
  7367 ;;		line 141 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7368 ;; Parameters:    Size  Location     Type
  7369 ;;  address         1    wreg     unsigned char 
  7370 ;;  reg             1   10[BANK0 ] unsigned char 
  7371 ;;  data            1   11[BANK0 ] PTR void 
  7372 ;;		 -> rtcData(20), 
  7373 ;;  len             2   12[BANK0 ] unsigned int 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;  address         1   15[BANK0 ] unsigned char 
  7376 ;;  d               3   16[BANK0 ] struct .
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;Total ram usage:        9 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:   14
  7393 ;; This function calls:
  7394 ;;		_i2c_close
  7395 ;;		_i2c_masterWrite
  7396 ;;		_i2c_open
  7397 ;;		_i2c_setAddressNACKCallback
  7398 ;;		_i2c_setBuffer
  7399 ;;		_i2c_setDataCompleteCallback
  7400 ;; This function is called by:
  7401 ;;		_initRTC
  7402 ;;		_main
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           
  7407                           ;psect for function _i2c_readDataBlock
  7408  0D84                     _i2c_readDataBlock:	
  7409                           
  7410                           ;incstack = 0
  7411                           ; Regs used in _i2c_readDataBlock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7412                           ;i2c_readDataBlock@address stored from wreg
  7413  0D84  0020               	movlb	0	; select bank0
  7414  0D85  00E5               	movwf	i2c_readDataBlock@address
  7415  0D86                     l6879:	
  7416                           
  7417                           ;mcc_generated_files/drivers/i2c_simple_master.c: 141: void i2c_readDataBlock(i2c_addres
      +                          s_t address, uint8_t reg, void *data, size_t len);mcc_generated_files/drivers/i2c_simple
      +                          _master.c: 142: {;mcc_generated_files/drivers/i2c_simple_master.c: 144:     buf_t d;;mcc
      +                          _generated_files/drivers/i2c_simple_master.c: 145:     d.data = data;
  7418  0D86  0861               	movf	i2c_readDataBlock@data,w
  7419  0D87  00E4               	movwf	??_i2c_readDataBlock
  7420  0D88  0864               	movf	??_i2c_readDataBlock,w
  7421  0D89  00E8               	movwf	low ((i2c_readDataBlock@d| 0+2))
  7422                           
  7423                           ;mcc_generated_files/drivers/i2c_simple_master.c: 146:     d.len = len;
  7424  0D8A  0863               	movf	i2c_readDataBlock@len+1,w
  7425  0D8B  00E7               	movwf	i2c_readDataBlock@d+1
  7426  0D8C  0862               	movf	i2c_readDataBlock@len,w
  7427  0D8D  00E6               	movwf	i2c_readDataBlock@d
  7428  0D8E                     l6881:	
  7429                           ;mcc_generated_files/drivers/i2c_simple_master.c: 148:     while(!i2c_open(address));
  7430                           
  7431  0D8E  0020               	movlb	0	; select bank0
  7432  0D8F  0865               	movf	i2c_readDataBlock@address,w
  7433  0D90  318E  2654  318D   	fcall	_i2c_open
  7434  0D93  3A00               	xorlw	0
  7435  0D94  1903               	skipnz
  7436  0D95  2D97               	goto	u5051
  7437  0D96  2D98               	goto	u5050
  7438  0D97                     u5051:	
  7439  0D97  2D8E               	goto	l6881
  7440  0D98                     u5050:	
  7441  0D98                     l6883:	
  7442                           
  7443                           ;mcc_generated_files/drivers/i2c_simple_master.c: 149:     i2c_setDataCompleteCallback(r
      +                          dBlkRegCompleteHandler,&d);
  7444  0D98  3039               	movlw	low _rdBlkRegCompleteHandler
  7445  0D99  0020               	movlb	0	; select bank0
  7446  0D9A  00DB               	movwf	i2c_setDataCompleteCallback@cb
  7447  0D9B  3009               	movlw	high _rdBlkRegCompleteHandler
  7448  0D9C  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
  7449  0D9D  3066               	movlw	(low (i2c_readDataBlock@d| 0))& (0+255)
  7450  0D9E  00E4               	movwf	??_i2c_readDataBlock
  7451  0D9F  0864               	movf	??_i2c_readDataBlock,w
  7452  0DA0  00DD               	movwf	i2c_setDataCompleteCallback@p
  7453  0DA1  3197  2749  318D   	fcall	_i2c_setDataCompleteCallback
  7454  0DA4                     l6885:	
  7455                           
  7456                           ;mcc_generated_files/drivers/i2c_simple_master.c: 150:     i2c_setBuffer(&reg,1);
  7457  0DA4  3001               	movlw	1
  7458  0DA5  0020               	movlb	0	; select bank0
  7459  0DA6  00D6               	movwf	i2c_setBuffer@bufferSize
  7460  0DA7  3000               	movlw	0
  7461  0DA8  00D7               	movwf	i2c_setBuffer@bufferSize+1
  7462  0DA9  3060               	movlw	(low (i2c_readDataBlock@reg| 0))& (0+255)
  7463  0DAA  3188  2044  318D   	fcall	_i2c_setBuffer
  7464  0DAD                     l6887:	
  7465                           
  7466                           ;mcc_generated_files/drivers/i2c_simple_master.c: 151:     i2c_setAddressNACKCallback(i2
      +                          c_restartWrite,((void*)0));
  7467  0DAD  300F               	movlw	low _i2c_restartWrite
  7468  0DAE  0020               	movlb	0	; select bank0
  7469  0DAF  00DB               	movwf	i2c_setAddressNACKCallback@cb
  7470  0DB0  3016               	movlw	high _i2c_restartWrite
  7471  0DB1  00DC               	movwf	i2c_setAddressNACKCallback@cb+1
  7472  0DB2  01DD               	clrf	i2c_setAddressNACKCallback@p
  7473  0DB3  3197  2765  318D   	fcall	_i2c_setAddressNACKCallback
  7474  0DB6                     l6889:	
  7475                           
  7476                           ;mcc_generated_files/drivers/i2c_simple_master.c: 152:     i2c_masterWrite();
  7477  0DB6  3195  25EC  318D   	fcall	_i2c_masterWrite
  7478  0DB9                     l6891:	
  7479                           ;mcc_generated_files/drivers/i2c_simple_master.c: 153:     while(I2C_BUSY == i2c_close()
      +                          );
  7480                           
  7481  0DB9  3189  211B  318D   	fcall	_i2c_close
  7482  0DBC  3A01               	xorlw	1
  7483  0DBD  1903               	skipnz
  7484  0DBE  2DC0               	goto	u5061
  7485  0DBF  2DC1               	goto	u5060
  7486  0DC0                     u5061:	
  7487  0DC0  2DB9               	goto	l6891
  7488  0DC1                     u5060:	
  7489  0DC1                     l300:	
  7490  0DC1  0008               	return
  7491  0DC2                     __end_of_i2c_readDataBlock:	
  7492                           
  7493                           	psect	text12
  7494  1765                     __ptext12:	
  7495 ;; *************** function _i2c_setAddressNACKCallback *****************
  7496 ;; Defined at:
  7497 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  7500 ;;		 -> i2c_restartWrite(1), 
  7501 ;;  p               1    7[BANK0 ] PTR void 
  7502 ;;		 -> NULL(0), 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7514 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;Total ram usage:        4 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    7
  7521 ;; This function calls:
  7522 ;;		_setCallBack
  7523 ;; This function is called by:
  7524 ;;		_i2c_writeNBytes
  7525 ;;		_i2c_readDataBlock
  7526 ;;		_i2c_write1ByteRegister
  7527 ;;		_i2c_read1ByteRegister
  7528 ;;		_i2c_read2ByteRegister
  7529 ;;		_i2c_write2ByteRegister
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _i2c_setAddressNACKCallback
  7535  1765                     _i2c_setAddressNACKCallback:	
  7536  1765                     l6753:	
  7537                           ;incstack = 0
  7538                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7539                           
  7540                           
  7541                           ;mcc_generated_files/drivers/i2c_master.c: 99: void i2c_setAddressNACKCallback(i2c_callb
      +                          ack cb, void *p);mcc_generated_files/drivers/i2c_master.c: 100: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 101:     setCallBack(i2c_addressNACK,cb,p);
  7542  1765  0020               	movlb	0	; select bank0
  7543  1766  085C               	movf	i2c_setAddressNACKCallback@cb+1,w
  7544  1767  00D7               	movwf	setCallBack@cb+1
  7545  1768  085B               	movf	i2c_setAddressNACKCallback@cb,w
  7546  1769  00D6               	movwf	setCallBack@cb
  7547  176A  085D               	movf	i2c_setAddressNACKCallback@p,w
  7548  176B  00DE               	movwf	??_i2c_setAddressNACKCallback
  7549  176C  085E               	movf	??_i2c_setAddressNACKCallback,w
  7550  176D  00D8               	movwf	setCallBack@p
  7551  176E  3002               	movlw	2
  7552  176F  318A  2275  3197   	fcall	_setCallBack
  7553  1772                     l67:	
  7554  1772  0008               	return
  7555  1773                     __end_of_i2c_setAddressNACKCallback:	
  7556                           
  7557                           	psect	text13
  7558  0E54                     __ptext13:	
  7559 ;; *************** function _i2c_open *****************
  7560 ;; Defined at:
  7561 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  address         1    wreg     unsigned char 
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;  address         1    3[BANK0 ] unsigned char 
  7566 ;;  ret             1    4[BANK0 ] enum E3252
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  1    wreg      enum E3252
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0, pclath, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7577 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;Total ram usage:        3 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    7
  7583 ;; This function calls:
  7584 ;;		_i2c_driver_open
  7585 ;;		_i2c_driver_setBusCollisionISR
  7586 ;;		_i2c_driver_setI2cISR
  7587 ;;		_mssp_clearIRQ
  7588 ;; This function is called by:
  7589 ;;		_i2c_writeNBytes
  7590 ;;		_i2c_readDataBlock
  7591 ;;		_i2c_write1ByteRegister
  7592 ;;		_i2c_read1ByteRegister
  7593 ;;		_i2c_read2ByteRegister
  7594 ;;		_i2c_write2ByteRegister
  7595 ;;		_i2c_readNBytes
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _i2c_open
  7601  0E54                     _i2c_open:	
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  7605                           ;i2c_open@address stored from wreg
  7606  0E54  0020               	movlb	0	; select bank0
  7607  0E55  00D9               	movwf	i2c_open@address
  7608  0E56                     l6755:	
  7609                           
  7610                           ;mcc_generated_files/drivers/i2c_master.c: 116: i2c_error_t i2c_open(i2c_address_t addre
      +                          ss);mcc_generated_files/drivers/i2c_master.c: 117: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 118:     i2c_error_t ret = I2C_BUSY;
  7611  0E56  01DA               	clrf	i2c_open@ret
  7612  0E57  0ADA               	incf	i2c_open@ret,f
  7613                           
  7614                           ;mcc_generated_files/drivers/i2c_master.c: 120:     if(!i2c_status.inUse)
  7615  0E58  0021               	movlb	1	; select bank1
  7616  0E59  18A0               	btfsc	_i2c_status^(0+128),1
  7617  0E5A  2E5C               	goto	u5011
  7618  0E5B  2E5D               	goto	u5010
  7619  0E5C                     u5011:	
  7620  0E5C  2EA2               	goto	l76
  7621  0E5D                     u5010:	
  7622  0E5D                     l6757:	
  7623                           
  7624                           ;mcc_generated_files/drivers/i2c_master.c: 121:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 122:         i2c_status.address = address;
  7625  0E5D  0020               	movlb	0	; select bank0
  7626  0E5E  0859               	movf	i2c_open@address,w
  7627  0E5F  00D8               	movwf	??_i2c_open
  7628  0E60  0858               	movf	??_i2c_open,w
  7629  0E61  0021               	movlb	1	; select bank1
  7630  0E62  00A1               	movwf	(_i2c_status^(0+128)+1)
  7631  0E63                     l6759:	
  7632                           
  7633                           ;mcc_generated_files/drivers/i2c_master.c: 123:         i2c_status.busy = 0;
  7634  0E63  1020               	bcf	_i2c_status^(0+128),0
  7635  0E64                     l6761:	
  7636                           
  7637                           ;mcc_generated_files/drivers/i2c_master.c: 124:         i2c_status.inUse = 1;
  7638  0E64  14A0               	bsf	_i2c_status^(0+128),1
  7639  0E65                     l6763:	
  7640                           
  7641                           ;mcc_generated_files/drivers/i2c_master.c: 125:         i2c_status.addressNACKCheck = 0;
  7642  0E65  11A0               	bcf	_i2c_status^(0+128),3
  7643                           
  7644                           ;mcc_generated_files/drivers/i2c_master.c: 126:         i2c_status.state = I2C_RESET;
  7645  0E66  300E               	movlw	14
  7646  0E67  0020               	movlb	0	; select bank0
  7647  0E68  00D8               	movwf	??_i2c_open
  7648  0E69  0858               	movf	??_i2c_open,w
  7649  0E6A  0021               	movlb	1	; select bank1
  7650  0E6B  00A9               	movwf	(_i2c_status^(0+128)+9)
  7651                           
  7652                           ;mcc_generated_files/drivers/i2c_master.c: 127:         i2c_status.time_out_value = 500;
  7653  0E6C  30F4               	movlw	244
  7654  0E6D  00A7               	movwf	(_i2c_status^(0+128)+7)
  7655  0E6E  3001               	movlw	1
  7656  0E6F  00A8               	movwf	(_i2c_status^(0+128)+8)
  7657  0E70                     l6765:	
  7658                           
  7659                           ;mcc_generated_files/drivers/i2c_master.c: 128:         i2c_status.bufferFree = 1;
  7660  0E70  1520               	bsf	_i2c_status^(0+128),2
  7661                           
  7662                           ;mcc_generated_files/drivers/i2c_master.c: 131:         i2c_status.callbackTable[i2c_dat
      +                          aComplete]=returnStop;
  7663  0E71  3003               	movlw	low _returnStop
  7664  0E72  00AB               	movwf	(low ((_i2c_status| 0+11)))^(0+128)
  7665  0E73  3016               	movlw	high _returnStop
  7666  0E74  00AC               	movwf	((low ((_i2c_status| 0+11)))^(0+128)+1)
  7667  0E75                     l6767:	
  7668                           
  7669                           ;mcc_generated_files/drivers/i2c_master.c: 132:         i2c_status.callbackPayload[i2c_d
      +                          ataComplete] = ((void*)0);
  7670  0E75  01B7               	clrf	(low ((_i2c_status| 0+23)))^(0+128)
  7671  0E76                     l6769:	
  7672                           
  7673                           ;mcc_generated_files/drivers/i2c_master.c: 133:         i2c_status.callbackTable[i2c_wri
      +                          teCollision]=returnStop;
  7674  0E76  3003               	movlw	low _returnStop
  7675  0E77  00AD               	movwf	(low ((_i2c_status| 0+13)))^(0+128)
  7676  0E78  3016               	movlw	high _returnStop
  7677  0E79  00AE               	movwf	((low ((_i2c_status| 0+13)))^(0+128)+1)
  7678                           
  7679                           ;mcc_generated_files/drivers/i2c_master.c: 134:         i2c_status.callbackPayload[i2c_w
      +                          riteCollision] = ((void*)0);
  7680  0E7A  01B8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  7681  0E7B                     l6771:	
  7682                           
  7683                           ;mcc_generated_files/drivers/i2c_master.c: 135:         i2c_status.callbackTable[i2c_add
      +                          ressNACK]=returnStop;
  7684  0E7B  3003               	movlw	low _returnStop
  7685  0E7C  00AF               	movwf	(low ((_i2c_status| 0+15)))^(0+128)
  7686  0E7D  3016               	movlw	high _returnStop
  7687  0E7E  00B0               	movwf	((low ((_i2c_status| 0+15)))^(0+128)+1)
  7688  0E7F                     l6773:	
  7689                           
  7690                           ;mcc_generated_files/drivers/i2c_master.c: 136:         i2c_status.callbackPayload[i2c_a
      +                          ddressNACK] = ((void*)0);
  7691  0E7F  01B9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  7692                           
  7693                           ;mcc_generated_files/drivers/i2c_master.c: 137:         i2c_status.callbackTable[i2c_dat
      +                          aNACK]=returnStop;
  7694  0E80  3003               	movlw	low _returnStop
  7695  0E81  00B1               	movwf	(low ((_i2c_status| 0+17)))^(0+128)
  7696  0E82  3016               	movlw	high _returnStop
  7697  0E83  00B2               	movwf	((low ((_i2c_status| 0+17)))^(0+128)+1)
  7698  0E84                     l6775:	
  7699                           
  7700                           ;mcc_generated_files/drivers/i2c_master.c: 138:         i2c_status.callbackPayload[i2c_d
      +                          ataNACK] = ((void*)0);
  7701  0E84  01BA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  7702  0E85                     l6777:	
  7703                           
  7704                           ;mcc_generated_files/drivers/i2c_master.c: 139:         i2c_status.callbackTable[i2c_tim
      +                          eOut]=returnReset;
  7705  0E85  3009               	movlw	low _returnReset
  7706  0E86  00B3               	movwf	(low ((_i2c_status| 0+19)))^(0+128)
  7707  0E87  3016               	movlw	high _returnReset
  7708  0E88  00B4               	movwf	((low ((_i2c_status| 0+19)))^(0+128)+1)
  7709                           
  7710                           ;mcc_generated_files/drivers/i2c_master.c: 140:         i2c_status.callbackPayload[i2c_t
      +                          imeOut] = ((void*)0);
  7711  0E89  01BB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  7712  0E8A                     l6779:	
  7713                           
  7714                           ;mcc_generated_files/drivers/i2c_master.c: 142:         i2c_driver_open();
  7715  0E8A  3197  2716  318E   	fcall	_i2c_driver_open
  7716  0E8D                     l6781:	
  7717                           
  7718                           ;mcc_generated_files/drivers/i2c_master.c: 143:         mssp_clearIRQ();
  7719  0E8D  3195  258E  318E   	fcall	_mssp_clearIRQ
  7720  0E90                     l6783:	
  7721                           
  7722                           ;mcc_generated_files/drivers/i2c_master.c: 145:         i2c_driver_setBusCollisionISR(i2
      +                          c_busCollisionISR);
  7723  0E90  30A3               	movlw	low _i2c_busCollisionISR
  7724  0E91  0020               	movlb	0	; select bank0
  7725  0E92  00D6               	movwf	i2c_driver_setBusCollisionISR@handler
  7726  0E93  3015               	movlw	high _i2c_busCollisionISR
  7727  0E94  00D7               	movwf	i2c_driver_setBusCollisionISR@handler+1
  7728  0E95  3196  261B  318E   	fcall	_i2c_driver_setBusCollisionISR
  7729  0E98                     l6785:	
  7730                           
  7731                           ;mcc_generated_files/drivers/i2c_master.c: 146:         i2c_driver_setI2cISR(i2c_ISR);
  7732  0E98  309A               	movlw	low _i2c_ISR
  7733  0E99  0020               	movlb	0	; select bank0
  7734  0E9A  00D6               	movwf	i2c_driver_setI2cISR@handler
  7735  0E9B  300B               	movlw	high _i2c_ISR
  7736  0E9C  00D7               	movwf	i2c_driver_setI2cISR@handler+1
  7737  0E9D  3196  2621  318E   	fcall	_i2c_driver_setI2cISR
  7738  0EA0                     l6787:	
  7739                           
  7740                           ;mcc_generated_files/drivers/i2c_master.c: 151:         ret = I2C_NOERR;
  7741  0EA0  0020               	movlb	0	; select bank0
  7742  0EA1  01DA               	clrf	i2c_open@ret
  7743  0EA2                     l76:	
  7744                           ;mcc_generated_files/drivers/i2c_master.c: 152:     }
  7745                           
  7746                           
  7747                           ;mcc_generated_files/drivers/i2c_master.c: 153:     return ret;
  7748  0EA2  0020               	movlb	0	; select bank0
  7749  0EA3  085A               	movf	i2c_open@ret,w
  7750  0EA4                     l77:	
  7751  0EA4  0008               	return
  7752  0EA5                     __end_of_i2c_open:	
  7753                           
  7754                           	psect	text14
  7755  1621                     __ptext14:	
  7756 ;; *************** function _i2c_driver_setI2cISR *****************
  7757 ;; Defined at:
  7758 ;;		line 263 in file "mcc_generated_files/i2c_driver.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  7761 ;;		 -> i2c_ISR(1), 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      void 
  7766 ;; Registers used:
  7767 ;;		wreg
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7773 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;Total ram usage:        2 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    6
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_i2c_open
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _i2c_driver_setI2cISR
  7789  1621                     _i2c_driver_setI2cISR:	
  7790  1621                     l6727:	
  7791                           ;incstack = 0
  7792                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  7793                           
  7794                           
  7795                           ;mcc_generated_files/i2c_driver.c: 264:     i2c_driver_i2cISR = handler;
  7796  1621  0020               	movlb	0	; select bank0
  7797  1622  0857               	movf	i2c_driver_setI2cISR@handler+1,w
  7798  1623  00B7               	movwf	_i2c_driver_i2cISR+1
  7799  1624  0856               	movf	i2c_driver_setI2cISR@handler,w
  7800  1625  00B6               	movwf	_i2c_driver_i2cISR
  7801  1626                     l701:	
  7802  1626  0008               	return
  7803  1627                     __end_of_i2c_driver_setI2cISR:	
  7804                           
  7805                           	psect	text15
  7806  161B                     __ptext15:	
  7807 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  7808 ;; Defined at:
  7809 ;;		line 259 in file "mcc_generated_files/i2c_driver.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  7812 ;;		 -> i2c_busCollisionISR(1), 
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;		None
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  1    wreg      void 
  7817 ;; Registers used:
  7818 ;;		wreg
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;Total ram usage:        2 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    6
  7831 ;; This function calls:
  7832 ;;		Nothing
  7833 ;; This function is called by:
  7834 ;;		_i2c_open
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           
  7839                           ;psect for function _i2c_driver_setBusCollisionISR
  7840  161B                     _i2c_driver_setBusCollisionISR:	
  7841  161B                     l6725:	
  7842                           ;incstack = 0
  7843                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  7844                           
  7845                           
  7846                           ;mcc_generated_files/i2c_driver.c: 260:     i2c_driver_busCollisionISR = handler;
  7847  161B  0020               	movlb	0	; select bank0
  7848  161C  0857               	movf	i2c_driver_setBusCollisionISR@handler+1,w
  7849  161D  00B9               	movwf	_i2c_driver_busCollisionISR+1
  7850  161E  0856               	movf	i2c_driver_setBusCollisionISR@handler,w
  7851  161F  00B8               	movwf	_i2c_driver_busCollisionISR
  7852  1620                     l698:	
  7853  1620  0008               	return
  7854  1621                     __end_of_i2c_driver_setBusCollisionISR:	
  7855                           
  7856                           	psect	text16
  7857  1716                     __ptext16:	
  7858 ;; *************** function _i2c_driver_open *****************
  7859 ;; Defined at:
  7860 ;;		line 84 in file "mcc_generated_files/i2c_driver.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;		None
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;		None               void
  7867 ;; Registers used:
  7868 ;;		wreg, status,2
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;Total ram usage:        0 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    6
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_i2c_open
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _i2c_driver_open
  7890  1716                     _i2c_driver_open:	
  7891  1716                     l6713:	
  7892                           ;incstack = 0
  7893                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  7894                           
  7895  1716  0024               	movlb	4	; select bank4
  7896  1717  1A95               	btfsc	21,5	;volatile
  7897  1718  2F1A               	goto	u4971
  7898  1719  2F1B               	goto	u4970
  7899  171A                     u4971:	
  7900  171A  2F21               	goto	l617
  7901  171B                     u4970:	
  7902  171B                     l6715:	
  7903  171B  0194               	clrf	20	;volatile
  7904  171C                     l6717:	
  7905  171C  3028               	movlw	40
  7906  171D  0095               	movwf	21	;volatile
  7907  171E                     l6719:	
  7908  171E  0196               	clrf	22	;volatile
  7909  171F  304F               	movlw	79
  7910  1720  0092               	movwf	18	;volatile
  7911  1721                     l617:	
  7912  1721  0008               	return
  7913  1722                     __end_of_i2c_driver_open:	
  7914                           
  7915                           	psect	text17
  7916  15EC                     __ptext17:	
  7917 ;; *************** function _i2c_masterWrite *****************
  7918 ;; Defined at:
  7919 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;		None
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;		None
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  1    wreg      enum E3252
  7926 ;; Registers used:
  7927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;Total ram usage:        0 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:   13
  7940 ;; This function calls:
  7941 ;;		_i2c_masterOperation
  7942 ;; This function is called by:
  7943 ;;		_i2c_writeNBytes
  7944 ;;		_i2c_readDataBlock
  7945 ;;		_i2c_write1ByteRegister
  7946 ;;		_i2c_read1ByteRegister
  7947 ;;		_i2c_read2ByteRegister
  7948 ;;		_i2c_write2ByteRegister
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           
  7953                           ;psect for function _i2c_masterWrite
  7954  15EC                     _i2c_masterWrite:	
  7955  15EC                     l6803:	
  7956                           ;incstack = 0
  7957                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7958                           
  7959                           
  7960                           ;mcc_generated_files/drivers/i2c_master.c: 224:     return i2c_masterOperation(0);;	Retu
      +                          rn value of _i2c_masterWrite is never used
  7961  15EC  3000               	movlw	0
  7962  15ED  318B  2316  3195   	fcall	_i2c_masterOperation
  7963  15F0                     l104:	
  7964  15F0  0008               	return
  7965  15F1                     __end_of_i2c_masterWrite:	
  7966                           
  7967                           	psect	text18
  7968  0B16                     __ptext18:	
  7969 ;; *************** function _i2c_masterOperation *****************
  7970 ;; Defined at:
  7971 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  read            1    wreg     _Bool 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;  read            1    8[BANK0 ] _Bool 
  7976 ;;  ret             1    9[BANK0 ] enum E3252
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      enum E3252
  7979 ;; Registers used:
  7980 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;Total ram usage:        3 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:   12
  7993 ;; This function calls:
  7994 ;;		_i2c_driver_start
  7995 ;;		_i2c_poller
  7996 ;;		_mssp_IRQisEnabled
  7997 ;; This function is called by:
  7998 ;;		_i2c_masterWrite
  7999 ;;		_i2c_masterRead
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function _i2c_masterOperation
  8005  0B16                     _i2c_masterOperation:	
  8006                           
  8007                           ;incstack = 0
  8008                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8009                           ;i2c_masterOperation@read stored from wreg
  8010  0B16  0020               	movlb	0	; select bank0
  8011  0B17  00DE               	movwf	i2c_masterOperation@read
  8012  0B18                     l6731:	
  8013                           
  8014                           ;mcc_generated_files/drivers/i2c_master.c: 193: i2c_error_t i2c_masterOperation(_Bool re
      +                          ad);mcc_generated_files/drivers/i2c_master.c: 194: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 195:     i2c_error_t ret = I2C_BUSY;
  8015  0B18  01DF               	clrf	i2c_masterOperation@ret
  8016  0B19  0ADF               	incf	i2c_masterOperation@ret,f
  8017                           
  8018                           ;mcc_generated_files/drivers/i2c_master.c: 196:     if(!i2c_status.busy)
  8019  0B1A  0021               	movlb	1	; select bank1
  8020  0B1B  1820               	btfsc	_i2c_status^(0+128),0
  8021  0B1C  2B1E               	goto	u4981
  8022  0B1D  2B1F               	goto	u4980
  8023  0B1E                     u4981:	
  8024  0B1E  2B3D               	goto	l6747
  8025  0B1F                     u4980:	
  8026  0B1F                     l6733:	
  8027                           
  8028                           ;mcc_generated_files/drivers/i2c_master.c: 197:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 198:         i2c_status.busy = 1;
  8029  0B1F  1420               	bsf	_i2c_status^(0+128),0
  8030  0B20                     l6735:	
  8031                           
  8032                           ;mcc_generated_files/drivers/i2c_master.c: 199:         ret = I2C_NOERR;
  8033  0B20  0020               	movlb	0	; select bank0
  8034  0B21  01DF               	clrf	i2c_masterOperation@ret
  8035  0B22                     l6737:	
  8036                           
  8037                           ;mcc_generated_files/drivers/i2c_master.c: 201:         if(read)
  8038  0B22  085E               	movf	i2c_masterOperation@read,w
  8039  0B23  1903               	btfsc	3,2
  8040  0B24  2B26               	goto	u4991
  8041  0B25  2B27               	goto	u4990
  8042  0B26                     u4991:	
  8043  0B26  2B2B               	goto	l6741
  8044  0B27                     u4990:	
  8045  0B27                     l6739:	
  8046                           
  8047                           ;mcc_generated_files/drivers/i2c_master.c: 202:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 203:             i2c_status.state = I2C_SEND_ADR_READ;
  8048  0B27  0021               	movlb	1	; select bank1
  8049  0B28  01A9               	clrf	(_i2c_status^(0+128)+9)
  8050  0B29  0AA9               	incf	(_i2c_status^(0+128)+9),f
  8051                           
  8052                           ;mcc_generated_files/drivers/i2c_master.c: 204:         }
  8053  0B2A  2B30               	goto	l6743
  8054  0B2B                     l6741:	
  8055                           
  8056                           ;mcc_generated_files/drivers/i2c_master.c: 206:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 207:             i2c_status.state = I2C_SEND_ADR_WRITE;
  8057  0B2B  3002               	movlw	2
  8058  0B2C  00DD               	movwf	??_i2c_masterOperation
  8059  0B2D  085D               	movf	??_i2c_masterOperation,w
  8060  0B2E  0021               	movlb	1	; select bank1
  8061  0B2F  00A9               	movwf	(_i2c_status^(0+128)+9)
  8062  0B30                     l6743:	
  8063                           
  8064                           ;mcc_generated_files/drivers/i2c_master.c: 209:         i2c_driver_start();
  8065  0B30  3195  2594  318B   	fcall	_i2c_driver_start
  8066                           
  8067                           ;mcc_generated_files/drivers/i2c_master.c: 211:         if(! mssp_IRQisEnabled())
  8068  0B33  3196  26D1  318B   	fcall	_mssp_IRQisEnabled
  8069  0B36  1803               	btfsc	3,0
  8070  0B37  2B39               	goto	u5001
  8071  0B38  2B3A               	goto	u5000
  8072  0B39                     u5001:	
  8073  0B39  2B3D               	goto	l6747
  8074  0B3A                     u5000:	
  8075  0B3A                     l6745:	
  8076                           
  8077                           ;mcc_generated_files/drivers/i2c_master.c: 212:             i2c_poller();
  8078  0B3A  3197  2757  318B   	fcall	_i2c_poller
  8079  0B3D                     l6747:	
  8080                           
  8081                           ;mcc_generated_files/drivers/i2c_master.c: 214:     return ret;
  8082  0B3D  0020               	movlb	0	; select bank0
  8083  0B3E  085F               	movf	i2c_masterOperation@ret,w
  8084  0B3F                     l98:	
  8085  0B3F  0008               	return
  8086  0B40                     __end_of_i2c_masterOperation:	
  8087                           
  8088                           	psect	text19
  8089  16D1                     __ptext19:	
  8090 ;; *************** function _mssp_IRQisEnabled *****************
  8091 ;; Defined at:
  8092 ;;		line 44 in file "mcc_generated_files/i2c_driver.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;		None               void
  8099 ;; Registers used:
  8100 ;;		wreg, status,2, status,0
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;Total ram usage:        2 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    6
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		_i2c_masterOperation
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _mssp_IRQisEnabled
  8122  16D1                     _mssp_IRQisEnabled:	
  8123  16D1                     l6695:	
  8124                           ;incstack = 0
  8125                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  8126                           
  8127                           
  8128                           ;mcc_generated_files/i2c_driver.c: 46:             _delay((unsigned long)((100)*(3200000
      +                          0/4000000.0)));
  8129  16D1  0021               	movlb	1	; select bank1
  8130  16D2  0C11               	rrf	17,w	;volatile
  8131  16D3  0020               	movlb	0	; select bank0
  8132  16D4  00D6               	movwf	??_mssp_IRQisEnabled
  8133  16D5  0CD6               	rrf	??_mssp_IRQisEnabled,f
  8134  16D6  0C56               	rrf	??_mssp_IRQisEnabled,w
  8135  16D7  3901               	andlw	1
  8136  16D8  00D7               	movwf	??_mssp_IRQisEnabled+1
  8137  16D9  0C57               	rrf	??_mssp_IRQisEnabled+1,w
  8138  16DA                     l593:	
  8139  16DA  0008               	return
  8140  16DB                     __end_of_mssp_IRQisEnabled:	
  8141                           
  8142                           	psect	text20
  8143  1757                     __ptext20:	
  8144 ;; *************** function _i2c_poller *****************
  8145 ;; Defined at:
  8146 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;		None
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;		None
  8151 ;; Return value:  Size  Location     Type
  8152 ;;                  1    wreg      void 
  8153 ;; Registers used:
  8154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;Total ram usage:        0 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:   11
  8167 ;; This function calls:
  8168 ;;		_i2c_ISR
  8169 ;;		_mssp_waitForEvent
  8170 ;; This function is called by:
  8171 ;;		_i2c_masterOperation
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _i2c_poller
  8177  1757                     _i2c_poller:	
  8178  1757                     l6699:	
  8179                           ;incstack = 0
  8180                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8181                           
  8182                           
  8183                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  8184  1757  2F5F               	goto	l6705
  8185  1758                     l6701:	
  8186                           
  8187                           ;mcc_generated_files/drivers/i2c_master.c: 233:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 234:         mssp_waitForEvent(((void*)0));
  8188  1758  3000               	movlw	0
  8189  1759  3197  2792  3197   	fcall	_mssp_waitForEvent
  8190  175C                     l6703:	
  8191                           
  8192                           ;mcc_generated_files/drivers/i2c_master.c: 235:         i2c_ISR();
  8193  175C  318B  239A  3197   	fcall	_i2c_ISR
  8194  175F                     l6705:	
  8195                           
  8196                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  8197  175F  0021               	movlb	1	; select bank1
  8198  1760  1820               	btfsc	_i2c_status^(0+128),0
  8199  1761  2F63               	goto	u4951
  8200  1762  2F64               	goto	u4950
  8201  1763                     u4951:	
  8202  1763  2F58               	goto	l6701
  8203  1764                     u4950:	
  8204  1764                     l110:	
  8205  1764  0008               	return
  8206  1765                     __end_of_i2c_poller:	
  8207                           
  8208                           	psect	text21
  8209  1792                     __ptext21:	
  8210 ;; *************** function _mssp_waitForEvent *****************
  8211 ;; Defined at:
  8212 ;;		line 69 in file "mcc_generated_files/i2c_driver.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  timeout         1    wreg     PTR unsigned short 
  8215 ;;		 -> NULL(0), 
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;  timeout         1    0[BANK0 ] PTR unsigned short 
  8218 ;;		 -> NULL(0), 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      void 
  8221 ;; Registers used:
  8222 ;;		wreg
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;Total ram usage:        1 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    6
  8235 ;; This function calls:
  8236 ;;		Nothing
  8237 ;; This function is called by:
  8238 ;;		_i2c_poller
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function _mssp_waitForEvent
  8244  1792                     _mssp_waitForEvent:	
  8245  1792                     l6677:	
  8246                           ;incstack = 0
  8247                           ; Regs used in _mssp_waitForEvent: [wreg]
  8248                           
  8249  1792  0020               	movlb	0	; select bank0
  8250  1793  1991               	btfsc	17,3	;volatile
  8251  1794  2F96               	goto	u4911
  8252  1795  2F97               	goto	u4910
  8253  1796                     u4911:	
  8254  1796  2FA2               	goto	l613
  8255  1797                     u4910:	
  8256  1797                     l609:	
  8257  1797  0020               	movlb	0	; select bank0
  8258  1798  1D91               	btfss	17,3	;volatile
  8259  1799  2F9B               	goto	u4921
  8260  179A  2F9C               	goto	u4920
  8261  179B                     u4921:	
  8262  179B  2F9D               	goto	l6681
  8263  179C                     u4920:	
  8264  179C  2FA2               	goto	l613
  8265  179D                     l6681:	
  8266  179D  30A0               	movlw	160
  8267  179E                     u7037:	
  8268  179E  3200               	nop2
  8269  179F  0B89               	decfsz	9,f
  8270  17A0  2F9E               	goto	u7037
  8271  17A1  2F97               	goto	l609
  8272  17A2                     l613:	
  8273  17A2  0008               	return
  8274  17A3                     __end_of_mssp_waitForEvent:	
  8275                           
  8276                           	psect	text22
  8277  0B9A                     __ptext22:	
  8278 ;; *************** function _i2c_ISR *****************
  8279 ;; Defined at:
  8280 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;		None
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  1    wreg      void 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:        3 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:   10
  8301 ;; This function calls:
  8302 ;;		_do_I2C_DO_ACK
  8303 ;;		_do_I2C_DO_ADDRESS_NACK
  8304 ;;		_do_I2C_DO_NACK_RESTART
  8305 ;;		_do_I2C_DO_NACK_STOP
  8306 ;;		_do_I2C_IDLE
  8307 ;;		_do_I2C_RCEN
  8308 ;;		_do_I2C_RESET
  8309 ;;		_do_I2C_RX
  8310 ;;		_do_I2C_SEND_ADR_READ
  8311 ;;		_do_I2C_SEND_ADR_WRITE
  8312 ;;		_do_I2C_SEND_RESTART
  8313 ;;		_do_I2C_SEND_RESTART_READ
  8314 ;;		_do_I2C_SEND_RESTART_WRITE
  8315 ;;		_do_I2C_SEND_STOP
  8316 ;;		_do_I2C_TX
  8317 ;;		_do_I2C_TX_EMPTY
  8318 ;;		_i2c_driver_isNACK
  8319 ;;		_mssp_clearIRQ
  8320 ;; This function is called by:
  8321 ;;		_i2c_open
  8322 ;;		_i2c_poller
  8323 ;;		_INTERRUPT_InterruptManager
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           
  8328                           ;psect for function _i2c_ISR
  8329  0B9A                     _i2c_ISR:	
  8330                           
  8331                           ;Skip over the trampoline to the duplicate function for level 1
  8332  0B9A  1C7E               	btfss	int$flags,0
  8333  0B9B  2B9E               	goto	_i2c_ISR$intlevel0
  8334  0B9C  318A  2AEC         	ljmp	i1_i2c_ISR
  8335  0B9E                     _i2c_ISR$intlevel0:	
  8336  0B9E                     l6683:	
  8337                           ;incstack = 0
  8338                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8339                           
  8340                           
  8341                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
  8342  0B9E  3195  258E  318B   	fcall	_mssp_clearIRQ
  8343  0BA1                     l6685:	
  8344                           
  8345                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
  8346  0BA1  0021               	movlb	1	; select bank1
  8347  0BA2  1DA0               	btfss	_i2c_status^(0+128),3
  8348  0BA3  2BA5               	goto	u4931
  8349  0BA4  2BA6               	goto	u4930
  8350  0BA5                     u4931:	
  8351  0BA5  2BB3               	goto	l6691
  8352  0BA6                     u4930:	
  8353  0BA6                     l6687:	
  8354  0BA6  3196  2680  318B   	fcall	_i2c_driver_isNACK
  8355  0BA9  1C03               	btfss	3,0
  8356  0BAA  2BAC               	goto	u4941
  8357  0BAB  2BAD               	goto	u4940
  8358  0BAC                     u4941:	
  8359  0BAC  2BB3               	goto	l6691
  8360  0BAD                     u4940:	
  8361  0BAD                     l6689:	
  8362                           
  8363                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
  8364  0BAD  300F               	movlw	15
  8365  0BAE  0020               	movlb	0	; select bank0
  8366  0BAF  00DA               	movwf	??_i2c_ISR
  8367  0BB0  085A               	movf	??_i2c_ISR,w
  8368  0BB1  0021               	movlb	1	; select bank1
  8369  0BB2  00A9               	movwf	(_i2c_status^(0+128)+9)
  8370  0BB3                     l6691:	
  8371                           
  8372                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
  8373  0BB3  0021               	movlb	1	; select bank1
  8374  0BB4  0829               	movf	(_i2c_status^(0+128)+9),w
  8375  0BB5  0020               	movlb	0	; select bank0
  8376  0BB6  00DA               	movwf	??_i2c_ISR
  8377  0BB7  01DB               	clrf	??_i2c_ISR+1
  8378  0BB8  35DA               	lslf	??_i2c_ISR,f
  8379  0BB9  0DDB               	rlf	??_i2c_ISR+1,f
  8380  0BBA  3000               	movlw	low (_fsmStateTable| (0+32768))
  8381  0BBB  075A               	addwf	??_i2c_ISR,w
  8382  0BBC  0084               	movwf	4
  8383  0BBD  3090               	movlw	high (_fsmStateTable| (0+32768))
  8384  0BBE  3D5B               	addwfc	??_i2c_ISR+1,w
  8385  0BBF  0085               	movwf	5
  8386  0BC0  3F01               	moviw [1]fsr0
  8387  0BC1  008A               	movwf	10
  8388  0BC2  3F00               	moviw [0]fsr0
  8389  0BC3  000A               	callw
  8390  0BC4  318B               	pagesel	$
  8391  0BC5  0020               	movlb	0	; select bank0
  8392  0BC6  00DC               	movwf	??_i2c_ISR+2
  8393  0BC7  085C               	movf	??_i2c_ISR+2,w
  8394  0BC8  0021               	movlb	1	; select bank1
  8395  0BC9  00A9               	movwf	(_i2c_status^(0+128)+9)
  8396  0BCA                     l198:	
  8397  0BCA  0008               	return
  8398  0BCB                     __end_of_i2c_ISR:	
  8399                           
  8400                           	psect	text23
  8401  0EA5                     __ptext23:	
  8402 ;; *************** function _do_I2C_RX *****************
  8403 ;; Defined at:
  8404 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;		None
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      enum E3411
  8411 ;; Registers used:
  8412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;Total ram usage:        3 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    9
  8425 ;; This function calls:
  8426 ;;		Absolute function
  8427 ;;		_do_I2C_DO_NACK_RESTART
  8428 ;;		_do_I2C_DO_NACK_STOP
  8429 ;;		_i2c_driver_getRXData
  8430 ;;		_i2c_driver_sendACK
  8431 ;;		_i2c_restartWrite
  8432 ;;		_rd1RegCompleteHandler
  8433 ;;		_rd2RegCompleteHandler
  8434 ;;		_rdBlkRegCompleteHandler
  8435 ;;		_returnReset
  8436 ;;		_returnStop
  8437 ;;		_wr1RegCompleteHandler
  8438 ;;		_wr2RegCompleteHandler
  8439 ;; This function is called by:
  8440 ;;		_i2c_ISR
  8441 ;;		i1_i2c_ISR
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function _do_I2C_RX
  8447  0EA5                     _do_I2C_RX:	
  8448                           
  8449                           ;Skip over the trampoline to the duplicate function for level 1
  8450  0EA5  1C7E               	btfss	int$flags,0
  8451  0EA6  2EA9               	goto	_do_I2C_RX$intlevel0
  8452  0EA7  318E  2E09         	ljmp	i1_do_I2C_RX
  8453  0EA9                     _do_I2C_RX$intlevel0:	
  8454  0EA9                     l6623:	
  8455                           ;incstack = 0
  8456                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8457                           
  8458                           
  8459                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
  8460  0EA9  3195  25A0  318E   	fcall	_i2c_driver_getRXData
  8461  0EAC  0020               	movlb	0	; select bank0
  8462  0EAD  00D6               	movwf	??_do_I2C_RX
  8463  0EAE  0021               	movlb	1	; select bank1
  8464  0EAF  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  8465  0EB0  0086               	movwf	6
  8466  0EB1  0187               	clrf	7
  8467  0EB2  0020               	movlb	0	; select bank0
  8468  0EB3  0856               	movf	??_do_I2C_RX,w
  8469  0EB4  0081               	movwf	1
  8470  0EB5                     l6625:	
  8471  0EB5  3001               	movlw	1
  8472  0EB6  00D6               	movwf	??_do_I2C_RX
  8473  0EB7  0856               	movf	??_do_I2C_RX,w
  8474  0EB8  0021               	movlb	1	; select bank1
  8475  0EB9  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  8476  0EBA                     l6627:	
  8477                           
  8478                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
  8479  0EBA  3001               	movlw	1
  8480  0EBB  02A3               	subwf	(_i2c_status^(0+128)+3),f
  8481  0EBC  3000               	movlw	0
  8482  0EBD  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  8483  0EBE  0823               	movf	(_i2c_status^(0+128)+3),w
  8484  0EBF  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  8485  0EC0  1903               	btfsc	3,2
  8486  0EC1  2EC3               	goto	u4901
  8487  0EC2  2EC4               	goto	u4900
  8488  0EC3                     u4901:	
  8489  0EC3  2EC9               	goto	l173
  8490  0EC4                     u4900:	
  8491  0EC4                     l6629:	
  8492                           
  8493                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
  8494  0EC4  3195  25B7  318E   	fcall	_i2c_driver_sendACK
  8495  0EC7                     l6631:	
  8496                           
  8497                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
  8498  0EC7  3005               	movlw	5
  8499  0EC8  2EF7               	goto	l174
  8500  0EC9                     l173:	
  8501                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
  8502                           
  8503                           
  8504                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
  8505  0EC9  1520               	bsf	_i2c_status^(0+128),2
  8506                           
  8507                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  8508  0ECA  2ED3               	goto	l6647
  8509  0ECB                     l6637:	
  8510                           
  8511                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
  8512  0ECB  3196  26C8  318E   	fcall	_do_I2C_DO_NACK_RESTART
  8513  0ECE  2EF7               	goto	l174
  8514  0ECF                     l6641:	
  8515                           
  8516                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
  8517  0ECF  3196  26BF  318E   	fcall	_do_I2C_DO_NACK_STOP
  8518  0ED2  2EF7               	goto	l174
  8519  0ED3                     l6647:	
  8520  0ED3  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  8521  0ED4  0020               	movlb	0	; select bank0
  8522  0ED5  00D6               	movwf	??_do_I2C_RX
  8523  0ED6  0856               	movf	??_do_I2C_RX,w
  8524  0ED7  00DF               	movwf	wr1RegCompleteHandler@p
  8525  0ED8  300B               	movlw	11
  8526  0ED9  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8527  0EDA  0086               	movwf	6
  8528  0EDB  0187               	clrf	7
  8529  0EDC  3F41               	moviw [1]fsr1
  8530  0EDD  008A               	movwf	10
  8531  0EDE  3F40               	moviw [0]fsr1
  8532  0EDF  000A               	callw
  8533  0EE0  318E               	pagesel	$
  8534  0EE1  0020               	movlb	0	; select bank0
  8535  0EE2  00D7               	movwf	??_do_I2C_RX+1
  8536  0EE3  01D8               	clrf	??_do_I2C_RX+2
  8537                           
  8538                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8539                           ; Switch size 1, requested type "simple"
  8540                           ; Number of cases is 1, Range of values is 0 to 0
  8541                           ; switch strategies available:
  8542                           ; Name         Instructions Cycles
  8543                           ; simple_byte            4     3 (average)
  8544                           ; direct_byte            8     6 (fixed)
  8545                           ; jumptable            260     6 (fixed)
  8546                           ;	Chosen strategy is simple_byte
  8547  0EE4  0858               	movf	??_do_I2C_RX+2,w
  8548  0EE5  3A00               	xorlw	0	; case 0
  8549  0EE6  1903               	skipnz
  8550  0EE7  2EE9               	goto	l8363
  8551  0EE8  2ECF               	goto	l6641
  8552  0EE9                     l8363:	
  8553                           
  8554                           ; Switch size 1, requested type "simple"
  8555                           ; Number of cases is 4, Range of values is 1 to 4
  8556                           ; switch strategies available:
  8557                           ; Name         Instructions Cycles
  8558                           ; simple_byte           13     7 (average)
  8559                           ; direct_byte           17     9 (fixed)
  8560                           ; jumptable            263     9 (fixed)
  8561                           ;	Chosen strategy is simple_byte
  8562  0EE9  0857               	movf	??_do_I2C_RX+1,w
  8563  0EEA  3A01               	xorlw	1	; case 1
  8564  0EEB  1903               	skipnz
  8565  0EEC  2ECF               	goto	l6641
  8566  0EED  3A03               	xorlw	3	; case 2
  8567  0EEE  1903               	skipnz
  8568  0EEF  2ECB               	goto	l6637
  8569  0EF0  3A01               	xorlw	1	; case 3
  8570  0EF1  1903               	skipnz
  8571  0EF2  2ECB               	goto	l6637
  8572  0EF3  3A07               	xorlw	7	; case 4
  8573  0EF4  1903               	skipnz
  8574  0EF5  2ECF               	goto	l6641
  8575  0EF6  2ECF               	goto	l6641
  8576  0EF7                     l174:	
  8577  0EF7  0008               	return
  8578  0EF8                     __end_of_do_I2C_RX:	
  8579                           
  8580                           	psect	text24
  8581  0FA6                     __ptext24:	
  8582 ;; *************** function _do_I2C_TX *****************
  8583 ;; Defined at:
  8584 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;		None
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;		None
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      enum E3411
  8591 ;; Registers used:
  8592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;Total ram usage:        3 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    9
  8605 ;; This function calls:
  8606 ;;		Absolute function
  8607 ;;		_do_I2C_SEND_RESTART_READ
  8608 ;;		_do_I2C_SEND_RESTART_WRITE
  8609 ;;		_do_I2C_SEND_STOP
  8610 ;;		_i2c_driver_TXData
  8611 ;;		_i2c_driver_isNACK
  8612 ;;		_i2c_restartWrite
  8613 ;;		_rd1RegCompleteHandler
  8614 ;;		_rd2RegCompleteHandler
  8615 ;;		_rdBlkRegCompleteHandler
  8616 ;;		_returnReset
  8617 ;;		_returnStop
  8618 ;;		_wr1RegCompleteHandler
  8619 ;;		_wr2RegCompleteHandler
  8620 ;; This function is called by:
  8621 ;;		_i2c_ISR
  8622 ;;		i1_i2c_ISR
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           
  8627                           ;psect for function _do_I2C_TX
  8628  0FA6                     _do_I2C_TX:	
  8629                           
  8630                           ;Skip over the trampoline to the duplicate function for level 1
  8631  0FA6  1C7E               	btfss	int$flags,0
  8632  0FA7  2FAA               	goto	_do_I2C_TX$intlevel0
  8633  0FA8  318E  2EF8         	ljmp	i1_do_I2C_TX
  8634  0FAA                     _do_I2C_TX$intlevel0:	
  8635  0FAA                     l6589:	
  8636                           ;incstack = 0
  8637                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8638                           
  8639                           
  8640                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
  8641  0FAA  3196  2680  318F   	fcall	_i2c_driver_isNACK
  8642  0FAD  1C03               	btfss	3,0
  8643  0FAE  2FB0               	goto	u4881
  8644  0FAF  2FB1               	goto	u4880
  8645  0FB0                     u4881:	
  8646  0FB0  2FE3               	goto	l157
  8647  0FB1                     u4880:	
  8648  0FB1  2FBE               	goto	l6607
  8649  0FB2                     l6593:	
  8650                           
  8651                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
  8652  0FB2  3196  2692  318F   	fcall	_do_I2C_SEND_RESTART_READ
  8653  0FB5  2FFF               	goto	l160
  8654  0FB6                     l6597:	
  8655                           
  8656                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
  8657  0FB6  3196  269B  318F   	fcall	_do_I2C_SEND_RESTART_WRITE
  8658  0FB9  2FFF               	goto	l160
  8659  0FBA                     l6601:	
  8660                           
  8661                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
  8662  0FBA  3196  26AD  318F   	fcall	_do_I2C_SEND_STOP
  8663  0FBD  2FFF               	goto	l160
  8664  0FBE                     l6607:	
  8665  0FBE  0021               	movlb	1	; select bank1
  8666  0FBF  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  8667  0FC0  0020               	movlb	0	; select bank0
  8668  0FC1  00D7               	movwf	??_do_I2C_TX
  8669  0FC2  0857               	movf	??_do_I2C_TX,w
  8670  0FC3  00DF               	movwf	wr1RegCompleteHandler@p
  8671  0FC4  3011               	movlw	17
  8672  0FC5  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8673  0FC6  0086               	movwf	6
  8674  0FC7  0187               	clrf	7
  8675  0FC8  3F41               	moviw [1]fsr1
  8676  0FC9  008A               	movwf	10
  8677  0FCA  3F40               	moviw [0]fsr1
  8678  0FCB  000A               	callw
  8679  0FCC  318F               	pagesel	$
  8680  0FCD  0020               	movlb	0	; select bank0
  8681  0FCE  00D8               	movwf	??_do_I2C_TX+1
  8682  0FCF  01D9               	clrf	??_do_I2C_TX+2
  8683                           
  8684                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8685                           ; Switch size 1, requested type "simple"
  8686                           ; Number of cases is 1, Range of values is 0 to 0
  8687                           ; switch strategies available:
  8688                           ; Name         Instructions Cycles
  8689                           ; simple_byte            4     3 (average)
  8690                           ; direct_byte            8     6 (fixed)
  8691                           ; jumptable            260     6 (fixed)
  8692                           ;	Chosen strategy is simple_byte
  8693  0FD0  0859               	movf	??_do_I2C_TX+2,w
  8694  0FD1  3A00               	xorlw	0	; case 0
  8695  0FD2  1903               	skipnz
  8696  0FD3  2FD5               	goto	l8365
  8697  0FD4  2FBA               	goto	l6601
  8698  0FD5                     l8365:	
  8699                           
  8700                           ; Switch size 1, requested type "simple"
  8701                           ; Number of cases is 4, Range of values is 1 to 4
  8702                           ; switch strategies available:
  8703                           ; Name         Instructions Cycles
  8704                           ; simple_byte           13     7 (average)
  8705                           ; direct_byte           17     9 (fixed)
  8706                           ; jumptable            263     9 (fixed)
  8707                           ;	Chosen strategy is simple_byte
  8708  0FD5  0858               	movf	??_do_I2C_TX+1,w
  8709  0FD6  3A01               	xorlw	1	; case 1
  8710  0FD7  1903               	skipnz
  8711  0FD8  2FBA               	goto	l6601
  8712  0FD9  3A03               	xorlw	3	; case 2
  8713  0FDA  1903               	skipnz
  8714  0FDB  2FB2               	goto	l6593
  8715  0FDC  3A01               	xorlw	1	; case 3
  8716  0FDD  1903               	skipnz
  8717  0FDE  2FB6               	goto	l6597
  8718  0FDF  3A07               	xorlw	7	; case 4
  8719  0FE0  1903               	skipnz
  8720  0FE1  2FBA               	goto	l6601
  8721  0FE2  2FBA               	goto	l6601
  8722  0FE3                     l157:	
  8723                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
  8724                           
  8725                           
  8726                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
  8727  0FE3  0021               	movlb	1	; select bank1
  8728  0FE4  11A0               	bcf	_i2c_status^(0+128),3
  8729  0FE5                     l6609:	
  8730                           
  8731                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
  8732  0FE5  3002               	movlw	2
  8733  0FE6  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8734  0FE7  0086               	movwf	6
  8735  0FE8  0187               	clrf	7
  8736  0FE9  3F40               	moviw [0]fsr1
  8737  0FEA  0084               	movwf	4
  8738  0FEB  0185               	clrf	5
  8739  0FEC  0A81               	incf	1,f
  8740  0FED  0800               	movf	0,w
  8741  0FEE  3196  2615  318F   	fcall	_i2c_driver_TXData
  8742  0FF1                     l6611:	
  8743                           
  8744                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
  8745  0FF1  3001               	movlw	1
  8746  0FF2  0021               	movlb	1	; select bank1
  8747  0FF3  02A3               	subwf	(_i2c_status^(0+128)+3),f
  8748  0FF4  3000               	movlw	0
  8749  0FF5  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  8750  0FF6  0823               	movf	(_i2c_status^(0+128)+3),w
  8751  0FF7  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  8752  0FF8  1D03               	btfss	3,2
  8753  0FF9  2FFB               	goto	u4891
  8754  0FFA  2FFC               	goto	u4890
  8755  0FFB                     u4891:	
  8756  0FFB  2FFE               	goto	l6615
  8757  0FFC                     u4890:	
  8758  0FFC                     l6613:	
  8759  0FFC  3006               	movlw	6
  8760  0FFD  2FFF               	goto	l160
  8761  0FFE                     l6615:	
  8762  0FFE  3003               	movlw	3
  8763  0FFF                     l160:	
  8764  0FFF  0008               	return
  8765  1000                     __end_of_do_I2C_TX:	
  8766                           
  8767                           	psect	text25
  8768  0BFF                     __ptext25:	
  8769 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  8770 ;; Defined at:
  8771 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;		None
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;		None
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      enum E3411
  8778 ;; Registers used:
  8779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;Total ram usage:        3 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    9
  8792 ;; This function calls:
  8793 ;;		Absolute function
  8794 ;;		_do_I2C_SEND_RESTART
  8795 ;;		_do_I2C_SEND_STOP
  8796 ;;		_i2c_restartWrite
  8797 ;;		_rd1RegCompleteHandler
  8798 ;;		_rd2RegCompleteHandler
  8799 ;;		_rdBlkRegCompleteHandler
  8800 ;;		_returnReset
  8801 ;;		_returnStop
  8802 ;;		_wr1RegCompleteHandler
  8803 ;;		_wr2RegCompleteHandler
  8804 ;; This function is called by:
  8805 ;;		_i2c_ISR
  8806 ;;		i1_i2c_ISR
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           
  8811                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  8812  0BFF                     _do_I2C_DO_ADDRESS_NACK:	
  8813                           
  8814                           ;Skip over the trampoline to the duplicate function for level 1
  8815  0BFF  1C7E               	btfss	int$flags,0
  8816  0C00  2C03               	goto	_do_I2C_DO_ADDRESS_NACK$intlevel0
  8817  0C01  318B  2B40         	ljmp	i1_do_I2C_DO_ADDRESS_NACK
  8818  0C03                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  8819  0C03                     l6569:	
  8820                           ;incstack = 0
  8821                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8822                           
  8823                           
  8824                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
  8825  0C03  0021               	movlb	1	; select bank1
  8826  0C04  11A0               	bcf	_i2c_status^(0+128),3
  8827  0C05                     l6571:	
  8828                           
  8829                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
  8830  0C05  3002               	movlw	2
  8831  0C06  0020               	movlb	0	; select bank0
  8832  0C07  00D6               	movwf	??_do_I2C_DO_ADDRESS_NACK
  8833  0C08  0856               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  8834  0C09  0021               	movlb	1	; select bank1
  8835  0C0A  00AA               	movwf	(_i2c_status^(0+128)+10)
  8836                           
  8837                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
  8838  0C0B  2C14               	goto	l6583
  8839  0C0C                     l6573:	
  8840                           
  8841                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
  8842  0C0C  3196  26A4  318B   	fcall	_do_I2C_SEND_RESTART
  8843  0C0F  2C32               	goto	l152
  8844  0C10                     l6577:	
  8845                           
  8846                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
  8847  0C10  3196  26AD  318B   	fcall	_do_I2C_SEND_STOP
  8848  0C13  2C32               	goto	l152
  8849  0C14                     l6583:	
  8850  0C14  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
  8851  0C15  0020               	movlb	0	; select bank0
  8852  0C16  00D6               	movwf	??_do_I2C_DO_ADDRESS_NACK
  8853  0C17  0856               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  8854  0C18  00DF               	movwf	wr1RegCompleteHandler@p
  8855  0C19  300F               	movlw	15
  8856  0C1A  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8857  0C1B  0086               	movwf	6
  8858  0C1C  0187               	clrf	7
  8859  0C1D  3F41               	moviw [1]fsr1
  8860  0C1E  008A               	movwf	10
  8861  0C1F  3F40               	moviw [0]fsr1
  8862  0C20  000A               	callw
  8863  0C21  318B               	pagesel	$
  8864  0C22  0020               	movlb	0	; select bank0
  8865  0C23  00D7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
  8866  0C24  01D8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
  8867                           
  8868                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8869                           ; Switch size 1, requested type "simple"
  8870                           ; Number of cases is 1, Range of values is 0 to 0
  8871                           ; switch strategies available:
  8872                           ; Name         Instructions Cycles
  8873                           ; simple_byte            4     3 (average)
  8874                           ; direct_byte            8     6 (fixed)
  8875                           ; jumptable            260     6 (fixed)
  8876                           ;	Chosen strategy is simple_byte
  8877  0C25  0858               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
  8878  0C26  3A00               	xorlw	0	; case 0
  8879  0C27  1903               	skipnz
  8880  0C28  2C2A               	goto	l8367
  8881  0C29  2C10               	goto	l6577
  8882  0C2A                     l8367:	
  8883                           
  8884                           ; Switch size 1, requested type "simple"
  8885                           ; Number of cases is 2, Range of values is 2 to 3
  8886                           ; switch strategies available:
  8887                           ; Name         Instructions Cycles
  8888                           ; simple_byte            7     4 (average)
  8889                           ; direct_byte           13     9 (fixed)
  8890                           ; jumptable            263     9 (fixed)
  8891                           ;	Chosen strategy is simple_byte
  8892  0C2A  0857               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
  8893  0C2B  3A02               	xorlw	2	; case 2
  8894  0C2C  1903               	skipnz
  8895  0C2D  2C0C               	goto	l6573
  8896  0C2E  3A01               	xorlw	1	; case 3
  8897  0C2F  1903               	skipnz
  8898  0C30  2C0C               	goto	l6573
  8899  0C31  2C10               	goto	l6577
  8900  0C32                     l152:	
  8901  0C32  0008               	return
  8902  0C33                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  8903                           
  8904                           	psect	text26
  8905  16C8                     __ptext26:	
  8906 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  8907 ;; Defined at:
  8908 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;		None
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;		None
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  1    wreg      enum E3411
  8915 ;; Registers used:
  8916 ;;		wreg, status,2, status,0, pclath, cstack
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;Total ram usage:        0 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    7
  8929 ;; This function calls:
  8930 ;;		_i2c_driver_sendNACK
  8931 ;; This function is called by:
  8932 ;;		_do_I2C_RX
  8933 ;;		_i2c_ISR
  8934 ;;		i1_i2c_ISR
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           
  8939                           ;psect for function _do_I2C_DO_NACK_RESTART
  8940  16C8                     _do_I2C_DO_NACK_RESTART:	
  8941                           
  8942                           ;Skip over the trampoline to the duplicate function for level 1
  8943  16C8  1C7E               	btfss	int$flags,0
  8944  16C9  2ECC               	goto	_do_I2C_DO_NACK_RESTART$intlevel0
  8945  16CA  3195  2DE7         	ljmp	i1_do_I2C_DO_NACK_RESTART
  8946  16CC                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  8947  16CC                     l6453:	
  8948                           ;incstack = 0
  8949                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  8950                           
  8951                           
  8952                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
  8953  16CC  3195  25BB  3196   	fcall	_i2c_driver_sendNACK
  8954  16CF                     l6455:	
  8955                           
  8956                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
  8957  16CF  3009               	movlw	9
  8958  16D0                     l146:	
  8959  16D0  0008               	return
  8960  16D1                     __end_of_do_I2C_DO_NACK_RESTART:	
  8961                           
  8962                           	psect	text27
  8963  16BF                     __ptext27:	
  8964 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  8965 ;; Defined at:
  8966 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;		None
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;		None
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  1    wreg      enum E3411
  8973 ;; Registers used:
  8974 ;;		wreg, status,2, status,0, pclath, cstack
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;Total ram usage:        0 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    7
  8987 ;; This function calls:
  8988 ;;		_i2c_driver_sendNACK
  8989 ;; This function is called by:
  8990 ;;		_do_I2C_RX
  8991 ;;		_i2c_ISR
  8992 ;;		i1_i2c_ISR
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           
  8997                           ;psect for function _do_I2C_DO_NACK_STOP
  8998  16BF                     _do_I2C_DO_NACK_STOP:	
  8999                           
  9000                           ;Skip over the trampoline to the duplicate function for level 1
  9001  16BF  1C7E               	btfss	int$flags,0
  9002  16C0  2EC3               	goto	_do_I2C_DO_NACK_STOP$intlevel0
  9003  16C1  3195  2DE2         	ljmp	i1_do_I2C_DO_NACK_STOP
  9004  16C3                     _do_I2C_DO_NACK_STOP$intlevel0:	
  9005  16C3                     l6447:	
  9006                           ;incstack = 0
  9007                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9008                           
  9009                           
  9010                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
  9011  16C3  3195  25BB  3196   	fcall	_i2c_driver_sendNACK
  9012  16C6                     l6449:	
  9013                           
  9014                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
  9015  16C6  300A               	movlw	10
  9016  16C7                     l143:	
  9017  16C7  0008               	return
  9018  16C8                     __end_of_do_I2C_DO_NACK_STOP:	
  9019                           
  9020                           	psect	text28
  9021  16B6                     __ptext28:	
  9022 ;; *************** function _do_I2C_DO_ACK *****************
  9023 ;; Defined at:
  9024 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;		None
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  1    wreg      enum E3411
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0, pclath, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:        0 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    7
  9045 ;; This function calls:
  9046 ;;		_i2c_driver_sendACK
  9047 ;; This function is called by:
  9048 ;;		_i2c_ISR
  9049 ;;		i1_i2c_ISR
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _do_I2C_DO_ACK
  9055  16B6                     _do_I2C_DO_ACK:	
  9056                           
  9057                           ;Skip over the trampoline to the duplicate function for level 1
  9058  16B6  1C7E               	btfss	int$flags,0
  9059  16B7  2EBA               	goto	_do_I2C_DO_ACK$intlevel0
  9060  16B8  3195  2DDD         	ljmp	i1_do_I2C_DO_ACK
  9061  16BA                     _do_I2C_DO_ACK$intlevel0:	
  9062  16BA                     l6563:	
  9063                           ;incstack = 0
  9064                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  9065                           
  9066                           
  9067                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
  9068  16BA  3195  25B7  3196   	fcall	_i2c_driver_sendACK
  9069  16BD                     l6565:	
  9070                           
  9071                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
  9072  16BD  3005               	movlw	5
  9073  16BE                     l140:	
  9074  16BE  0008               	return
  9075  16BF                     __end_of_do_I2C_DO_ACK:	
  9076                           
  9077                           	psect	text29
  9078  16DB                     __ptext29:	
  9079 ;; *************** function _do_I2C_RCEN *****************
  9080 ;; Defined at:
  9081 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;		None
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;		None
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  1    wreg      enum E3411
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0, pclath, cstack
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;Total ram usage:        0 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    7
  9102 ;; This function calls:
  9103 ;;		_i2c_driver_startRX
  9104 ;; This function is called by:
  9105 ;;		_i2c_ISR
  9106 ;;		i1_i2c_ISR
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           
  9111                           ;psect for function _do_I2C_RCEN
  9112  16DB                     _do_I2C_RCEN:	
  9113                           
  9114                           ;Skip over the trampoline to the duplicate function for level 1
  9115  16DB  1C7E               	btfss	int$flags,0
  9116  16DC  2EDF               	goto	_do_I2C_RCEN$intlevel0
  9117  16DD  3196  2E2D         	ljmp	i1_do_I2C_RCEN
  9118  16DF                     _do_I2C_RCEN$intlevel0:	
  9119  16DF                     l6555:	
  9120                           ;incstack = 0
  9121                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9122                           
  9123                           
  9124                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
  9125  16DF  0021               	movlb	1	; select bank1
  9126  16E0  11A0               	bcf	_i2c_status^(0+128),3
  9127  16E1                     l6557:	
  9128                           
  9129                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
  9130  16E1  3195  259D  3196   	fcall	_i2c_driver_startRX
  9131  16E4                     l6559:	
  9132                           
  9133                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
  9134  16E4  3004               	movlw	4
  9135  16E5                     l137:	
  9136  16E5  0008               	return
  9137  16E6                     __end_of_do_I2C_RCEN:	
  9138                           
  9139                           	psect	text30
  9140  170A                     __ptext30:	
  9141 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  9142 ;; Defined at:
  9143 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9144 ;; Parameters:    Size  Location     Type
  9145 ;;		None
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;		None
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  1    wreg      enum E3411
  9150 ;; Registers used:
  9151 ;;		wreg, status,2, status,0, pclath, cstack
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;Total ram usage:        0 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    7
  9164 ;; This function calls:
  9165 ;;		_i2c_driver_TXData
  9166 ;; This function is called by:
  9167 ;;		_i2c_ISR
  9168 ;;		i1_i2c_ISR
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           
  9173                           ;psect for function _do_I2C_SEND_ADR_WRITE
  9174  170A                     _do_I2C_SEND_ADR_WRITE:	
  9175                           
  9176                           ;Skip over the trampoline to the duplicate function for level 1
  9177  170A  1C7E               	btfss	int$flags,0
  9178  170B  2F0E               	goto	_do_I2C_SEND_ADR_WRITE$intlevel0
  9179  170C  3196  2E4C         	ljmp	i1_do_I2C_SEND_ADR_WRITE
  9180  170E                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  9181  170E                     l6547:	
  9182                           ;incstack = 0
  9183                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9184                           
  9185                           
  9186                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
  9187  170E  0021               	movlb	1	; select bank1
  9188  170F  15A0               	bsf	_i2c_status^(0+128),3
  9189  1710                     l6549:	
  9190                           
  9191                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
  9192  1710  3521               	lslf	(_i2c_status^(0+128)+1),w
  9193  1711  3196  2615  3197   	fcall	_i2c_driver_TXData
  9194  1714                     l6551:	
  9195                           
  9196                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
  9197  1714  3003               	movlw	3
  9198  1715                     l134:	
  9199  1715  0008               	return
  9200  1716                     __end_of_do_I2C_SEND_ADR_WRITE:	
  9201                           
  9202                           	psect	text31
  9203  173C                     __ptext31:	
  9204 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  9205 ;; Defined at:
  9206 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;		None
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;		None
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      enum E3411
  9213 ;; Registers used:
  9214 ;;		wreg, status,2, status,0, pclath, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;Total ram usage:        0 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    7
  9227 ;; This function calls:
  9228 ;;		_i2c_driver_TXData
  9229 ;; This function is called by:
  9230 ;;		_i2c_ISR
  9231 ;;		i1_i2c_ISR
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           
  9236                           ;psect for function _do_I2C_SEND_ADR_READ
  9237  173C                     _do_I2C_SEND_ADR_READ:	
  9238                           
  9239                           ;Skip over the trampoline to the duplicate function for level 1
  9240  173C  1C7E               	btfss	int$flags,0
  9241  173D  2F40               	goto	_do_I2C_SEND_ADR_READ$intlevel0
  9242  173E  3196  2E65         	ljmp	i1_do_I2C_SEND_ADR_READ
  9243  1740                     _do_I2C_SEND_ADR_READ$intlevel0:	
  9244  1740                     l6539:	
  9245                           ;incstack = 0
  9246                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  9247                           
  9248                           
  9249                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
  9250  1740  0021               	movlb	1	; select bank1
  9251  1741  15A0               	bsf	_i2c_status^(0+128),3
  9252  1742                     l6541:	
  9253                           
  9254                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
  9255  1742  1403               	setc
  9256  1743  0D21               	rlf	(_i2c_status^(0+128)+1),w
  9257  1744  3196  2615  3197   	fcall	_i2c_driver_TXData
  9258  1747                     l6543:	
  9259                           
  9260                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
  9261  1747  3005               	movlw	5
  9262  1748                     l131:	
  9263  1748  0008               	return
  9264  1749                     __end_of_do_I2C_SEND_ADR_READ:	
  9265                           
  9266                           	psect	text32
  9267  16AD                     __ptext32:	
  9268 ;; *************** function _do_I2C_SEND_STOP *****************
  9269 ;; Defined at:
  9270 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;		None
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;		None
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  1    wreg      enum E3411
  9277 ;; Registers used:
  9278 ;;		wreg, status,2, status,0, pclath, cstack
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;Total ram usage:        0 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    7
  9291 ;; This function calls:
  9292 ;;		_i2c_driver_stop
  9293 ;; This function is called by:
  9294 ;;		_do_I2C_DO_ADDRESS_NACK
  9295 ;;		_do_I2C_TX
  9296 ;;		_do_I2C_TX_EMPTY
  9297 ;;		_i2c_ISR
  9298 ;;		i1_i2c_ISR
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function _do_I2C_SEND_STOP
  9304  16AD                     _do_I2C_SEND_STOP:	
  9305                           
  9306                           ;Skip over the trampoline to the duplicate function for level 1
  9307  16AD  1C7E               	btfss	int$flags,0
  9308  16AE  2EB1               	goto	_do_I2C_SEND_STOP$intlevel0
  9309  16AF  3195  2DD8         	ljmp	i1_do_I2C_SEND_STOP
  9310  16B1                     _do_I2C_SEND_STOP$intlevel0:	
  9311  16B1                     l6435:	
  9312                           ;incstack = 0
  9313                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9314                           
  9315                           
  9316                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
  9317  16B1  3195  259A  3196   	fcall	_i2c_driver_stop
  9318  16B4                     l6437:	
  9319                           
  9320                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
  9321  16B4  3000               	movlw	0
  9322  16B5                     l128:	
  9323  16B5  0008               	return
  9324  16B6                     __end_of_do_I2C_SEND_STOP:	
  9325                           
  9326                           	psect	text33
  9327  16A4                     __ptext33:	
  9328 ;; *************** function _do_I2C_SEND_RESTART *****************
  9329 ;; Defined at:
  9330 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;		None
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;		None
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  1    wreg      enum E3411
  9337 ;; Registers used:
  9338 ;;		wreg, status,2, status,0, pclath, cstack
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;Total ram usage:        0 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    7
  9351 ;; This function calls:
  9352 ;;		_i2c_driver_restart
  9353 ;; This function is called by:
  9354 ;;		_do_I2C_DO_ADDRESS_NACK
  9355 ;;		_do_I2C_TX_EMPTY
  9356 ;;		_i2c_ISR
  9357 ;;		i1_i2c_ISR
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           
  9362                           ;psect for function _do_I2C_SEND_RESTART
  9363  16A4                     _do_I2C_SEND_RESTART:	
  9364                           
  9365                           ;Skip over the trampoline to the duplicate function for level 1
  9366  16A4  1C7E               	btfss	int$flags,0
  9367  16A5  2EA8               	goto	_do_I2C_SEND_RESTART$intlevel0
  9368  16A6  3195  2DD3         	ljmp	i1_do_I2C_SEND_RESTART
  9369  16A8                     _do_I2C_SEND_RESTART$intlevel0:	
  9370  16A8                     l6429:	
  9371                           ;incstack = 0
  9372                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9373                           
  9374                           
  9375                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
  9376  16A8  3195  2597  3196   	fcall	_i2c_driver_restart
  9377  16AB                     l6431:	
  9378                           
  9379                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
  9380  16AB  3001               	movlw	1
  9381  16AC                     l125:	
  9382  16AC  0008               	return
  9383  16AD                     __end_of_do_I2C_SEND_RESTART:	
  9384                           
  9385                           	psect	text34
  9386  169B                     __ptext34:	
  9387 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  9388 ;; Defined at:
  9389 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;		None
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;		None
  9394 ;; Return value:  Size  Location     Type
  9395 ;;                  1    wreg      enum E3411
  9396 ;; Registers used:
  9397 ;;		wreg, status,2, status,0, pclath, cstack
  9398 ;; Tracked objects:
  9399 ;;		On entry : 0/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;Total ram usage:        0 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    7
  9410 ;; This function calls:
  9411 ;;		_i2c_driver_restart
  9412 ;; This function is called by:
  9413 ;;		_do_I2C_TX
  9414 ;;		_i2c_ISR
  9415 ;;		i1_i2c_ISR
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           
  9420                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  9421  169B                     _do_I2C_SEND_RESTART_WRITE:	
  9422                           
  9423                           ;Skip over the trampoline to the duplicate function for level 1
  9424  169B  1C7E               	btfss	int$flags,0
  9425  169C  2E9F               	goto	_do_I2C_SEND_RESTART_WRITE$intlevel0
  9426  169D  3195  2DCE         	ljmp	i1_do_I2C_SEND_RESTART_WRITE
  9427  169F                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  9428  169F                     l6423:	
  9429                           ;incstack = 0
  9430                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9431                           
  9432                           
  9433                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
  9434  169F  3195  2597  3196   	fcall	_i2c_driver_restart
  9435  16A2                     l6425:	
  9436                           
  9437                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
  9438  16A2  3002               	movlw	2
  9439  16A3                     l122:	
  9440  16A3  0008               	return
  9441  16A4                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  9442                           
  9443                           	psect	text35
  9444  1692                     __ptext35:	
  9445 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  9446 ;; Defined at:
  9447 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      enum E3411
  9454 ;; Registers used:
  9455 ;;		wreg, status,2, status,0, pclath, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    7
  9468 ;; This function calls:
  9469 ;;		_i2c_driver_restart
  9470 ;; This function is called by:
  9471 ;;		_do_I2C_TX
  9472 ;;		_i2c_ISR
  9473 ;;		i1_i2c_ISR
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           
  9478                           ;psect for function _do_I2C_SEND_RESTART_READ
  9479  1692                     _do_I2C_SEND_RESTART_READ:	
  9480                           
  9481                           ;Skip over the trampoline to the duplicate function for level 1
  9482  1692  1C7E               	btfss	int$flags,0
  9483  1693  2E96               	goto	_do_I2C_SEND_RESTART_READ$intlevel0
  9484  1694  3195  2DC9         	ljmp	i1_do_I2C_SEND_RESTART_READ
  9485  1696                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  9486  1696                     l6417:	
  9487                           ;incstack = 0
  9488                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9489                           
  9490                           
  9491                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
  9492  1696  3195  2597  3196   	fcall	_i2c_driver_restart
  9493  1699                     l6419:	
  9494                           
  9495                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
  9496  1699  3001               	movlw	1
  9497  169A                     l119:	
  9498  169A  0008               	return
  9499  169B                     __end_of_do_I2C_SEND_RESTART_READ:	
  9500                           
  9501                           	psect	text36
  9502  1689                     __ptext36:	
  9503 ;; *************** function _do_I2C_IDLE *****************
  9504 ;; Defined at:
  9505 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;		None
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;		None
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  1    wreg      enum E3411
  9512 ;; Registers used:
  9513 ;;		wreg, status,2
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;Total ram usage:        0 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    6
  9526 ;; This function calls:
  9527 ;;		Nothing
  9528 ;; This function is called by:
  9529 ;;		_i2c_ISR
  9530 ;;		i1_i2c_ISR
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           
  9535                           ;psect for function _do_I2C_IDLE
  9536  1689                     _do_I2C_IDLE:	
  9537                           
  9538                           ;Skip over the trampoline to the duplicate function for level 1
  9539  1689  1C7E               	btfss	int$flags,0
  9540  168A  2E8D               	goto	_do_I2C_IDLE$intlevel0
  9541  168B  3195  2DC4         	ljmp	i1_do_I2C_IDLE
  9542  168D                     _do_I2C_IDLE$intlevel0:	
  9543  168D                     l6531:	
  9544                           ;incstack = 0
  9545                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  9546                           
  9547                           
  9548                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
  9549  168D  0021               	movlb	1	; select bank1
  9550  168E  1020               	bcf	_i2c_status^(0+128),0
  9551  168F                     l6533:	
  9552                           
  9553                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
  9554  168F  01AA               	clrf	(_i2c_status^(0+128)+10)
  9555  1690                     l6535:	
  9556                           
  9557                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
  9558  1690  300E               	movlw	14
  9559  1691                     l116:	
  9560  1691  0008               	return
  9561  1692                     __end_of_do_I2C_IDLE:	
  9562                           
  9563                           	psect	text37
  9564  16FE                     __ptext37:	
  9565 ;; *************** function _do_I2C_RESET *****************
  9566 ;; Defined at:
  9567 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;		None
  9572 ;; Return value:  Size  Location     Type
  9573 ;;                  1    wreg      enum E3411
  9574 ;; Registers used:
  9575 ;;		wreg, status,2, status,0, pclath, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;Total ram usage:        0 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    7
  9588 ;; This function calls:
  9589 ;;		_i2c_driver_resetBus
  9590 ;; This function is called by:
  9591 ;;		_i2c_ISR
  9592 ;;		i1_i2c_ISR
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           
  9597                           ;psect for function _do_I2C_RESET
  9598  16FE                     _do_I2C_RESET:	
  9599                           
  9600                           ;Skip over the trampoline to the duplicate function for level 1
  9601  16FE  1C7E               	btfss	int$flags,0
  9602  16FF  2F02               	goto	_do_I2C_RESET$intlevel0
  9603  1700  3196  2E44         	ljmp	i1_do_I2C_RESET
  9604  1702                     _do_I2C_RESET$intlevel0:	
  9605  1702                     l6521:	
  9606                           ;incstack = 0
  9607                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  9608                           
  9609                           
  9610                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
  9611  1702  3187  27FF  3196   	fcall	_i2c_driver_resetBus
  9612  1705                     l6523:	
  9613                           
  9614                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
  9615  1705  0021               	movlb	1	; select bank1
  9616  1706  1020               	bcf	_i2c_status^(0+128),0
  9617  1707                     l6525:	
  9618                           
  9619                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
  9620  1707  01AA               	clrf	(_i2c_status^(0+128)+10)
  9621  1708                     l6527:	
  9622                           
  9623                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
  9624  1708  300E               	movlw	14
  9625  1709                     l113:	
  9626  1709  0008               	return
  9627  170A                     __end_of_do_I2C_RESET:	
  9628                           
  9629                           	psect	text38
  9630  0D0E                     __ptext38:	
  9631 ;; *************** function _do_I2C_TX_EMPTY *****************
  9632 ;; Defined at:
  9633 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;		None
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;		None
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  1    wreg      enum E3411
  9640 ;; Registers used:
  9641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;Total ram usage:        3 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    9
  9654 ;; This function calls:
  9655 ;;		Absolute function
  9656 ;;		_do_I2C_SEND_RESTART
  9657 ;;		_do_I2C_SEND_STOP
  9658 ;;		_i2c_restartWrite
  9659 ;;		_mssp_setIRQ
  9660 ;;		_rd1RegCompleteHandler
  9661 ;;		_rd2RegCompleteHandler
  9662 ;;		_rdBlkRegCompleteHandler
  9663 ;;		_returnReset
  9664 ;;		_returnStop
  9665 ;;		_wr1RegCompleteHandler
  9666 ;;		_wr2RegCompleteHandler
  9667 ;; This function is called by:
  9668 ;;		_i2c_ISR
  9669 ;;		i1_i2c_ISR
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _do_I2C_TX_EMPTY
  9675  0D0E                     _do_I2C_TX_EMPTY:	
  9676                           
  9677                           ;Skip over the trampoline to the duplicate function for level 1
  9678  0D0E  1C7E               	btfss	int$flags,0
  9679  0D0F  2D12               	goto	_do_I2C_TX_EMPTY$intlevel0
  9680  0D10  318B  2BCB         	ljmp	i1_do_I2C_TX_EMPTY
  9681  0D12                     _do_I2C_TX_EMPTY$intlevel0:	
  9682  0D12                     l6653:	
  9683                           ;incstack = 0
  9684                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9685                           
  9686                           
  9687                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
  9688  0D12  0021               	movlb	1	; select bank1
  9689  0D13  1520               	bsf	_i2c_status^(0+128),2
  9690                           
  9691                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  9692  0D14  2D22               	goto	l6671
  9693  0D15                     l6655:	
  9694                           
  9695                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
  9696  0D15  3196  26A4  318D   	fcall	_do_I2C_SEND_RESTART
  9697  0D18  2D46               	goto	l188
  9698  0D19                     l6659:	
  9699                           
  9700                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
  9701  0D19  3188  2000  318D   	fcall	_mssp_setIRQ
  9702  0D1C                     l6661:	
  9703                           
  9704                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
  9705  0D1C  3003               	movlw	3
  9706  0D1D  2D46               	goto	l188
  9707  0D1E                     l6665:	
  9708                           
  9709                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
  9710  0D1E  3196  26AD  318D   	fcall	_do_I2C_SEND_STOP
  9711  0D21  2D46               	goto	l188
  9712  0D22                     l6671:	
  9713  0D22  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  9714  0D23  0020               	movlb	0	; select bank0
  9715  0D24  00D6               	movwf	??_do_I2C_TX_EMPTY
  9716  0D25  0856               	movf	??_do_I2C_TX_EMPTY,w
  9717  0D26  00DF               	movwf	wr1RegCompleteHandler@p
  9718  0D27  300B               	movlw	11
  9719  0D28  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  9720  0D29  0086               	movwf	6
  9721  0D2A  0187               	clrf	7
  9722  0D2B  3F41               	moviw [1]fsr1
  9723  0D2C  008A               	movwf	10
  9724  0D2D  3F40               	moviw [0]fsr1
  9725  0D2E  000A               	callw
  9726  0D2F  318D               	pagesel	$
  9727  0D30  0020               	movlb	0	; select bank0
  9728  0D31  00D7               	movwf	??_do_I2C_TX_EMPTY+1
  9729  0D32  01D8               	clrf	??_do_I2C_TX_EMPTY+2
  9730                           
  9731                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9732                           ; Switch size 1, requested type "simple"
  9733                           ; Number of cases is 1, Range of values is 0 to 0
  9734                           ; switch strategies available:
  9735                           ; Name         Instructions Cycles
  9736                           ; simple_byte            4     3 (average)
  9737                           ; direct_byte            8     6 (fixed)
  9738                           ; jumptable            260     6 (fixed)
  9739                           ;	Chosen strategy is simple_byte
  9740  0D33  0858               	movf	??_do_I2C_TX_EMPTY+2,w
  9741  0D34  3A00               	xorlw	0	; case 0
  9742  0D35  1903               	skipnz
  9743  0D36  2D38               	goto	l8369
  9744  0D37  2D1E               	goto	l6665
  9745  0D38                     l8369:	
  9746                           
  9747                           ; Switch size 1, requested type "simple"
  9748                           ; Number of cases is 4, Range of values is 1 to 4
  9749                           ; switch strategies available:
  9750                           ; Name         Instructions Cycles
  9751                           ; simple_byte           13     7 (average)
  9752                           ; direct_byte           17     9 (fixed)
  9753                           ; jumptable            263     9 (fixed)
  9754                           ;	Chosen strategy is simple_byte
  9755  0D38  0857               	movf	??_do_I2C_TX_EMPTY+1,w
  9756  0D39  3A01               	xorlw	1	; case 1
  9757  0D3A  1903               	skipnz
  9758  0D3B  2D1E               	goto	l6665
  9759  0D3C  3A03               	xorlw	3	; case 2
  9760  0D3D  1903               	skipnz
  9761  0D3E  2D15               	goto	l6655
  9762  0D3F  3A01               	xorlw	1	; case 3
  9763  0D40  1903               	skipnz
  9764  0D41  2D15               	goto	l6655
  9765  0D42  3A07               	xorlw	7	; case 4
  9766  0D43  1903               	skipnz
  9767  0D44  2D19               	goto	l6659
  9768  0D45  2D1E               	goto	l6665
  9769  0D46                     l188:	
  9770  0D46  0008               	return
  9771  0D47                     __end_of_do_I2C_TX_EMPTY:	
  9772                           
  9773                           	psect	text39
  9774  0800                     __ptext39:	
  9775 ;; *************** function _mssp_setIRQ *****************
  9776 ;; Defined at:
  9777 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;		None
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  1    wreg      void 
  9784 ;; Registers used:
  9785 ;;		None
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        0 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    6
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_do_I2C_TX_EMPTY
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _mssp_setIRQ
  9807  0800                     _mssp_setIRQ:	
  9808  0800                     l6467:	
  9809                           ;incstack = 0
  9810                           ; Regs used in _mssp_setIRQ: []
  9811                           
  9812                           
  9813                           ;mcc_generated_files/i2c_driver.c: 61:     else
  9814  0800  0020               	movlb	0	; select bank0
  9815  0801  1591               	bsf	17,3	;volatile
  9816  0802                     l602:	
  9817  0802  0008               	return
  9818  0803                     __end_of_mssp_setIRQ:	
  9819                           
  9820                           	psect	text40
  9821  1680                     __ptext40:	
  9822 ;; *************** function _i2c_driver_isNACK *****************
  9823 ;; Defined at:
  9824 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
  9825 ;; Parameters:    Size  Location     Type
  9826 ;;		None
  9827 ;; Auto vars:     Size  Location     Type
  9828 ;;		None
  9829 ;; Return value:  Size  Location     Type
  9830 ;;		None               void
  9831 ;; Registers used:
  9832 ;;		wreg, status,2, status,0
  9833 ;; Tracked objects:
  9834 ;;		On entry : 0/0
  9835 ;;		On exit  : 0/0
  9836 ;;		Unchanged: 0/0
  9837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;Total ram usage:        1 bytes
  9843 ;; Hardware stack levels used:    1
  9844 ;; Hardware stack levels required when called:    6
  9845 ;; This function calls:
  9846 ;;		Nothing
  9847 ;; This function is called by:
  9848 ;;		_do_I2C_TX
  9849 ;;		_i2c_ISR
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _i2c_driver_isNACK
  9855  1680                     _i2c_driver_isNACK:	
  9856  1680                     l6459:	
  9857                           ;incstack = 0
  9858                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  9859                           
  9860                           
  9861                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
  9862  1680  0024               	movlb	4	; select bank4
  9863  1681  0E16               	swapf	22,w	;volatile
  9864  1682  0C89               	rrf	9,f
  9865  1683  0C89               	rrf	9,f
  9866  1684  3901               	andlw	1
  9867  1685  0020               	movlb	0	; select bank0
  9868  1686  00D6               	movwf	??_i2c_driver_isNACK
  9869  1687  0C56               	rrf	??_i2c_driver_isNACK,w
  9870  1688                     l637:	
  9871  1688  0008               	return
  9872  1689                     __end_of_i2c_driver_isNACK:	
  9873                           
  9874                           	psect	text41
  9875  1615                     __ptext41:	
  9876 ;; *************** function _i2c_driver_TXData *****************
  9877 ;; Defined at:
  9878 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
  9879 ;; Parameters:    Size  Location     Type
  9880 ;;  d               1    wreg     unsigned char 
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;  d               1    0[BANK0 ] unsigned char 
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  1    wreg      void 
  9885 ;; Registers used:
  9886 ;;		wreg
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;Total ram usage:        1 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    6
  9899 ;; This function calls:
  9900 ;;		Nothing
  9901 ;; This function is called by:
  9902 ;;		_do_I2C_SEND_ADR_READ
  9903 ;;		_do_I2C_SEND_ADR_WRITE
  9904 ;;		_do_I2C_TX
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           
  9909                           ;psect for function _i2c_driver_TXData
  9910  1615                     _i2c_driver_TXData:	
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in _i2c_driver_TXData: [wreg]
  9914                           ;i2c_driver_TXData@d stored from wreg
  9915  1615  0020               	movlb	0	; select bank0
  9916  1616  00D6               	movwf	i2c_driver_TXData@d
  9917  1617                     l6441:	
  9918                           
  9919                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
  9920  1617  0856               	movf	i2c_driver_TXData@d,w
  9921  1618  0024               	movlb	4	; select bank4
  9922  1619  0091               	movwf	17	;volatile
  9923  161A                     l652:	
  9924  161A  0008               	return
  9925  161B                     __end_of_i2c_driver_TXData:	
  9926                           
  9927                           	psect	text42
  9928  15A0                     __ptext42:	
  9929 ;; *************** function _i2c_driver_getRXData *****************
  9930 ;; Defined at:
  9931 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;		None
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;                  1    wreg      unsigned char 
  9938 ;; Registers used:
  9939 ;;		wreg
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;Total ram usage:        0 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    6
  9952 ;; This function calls:
  9953 ;;		Nothing
  9954 ;; This function is called by:
  9955 ;;		_do_I2C_RX
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           
  9960                           ;psect for function _i2c_driver_getRXData
  9961  15A0                     _i2c_driver_getRXData:	
  9962  15A0                     l6463:	
  9963                           ;incstack = 0
  9964                           ; Regs used in _i2c_driver_getRXData: [wreg]
  9965                           
  9966                           
  9967                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
  9968  15A0  0024               	movlb	4	; select bank4
  9969  15A1  0811               	movf	17,w	;volatile
  9970  15A2                     l643:	
  9971  15A2  0008               	return
  9972  15A3                     __end_of_i2c_driver_getRXData:	
  9973                           
  9974                           	psect	text43
  9975  15BB                     __ptext43:	
  9976 ;; *************** function _i2c_driver_sendNACK *****************
  9977 ;; Defined at:
  9978 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;		None
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;		None
  9983 ;; Return value:  Size  Location     Type
  9984 ;;                  1    wreg      void 
  9985 ;; Registers used:
  9986 ;;		None
  9987 ;; Tracked objects:
  9988 ;;		On entry : 0/0
  9989 ;;		On exit  : 0/0
  9990 ;;		Unchanged: 0/0
  9991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;Total ram usage:        0 bytes
  9997 ;; Hardware stack levels used:    1
  9998 ;; Hardware stack levels required when called:    6
  9999 ;; This function calls:
 10000 ;;		Nothing
 10001 ;; This function is called by:
 10002 ;;		_do_I2C_DO_NACK_STOP
 10003 ;;		_do_I2C_DO_NACK_RESTART
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           
 10008                           ;psect for function _i2c_driver_sendNACK
 10009  15BB                     _i2c_driver_sendNACK:	
 10010  15BB                     l6415:	
 10011                           ;incstack = 0
 10012                           ; Regs used in _i2c_driver_sendNACK: []
 10013                           
 10014                           
 10015                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
 10016  15BB  0024               	movlb	4	; select bank4
 10017  15BC  1696               	bsf	22,5	;volatile
 10018                           
 10019                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
 10020  15BD  1616               	bsf	22,4	;volatile
 10021  15BE                     l661:	
 10022  15BE  0008               	return
 10023  15BF                     __end_of_i2c_driver_sendNACK:	
 10024                           
 10025                           	psect	text44
 10026  07FF                     __ptext44:	
 10027 ;; *************** function _i2c_driver_resetBus *****************
 10028 ;; Defined at:
 10029 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;		None
 10032 ;; Auto vars:     Size  Location     Type
 10033 ;;		None
 10034 ;; Return value:  Size  Location     Type
 10035 ;;                  1    wreg      void 
 10036 ;; Registers used:
 10037 ;;		None
 10038 ;; Tracked objects:
 10039 ;;		On entry : 0/0
 10040 ;;		On exit  : 0/0
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;Total ram usage:        0 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; Hardware stack levels required when called:    6
 10050 ;; This function calls:
 10051 ;;		Nothing
 10052 ;; This function is called by:
 10053 ;;		_do_I2C_RESET
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           
 10058                           ;psect for function _i2c_driver_resetBus
 10059  07FF                     _i2c_driver_resetBus:	
 10060  07FF                     l625:	
 10061                           ;incstack = 0
 10062                           ; Regs used in _i2c_driver_resetBus: []
 10063                           
 10064  07FF  0008               	return
 10065  0800                     __end_of_i2c_driver_resetBus:	
 10066                           
 10067                           	psect	text45
 10068  159D                     __ptext45:	
 10069 ;; *************** function _i2c_driver_startRX *****************
 10070 ;; Defined at:
 10071 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;		None
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  1    wreg      void 
 10078 ;; Registers used:
 10079 ;;		None
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        0 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:    6
 10092 ;; This function calls:
 10093 ;;		Nothing
 10094 ;; This function is called by:
 10095 ;;		_do_I2C_RCEN
 10096 ;; This function uses a non-reentrant model
 10097 ;;
 10098                           
 10099                           
 10100                           ;psect for function _i2c_driver_startRX
 10101  159D                     _i2c_driver_startRX:	
 10102  159D                     l6443:	
 10103                           ;incstack = 0
 10104                           ; Regs used in _i2c_driver_startRX: []
 10105                           
 10106                           
 10107                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
 10108  159D  0024               	movlb	4	; select bank4
 10109  159E  1596               	bsf	22,3	;volatile
 10110  159F                     l640:	
 10111  159F  0008               	return
 10112  15A0                     __end_of_i2c_driver_startRX:	
 10113                           
 10114                           	psect	text46
 10115  0939                     __ptext46:	
 10116 ;; *************** function _rdBlkRegCompleteHandler *****************
 10117 ;; Defined at:
 10118 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;  p               1    9[BANK0 ] PTR void 
 10121 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10122 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10123 ;; Auto vars:     Size  Location     Type
 10124 ;;		None
 10125 ;; Return value:  Size  Location     Type
 10126 ;;                  1    wreg      enum E358
 10127 ;; Registers used:
 10128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10129 ;; Tracked objects:
 10130 ;;		On entry : 0/0
 10131 ;;		On exit  : 0/0
 10132 ;;		Unchanged: 0/0
 10133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10134 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;Total ram usage:        1 bytes
 10139 ;; Hardware stack levels used:    1
 10140 ;; Hardware stack levels required when called:    8
 10141 ;; This function calls:
 10142 ;;		_i2c_setBuffer
 10143 ;;		_i2c_setDataCompleteCallback
 10144 ;; This function is called by:
 10145 ;;		_i2c_readDataBlock
 10146 ;;		_do_I2C_DO_ADDRESS_NACK
 10147 ;;		_do_I2C_TX
 10148 ;;		_do_I2C_RX
 10149 ;;		_do_I2C_TX_EMPTY
 10150 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10151 ;;		i1_do_I2C_TX
 10152 ;;		i1_do_I2C_RX
 10153 ;;		i1_do_I2C_TX_EMPTY
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           
 10158                           ;psect for function _rdBlkRegCompleteHandler
 10159  0939                     _rdBlkRegCompleteHandler:	
 10160                           
 10161                           ;Skip over the trampoline to the duplicate function for level 1
 10162  0939  1C7E               	btfss	int$flags,0
 10163  093A  293D               	goto	_rdBlkRegCompleteHandler$intlevel0
 10164  093B  3188  28E7         	ljmp	i1_rdBlkRegCompleteHandler
 10165  093D                     _rdBlkRegCompleteHandler$intlevel0:	
 10166  093D                     l6509:	
 10167                           ;incstack = 0
 10168                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10169                           
 10170                           
 10171                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 10172  093D  0020               	movlb	0	; select bank0
 10173  093E  085F               	movf	rdBlkRegCompleteHandler@p,w
 10174  093F  0086               	movwf	6
 10175  0940  0187               	clrf	7
 10176  0941  3F40               	moviw [0]fsr1
 10177  0942  00D6               	movwf	i2c_setBuffer@bufferSize
 10178  0943  3F41               	moviw [1]fsr1
 10179  0944  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10180  0945  085F               	movf	rdBlkRegCompleteHandler@p,w
 10181  0946  3E02               	addlw	2
 10182  0947  0086               	movwf	6
 10183  0948  0187               	clrf	7
 10184  0949  0801               	movf	1,w
 10185  094A  3188  2044  3189   	fcall	_i2c_setBuffer
 10186                           
 10187                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 10188  094D  3000               	movlw	0
 10189  094E  0020               	movlb	0	; select bank0
 10190  094F  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10191  0950  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10192  0951  01DD               	clrf	i2c_setDataCompleteCallback@p
 10193  0952  3197  2749  3189   	fcall	_i2c_setDataCompleteCallback
 10194  0955                     l6511:	
 10195                           
 10196                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
 10197  0955  3002               	movlw	2
 10198  0956                     l291:	
 10199  0956  0008               	return
 10200  0957                     __end_of_rdBlkRegCompleteHandler:	
 10201                           
 10202                           	psect	text47
 10203  08A0                     __ptext47:	
 10204 ;; *************** function _rd2RegCompleteHandler *****************
 10205 ;; Defined at:
 10206 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;  p               1    9[BANK0 ] PTR void 
 10209 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10210 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;		None
 10213 ;; Return value:  Size  Location     Type
 10214 ;;                  1    wreg      enum E358
 10215 ;; Registers used:
 10216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10217 ;; Tracked objects:
 10218 ;;		On entry : 0/0
 10219 ;;		On exit  : 0/0
 10220 ;;		Unchanged: 0/0
 10221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10222 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;Total ram usage:        1 bytes
 10227 ;; Hardware stack levels used:    1
 10228 ;; Hardware stack levels required when called:    8
 10229 ;; This function calls:
 10230 ;;		_i2c_setBuffer
 10231 ;;		_i2c_setDataCompleteCallback
 10232 ;; This function is called by:
 10233 ;;		_i2c_read2ByteRegister
 10234 ;;		_do_I2C_DO_ADDRESS_NACK
 10235 ;;		_do_I2C_TX
 10236 ;;		_do_I2C_RX
 10237 ;;		_do_I2C_TX_EMPTY
 10238 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10239 ;;		i1_do_I2C_TX
 10240 ;;		i1_do_I2C_RX
 10241 ;;		i1_do_I2C_TX_EMPTY
 10242 ;; This function uses a non-reentrant model
 10243 ;;
 10244                           
 10245                           
 10246                           ;psect for function _rd2RegCompleteHandler
 10247  08A0                     _rd2RegCompleteHandler:	
 10248                           
 10249                           ;Skip over the trampoline to the duplicate function for level 1
 10250  08A0  1C7E               	btfss	int$flags,0
 10251  08A1  28A4               	goto	_rd2RegCompleteHandler$intlevel0
 10252  08A2  3197  2FD9         	ljmp	i1_rd2RegCompleteHandler
 10253  08A4                     _rd2RegCompleteHandler$intlevel0:	
 10254  08A4                     l6493:	
 10255                           ;incstack = 0
 10256                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10257                           
 10258                           
 10259                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
 10260  08A4  3002               	movlw	2
 10261  08A5  0020               	movlb	0	; select bank0
 10262  08A6  00D6               	movwf	i2c_setBuffer@bufferSize
 10263  08A7  3000               	movlw	0
 10264  08A8  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10265  08A9  085F               	movf	rd2RegCompleteHandler@p,w
 10266  08AA  3188  2044  3188   	fcall	_i2c_setBuffer
 10267  08AD                     l6495:	
 10268                           
 10269                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10270  08AD  3000               	movlw	0
 10271  08AE  0020               	movlb	0	; select bank0
 10272  08AF  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10273  08B0  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10274  08B1  01DD               	clrf	i2c_setDataCompleteCallback@p
 10275  08B2  3197  2749  3188   	fcall	_i2c_setDataCompleteCallback
 10276  08B5                     l6497:	
 10277                           
 10278                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
 10279  08B5  3002               	movlw	2
 10280  08B6                     l267:	
 10281  08B6  0008               	return
 10282  08B7                     __end_of_rd2RegCompleteHandler:	
 10283                           
 10284                           	psect	text48
 10285  0889                     __ptext48:	
 10286 ;; *************** function _rd1RegCompleteHandler *****************
 10287 ;; Defined at:
 10288 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;  p               1    9[BANK0 ] PTR void 
 10291 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10292 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;		None
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      enum E358
 10297 ;; Registers used:
 10298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10304 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;Total ram usage:        1 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    8
 10311 ;; This function calls:
 10312 ;;		_i2c_setBuffer
 10313 ;;		_i2c_setDataCompleteCallback
 10314 ;; This function is called by:
 10315 ;;		_i2c_read1ByteRegister
 10316 ;;		_do_I2C_DO_ADDRESS_NACK
 10317 ;;		_do_I2C_TX
 10318 ;;		_do_I2C_RX
 10319 ;;		_do_I2C_TX_EMPTY
 10320 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10321 ;;		i1_do_I2C_TX
 10322 ;;		i1_do_I2C_RX
 10323 ;;		i1_do_I2C_TX_EMPTY
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           
 10328                           ;psect for function _rd1RegCompleteHandler
 10329  0889                     _rd1RegCompleteHandler:	
 10330                           
 10331                           ;Skip over the trampoline to the duplicate function for level 1
 10332  0889  1C7E               	btfss	int$flags,0
 10333  088A  288D               	goto	_rd1RegCompleteHandler$intlevel0
 10334  088B  3197  2FC7         	ljmp	i1_rd1RegCompleteHandler
 10335  088D                     _rd1RegCompleteHandler$intlevel0:	
 10336  088D                     l6485:	
 10337                           ;incstack = 0
 10338                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10339                           
 10340                           
 10341                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
 10342  088D  3001               	movlw	1
 10343  088E  0020               	movlb	0	; select bank0
 10344  088F  00D6               	movwf	i2c_setBuffer@bufferSize
 10345  0890  3000               	movlw	0
 10346  0891  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10347  0892  085F               	movf	rd1RegCompleteHandler@p,w
 10348  0893  3188  2044  3188   	fcall	_i2c_setBuffer
 10349  0896                     l6487:	
 10350                           
 10351                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10352  0896  3000               	movlw	0
 10353  0897  0020               	movlb	0	; select bank0
 10354  0898  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10355  0899  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10356  089A  01DD               	clrf	i2c_setDataCompleteCallback@p
 10357  089B  3197  2749  3188   	fcall	_i2c_setDataCompleteCallback
 10358  089E                     l6489:	
 10359                           
 10360                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
 10361  089E  3002               	movlw	2
 10362  089F                     l252:	
 10363  089F  0008               	return
 10364  08A0                     __end_of_rd1RegCompleteHandler:	
 10365                           
 10366                           	psect	text49
 10367  0872                     __ptext49:	
 10368 ;; *************** function _wr1RegCompleteHandler *****************
 10369 ;; Defined at:
 10370 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;  p               1    9[BANK0 ] PTR void 
 10373 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10374 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;		None
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  1    wreg      enum E358
 10379 ;; Registers used:
 10380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10386 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;Total ram usage:        1 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    8
 10393 ;; This function calls:
 10394 ;;		_i2c_setBuffer
 10395 ;;		_i2c_setDataCompleteCallback
 10396 ;; This function is called by:
 10397 ;;		_i2c_write1ByteRegister
 10398 ;;		_do_I2C_DO_ADDRESS_NACK
 10399 ;;		_do_I2C_TX
 10400 ;;		_do_I2C_RX
 10401 ;;		_do_I2C_TX_EMPTY
 10402 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10403 ;;		i1_do_I2C_TX
 10404 ;;		i1_do_I2C_RX
 10405 ;;		i1_do_I2C_TX_EMPTY
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           
 10410                           ;psect for function _wr1RegCompleteHandler
 10411  0872                     _wr1RegCompleteHandler:	
 10412                           
 10413                           ;Skip over the trampoline to the duplicate function for level 1
 10414  0872  1C7E               	btfss	int$flags,0
 10415  0873  2876               	goto	_wr1RegCompleteHandler$intlevel0
 10416  0874  3197  2FB5         	ljmp	i1_wr1RegCompleteHandler
 10417  0876                     _wr1RegCompleteHandler$intlevel0:	
 10418  0876                     l6477:	
 10419                           ;incstack = 0
 10420                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10421                           
 10422                           
 10423                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
 10424  0876  3001               	movlw	1
 10425  0877  0020               	movlb	0	; select bank0
 10426  0878  00D6               	movwf	i2c_setBuffer@bufferSize
 10427  0879  3000               	movlw	0
 10428  087A  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10429  087B  085F               	movf	wr1RegCompleteHandler@p,w
 10430  087C  3188  2044  3188   	fcall	_i2c_setBuffer
 10431  087F                     l6479:	
 10432                           
 10433                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10434  087F  3000               	movlw	0
 10435  0880  0020               	movlb	0	; select bank0
 10436  0881  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10437  0882  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10438  0883  01DD               	clrf	i2c_setDataCompleteCallback@p
 10439  0884  3197  2749  3188   	fcall	_i2c_setDataCompleteCallback
 10440  0887                     l6481:	
 10441                           
 10442                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
 10443  0887  3004               	movlw	4
 10444  0888                     l231:	
 10445  0888  0008               	return
 10446  0889                     __end_of_wr1RegCompleteHandler:	
 10447                           
 10448                           	psect	text50
 10449  160F                     __ptext50:	
 10450 ;; *************** function _i2c_restartWrite *****************
 10451 ;; Defined at:
 10452 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  p               1    9[BANK0 ] PTR void 
 10455 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10456 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;		None
 10459 ;; Return value:  Size  Location     Type
 10460 ;;                  1    wreg      enum E358
 10461 ;; Registers used:
 10462 ;;		wreg
 10463 ;; Tracked objects:
 10464 ;;		On entry : 0/0
 10465 ;;		On exit  : 0/0
 10466 ;;		Unchanged: 0/0
 10467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10468 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;Total ram usage:        1 bytes
 10473 ;; Hardware stack levels used:    1
 10474 ;; Hardware stack levels required when called:    6
 10475 ;; This function calls:
 10476 ;;		Nothing
 10477 ;; This function is called by:
 10478 ;;		_i2c_writeNBytes
 10479 ;;		_i2c_readDataBlock
 10480 ;;		_i2c_write1ByteRegister
 10481 ;;		_i2c_read1ByteRegister
 10482 ;;		_i2c_read2ByteRegister
 10483 ;;		_i2c_write2ByteRegister
 10484 ;;		_do_I2C_DO_ADDRESS_NACK
 10485 ;;		_do_I2C_TX
 10486 ;;		_do_I2C_RX
 10487 ;;		_do_I2C_TX_EMPTY
 10488 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10489 ;;		i1_do_I2C_TX
 10490 ;;		i1_do_I2C_RX
 10491 ;;		i1_do_I2C_TX_EMPTY
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _i2c_restartWrite
 10497  160F                     _i2c_restartWrite:	
 10498                           
 10499                           ;Skip over the trampoline to the duplicate function for level 1
 10500  160F  1C7E               	btfss	int$flags,0
 10501  1610  2E13               	goto	_i2c_restartWrite$intlevel0
 10502  1611  3180  2802         	ljmp	i1_i2c_restartWrite
 10503  1613                     _i2c_restartWrite$intlevel0:	
 10504  1613                     l6515:	
 10505                           ;incstack = 0
 10506                           ; Regs used in _i2c_restartWrite: [wreg]
 10507                           
 10508                           
 10509                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
 10510  1613  3003               	movlw	3
 10511  1614                     l318:	
 10512  1614  0008               	return
 10513  1615                     __end_of_i2c_restartWrite:	
 10514                           
 10515                           	psect	text51
 10516  1609                     __ptext51:	
 10517 ;; *************** function _returnReset *****************
 10518 ;; Defined at:
 10519 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;  p               1    9[BANK0 ] PTR void 
 10522 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10523 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10524 ;; Auto vars:     Size  Location     Type
 10525 ;;		None
 10526 ;; Return value:  Size  Location     Type
 10527 ;;                  1    wreg      enum E3257
 10528 ;; Registers used:
 10529 ;;		wreg
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10535 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;Total ram usage:        1 bytes
 10540 ;; Hardware stack levels used:    1
 10541 ;; Hardware stack levels required when called:    6
 10542 ;; This function calls:
 10543 ;;		Nothing
 10544 ;; This function is called by:
 10545 ;;		_i2c_open
 10546 ;;		_do_I2C_DO_ADDRESS_NACK
 10547 ;;		_do_I2C_TX
 10548 ;;		_do_I2C_RX
 10549 ;;		_do_I2C_TX_EMPTY
 10550 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10551 ;;		i1_do_I2C_TX
 10552 ;;		i1_do_I2C_RX
 10553 ;;		i1_do_I2C_TX_EMPTY
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function _returnReset
 10559  1609                     _returnReset:	
 10560                           
 10561                           ;Skip over the trampoline to the duplicate function for level 1
 10562  1609  1C7E               	btfss	int$flags,0
 10563  160A  2E0D               	goto	_returnReset$intlevel0
 10564  160B  3195  2D77         	ljmp	i1_returnReset
 10565  160D                     _returnReset$intlevel0:	
 10566  160D                     l6473:	
 10567                           ;incstack = 0
 10568                           ; Regs used in _returnReset: [wreg]
 10569                           
 10570                           
 10571                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 10572  160D  3005               	movlw	5
 10573  160E                     l207:	
 10574  160E  0008               	return
 10575  160F                     __end_of_returnReset:	
 10576                           
 10577                           	psect	text52
 10578  1603                     __ptext52:	
 10579 ;; *************** function _returnStop *****************
 10580 ;; Defined at:
 10581 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  p               1    9[BANK0 ] PTR void 
 10584 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10585 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10586 ;; Auto vars:     Size  Location     Type
 10587 ;;		None
 10588 ;; Return value:  Size  Location     Type
 10589 ;;                  1    wreg      enum E3257
 10590 ;; Registers used:
 10591 ;;		wreg
 10592 ;; Tracked objects:
 10593 ;;		On entry : 0/0
 10594 ;;		On exit  : 0/0
 10595 ;;		Unchanged: 0/0
 10596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10597 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;Total ram usage:        1 bytes
 10602 ;; Hardware stack levels used:    1
 10603 ;; Hardware stack levels required when called:    6
 10604 ;; This function calls:
 10605 ;;		Nothing
 10606 ;; This function is called by:
 10607 ;;		_i2c_open
 10608 ;;		_setCallBack
 10609 ;;		_do_I2C_DO_ADDRESS_NACK
 10610 ;;		_do_I2C_TX
 10611 ;;		_do_I2C_RX
 10612 ;;		_do_I2C_TX_EMPTY
 10613 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10614 ;;		i1_do_I2C_TX
 10615 ;;		i1_do_I2C_RX
 10616 ;;		i1_do_I2C_TX_EMPTY
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           
 10621                           ;psect for function _returnStop
 10622  1603                     _returnStop:	
 10623                           
 10624                           ;Skip over the trampoline to the duplicate function for level 1
 10625  1603  1C7E               	btfss	int$flags,0
 10626  1604  2E07               	goto	_returnStop$intlevel0
 10627  1605  3195  2D75         	ljmp	i1_returnStop
 10628  1607                     _returnStop$intlevel0:	
 10629  1607                     l6469:	
 10630                           ;incstack = 0
 10631                           ; Regs used in _returnStop: [wreg]
 10632                           
 10633                           
 10634                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 10635  1607  3001               	movlw	1
 10636  1608                     l204:	
 10637  1608  0008               	return
 10638  1609                     __end_of_returnStop:	
 10639                           
 10640                           	psect	text53
 10641  085B                     __ptext53:	
 10642 ;; *************** function _wr2RegCompleteHandler *****************
 10643 ;; Defined at:
 10644 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;  p               1    9[BANK0 ] PTR void 
 10647 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10648 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;		None
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      enum E358
 10653 ;; Registers used:
 10654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10660 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;Total ram usage:        1 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:    8
 10667 ;; This function calls:
 10668 ;;		_i2c_setBuffer
 10669 ;;		_i2c_setDataCompleteCallback
 10670 ;; This function is called by:
 10671 ;;		_i2c_write2ByteRegister
 10672 ;;		_do_I2C_DO_ADDRESS_NACK
 10673 ;;		_do_I2C_TX
 10674 ;;		_do_I2C_RX
 10675 ;;		_do_I2C_TX_EMPTY
 10676 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10677 ;;		i1_do_I2C_TX
 10678 ;;		i1_do_I2C_RX
 10679 ;;		i1_do_I2C_TX_EMPTY
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           
 10684                           ;psect for function _wr2RegCompleteHandler
 10685  085B                     _wr2RegCompleteHandler:	
 10686                           
 10687                           ;Skip over the trampoline to the duplicate function for level 1
 10688  085B  1C7E               	btfss	int$flags,0
 10689  085C  285F               	goto	_wr2RegCompleteHandler$intlevel0
 10690  085D  3197  2FA3         	ljmp	i1_wr2RegCompleteHandler
 10691  085F                     _wr2RegCompleteHandler$intlevel0:	
 10692  085F                     l6501:	
 10693                           ;incstack = 0
 10694                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10695                           
 10696                           
 10697                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
 10698  085F  3002               	movlw	2
 10699  0860  0020               	movlb	0	; select bank0
 10700  0861  00D6               	movwf	i2c_setBuffer@bufferSize
 10701  0862  3000               	movlw	0
 10702  0863  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10703  0864  085F               	movf	wr2RegCompleteHandler@p,w
 10704  0865  3188  2044  3188   	fcall	_i2c_setBuffer
 10705  0868                     l6503:	
 10706                           
 10707                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 10708  0868  3000               	movlw	0
 10709  0869  0020               	movlb	0	; select bank0
 10710  086A  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10711  086B  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10712  086C  01DD               	clrf	i2c_setDataCompleteCallback@p
 10713  086D  3197  2749  3188   	fcall	_i2c_setDataCompleteCallback
 10714  0870                     l6505:	
 10715                           
 10716                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
 10717  0870  3004               	movlw	4
 10718  0871                     l279:	
 10719  0871  0008               	return
 10720  0872                     __end_of_wr2RegCompleteHandler:	
 10721                           
 10722                           	psect	text54
 10723  1749                     __ptext54:	
 10724 ;; *************** function _i2c_setDataCompleteCallback *****************
 10725 ;; Defined at:
 10726 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
 10729 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10730 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10731 ;;  p               1    7[BANK0 ] PTR void 
 10732 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10733 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;		None
 10736 ;; Return value:  Size  Location     Type
 10737 ;;                  1    wreg      void 
 10738 ;; Registers used:
 10739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10740 ;; Tracked objects:
 10741 ;;		On entry : 0/0
 10742 ;;		On exit  : 0/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10745 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;Total ram usage:        4 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; Hardware stack levels required when called:    7
 10752 ;; This function calls:
 10753 ;;		_setCallBack
 10754 ;; This function is called by:
 10755 ;;		_wr1RegCompleteHandler
 10756 ;;		_rd1RegCompleteHandler
 10757 ;;		_rd2RegCompleteHandler
 10758 ;;		_wr2RegCompleteHandler
 10759 ;;		_rdBlkRegCompleteHandler
 10760 ;;		_i2c_readDataBlock
 10761 ;;		_i2c_write1ByteRegister
 10762 ;;		_i2c_read1ByteRegister
 10763 ;;		_i2c_read2ByteRegister
 10764 ;;		_i2c_write2ByteRegister
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           
 10769                           ;psect for function _i2c_setDataCompleteCallback
 10770  1749                     _i2c_setDataCompleteCallback:	
 10771  1749                     l6403:	
 10772                           ;incstack = 0
 10773                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10774                           
 10775                           
 10776                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
 10777  1749  0020               	movlb	0	; select bank0
 10778  174A  085C               	movf	i2c_setDataCompleteCallback@cb+1,w
 10779  174B  00D7               	movwf	setCallBack@cb+1
 10780  174C  085B               	movf	i2c_setDataCompleteCallback@cb,w
 10781  174D  00D6               	movwf	setCallBack@cb
 10782  174E  085D               	movf	i2c_setDataCompleteCallback@p,w
 10783  174F  00DE               	movwf	??_i2c_setDataCompleteCallback
 10784  1750  085E               	movf	??_i2c_setDataCompleteCallback,w
 10785  1751  00D8               	movwf	setCallBack@p
 10786  1752  3000               	movlw	0
 10787  1753  318A  2275  3197   	fcall	_setCallBack
 10788  1756                     l61:	
 10789  1756  0008               	return
 10790  1757                     __end_of_i2c_setDataCompleteCallback:	
 10791                           
 10792                           	psect	text55
 10793  0A75                     __ptext55:	
 10794 ;; *************** function _setCallBack *****************
 10795 ;; Defined at:
 10796 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;  idx             1    wreg     enum E3429
 10799 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
 10800 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10801 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 10802 ;;  p               1    2[BANK0 ] PTR void 
 10803 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10804 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;  idx             1    4[BANK0 ] enum E3429
 10807 ;; Return value:  Size  Location     Type
 10808 ;;                  1    wreg      void 
 10809 ;; Registers used:
 10810 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10811 ;; Tracked objects:
 10812 ;;		On entry : 0/0
 10813 ;;		On exit  : 0/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10816 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;Total ram usage:        5 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; Hardware stack levels required when called:    6
 10823 ;; This function calls:
 10824 ;;		Nothing
 10825 ;; This function is called by:
 10826 ;;		_i2c_setDataCompleteCallback
 10827 ;;		_i2c_setAddressNACKCallback
 10828 ;;		_i2c_setWriteCollisionCallback
 10829 ;;		_i2c_setDataNACKCallback
 10830 ;;		_i2c_setTimeOutCallback
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           
 10835                           ;psect for function _setCallBack
 10836  0A75                     _setCallBack:	
 10837                           
 10838                           ;incstack = 0
 10839                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 10840                           ;setCallBack@idx stored from wreg
 10841  0A75  0020               	movlb	0	; select bank0
 10842  0A76  00DA               	movwf	setCallBack@idx
 10843  0A77                     l6397:	
 10844                           
 10845                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
 10846  0A77  0856               	movf	setCallBack@cb,w
 10847  0A78  0457               	iorwf	setCallBack@cb+1,w
 10848  0A79  1903               	btfsc	3,2
 10849  0A7A  2A7C               	goto	u4861
 10850  0A7B  2A7D               	goto	u4860
 10851  0A7C                     u4861:	
 10852  0A7C  2A8E               	goto	l6401
 10853  0A7D                     u4860:	
 10854  0A7D                     l6399:	
 10855                           
 10856                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
 10857  0A7D  355A               	lslf	setCallBack@idx,w
 10858  0A7E  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10859  0A7F  0086               	movwf	6
 10860  0A80  0187               	clrf	7
 10861  0A81  0856               	movf	setCallBack@cb,w
 10862  0A82  3FC0               	movwi [0]fsr1
 10863  0A83  0857               	movf	setCallBack@cb+1,w
 10864  0A84  3FC1               	movwi [1]fsr1
 10865                           
 10866                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
 10867  0A85  0858               	movf	setCallBack@p,w
 10868  0A86  00D9               	movwf	??_setCallBack
 10869  0A87  085A               	movf	setCallBack@idx,w
 10870  0A88  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10871  0A89  0086               	movwf	6
 10872  0A8A  0187               	clrf	7
 10873  0A8B  0859               	movf	??_setCallBack,w
 10874  0A8C  0081               	movwf	1
 10875                           
 10876                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
 10877  0A8D  2A9B               	goto	l212
 10878  0A8E                     l6401:	
 10879                           
 10880                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
 10881  0A8E  355A               	lslf	setCallBack@idx,w
 10882  0A8F  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10883  0A90  0086               	movwf	6
 10884  0A91  0187               	clrf	7
 10885  0A92  3003               	movlw	low _returnStop
 10886  0A93  3FC0               	movwi [0]fsr1
 10887  0A94  3016               	movlw	high _returnStop
 10888  0A95  3FC1               	movwi [1]fsr1
 10889                           
 10890                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
 10891  0A96  085A               	movf	setCallBack@idx,w
 10892  0A97  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10893  0A98  0086               	movwf	6
 10894  0A99  0187               	clrf	7
 10895  0A9A  0181               	clrf	1
 10896  0A9B                     l212:	
 10897  0A9B  0008               	return
 10898  0A9C                     __end_of_setCallBack:	
 10899                           
 10900                           	psect	text56
 10901  0844                     __ptext56:	
 10902 ;; *************** function _i2c_setBuffer *****************
 10903 ;; Defined at:
 10904 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;  buffer          1    wreg     PTR void 
 10907 ;;		 -> rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 10908 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 10909 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 10910 ;;  bufferSize      2    0[BANK0 ] unsigned int 
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;  buffer          1    3[BANK0 ] PTR void 
 10913 ;;		 -> rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 10914 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 10915 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 10916 ;; Return value:  Size  Location     Type
 10917 ;;                  1    wreg      void 
 10918 ;; Registers used:
 10919 ;;		wreg
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;Total ram usage:        4 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    6
 10932 ;; This function calls:
 10933 ;;		Nothing
 10934 ;; This function is called by:
 10935 ;;		_wr1RegCompleteHandler
 10936 ;;		_i2c_writeNBytes
 10937 ;;		_rd1RegCompleteHandler
 10938 ;;		_rd2RegCompleteHandler
 10939 ;;		_wr2RegCompleteHandler
 10940 ;;		_rdBlkRegCompleteHandler
 10941 ;;		_i2c_readDataBlock
 10942 ;;		_i2c_write1ByteRegister
 10943 ;;		_i2c_read1ByteRegister
 10944 ;;		_i2c_read2ByteRegister
 10945 ;;		_i2c_write2ByteRegister
 10946 ;;		_i2c_readNBytes
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           
 10951                           ;psect for function _i2c_setBuffer
 10952  0844                     _i2c_setBuffer:	
 10953                           
 10954                           ;incstack = 0
 10955                           ; Regs used in _i2c_setBuffer: [wreg]
 10956                           ;i2c_setBuffer@buffer stored from wreg
 10957  0844  0020               	movlb	0	; select bank0
 10958  0845  00D9               	movwf	i2c_setBuffer@buffer
 10959  0846                     l6405:	
 10960                           
 10961                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
 10962  0846  0021               	movlb	1	; select bank1
 10963  0847  1D20               	btfss	_i2c_status^(0+128),2
 10964  0848  284A               	goto	u4871
 10965  0849  284B               	goto	u4870
 10966  084A                     u4871:	
 10967  084A  285A               	goto	l91
 10968  084B                     u4870:	
 10969  084B                     l6407:	
 10970                           
 10971                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
 10972  084B  0020               	movlb	0	; select bank0
 10973  084C  0859               	movf	i2c_setBuffer@buffer,w
 10974  084D  00D8               	movwf	??_i2c_setBuffer
 10975  084E  0858               	movf	??_i2c_setBuffer,w
 10976  084F  0021               	movlb	1	; select bank1
 10977  0850  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 10978                           
 10979                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
 10980  0851  0020               	movlb	0	; select bank0
 10981  0852  0857               	movf	i2c_setBuffer@bufferSize+1,w
 10982  0853  0021               	movlb	1	; select bank1
 10983  0854  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
 10984  0855  0020               	movlb	0	; select bank0
 10985  0856  0856               	movf	i2c_setBuffer@bufferSize,w
 10986  0857  0021               	movlb	1	; select bank1
 10987  0858  00A3               	movwf	(_i2c_status^(0+128)+3)
 10988  0859                     l6409:	
 10989                           
 10990                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
 10991  0859  1120               	bcf	_i2c_status^(0+128),2
 10992  085A                     l91:	
 10993  085A  0008               	return
 10994  085B                     __end_of_i2c_setBuffer:	
 10995                           
 10996                           	psect	text57
 10997  159A                     __ptext57:	
 10998 ;; *************** function _i2c_driver_stop *****************
 10999 ;; Defined at:
 11000 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;		None
 11003 ;; Auto vars:     Size  Location     Type
 11004 ;;		None
 11005 ;; Return value:  Size  Location     Type
 11006 ;;                  1    wreg      void 
 11007 ;; Registers used:
 11008 ;;		None
 11009 ;; Tracked objects:
 11010 ;;		On entry : 0/0
 11011 ;;		On exit  : 0/0
 11012 ;;		Unchanged: 0/0
 11013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;Total ram usage:        0 bytes
 11019 ;; Hardware stack levels used:    1
 11020 ;; Hardware stack levels required when called:    6
 11021 ;; This function calls:
 11022 ;;		Nothing
 11023 ;; This function is called by:
 11024 ;;		_do_I2C_SEND_STOP
 11025 ;; This function uses a non-reentrant model
 11026 ;;
 11027                           
 11028                           
 11029                           ;psect for function _i2c_driver_stop
 11030  159A                     _i2c_driver_stop:	
 11031  159A                     l6413:	
 11032                           ;incstack = 0
 11033                           ; Regs used in _i2c_driver_stop: []
 11034                           
 11035                           
 11036                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
 11037  159A  0024               	movlb	4	; select bank4
 11038  159B  1516               	bsf	22,2	;volatile
 11039  159C                     l634:	
 11040  159C  0008               	return
 11041  159D                     __end_of_i2c_driver_stop:	
 11042                           
 11043                           	psect	text58
 11044  1597                     __ptext58:	
 11045 ;; *************** function _i2c_driver_restart *****************
 11046 ;; Defined at:
 11047 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;		None
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;		None
 11052 ;; Return value:  Size  Location     Type
 11053 ;;                  1    wreg      void 
 11054 ;; Registers used:
 11055 ;;		None
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;Total ram usage:        0 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    6
 11068 ;; This function calls:
 11069 ;;		Nothing
 11070 ;; This function is called by:
 11071 ;;		_do_I2C_SEND_RESTART_READ
 11072 ;;		_do_I2C_SEND_RESTART_WRITE
 11073 ;;		_do_I2C_SEND_RESTART
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           
 11078                           ;psect for function _i2c_driver_restart
 11079  1597                     _i2c_driver_restart:	
 11080  1597                     l6411:	
 11081                           ;incstack = 0
 11082                           ; Regs used in _i2c_driver_restart: []
 11083                           
 11084                           
 11085                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
 11086  1597  0024               	movlb	4	; select bank4
 11087  1598  1496               	bsf	22,1	;volatile
 11088  1599                     l631:	
 11089  1599  0008               	return
 11090  159A                     __end_of_i2c_driver_restart:	
 11091                           
 11092                           	psect	text59
 11093  15B7                     __ptext59:	
 11094 ;; *************** function _i2c_driver_sendACK *****************
 11095 ;; Defined at:
 11096 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;		None
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		None
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;Total ram usage:        0 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    6
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_do_I2C_DO_ACK
 11121 ;;		_do_I2C_RX
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           
 11126                           ;psect for function _i2c_driver_sendACK
 11127  15B7                     _i2c_driver_sendACK:	
 11128  15B7                     l6445:	
 11129                           ;incstack = 0
 11130                           ; Regs used in _i2c_driver_sendACK: []
 11131                           
 11132                           
 11133                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
 11134  15B7  0024               	movlb	4	; select bank4
 11135  15B8  1296               	bcf	22,5	;volatile
 11136                           
 11137                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
 11138  15B9  1616               	bsf	22,4	;volatile
 11139  15BA                     l658:	
 11140  15BA  0008               	return
 11141  15BB                     __end_of_i2c_driver_sendACK:	
 11142                           
 11143                           	psect	text60
 11144  1594                     __ptext60:	
 11145 ;; *************** function _i2c_driver_start *****************
 11146 ;; Defined at:
 11147 ;;		line 147 in file "mcc_generated_files/i2c_driver.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		None
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;Total ram usage:        0 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    6
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_i2c_masterOperation
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           
 11176                           ;psect for function _i2c_driver_start
 11177  1594                     _i2c_driver_start:	
 11178  1594                     l6693:	
 11179                           ;incstack = 0
 11180                           ; Regs used in _i2c_driver_start: []
 11181                           
 11182                           
 11183                           ;mcc_generated_files/i2c_driver.c: 149:     SSPCON2bits.SEN = 1;
 11184  1594  0024               	movlb	4	; select bank4
 11185  1595  1416               	bsf	22,0	;volatile
 11186  1596                     l628:	
 11187  1596  0008               	return
 11188  1597                     __end_of_i2c_driver_start:	
 11189                           
 11190                           	psect	text61
 11191  091B                     __ptext61:	
 11192 ;; *************** function _i2c_close *****************
 11193 ;; Defined at:
 11194 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  ret             1    1[BANK0 ] enum E3252
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      enum E3252
 11201 ;; Registers used:
 11202 ;;		wreg, status,2, status,0, pclath, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;Total ram usage:        2 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    7
 11215 ;; This function calls:
 11216 ;;		_mssp_clearIRQ
 11217 ;;		_mssp_disableIRQ
 11218 ;; This function is called by:
 11219 ;;		_i2c_writeNBytes
 11220 ;;		_i2c_readDataBlock
 11221 ;;		_i2c_write1ByteRegister
 11222 ;;		_i2c_read1ByteRegister
 11223 ;;		_i2c_read2ByteRegister
 11224 ;;		_i2c_write2ByteRegister
 11225 ;;		_i2c_readNBytes
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           
 11230                           ;psect for function _i2c_close
 11231  091B                     _i2c_close:	
 11232  091B                     l6791:	
 11233                           ;incstack = 0
 11234                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
 11235                           
 11236                           
 11237                           ;mcc_generated_files/drivers/i2c_master.c: 164:     i2c_error_t ret = I2C_BUSY;
 11238  091B  0020               	movlb	0	; select bank0
 11239  091C  01D7               	clrf	i2c_close@ret
 11240  091D  0AD7               	incf	i2c_close@ret,f
 11241                           
 11242                           ;mcc_generated_files/drivers/i2c_master.c: 165:     if(!i2c_status.busy)
 11243  091E  0021               	movlb	1	; select bank1
 11244  091F  1820               	btfsc	_i2c_status^(0+128),0
 11245  0920  2922               	goto	u5021
 11246  0921  2923               	goto	u5020
 11247  0922                     u5021:	
 11248  0922  2936               	goto	l83
 11249  0923                     u5020:	
 11250  0923                     l6793:	
 11251                           
 11252                           ;mcc_generated_files/drivers/i2c_master.c: 166:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 167:         i2c_status.inUse = 0;
 11253  0923  10A0               	bcf	_i2c_status^(0+128),1
 11254  0924                     l6795:	
 11255                           
 11256                           ;mcc_generated_files/drivers/i2c_master.c: 169:         i2c_status.address = 0xff;
 11257  0924  30FF               	movlw	255
 11258  0925  0020               	movlb	0	; select bank0
 11259  0926  00D6               	movwf	??_i2c_close
 11260  0927  0856               	movf	??_i2c_close,w
 11261  0928  0021               	movlb	1	; select bank1
 11262  0929  00A1               	movwf	(_i2c_status^(0+128)+1)
 11263  092A                     l6797:	
 11264                           
 11265                           ;mcc_generated_files/drivers/i2c_master.c: 170:         mssp_clearIRQ();
 11266  092A  3195  258E  3189   	fcall	_mssp_clearIRQ
 11267  092D                     l6799:	
 11268                           
 11269                           ;mcc_generated_files/drivers/i2c_master.c: 171:         mssp_disableIRQ();
 11270  092D  3195  2591  3189   	fcall	_mssp_disableIRQ
 11271                           
 11272                           ;mcc_generated_files/drivers/i2c_master.c: 172:         ret = i2c_status.error;
 11273  0930  0021               	movlb	1	; select bank1
 11274  0931  082A               	movf	(_i2c_status^(0+128)+10),w
 11275  0932  0020               	movlb	0	; select bank0
 11276  0933  00D6               	movwf	??_i2c_close
 11277  0934  0856               	movf	??_i2c_close,w
 11278  0935  00D7               	movwf	i2c_close@ret
 11279  0936                     l83:	
 11280                           ;mcc_generated_files/drivers/i2c_master.c: 173:     }
 11281                           
 11282                           
 11283                           ;mcc_generated_files/drivers/i2c_master.c: 174:     return ret;
 11284  0936  0020               	movlb	0	; select bank0
 11285  0937  0857               	movf	i2c_close@ret,w
 11286  0938                     l84:	
 11287  0938  0008               	return
 11288  0939                     __end_of_i2c_close:	
 11289                           
 11290                           	psect	text62
 11291  1591                     __ptext62:	
 11292 ;; *************** function _mssp_disableIRQ *****************
 11293 ;; Defined at:
 11294 ;;		line 49 in file "mcc_generated_files/i2c_driver.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;		None
 11297 ;; Auto vars:     Size  Location     Type
 11298 ;;		None
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  1    wreg      void 
 11301 ;; Registers used:
 11302 ;;		None
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;Total ram usage:        0 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; Hardware stack levels required when called:    6
 11315 ;; This function calls:
 11316 ;;		Nothing
 11317 ;; This function is called by:
 11318 ;;		_i2c_close
 11319 ;;		_i2c_setTimeOut
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           
 11324                           ;psect for function _mssp_disableIRQ
 11325  1591                     _mssp_disableIRQ:	
 11326  1591                     l6729:	
 11327                           ;incstack = 0
 11328                           ; Regs used in _mssp_disableIRQ: []
 11329                           
 11330                           
 11331                           ;mcc_generated_files/i2c_driver.c: 51: __bit i2c_driver_open(void)
 11332  1591  0021               	movlb	1	; select bank1
 11333  1592  1191               	bcf	17,3	;volatile
 11334  1593                     l596:	
 11335  1593  0008               	return
 11336  1594                     __end_of_mssp_disableIRQ:	
 11337                           
 11338                           	psect	text63
 11339  158E                     __ptext63:	
 11340 ;; *************** function _mssp_clearIRQ *****************
 11341 ;; Defined at:
 11342 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;		None
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;		None
 11347 ;; Return value:  Size  Location     Type
 11348 ;;                  1    wreg      void 
 11349 ;; Registers used:
 11350 ;;		None
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;Total ram usage:        0 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    6
 11363 ;; This function calls:
 11364 ;;		Nothing
 11365 ;; This function is called by:
 11366 ;;		_i2c_open
 11367 ;;		_i2c_close
 11368 ;;		_i2c_ISR
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           
 11373                           ;psect for function _mssp_clearIRQ
 11374  158E                     _mssp_clearIRQ:	
 11375  158E                     l6519:	
 11376                           ;incstack = 0
 11377                           ; Regs used in _mssp_clearIRQ: []
 11378                           
 11379                           
 11380                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
 11381  158E  0020               	movlb	0	; select bank0
 11382  158F  1191               	bcf	17,3	;volatile
 11383  1590                     l599:	
 11384  1590  0008               	return
 11385  1591                     __end_of_mssp_clearIRQ:	
 11386                           
 11387                           	psect	text64
 11388  0803                     __ptext64:	
 11389 ;; *************** function _bcdMonthIncr *****************
 11390 ;; Defined at:
 11391 ;;		line 306 in file "main.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  mo              1    wreg     unsigned char 
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;  mo              1    0[BANK0 ] unsigned char 
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  1    wreg      unsigned char 
 11398 ;; Registers used:
 11399 ;;		wreg, status,2, status,0
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;Total ram usage:        1 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    6
 11412 ;; This function calls:
 11413 ;;		Nothing
 11414 ;; This function is called by:
 11415 ;;		_main
 11416 ;; This function uses a non-reentrant model
 11417 ;;
 11418                           
 11419                           
 11420                           ;psect for function _bcdMonthIncr
 11421  0803                     _bcdMonthIncr:	
 11422                           
 11423                           ;incstack = 0
 11424                           ; Regs used in _bcdMonthIncr: [wreg+status,2+status,0]
 11425                           ;bcdMonthIncr@mo stored from wreg
 11426  0803  0020               	movlb	0	; select bank0
 11427  0804  00D6               	movwf	bcdMonthIncr@mo
 11428  0805                     l7393:	
 11429                           
 11430                           ;main.c: 308:     if(mo == 0x09) return 0x10;
 11431  0805  3009               	movlw	9
 11432  0806  0656               	xorwf	bcdMonthIncr@mo,w
 11433  0807  1D03               	btfss	3,2
 11434  0808  280A               	goto	u5501
 11435  0809  280B               	goto	u5500
 11436  080A                     u5501:	
 11437  080A  280D               	goto	l7399
 11438  080B                     u5500:	
 11439  080B                     l7395:	
 11440  080B  3010               	movlw	16
 11441  080C  2817               	goto	l971
 11442  080D                     l7399:	
 11443                           
 11444                           ;main.c: 309:     if(mo == 0x12) return 0x01;
 11445  080D  3012               	movlw	18
 11446  080E  0656               	xorwf	bcdMonthIncr@mo,w
 11447  080F  1D03               	btfss	3,2
 11448  0810  2812               	goto	u5511
 11449  0811  2813               	goto	u5510
 11450  0812                     u5511:	
 11451  0812  2815               	goto	l7405
 11452  0813                     u5510:	
 11453  0813                     l7401:	
 11454  0813  3001               	movlw	1
 11455  0814  2817               	goto	l971
 11456  0815                     l7405:	
 11457                           
 11458                           ;main.c: 310:     return (mo + 1);
 11459  0815  0856               	movf	bcdMonthIncr@mo,w
 11460  0816  3E01               	addlw	1
 11461  0817                     l971:	
 11462  0817  0008               	return
 11463  0818                     __end_of_bcdMonthIncr:	
 11464                           
 11465                           	psect	text65
 11466  17EB                     __ptext65:	
 11467 ;; *************** function _bcdMonthDecr *****************
 11468 ;; Defined at:
 11469 ;;		line 313 in file "main.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  mo              1    wreg     unsigned char 
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;  mo              1    0[BANK0 ] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  1    wreg      unsigned char 
 11476 ;; Registers used:
 11477 ;;		wreg, status,2, status,0
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;Total ram usage:        1 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    6
 11490 ;; This function calls:
 11491 ;;		Nothing
 11492 ;; This function is called by:
 11493 ;;		_main
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           
 11498                           ;psect for function _bcdMonthDecr
 11499  17EB                     _bcdMonthDecr:	
 11500                           
 11501                           ;incstack = 0
 11502                           ; Regs used in _bcdMonthDecr: [wreg+status,2+status,0]
 11503                           ;bcdMonthDecr@mo stored from wreg
 11504  17EB  0020               	movlb	0	; select bank0
 11505  17EC  00D6               	movwf	bcdMonthDecr@mo
 11506  17ED                     l7409:	
 11507                           
 11508                           ;main.c: 314:     if(mo <= 0x01) return 0x12;
 11509  17ED  3002               	movlw	2
 11510  17EE  0256               	subwf	bcdMonthDecr@mo,w
 11511  17EF  1803               	skipnc
 11512  17F0  2FF2               	goto	u5521
 11513  17F1  2FF3               	goto	u5520
 11514  17F2                     u5521:	
 11515  17F2  2FF5               	goto	l7415
 11516  17F3                     u5520:	
 11517  17F3                     l7411:	
 11518  17F3  3012               	movlw	18
 11519  17F4  2FFF               	goto	l976
 11520  17F5                     l7415:	
 11521                           
 11522                           ;main.c: 315:     if(mo == 0x10) return 0x09;
 11523  17F5  3010               	movlw	16
 11524  17F6  0656               	xorwf	bcdMonthDecr@mo,w
 11525  17F7  1D03               	btfss	3,2
 11526  17F8  2FFA               	goto	u5531
 11527  17F9  2FFB               	goto	u5530
 11528  17FA                     u5531:	
 11529  17FA  2FFD               	goto	l7421
 11530  17FB                     u5530:	
 11531  17FB                     l7417:	
 11532  17FB  3009               	movlw	9
 11533  17FC  2FFF               	goto	l976
 11534  17FD                     l7421:	
 11535                           
 11536                           ;main.c: 316:     return (mo - 1);
 11537  17FD  0856               	movf	bcdMonthDecr@mo,w
 11538  17FE  3EFF               	addlw	255
 11539  17FF                     l976:	
 11540  17FF  0008               	return
 11541  1800                     __end_of_bcdMonthDecr:	
 11542                           
 11543                           	psect	text66
 11544  0CD5                     __ptext66:	
 11545 ;; *************** function _bcdMinuteIncr *****************
 11546 ;; Defined at:
 11547 ;;		line 284 in file "main.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;  mn              1    wreg     unsigned char 
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;  mn              1    1[BANK0 ] unsigned char 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;                  1    wreg      unsigned char 
 11554 ;; Registers used:
 11555 ;;		wreg, status,2, status,0
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;Total ram usage:        2 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    6
 11568 ;; This function calls:
 11569 ;;		Nothing
 11570 ;; This function is called by:
 11571 ;;		_main
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           
 11576                           ;psect for function _bcdMinuteIncr
 11577  0CD5                     _bcdMinuteIncr:	
 11578                           
 11579                           ;incstack = 0
 11580                           ; Regs used in _bcdMinuteIncr: [wreg+status,2+status,0]
 11581                           ;bcdMinuteIncr@mn stored from wreg
 11582  0CD5  0020               	movlb	0	; select bank0
 11583  0CD6  00D7               	movwf	bcdMinuteIncr@mn
 11584  0CD7                     l7309:	
 11585                           
 11586                           ;main.c: 285:     mn &= 0x7F;
 11587  0CD7  307F               	movlw	127
 11588  0CD8  00D6               	movwf	??_bcdMinuteIncr
 11589  0CD9  0856               	movf	??_bcdMinuteIncr,w
 11590  0CDA  05D7               	andwf	bcdMinuteIncr@mn,f
 11591  0CDB                     l7311:	
 11592                           
 11593                           ;main.c: 286:     if(mn == 0x09) return 0x10;
 11594  0CDB  3009               	movlw	9
 11595  0CDC  0657               	xorwf	bcdMinuteIncr@mn,w
 11596  0CDD  1D03               	btfss	3,2
 11597  0CDE  2CE0               	goto	u5381
 11598  0CDF  2CE1               	goto	u5380
 11599  0CE0                     u5381:	
 11600  0CE0  2CE3               	goto	l7317
 11601  0CE1                     u5380:	
 11602  0CE1                     l7313:	
 11603  0CE1  3010               	movlw	16
 11604  0CE2  2D0D               	goto	l953
 11605  0CE3                     l7317:	
 11606                           
 11607                           ;main.c: 287:     if(mn == 0x19) return 0x20;
 11608  0CE3  3019               	movlw	25
 11609  0CE4  0657               	xorwf	bcdMinuteIncr@mn,w
 11610  0CE5  1D03               	btfss	3,2
 11611  0CE6  2CE8               	goto	u5391
 11612  0CE7  2CE9               	goto	u5390
 11613  0CE8                     u5391:	
 11614  0CE8  2CEB               	goto	l7323
 11615  0CE9                     u5390:	
 11616  0CE9                     l7319:	
 11617  0CE9  3020               	movlw	32
 11618  0CEA  2D0D               	goto	l953
 11619  0CEB                     l7323:	
 11620                           
 11621                           ;main.c: 288:     if(mn == 0x29) return 0x30;
 11622  0CEB  3029               	movlw	41
 11623  0CEC  0657               	xorwf	bcdMinuteIncr@mn,w
 11624  0CED  1D03               	btfss	3,2
 11625  0CEE  2CF0               	goto	u5401
 11626  0CEF  2CF1               	goto	u5400
 11627  0CF0                     u5401:	
 11628  0CF0  2CF3               	goto	l7329
 11629  0CF1                     u5400:	
 11630  0CF1                     l7325:	
 11631  0CF1  3030               	movlw	48
 11632  0CF2  2D0D               	goto	l953
 11633  0CF3                     l7329:	
 11634                           
 11635                           ;main.c: 289:     if(mn == 0x39) return 0x40;
 11636  0CF3  3039               	movlw	57
 11637  0CF4  0657               	xorwf	bcdMinuteIncr@mn,w
 11638  0CF5  1D03               	btfss	3,2
 11639  0CF6  2CF8               	goto	u5411
 11640  0CF7  2CF9               	goto	u5410
 11641  0CF8                     u5411:	
 11642  0CF8  2CFB               	goto	l7335
 11643  0CF9                     u5410:	
 11644  0CF9                     l7331:	
 11645  0CF9  3040               	movlw	64
 11646  0CFA  2D0D               	goto	l953
 11647  0CFB                     l7335:	
 11648                           
 11649                           ;main.c: 290:     if(mn == 0x49) return 0x50;
 11650  0CFB  3049               	movlw	73
 11651  0CFC  0657               	xorwf	bcdMinuteIncr@mn,w
 11652  0CFD  1D03               	btfss	3,2
 11653  0CFE  2D00               	goto	u5421
 11654  0CFF  2D01               	goto	u5420
 11655  0D00                     u5421:	
 11656  0D00  2D03               	goto	l7341
 11657  0D01                     u5420:	
 11658  0D01                     l7337:	
 11659  0D01  3050               	movlw	80
 11660  0D02  2D0D               	goto	l953
 11661  0D03                     l7341:	
 11662                           
 11663                           ;main.c: 291:     if(mn == 0x59) return 0x00;
 11664  0D03  3059               	movlw	89
 11665  0D04  0657               	xorwf	bcdMinuteIncr@mn,w
 11666  0D05  1D03               	btfss	3,2
 11667  0D06  2D08               	goto	u5431
 11668  0D07  2D09               	goto	u5430
 11669  0D08                     u5431:	
 11670  0D08  2D0B               	goto	l7347
 11671  0D09                     u5430:	
 11672  0D09                     l7343:	
 11673  0D09  3000               	movlw	0
 11674  0D0A  2D0D               	goto	l953
 11675  0D0B                     l7347:	
 11676                           
 11677                           ;main.c: 292:     return (mn + 1);
 11678  0D0B  0857               	movf	bcdMinuteIncr@mn,w
 11679  0D0C  3E01               	addlw	1
 11680  0D0D                     l953:	
 11681  0D0D  0008               	return
 11682  0D0E                     __end_of_bcdMinuteIncr:	
 11683                           
 11684                           	psect	text67
 11685  0C9D                     __ptext67:	
 11686 ;; *************** function _bcdMinuteDecr *****************
 11687 ;; Defined at:
 11688 ;;		line 295 in file "main.c"
 11689 ;; Parameters:    Size  Location     Type
 11690 ;;  mn              1    wreg     unsigned char 
 11691 ;; Auto vars:     Size  Location     Type
 11692 ;;  mn              1    1[BANK0 ] unsigned char 
 11693 ;; Return value:  Size  Location     Type
 11694 ;;                  1    wreg      unsigned char 
 11695 ;; Registers used:
 11696 ;;		wreg, status,2, status,0
 11697 ;; Tracked objects:
 11698 ;;		On entry : 0/0
 11699 ;;		On exit  : 0/0
 11700 ;;		Unchanged: 0/0
 11701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11706 ;;Total ram usage:        2 bytes
 11707 ;; Hardware stack levels used:    1
 11708 ;; Hardware stack levels required when called:    6
 11709 ;; This function calls:
 11710 ;;		Nothing
 11711 ;; This function is called by:
 11712 ;;		_main
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           
 11717                           ;psect for function _bcdMinuteDecr
 11718  0C9D                     _bcdMinuteDecr:	
 11719                           
 11720                           ;incstack = 0
 11721                           ; Regs used in _bcdMinuteDecr: [wreg+status,2+status,0]
 11722                           ;bcdMinuteDecr@mn stored from wreg
 11723  0C9D  0020               	movlb	0	; select bank0
 11724  0C9E  00D7               	movwf	bcdMinuteDecr@mn
 11725  0C9F                     l7351:	
 11726                           
 11727                           ;main.c: 296:     mn &= 0x7F;
 11728  0C9F  307F               	movlw	127
 11729  0CA0  00D6               	movwf	??_bcdMinuteDecr
 11730  0CA1  0856               	movf	??_bcdMinuteDecr,w
 11731  0CA2  05D7               	andwf	bcdMinuteDecr@mn,f
 11732  0CA3                     l7353:	
 11733                           
 11734                           ;main.c: 297:     if(mn == 0x00) return 0x59;
 11735  0CA3  0857               	movf	bcdMinuteDecr@mn,w
 11736  0CA4  1D03               	btfss	3,2
 11737  0CA5  2CA7               	goto	u5441
 11738  0CA6  2CA8               	goto	u5440
 11739  0CA7                     u5441:	
 11740  0CA7  2CAA               	goto	l7359
 11741  0CA8                     u5440:	
 11742  0CA8                     l7355:	
 11743  0CA8  3059               	movlw	89
 11744  0CA9  2CD4               	goto	l962
 11745  0CAA                     l7359:	
 11746                           
 11747                           ;main.c: 298:     if(mn == 0x10) return 0x09;
 11748  0CAA  3010               	movlw	16
 11749  0CAB  0657               	xorwf	bcdMinuteDecr@mn,w
 11750  0CAC  1D03               	btfss	3,2
 11751  0CAD  2CAF               	goto	u5451
 11752  0CAE  2CB0               	goto	u5450
 11753  0CAF                     u5451:	
 11754  0CAF  2CB2               	goto	l7365
 11755  0CB0                     u5450:	
 11756  0CB0                     l7361:	
 11757  0CB0  3009               	movlw	9
 11758  0CB1  2CD4               	goto	l962
 11759  0CB2                     l7365:	
 11760                           
 11761                           ;main.c: 299:     if(mn == 0x20) return 0x19;
 11762  0CB2  3020               	movlw	32
 11763  0CB3  0657               	xorwf	bcdMinuteDecr@mn,w
 11764  0CB4  1D03               	btfss	3,2
 11765  0CB5  2CB7               	goto	u5461
 11766  0CB6  2CB8               	goto	u5460
 11767  0CB7                     u5461:	
 11768  0CB7  2CBA               	goto	l7371
 11769  0CB8                     u5460:	
 11770  0CB8                     l7367:	
 11771  0CB8  3019               	movlw	25
 11772  0CB9  2CD4               	goto	l962
 11773  0CBA                     l7371:	
 11774                           
 11775                           ;main.c: 300:     if(mn == 0x30) return 0x29;
 11776  0CBA  3030               	movlw	48
 11777  0CBB  0657               	xorwf	bcdMinuteDecr@mn,w
 11778  0CBC  1D03               	btfss	3,2
 11779  0CBD  2CBF               	goto	u5471
 11780  0CBE  2CC0               	goto	u5470
 11781  0CBF                     u5471:	
 11782  0CBF  2CC2               	goto	l7377
 11783  0CC0                     u5470:	
 11784  0CC0                     l7373:	
 11785  0CC0  3029               	movlw	41
 11786  0CC1  2CD4               	goto	l962
 11787  0CC2                     l7377:	
 11788                           
 11789                           ;main.c: 301:     if(mn == 0x40) return 0x39;
 11790  0CC2  3040               	movlw	64
 11791  0CC3  0657               	xorwf	bcdMinuteDecr@mn,w
 11792  0CC4  1D03               	btfss	3,2
 11793  0CC5  2CC7               	goto	u5481
 11794  0CC6  2CC8               	goto	u5480
 11795  0CC7                     u5481:	
 11796  0CC7  2CCA               	goto	l7383
 11797  0CC8                     u5480:	
 11798  0CC8                     l7379:	
 11799  0CC8  3039               	movlw	57
 11800  0CC9  2CD4               	goto	l962
 11801  0CCA                     l7383:	
 11802                           
 11803                           ;main.c: 302:     if(mn == 0x50) return 0x49;
 11804  0CCA  3050               	movlw	80
 11805  0CCB  0657               	xorwf	bcdMinuteDecr@mn,w
 11806  0CCC  1D03               	btfss	3,2
 11807  0CCD  2CCF               	goto	u5491
 11808  0CCE  2CD0               	goto	u5490
 11809  0CCF                     u5491:	
 11810  0CCF  2CD2               	goto	l7389
 11811  0CD0                     u5490:	
 11812  0CD0                     l7385:	
 11813  0CD0  3049               	movlw	73
 11814  0CD1  2CD4               	goto	l962
 11815  0CD2                     l7389:	
 11816                           
 11817                           ;main.c: 303:     return (mn - 1);
 11818  0CD2  0857               	movf	bcdMinuteDecr@mn,w
 11819  0CD3  3EFF               	addlw	255
 11820  0CD4                     l962:	
 11821  0CD4  0008               	return
 11822  0CD5                     __end_of_bcdMinuteDecr:	
 11823                           
 11824                           	psect	text68
 11825  0977                     __ptext68:	
 11826 ;; *************** function _bcdHourIncr *****************
 11827 ;; Defined at:
 11828 ;;		line 268 in file "main.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;  hr              1    wreg     unsigned char 
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;  hr              1    1[BANK0 ] unsigned char 
 11833 ;; Return value:  Size  Location     Type
 11834 ;;                  1    wreg      unsigned char 
 11835 ;; Registers used:
 11836 ;;		wreg, status,2, status,0
 11837 ;; Tracked objects:
 11838 ;;		On entry : 0/0
 11839 ;;		On exit  : 0/0
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;Total ram usage:        2 bytes
 11847 ;; Hardware stack levels used:    1
 11848 ;; Hardware stack levels required when called:    6
 11849 ;; This function calls:
 11850 ;;		Nothing
 11851 ;; This function is called by:
 11852 ;;		_main
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           
 11857                           ;psect for function _bcdHourIncr
 11858  0977                     _bcdHourIncr:	
 11859                           
 11860                           ;incstack = 0
 11861                           ; Regs used in _bcdHourIncr: [wreg+status,2+status,0]
 11862                           ;bcdHourIncr@hr stored from wreg
 11863  0977  0020               	movlb	0	; select bank0
 11864  0978  00D7               	movwf	bcdHourIncr@hr
 11865  0979                     l7261:	
 11866                           
 11867                           ;main.c: 269:     hr &= 0x7F;
 11868  0979  307F               	movlw	127
 11869  097A  00D6               	movwf	??_bcdHourIncr
 11870  097B  0856               	movf	??_bcdHourIncr,w
 11871  097C  05D7               	andwf	bcdHourIncr@hr,f
 11872  097D                     l7263:	
 11873                           
 11874                           ;main.c: 270:     if(hr == 0x09) return 0x10;
 11875  097D  3009               	movlw	9
 11876  097E  0657               	xorwf	bcdHourIncr@hr,w
 11877  097F  1D03               	btfss	3,2
 11878  0980  2982               	goto	u5321
 11879  0981  2983               	goto	u5320
 11880  0982                     u5321:	
 11881  0982  2985               	goto	l7269
 11882  0983                     u5320:	
 11883  0983                     l7265:	
 11884  0983  3010               	movlw	16
 11885  0984  2997               	goto	l941
 11886  0985                     l7269:	
 11887                           
 11888                           ;main.c: 271:     if(hr == 0x19) return 0x20;
 11889  0985  3019               	movlw	25
 11890  0986  0657               	xorwf	bcdHourIncr@hr,w
 11891  0987  1D03               	btfss	3,2
 11892  0988  298A               	goto	u5331
 11893  0989  298B               	goto	u5330
 11894  098A                     u5331:	
 11895  098A  298D               	goto	l7275
 11896  098B                     u5330:	
 11897  098B                     l7271:	
 11898  098B  3020               	movlw	32
 11899  098C  2997               	goto	l941
 11900  098D                     l7275:	
 11901                           
 11902                           ;main.c: 272:     if(hr == 0x23) return 0x00;
 11903  098D  3023               	movlw	35
 11904  098E  0657               	xorwf	bcdHourIncr@hr,w
 11905  098F  1D03               	btfss	3,2
 11906  0990  2992               	goto	u5341
 11907  0991  2993               	goto	u5340
 11908  0992                     u5341:	
 11909  0992  2995               	goto	l7281
 11910  0993                     u5340:	
 11911  0993                     l7277:	
 11912  0993  3000               	movlw	0
 11913  0994  2997               	goto	l941
 11914  0995                     l7281:	
 11915                           
 11916                           ;main.c: 273:     return (hr + 1);
 11917  0995  0857               	movf	bcdHourIncr@hr,w
 11918  0996  3E01               	addlw	1
 11919  0997                     l941:	
 11920  0997  0008               	return
 11921  0998                     __end_of_bcdHourIncr:	
 11922                           
 11923                           	psect	text69
 11924  0957                     __ptext69:	
 11925 ;; *************** function _bcdHourDecr *****************
 11926 ;; Defined at:
 11927 ;;		line 276 in file "main.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  hr              1    wreg     unsigned char 
 11930 ;; Auto vars:     Size  Location     Type
 11931 ;;  hr              1    1[BANK0 ] unsigned char 
 11932 ;; Return value:  Size  Location     Type
 11933 ;;                  1    wreg      unsigned char 
 11934 ;; Registers used:
 11935 ;;		wreg, status,2, status,0
 11936 ;; Tracked objects:
 11937 ;;		On entry : 0/0
 11938 ;;		On exit  : 0/0
 11939 ;;		Unchanged: 0/0
 11940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;Total ram usage:        2 bytes
 11946 ;; Hardware stack levels used:    1
 11947 ;; Hardware stack levels required when called:    6
 11948 ;; This function calls:
 11949 ;;		Nothing
 11950 ;; This function is called by:
 11951 ;;		_main
 11952 ;; This function uses a non-reentrant model
 11953 ;;
 11954                           
 11955                           
 11956                           ;psect for function _bcdHourDecr
 11957  0957                     _bcdHourDecr:	
 11958                           
 11959                           ;incstack = 0
 11960                           ; Regs used in _bcdHourDecr: [wreg+status,2+status,0]
 11961                           ;bcdHourDecr@hr stored from wreg
 11962  0957  0020               	movlb	0	; select bank0
 11963  0958  00D7               	movwf	bcdHourDecr@hr
 11964  0959                     l7285:	
 11965                           
 11966                           ;main.c: 277:     hr &= 0x7F;
 11967  0959  307F               	movlw	127
 11968  095A  00D6               	movwf	??_bcdHourDecr
 11969  095B  0856               	movf	??_bcdHourDecr,w
 11970  095C  05D7               	andwf	bcdHourDecr@hr,f
 11971  095D                     l7287:	
 11972                           
 11973                           ;main.c: 278:     if(hr == 0x00) return 0x23;
 11974  095D  0857               	movf	bcdHourDecr@hr,w
 11975  095E  1D03               	btfss	3,2
 11976  095F  2961               	goto	u5351
 11977  0960  2962               	goto	u5350
 11978  0961                     u5351:	
 11979  0961  2964               	goto	l7293
 11980  0962                     u5350:	
 11981  0962                     l7289:	
 11982  0962  3023               	movlw	35
 11983  0963  2976               	goto	l947
 11984  0964                     l7293:	
 11985                           
 11986                           ;main.c: 279:     if(hr == 0x10) return 0x09;
 11987  0964  3010               	movlw	16
 11988  0965  0657               	xorwf	bcdHourDecr@hr,w
 11989  0966  1D03               	btfss	3,2
 11990  0967  2969               	goto	u5361
 11991  0968  296A               	goto	u5360
 11992  0969                     u5361:	
 11993  0969  296C               	goto	l7299
 11994  096A                     u5360:	
 11995  096A                     l7295:	
 11996  096A  3009               	movlw	9
 11997  096B  2976               	goto	l947
 11998  096C                     l7299:	
 11999                           
 12000                           ;main.c: 280:     if(hr == 0x20) return 0x19;
 12001  096C  3020               	movlw	32
 12002  096D  0657               	xorwf	bcdHourDecr@hr,w
 12003  096E  1D03               	btfss	3,2
 12004  096F  2971               	goto	u5371
 12005  0970  2972               	goto	u5370
 12006  0971                     u5371:	
 12007  0971  2974               	goto	l7305
 12008  0972                     u5370:	
 12009  0972                     l7301:	
 12010  0972  3019               	movlw	25
 12011  0973  2976               	goto	l947
 12012  0974                     l7305:	
 12013                           
 12014                           ;main.c: 281:     return (hr - 1);
 12015  0974  0857               	movf	bcdHourDecr@hr,w
 12016  0975  3EFF               	addlw	255
 12017  0976                     l947:	
 12018  0976  0008               	return
 12019  0977                     __end_of_bcdHourDecr:	
 12020                           
 12021                           	psect	text70
 12022  0A2A                     __ptext70:	
 12023 ;; *************** function _bcdDateIncr *****************
 12024 ;; Defined at:
 12025 ;;		line 319 in file "main.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;  dt              1    wreg     unsigned char 
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;  dt              1    0[BANK0 ] unsigned char 
 12030 ;; Return value:  Size  Location     Type
 12031 ;;                  1    wreg      unsigned char 
 12032 ;; Registers used:
 12033 ;;		wreg, status,2, status,0
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;Total ram usage:        1 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    6
 12046 ;; This function calls:
 12047 ;;		Nothing
 12048 ;; This function is called by:
 12049 ;;		_main
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           
 12054                           ;psect for function _bcdDateIncr
 12055  0A2A                     _bcdDateIncr:	
 12056                           
 12057                           ;incstack = 0
 12058                           ; Regs used in _bcdDateIncr: [wreg+status,2+status,0]
 12059                           ;bcdDateIncr@dt stored from wreg
 12060  0A2A  0020               	movlb	0	; select bank0
 12061  0A2B  00D6               	movwf	bcdDateIncr@dt
 12062  0A2C                     l7425:	
 12063                           
 12064                           ;main.c: 320:     if(dt >= 0x31) return 0x01;
 12065  0A2C  3031               	movlw	49
 12066  0A2D  0256               	subwf	bcdDateIncr@dt,w
 12067  0A2E  1C03               	skipc
 12068  0A2F  2A31               	goto	u5541
 12069  0A30  2A32               	goto	u5540
 12070  0A31                     u5541:	
 12071  0A31  2A34               	goto	l7431
 12072  0A32                     u5540:	
 12073  0A32                     l7427:	
 12074  0A32  3001               	movlw	1
 12075  0A33  2A4E               	goto	l981
 12076  0A34                     l7431:	
 12077                           
 12078                           ;main.c: 321:     if(dt == 0x09) return 0x10;
 12079  0A34  3009               	movlw	9
 12080  0A35  0656               	xorwf	bcdDateIncr@dt,w
 12081  0A36  1D03               	btfss	3,2
 12082  0A37  2A39               	goto	u5551
 12083  0A38  2A3A               	goto	u5550
 12084  0A39                     u5551:	
 12085  0A39  2A3C               	goto	l7437
 12086  0A3A                     u5550:	
 12087  0A3A                     l7433:	
 12088  0A3A  3010               	movlw	16
 12089  0A3B  2A4E               	goto	l981
 12090  0A3C                     l7437:	
 12091                           
 12092                           ;main.c: 322:     if(dt == 0x19) return 0x20;
 12093  0A3C  3019               	movlw	25
 12094  0A3D  0656               	xorwf	bcdDateIncr@dt,w
 12095  0A3E  1D03               	btfss	3,2
 12096  0A3F  2A41               	goto	u5561
 12097  0A40  2A42               	goto	u5560
 12098  0A41                     u5561:	
 12099  0A41  2A44               	goto	l7443
 12100  0A42                     u5560:	
 12101  0A42                     l7439:	
 12102  0A42  3020               	movlw	32
 12103  0A43  2A4E               	goto	l981
 12104  0A44                     l7443:	
 12105                           
 12106                           ;main.c: 323:     if(dt == 0x29) return 0x30;
 12107  0A44  3029               	movlw	41
 12108  0A45  0656               	xorwf	bcdDateIncr@dt,w
 12109  0A46  1D03               	btfss	3,2
 12110  0A47  2A49               	goto	u5571
 12111  0A48  2A4A               	goto	u5570
 12112  0A49                     u5571:	
 12113  0A49  2A4C               	goto	l7449
 12114  0A4A                     u5570:	
 12115  0A4A                     l7445:	
 12116  0A4A  3030               	movlw	48
 12117  0A4B  2A4E               	goto	l981
 12118  0A4C                     l7449:	
 12119                           
 12120                           ;main.c: 324:     return (dt + 1);
 12121  0A4C  0856               	movf	bcdDateIncr@dt,w
 12122  0A4D  3E01               	addlw	1
 12123  0A4E                     l981:	
 12124  0A4E  0008               	return
 12125  0A4F                     __end_of_bcdDateIncr:	
 12126                           
 12127                           	psect	text71
 12128  0A05                     __ptext71:	
 12129 ;; *************** function _bcdDateDecr *****************
 12130 ;; Defined at:
 12131 ;;		line 327 in file "main.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;  dt              1    wreg     unsigned char 
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;  dt              1    0[BANK0 ] unsigned char 
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  1    wreg      unsigned char 
 12138 ;; Registers used:
 12139 ;;		wreg, status,2, status,0
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;Total ram usage:        1 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:    6
 12152 ;; This function calls:
 12153 ;;		Nothing
 12154 ;; This function is called by:
 12155 ;;		_main
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           
 12160                           ;psect for function _bcdDateDecr
 12161  0A05                     _bcdDateDecr:	
 12162                           
 12163                           ;incstack = 0
 12164                           ; Regs used in _bcdDateDecr: [wreg+status,2+status,0]
 12165                           ;bcdDateDecr@dt stored from wreg
 12166  0A05  0020               	movlb	0	; select bank0
 12167  0A06  00D6               	movwf	bcdDateDecr@dt
 12168  0A07                     l7453:	
 12169                           
 12170                           ;main.c: 328:     if(dt <= 0x01) return 0x31;
 12171  0A07  3002               	movlw	2
 12172  0A08  0256               	subwf	bcdDateDecr@dt,w
 12173  0A09  1803               	skipnc
 12174  0A0A  2A0C               	goto	u5581
 12175  0A0B  2A0D               	goto	u5580
 12176  0A0C                     u5581:	
 12177  0A0C  2A0F               	goto	l7459
 12178  0A0D                     u5580:	
 12179  0A0D                     l7455:	
 12180  0A0D  3031               	movlw	49
 12181  0A0E  2A29               	goto	l988
 12182  0A0F                     l7459:	
 12183                           
 12184                           ;main.c: 329:     if(dt == 0x10) return 0x09;
 12185  0A0F  3010               	movlw	16
 12186  0A10  0656               	xorwf	bcdDateDecr@dt,w
 12187  0A11  1D03               	btfss	3,2
 12188  0A12  2A14               	goto	u5591
 12189  0A13  2A15               	goto	u5590
 12190  0A14                     u5591:	
 12191  0A14  2A17               	goto	l7465
 12192  0A15                     u5590:	
 12193  0A15                     l7461:	
 12194  0A15  3009               	movlw	9
 12195  0A16  2A29               	goto	l988
 12196  0A17                     l7465:	
 12197                           
 12198                           ;main.c: 330:     if(dt == 0x20) return 0x19;
 12199  0A17  3020               	movlw	32
 12200  0A18  0656               	xorwf	bcdDateDecr@dt,w
 12201  0A19  1D03               	btfss	3,2
 12202  0A1A  2A1C               	goto	u5601
 12203  0A1B  2A1D               	goto	u5600
 12204  0A1C                     u5601:	
 12205  0A1C  2A1F               	goto	l7471
 12206  0A1D                     u5600:	
 12207  0A1D                     l7467:	
 12208  0A1D  3019               	movlw	25
 12209  0A1E  2A29               	goto	l988
 12210  0A1F                     l7471:	
 12211                           
 12212                           ;main.c: 331:     if(dt == 0x30) return 0x29;
 12213  0A1F  3030               	movlw	48
 12214  0A20  0656               	xorwf	bcdDateDecr@dt,w
 12215  0A21  1D03               	btfss	3,2
 12216  0A22  2A24               	goto	u5611
 12217  0A23  2A25               	goto	u5610
 12218  0A24                     u5611:	
 12219  0A24  2A27               	goto	l7477
 12220  0A25                     u5610:	
 12221  0A25                     l7473:	
 12222  0A25  3029               	movlw	41
 12223  0A26  2A29               	goto	l988
 12224  0A27                     l7477:	
 12225                           
 12226                           ;main.c: 332:     return (dt - 1);
 12227  0A27  0856               	movf	bcdDateDecr@dt,w
 12228  0A28  3EFF               	addlw	255
 12229  0A29                     l988:	
 12230  0A29  0008               	return
 12231  0A2A                     __end_of_bcdDateDecr:	
 12232                           
 12233                           	psect	text72
 12234  082E                     __ptext72:	
 12235 ;; *************** function _SYSTEM_Initialize *****************
 12236 ;; Defined at:
 12237 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;		None
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;		None
 12242 ;; Return value:  Size  Location     Type
 12243 ;;                  1    wreg      void 
 12244 ;; Registers used:
 12245 ;;		wreg, status,2, status,0, pclath, cstack
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;Total ram usage:        0 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    8
 12258 ;; This function calls:
 12259 ;;		_ADC_Initialize
 12260 ;;		_EUSART_Initialize
 12261 ;;		_FVR_Initialize
 12262 ;;		_OSCILLATOR_Initialize
 12263 ;;		_PIN_MANAGER_Initialize
 12264 ;;		_TMR0_Initialize
 12265 ;;		_WDT_Initialize
 12266 ;; This function is called by:
 12267 ;;		_main
 12268 ;; This function uses a non-reentrant model
 12269 ;;
 12270                           
 12271                           
 12272                           ;psect for function _SYSTEM_Initialize
 12273  082E                     _SYSTEM_Initialize:	
 12274  082E                     l7165:	
 12275                           ;incstack = 0
 12276                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12277                           
 12278                           
 12279                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
 12280  082E  318B  236D  3188   	fcall	_PIN_MANAGER_Initialize
 12281                           
 12282                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
 12283  0831  3196  26F2  3188   	fcall	_OSCILLATOR_Initialize
 12284                           
 12285                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
 12286  0834  3195  25B3  3188   	fcall	_WDT_Initialize
 12287                           
 12288                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
 12289  0837  3195  25AF  3188   	fcall	_FVR_Initialize
 12290                           
 12291                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
 12292  083A  3196  2654  3188   	fcall	_ADC_Initialize
 12293                           
 12294                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
 12295  083D  3188  2018  3188   	fcall	_TMR0_Initialize
 12296                           
 12297                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
 12298  0840  3189  21E0  3188   	fcall	_EUSART_Initialize
 12299  0843                     l435:	
 12300  0843  0008               	return
 12301  0844                     __end_of_SYSTEM_Initialize:	
 12302                           
 12303                           	psect	text73
 12304  15B3                     __ptext73:	
 12305 ;; *************** function _WDT_Initialize *****************
 12306 ;; Defined at:
 12307 ;;		line 76 in file "mcc_generated_files/mcc.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;		None
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;		None
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;Total ram usage:        0 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    6
 12328 ;; This function calls:
 12329 ;;		Nothing
 12330 ;; This function is called by:
 12331 ;;		_SYSTEM_Initialize
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           
 12336                           ;psect for function _WDT_Initialize
 12337  15B3                     _WDT_Initialize:	
 12338  15B3                     l6933:	
 12339                           ;incstack = 0
 12340                           ; Regs used in _WDT_Initialize: [wreg]
 12341                           
 12342                           
 12343                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x14;
 12344  15B3  3014               	movlw	20
 12345  15B4  0021               	movlb	1	; select bank1
 12346  15B5  0097               	movwf	23	;volatile
 12347  15B6                     l444:	
 12348  15B6  0008               	return
 12349  15B7                     __end_of_WDT_Initialize:	
 12350                           
 12351                           	psect	text74
 12352  0818                     __ptext74:	
 12353 ;; *************** function _TMR0_Initialize *****************
 12354 ;; Defined at:
 12355 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 12356 ;; Parameters:    Size  Location     Type
 12357 ;;		None
 12358 ;; Auto vars:     Size  Location     Type
 12359 ;;		None
 12360 ;; Return value:  Size  Location     Type
 12361 ;;                  1    wreg      void 
 12362 ;; Registers used:
 12363 ;;		wreg, status,2, status,0, pclath, cstack
 12364 ;; Tracked objects:
 12365 ;;		On entry : 0/0
 12366 ;;		On exit  : 0/0
 12367 ;;		Unchanged: 0/0
 12368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;Total ram usage:        1 bytes
 12374 ;; Hardware stack levels used:    1
 12375 ;; Hardware stack levels required when called:    7
 12376 ;; This function calls:
 12377 ;;		_TMR0_SetInterruptHandler
 12378 ;; This function is called by:
 12379 ;;		_SYSTEM_Initialize
 12380 ;; This function uses a non-reentrant model
 12381 ;;
 12382                           
 12383                           
 12384                           ;psect for function _TMR0_Initialize
 12385  0818                     _TMR0_Initialize:	
 12386  0818                     l6943:	
 12387                           ;incstack = 0
 12388                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12389                           
 12390                           
 12391                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
 12392  0818  0021               	movlb	1	; select bank1
 12393  0819  0815               	movf	21,w	;volatile
 12394  081A  39C0               	andlw	192
 12395  081B  3817               	iorlw	23
 12396  081C  0095               	movwf	21	;volatile
 12397  081D                     l6945:	
 12398                           
 12399                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
 12400  081D  3083               	movlw	131
 12401  081E  0020               	movlb	0	; select bank0
 12402  081F  0095               	movwf	21	;volatile
 12403  0820                     l6947:	
 12404                           
 12405                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
 12406  0820  3083               	movlw	131
 12407  0821  00D8               	movwf	??_TMR0_Initialize
 12408  0822  0858               	movf	??_TMR0_Initialize,w
 12409  0823  00FD               	movwf	_timer0ReloadVal	;volatile
 12410  0824                     l6949:	
 12411                           
 12412                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
 12413  0824  110B               	bcf	11,2	;volatile
 12414  0825                     l6951:	
 12415                           
 12416                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
 12417  0825  168B               	bsf	11,5	;volatile
 12418  0826                     l6953:	
 12419                           
 12420                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 12421  0826  3073               	movlw	low _TMR0_DefaultInterruptHandler
 12422  0827  00D6               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 12423  0828  3015               	movlw	high _TMR0_DefaultInterruptHandler
 12424  0829  00D7               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 12425  082A  3195  25FD  3188   	fcall	_TMR0_SetInterruptHandler
 12426  082D                     l532:	
 12427  082D  0008               	return
 12428  082E                     __end_of_TMR0_Initialize:	
 12429                           
 12430                           	psect	text75
 12431  15FD                     __ptext75:	
 12432 ;; *************** function _TMR0_SetInterruptHandler *****************
 12433 ;; Defined at:
 12434 ;;		line 133 in file "mcc_generated_files/tmr0.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 12437 ;;		 -> displayRefreshISR(1), TMR0_DefaultInterruptHandler(1), 
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;		None
 12440 ;; Return value:  Size  Location     Type
 12441 ;;                  1    wreg      void 
 12442 ;; Registers used:
 12443 ;;		wreg
 12444 ;; Tracked objects:
 12445 ;;		On entry : 0/0
 12446 ;;		On exit  : 0/0
 12447 ;;		Unchanged: 0/0
 12448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12449 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;Total ram usage:        2 bytes
 12454 ;; Hardware stack levels used:    1
 12455 ;; Hardware stack levels required when called:    6
 12456 ;; This function calls:
 12457 ;;		Nothing
 12458 ;; This function is called by:
 12459 ;;		_TMR0_Initialize
 12460 ;;		_main
 12461 ;; This function uses a non-reentrant model
 12462 ;;
 12463                           
 12464                           
 12465                           ;psect for function _TMR0_SetInterruptHandler
 12466  15FD                     _TMR0_SetInterruptHandler:	
 12467  15FD                     l6809:	
 12468                           ;incstack = 0
 12469                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 12470                           
 12471                           
 12472                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
 12473  15FD  0020               	movlb	0	; select bank0
 12474  15FE  0857               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 12475  15FF  00FA               	movwf	_TMR0_InterruptHandler+1
 12476  1600  0856               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 12477  1601  00F9               	movwf	_TMR0_InterruptHandler
 12478  1602                     l551:	
 12479  1602  0008               	return
 12480  1603                     __end_of_TMR0_SetInterruptHandler:	
 12481                           
 12482                           	psect	text76
 12483  0B6D                     __ptext76:	
 12484 ;; *************** function _PIN_MANAGER_Initialize *****************
 12485 ;; Defined at:
 12486 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 12487 ;; Parameters:    Size  Location     Type
 12488 ;;		None
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;		None
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      void 
 12493 ;; Registers used:
 12494 ;;		wreg, status,2, status,0, pclath, cstack
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;Total ram usage:        0 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:    7
 12507 ;; This function calls:
 12508 ;;		_IOCBF4_SetInterruptHandler
 12509 ;; This function is called by:
 12510 ;;		_SYSTEM_Initialize
 12511 ;; This function uses a non-reentrant model
 12512 ;;
 12513                           
 12514                           
 12515                           ;psect for function _PIN_MANAGER_Initialize
 12516  0B6D                     _PIN_MANAGER_Initialize:	
 12517  0B6D                     l6893:	
 12518                           ;incstack = 0
 12519                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12520                           
 12521                           
 12522                           ;mcc_generated_files/pin_manager.c: 62:     LATE = 0x00;
 12523  0B6D  0022               	movlb	2	; select bank2
 12524  0B6E  0190               	clrf	16	;volatile
 12525                           
 12526                           ;mcc_generated_files/pin_manager.c: 63:     LATD = 0x00;
 12527  0B6F  018F               	clrf	15	;volatile
 12528                           
 12529                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
 12530  0B70  018C               	clrf	12	;volatile
 12531                           
 12532                           ;mcc_generated_files/pin_manager.c: 65:     LATB = 0x00;
 12533  0B71  018D               	clrf	13	;volatile
 12534                           
 12535                           ;mcc_generated_files/pin_manager.c: 66:     LATC = 0x00;
 12536  0B72  018E               	clrf	14	;volatile
 12537  0B73                     l6895:	
 12538                           
 12539                           ;mcc_generated_files/pin_manager.c: 71:     TRISE = 0x0D;
 12540  0B73  300D               	movlw	13
 12541  0B74  0021               	movlb	1	; select bank1
 12542  0B75  0090               	movwf	16	;volatile
 12543  0B76                     l6897:	
 12544                           
 12545                           ;mcc_generated_files/pin_manager.c: 72:     TRISA = 0x67;
 12546  0B76  3067               	movlw	103
 12547  0B77  008C               	movwf	12	;volatile
 12548  0B78                     l6899:	
 12549                           
 12550                           ;mcc_generated_files/pin_manager.c: 73:     TRISB = 0x7F;
 12551  0B78  307F               	movlw	127
 12552  0B79  008D               	movwf	13	;volatile
 12553  0B7A                     l6901:	
 12554                           
 12555                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xBD;
 12556  0B7A  30BD               	movlw	189
 12557  0B7B  008E               	movwf	14	;volatile
 12558                           
 12559                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0x00;
 12560  0B7C  018F               	clrf	15	;volatile
 12561                           
 12562                           ;mcc_generated_files/pin_manager.c: 80:     ANSELD = 0x00;
 12563  0B7D  0023               	movlb	3	; select bank3
 12564  0B7E  018F               	clrf	15	;volatile
 12565  0B7F                     l6903:	
 12566                           
 12567                           ;mcc_generated_files/pin_manager.c: 81:     ANSELB = 0x20;
 12568  0B7F  3020               	movlw	32
 12569  0B80  008D               	movwf	13	;volatile
 12570  0B81                     l6905:	
 12571                           
 12572                           ;mcc_generated_files/pin_manager.c: 82:     ANSELE = 0x05;
 12573  0B81  3005               	movlw	5
 12574  0B82  0090               	movwf	16	;volatile
 12575  0B83                     l6907:	
 12576                           
 12577                           ;mcc_generated_files/pin_manager.c: 83:     ANSELA = 0x27;
 12578  0B83  3027               	movlw	39
 12579  0B84  008C               	movwf	12	;volatile
 12580  0B85                     l6909:	
 12581                           
 12582                           ;mcc_generated_files/pin_manager.c: 88:     WPUE = 0x00;
 12583  0B85  0024               	movlb	4	; select bank4
 12584  0B86  0190               	clrf	16	;volatile
 12585  0B87                     l6911:	
 12586                           
 12587                           ;mcc_generated_files/pin_manager.c: 89:     WPUB = 0x00;
 12588  0B87  018D               	clrf	13	;volatile
 12589  0B88                     l6913:	
 12590                           
 12591                           ;mcc_generated_files/pin_manager.c: 90:     OPTION_REGbits.nWPUEN = 1;
 12592  0B88  0021               	movlb	1	; select bank1
 12593  0B89  1795               	bsf	21,7	;volatile
 12594  0B8A                     l6915:	
 12595                           
 12596                           ;mcc_generated_files/pin_manager.c: 96:     APFCON = 0x00;
 12597  0B8A  0022               	movlb	2	; select bank2
 12598  0B8B  019D               	clrf	29	;volatile
 12599  0B8C                     l6917:	
 12600                           
 12601                           ;mcc_generated_files/pin_manager.c: 102:     IOCBFbits.IOCBF4 = 0;
 12602  0B8C  0027               	movlb	7	; select bank7
 12603  0B8D  1216               	bcf	22,4	;volatile
 12604  0B8E                     l6919:	
 12605                           
 12606                           ;mcc_generated_files/pin_manager.c: 104:     IOCBNbits.IOCBN4 = 1;
 12607  0B8E  1615               	bsf	21,4	;volatile
 12608  0B8F                     l6921:	
 12609                           
 12610                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP4 = 1;
 12611  0B8F  1614               	bsf	20,4	;volatile
 12612  0B90                     l6923:	
 12613                           
 12614                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF4_SetInterruptHandler(IOCBF4_DefaultIn
      +                          terruptHandler);
 12615  0B90  3072               	movlw	low _IOCBF4_DefaultInterruptHandler
 12616  0B91  0020               	movlb	0	; select bank0
 12617  0B92  00D6               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
 12618  0B93  3015               	movlw	high _IOCBF4_DefaultInterruptHandler
 12619  0B94  00D7               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
 12620  0B95  3196  2677  318B   	fcall	_IOCBF4_SetInterruptHandler
 12621  0B98                     l6925:	
 12622                           
 12623                           ;mcc_generated_files/pin_manager.c: 114:     INTCONbits.IOCIE = 1;
 12624  0B98  158B               	bsf	11,3	;volatile
 12625  0B99                     l499:	
 12626  0B99  0008               	return
 12627  0B9A                     __end_of_PIN_MANAGER_Initialize:	
 12628                           
 12629                           	psect	text77
 12630  1677                     __ptext77:	
 12631 ;; *************** function _IOCBF4_SetInterruptHandler *****************
 12632 ;; Defined at:
 12633 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
 12634 ;; Parameters:    Size  Location     Type
 12635 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 12636 ;;		 -> secondISR(1), IOCBF4_DefaultInterruptHandler(1), 
 12637 ;; Auto vars:     Size  Location     Type
 12638 ;;		None
 12639 ;; Return value:  Size  Location     Type
 12640 ;;                  1    wreg      void 
 12641 ;; Registers used:
 12642 ;;		wreg
 12643 ;; Tracked objects:
 12644 ;;		On entry : 0/0
 12645 ;;		On exit  : 0/0
 12646 ;;		Unchanged: 0/0
 12647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12648 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;Total ram usage:        2 bytes
 12653 ;; Hardware stack levels used:    1
 12654 ;; Hardware stack levels required when called:    6
 12655 ;; This function calls:
 12656 ;;		Nothing
 12657 ;; This function is called by:
 12658 ;;		_PIN_MANAGER_Initialize
 12659 ;;		_main
 12660 ;; This function uses a non-reentrant model
 12661 ;;
 12662                           
 12663                           
 12664                           ;psect for function _IOCBF4_SetInterruptHandler
 12665  1677                     _IOCBF4_SetInterruptHandler:	
 12666  1677                     l6807:	
 12667                           ;incstack = 0
 12668                           ; Regs used in _IOCBF4_SetInterruptHandler: [wreg]
 12669                           
 12670                           
 12671                           ;mcc_generated_files/pin_manager.c: 146:     IOCBF4_InterruptHandler = InterruptHandler;
 12672  1677  0020               	movlb	0	; select bank0
 12673  1678  0857               	movf	IOCBF4_SetInterruptHandler@InterruptHandler+1,w
 12674  1679  0021               	movlb	1	; select bank1
 12675  167A  00D4               	movwf	(_IOCBF4_InterruptHandler+1)^(0+128)
 12676  167B  0020               	movlb	0	; select bank0
 12677  167C  0856               	movf	IOCBF4_SetInterruptHandler@InterruptHandler,w
 12678  167D  0021               	movlb	1	; select bank1
 12679  167E  00D3               	movwf	_IOCBF4_InterruptHandler^(0+128)
 12680  167F                     l510:	
 12681  167F  0008               	return
 12682  1680                     __end_of_IOCBF4_SetInterruptHandler:	
 12683                           
 12684                           	psect	text78
 12685  16F2                     __ptext78:	
 12686 ;; *************** function _OSCILLATOR_Initialize *****************
 12687 ;; Defined at:
 12688 ;;		line 62 in file "mcc_generated_files/mcc.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;		None
 12691 ;; Auto vars:     Size  Location     Type
 12692 ;;		None
 12693 ;; Return value:  Size  Location     Type
 12694 ;;                  1    wreg      void 
 12695 ;; Registers used:
 12696 ;;		wreg, status,2
 12697 ;; Tracked objects:
 12698 ;;		On entry : 0/0
 12699 ;;		On exit  : 0/0
 12700 ;;		Unchanged: 0/0
 12701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12706 ;;Total ram usage:        0 bytes
 12707 ;; Hardware stack levels used:    1
 12708 ;; Hardware stack levels required when called:    6
 12709 ;; This function calls:
 12710 ;;		Nothing
 12711 ;; This function is called by:
 12712 ;;		_SYSTEM_Initialize
 12713 ;; This function uses a non-reentrant model
 12714 ;;
 12715                           
 12716                           
 12717                           ;psect for function _OSCILLATOR_Initialize
 12718  16F2                     _OSCILLATOR_Initialize:	
 12719  16F2                     l6927:	
 12720                           ;incstack = 0
 12721                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12722                           
 12723                           
 12724                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x70;
 12725  16F2  3070               	movlw	112
 12726  16F3  0021               	movlb	1	; select bank1
 12727  16F4  0099               	movwf	25	;volatile
 12728  16F5                     l6929:	
 12729                           
 12730                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
 12731  16F5  0198               	clrf	24	;volatile
 12732  16F6                     l6931:	
 12733                           
 12734                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
 12735  16F6  0022               	movlb	2	; select bank2
 12736  16F7  0196               	clrf	22	;volatile
 12737  16F8                     l438:	
 12738                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
 12739                           
 12740                           
 12741                           ;mcc_generated_files/mcc.c: 71:     while(PLLR == 0)
 12742  16F8  0021               	movlb	1	; select bank1
 12743  16F9  1F1A               	btfss	26,6	;volatile
 12744  16FA  2EFC               	goto	u5071
 12745  16FB  2EFD               	goto	u5070
 12746  16FC                     u5071:	
 12747  16FC  2EF8               	goto	l438
 12748  16FD                     u5070:	
 12749  16FD                     l441:	
 12750  16FD  0008               	return
 12751  16FE                     __end_of_OSCILLATOR_Initialize:	
 12752                           
 12753                           	psect	text79
 12754  15AF                     __ptext79:	
 12755 ;; *************** function _FVR_Initialize *****************
 12756 ;; Defined at:
 12757 ;;		line 58 in file "mcc_generated_files/fvr.c"
 12758 ;; Parameters:    Size  Location     Type
 12759 ;;		None
 12760 ;; Auto vars:     Size  Location     Type
 12761 ;;		None
 12762 ;; Return value:  Size  Location     Type
 12763 ;;                  1    wreg      void 
 12764 ;; Registers used:
 12765 ;;		wreg
 12766 ;; Tracked objects:
 12767 ;;		On entry : 0/0
 12768 ;;		On exit  : 0/0
 12769 ;;		Unchanged: 0/0
 12770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;Total ram usage:        0 bytes
 12776 ;; Hardware stack levels used:    1
 12777 ;; Hardware stack levels required when called:    6
 12778 ;; This function calls:
 12779 ;;		Nothing
 12780 ;; This function is called by:
 12781 ;;		_SYSTEM_Initialize
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           
 12786                           ;psect for function _FVR_Initialize
 12787  15AF                     _FVR_Initialize:	
 12788  15AF                     l6935:	
 12789                           ;incstack = 0
 12790                           ; Regs used in _FVR_Initialize: [wreg]
 12791                           
 12792                           
 12793                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x81;
 12794  15AF  3081               	movlw	129
 12795  15B0  0022               	movlb	2	; select bank2
 12796  15B1  0097               	movwf	23	;volatile
 12797  15B2                     l708:	
 12798  15B2  0008               	return
 12799  15B3                     __end_of_FVR_Initialize:	
 12800                           
 12801                           	psect	text80
 12802  09E0                     __ptext80:	
 12803 ;; *************** function _EUSART_Initialize *****************
 12804 ;; Defined at:
 12805 ;;		line 66 in file "mcc_generated_files/eusart.c"
 12806 ;; Parameters:    Size  Location     Type
 12807 ;;		None
 12808 ;; Auto vars:     Size  Location     Type
 12809 ;;		None
 12810 ;; Return value:  Size  Location     Type
 12811 ;;                  1    wreg      void 
 12812 ;; Registers used:
 12813 ;;		wreg, status,2, status,0, pclath, cstack
 12814 ;; Tracked objects:
 12815 ;;		On entry : 0/0
 12816 ;;		On exit  : 0/0
 12817 ;;		Unchanged: 0/0
 12818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;Total ram usage:        0 bytes
 12824 ;; Hardware stack levels used:    1
 12825 ;; Hardware stack levels required when called:    7
 12826 ;; This function calls:
 12827 ;;		_EUSART_SetErrorHandler
 12828 ;;		_EUSART_SetFramingErrorHandler
 12829 ;;		_EUSART_SetOverrunErrorHandler
 12830 ;; This function is called by:
 12831 ;;		_SYSTEM_Initialize
 12832 ;; This function uses a non-reentrant model
 12833 ;;
 12834                           
 12835                           
 12836                           ;psect for function _EUSART_Initialize
 12837  09E0                     _EUSART_Initialize:	
 12838  09E0                     l6955:	
 12839                           ;incstack = 0
 12840                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12841                           
 12842                           
 12843                           ;mcc_generated_files/eusart.c: 71:     BAUDCON = 0x08;
 12844  09E0  3008               	movlw	8
 12845  09E1  0023               	movlb	3	; select bank3
 12846  09E2  009F               	movwf	31	;volatile
 12847                           
 12848                           ;mcc_generated_files/eusart.c: 74:     RCSTA = 0x90;
 12849  09E3  3090               	movlw	144
 12850  09E4  009D               	movwf	29	;volatile
 12851                           
 12852                           ;mcc_generated_files/eusart.c: 77:     TXSTA = 0x24;
 12853  09E5  3024               	movlw	36
 12854  09E6  009E               	movwf	30	;volatile
 12855                           
 12856                           ;mcc_generated_files/eusart.c: 80:     SPBRGL = 0x40;
 12857  09E7  3040               	movlw	64
 12858  09E8  009B               	movwf	27	;volatile
 12859                           
 12860                           ;mcc_generated_files/eusart.c: 83:     SPBRGH = 0x03;
 12861  09E9  3003               	movlw	3
 12862  09EA  009C               	movwf	28	;volatile
 12863  09EB                     l6957:	
 12864                           
 12865                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 12866  09EB  3000               	movlw	0
 12867  09EC  0020               	movlb	0	; select bank0
 12868  09ED  00D6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 12869  09EE  3000               	movlw	0
 12870  09EF  00D7               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 12871  09F0  3195  25F1  3189   	fcall	_EUSART_SetFramingErrorHandler
 12872  09F3                     l6959:	
 12873                           
 12874                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 12875  09F3  3000               	movlw	0
 12876  09F4  0020               	movlb	0	; select bank0
 12877  09F5  00D6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 12878  09F6  3000               	movlw	0
 12879  09F7  00D7               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 12880  09F8  3195  25F7  3189   	fcall	_EUSART_SetOverrunErrorHandler
 12881  09FB                     l6961:	
 12882                           
 12883                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 12884  09FB  3000               	movlw	0
 12885  09FC  0020               	movlb	0	; select bank0
 12886  09FD  00D6               	movwf	EUSART_SetErrorHandler@interruptHandler
 12887  09FE  3000               	movlw	0
 12888  09FF  00D7               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 12889  0A00  3196  266E  3189   	fcall	_EUSART_SetErrorHandler
 12890  0A03                     l6963:	
 12891                           
 12892                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 12893  0A03  01FC               	clrf	_eusartRxLastError	;volatile
 12894  0A04                     l792:	
 12895  0A04  0008               	return
 12896  0A05                     __end_of_EUSART_Initialize:	
 12897                           
 12898                           	psect	text81
 12899  15F7                     __ptext81:	
 12900 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 12901 ;; Defined at:
 12902 ;;		line 163 in file "mcc_generated_files/eusart.c"
 12903 ;; Parameters:    Size  Location     Type
 12904 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 12905 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;		None
 12908 ;; Return value:  Size  Location     Type
 12909 ;;                  1    wreg      void 
 12910 ;; Registers used:
 12911 ;;		wreg
 12912 ;; Tracked objects:
 12913 ;;		On entry : 0/0
 12914 ;;		On exit  : 0/0
 12915 ;;		Unchanged: 0/0
 12916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12917 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;Total ram usage:        2 bytes
 12922 ;; Hardware stack levels used:    1
 12923 ;; Hardware stack levels required when called:    6
 12924 ;; This function calls:
 12925 ;;		Nothing
 12926 ;; This function is called by:
 12927 ;;		_EUSART_Initialize
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           
 12932                           ;psect for function _EUSART_SetOverrunErrorHandler
 12933  15F7                     _EUSART_SetOverrunErrorHandler:	
 12934  15F7                     l6813:	
 12935                           ;incstack = 0
 12936                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 12937                           
 12938                           
 12939                           ;mcc_generated_files/eusart.c: 164:     EUSART_OverrunErrorHandler = interruptHandler;
 12940  15F7  0020               	movlb	0	; select bank0
 12941  15F8  0857               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 12942  15F9  00B1               	movwf	_EUSART_OverrunErrorHandler+1
 12943  15FA  0856               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 12944  15FB  00B0               	movwf	_EUSART_OverrunErrorHandler
 12945  15FC                     l834:	
 12946  15FC  0008               	return
 12947  15FD                     __end_of_EUSART_SetOverrunErrorHandler:	
 12948                           
 12949                           	psect	text82
 12950  15F1                     __ptext82:	
 12951 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 12952 ;; Defined at:
 12953 ;;		line 159 in file "mcc_generated_files/eusart.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 12956 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;		None
 12959 ;; Return value:  Size  Location     Type
 12960 ;;                  1    wreg      void 
 12961 ;; Registers used:
 12962 ;;		wreg
 12963 ;; Tracked objects:
 12964 ;;		On entry : 0/0
 12965 ;;		On exit  : 0/0
 12966 ;;		Unchanged: 0/0
 12967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12968 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;Total ram usage:        2 bytes
 12973 ;; Hardware stack levels used:    1
 12974 ;; Hardware stack levels required when called:    6
 12975 ;; This function calls:
 12976 ;;		Nothing
 12977 ;; This function is called by:
 12978 ;;		_EUSART_Initialize
 12979 ;; This function uses a non-reentrant model
 12980 ;;
 12981                           
 12982                           
 12983                           ;psect for function _EUSART_SetFramingErrorHandler
 12984  15F1                     _EUSART_SetFramingErrorHandler:	
 12985  15F1                     l6811:	
 12986                           ;incstack = 0
 12987                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 12988                           
 12989                           
 12990                           ;mcc_generated_files/eusart.c: 160:     EUSART_FramingErrorHandler = interruptHandler;
 12991  15F1  0020               	movlb	0	; select bank0
 12992  15F2  0857               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 12993  15F3  00B3               	movwf	_EUSART_FramingErrorHandler+1
 12994  15F4  0856               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 12995  15F5  00B2               	movwf	_EUSART_FramingErrorHandler
 12996  15F6                     l831:	
 12997  15F6  0008               	return
 12998  15F7                     __end_of_EUSART_SetFramingErrorHandler:	
 12999                           
 13000                           	psect	text83
 13001  166E                     __ptext83:	
 13002 ;; *************** function _EUSART_SetErrorHandler *****************
 13003 ;; Defined at:
 13004 ;;		line 167 in file "mcc_generated_files/eusart.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13007 ;;		 -> EUSART_DefaultErrorHandler(1), 
 13008 ;; Auto vars:     Size  Location     Type
 13009 ;;		None
 13010 ;; Return value:  Size  Location     Type
 13011 ;;                  1    wreg      void 
 13012 ;; Registers used:
 13013 ;;		wreg
 13014 ;; Tracked objects:
 13015 ;;		On entry : 0/0
 13016 ;;		On exit  : 0/0
 13017 ;;		Unchanged: 0/0
 13018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13019 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;Total ram usage:        2 bytes
 13024 ;; Hardware stack levels used:    1
 13025 ;; Hardware stack levels required when called:    6
 13026 ;; This function calls:
 13027 ;;		Nothing
 13028 ;; This function is called by:
 13029 ;;		_EUSART_Initialize
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033                           
 13034                           ;psect for function _EUSART_SetErrorHandler
 13035  166E                     _EUSART_SetErrorHandler:	
 13036  166E                     l6815:	
 13037                           ;incstack = 0
 13038                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 13039                           
 13040                           
 13041                           ;mcc_generated_files/eusart.c: 168:     EUSART_ErrorHandler = interruptHandler;
 13042  166E  0020               	movlb	0	; select bank0
 13043  166F  0857               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 13044  1670  0021               	movlb	1	; select bank1
 13045  1671  00D2               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
 13046  1672  0020               	movlb	0	; select bank0
 13047  1673  0856               	movf	EUSART_SetErrorHandler@interruptHandler,w
 13048  1674  0021               	movlb	1	; select bank1
 13049  1675  00D1               	movwf	_EUSART_ErrorHandler^(0+128)
 13050  1676                     l837:	
 13051  1676  0008               	return
 13052  1677                     __end_of_EUSART_SetErrorHandler:	
 13053                           
 13054                           	psect	text84
 13055  1654                     __ptext84:	
 13056 ;; *************** function _ADC_Initialize *****************
 13057 ;; Defined at:
 13058 ;;		line 67 in file "mcc_generated_files/adc.c"
 13059 ;; Parameters:    Size  Location     Type
 13060 ;;		None
 13061 ;; Auto vars:     Size  Location     Type
 13062 ;;		None
 13063 ;; Return value:  Size  Location     Type
 13064 ;;                  1    wreg      void 
 13065 ;; Registers used:
 13066 ;;		wreg, status,2
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;Total ram usage:        0 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    6
 13079 ;; This function calls:
 13080 ;;		Nothing
 13081 ;; This function is called by:
 13082 ;;		_SYSTEM_Initialize
 13083 ;; This function uses a non-reentrant model
 13084 ;;
 13085                           
 13086                           
 13087                           ;psect for function _ADC_Initialize
 13088  1654                     _ADC_Initialize:	
 13089  1654                     l6937:	
 13090                           ;incstack = 0
 13091                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13092                           
 13093                           
 13094                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
 13095  1654  3001               	movlw	1
 13096  1655  0021               	movlb	1	; select bank1
 13097  1656  009D               	movwf	29	;volatile
 13098                           
 13099                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xE3;
 13100  1657  30E3               	movlw	227
 13101  1658  009E               	movwf	30	;volatile
 13102  1659                     l6939:	
 13103                           
 13104                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
 13105  1659  019B               	clrf	27	;volatile
 13106  165A                     l6941:	
 13107                           
 13108                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
 13109  165A  019C               	clrf	28	;volatile
 13110  165B                     l728:	
 13111  165B  0008               	return
 13112  165C                     __end_of_ADC_Initialize:	
 13113                           
 13114                           	psect	text85
 13115  0778                     __ptext85:	
 13116 ;; *************** function _FIR_filter *****************
 13117 ;; Defined at:
 13118 ;;		line 363 in file "main.c"
 13119 ;; Parameters:    Size  Location     Type
 13120 ;;  sample          2    4[BANK0 ] unsigned short 
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;		None
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  2    4[BANK0 ] unsigned short 
 13125 ;; Registers used:
 13126 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13132 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;Total ram usage:        8 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    6
 13139 ;; This function calls:
 13140 ;;		Nothing
 13141 ;; This function is called by:
 13142 ;;		_main
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           
 13147                           ;psect for function _FIR_filter
 13148  0778                     _FIR_filter:	
 13149  0778                     l5513:	
 13150                           ;incstack = 0
 13151                           ; Regs used in _FIR_filter: [wreg+fsr1l+fsr1h+status,2+status,0]
 13152                           
 13153                           
 13154                           ;main.c: 364:     static adc_result_t buffer[8] = {0,0,0,0,0,0,0,0};;main.c: 365:     st
      +                          atic adc_result_t oldest = 0;;main.c: 366:     static uint32_t sum;;main.c: 368:     sum
      +                           -= buffer[oldest];
 13155  0778  0020               	movlb	0	; select bank0
 13156  0779  352C               	lslf	FIR_filter@oldest,w
 13157  077A  3EBD               	addlw	(low (FIR_filter@buffer| 0))& (0+255)
 13158  077B  0086               	movwf	6
 13159  077C  0187               	clrf	7
 13160  077D  3F40               	moviw [0]fsr1
 13161  077E  00DC               	movwf	??_FIR_filter
 13162  077F  3F41               	moviw [1]fsr1
 13163  0780  00DD               	movwf	??_FIR_filter+1
 13164  0781  085C               	movf	??_FIR_filter,w
 13165  0782  00DE               	movwf	??_FIR_filter+2
 13166  0783  085D               	movf	??_FIR_filter+1,w
 13167  0784  00DF               	movwf	??_FIR_filter+3
 13168  0785  01E0               	clrf	??_FIR_filter+4
 13169  0786  01E1               	clrf	??_FIR_filter+5
 13170  0787  085E               	movf	??_FIR_filter+2,w
 13171  0788  0021               	movlb	1	; select bank1
 13172  0789  02CD               	subwf	FIR_filter@sum^(0+128),f
 13173  078A  0020               	movlb	0	; select bank0
 13174  078B  085F               	movf	??_FIR_filter+3,w
 13175  078C  0021               	movlb	1	; select bank1
 13176  078D  3BCE               	subwfb	(FIR_filter@sum+1)^(0+128),f
 13177  078E  0020               	movlb	0	; select bank0
 13178  078F  0860               	movf	??_FIR_filter+4,w
 13179  0790  0021               	movlb	1	; select bank1
 13180  0791  3BCF               	subwfb	(FIR_filter@sum+2)^(0+128),f
 13181  0792  0020               	movlb	0	; select bank0
 13182  0793  0861               	movf	??_FIR_filter+5,w
 13183  0794  0021               	movlb	1	; select bank1
 13184  0795  3BD0               	subwfb	(FIR_filter@sum+3)^(0+128),f
 13185  0796                     l5515:	
 13186                           
 13187                           ;main.c: 369:     sum += sample;
 13188  0796  0020               	movlb	0	; select bank0
 13189  0797  085A               	movf	FIR_filter@sample,w
 13190  0798  0021               	movlb	1	; select bank1
 13191  0799  07CD               	addwf	FIR_filter@sum^(0+128),f
 13192  079A  0020               	movlb	0	; select bank0
 13193  079B  085B               	movf	FIR_filter@sample+1,w
 13194  079C  0021               	movlb	1	; select bank1
 13195  079D  3DCE               	addwfc	(FIR_filter@sum+1)^(0+128),f
 13196  079E  3000               	movlw	0
 13197  079F  3DCF               	addwfc	(FIR_filter@sum+2)^(0+128),f
 13198  07A0  3DD0               	addwfc	(FIR_filter@sum+3)^(0+128),f
 13199  07A1                     l5517:	
 13200                           
 13201                           ;main.c: 370:     buffer[oldest] = sample;
 13202  07A1  0020               	movlb	0	; select bank0
 13203  07A2  352C               	lslf	FIR_filter@oldest,w
 13204  07A3  3EBD               	addlw	(low (FIR_filter@buffer| 0))& (0+255)
 13205  07A4  0086               	movwf	6
 13206  07A5  0187               	clrf	7
 13207  07A6  085A               	movf	FIR_filter@sample,w
 13208  07A7  3FC0               	movwi [0]fsr1
 13209  07A8  085B               	movf	FIR_filter@sample+1,w
 13210  07A9  3FC1               	movwi [1]fsr1
 13211                           
 13212                           ;main.c: 371:     oldest += 1;
 13213  07AA  3001               	movlw	1
 13214  07AB  07AC               	addwf	FIR_filter@oldest,f
 13215  07AC  3000               	movlw	0
 13216  07AD  3DAD               	addwfc	FIR_filter@oldest+1,f
 13217                           
 13218                           ;main.c: 372:     if (oldest >= 8) oldest = 0;
 13219  07AE  3000               	movlw	0
 13220  07AF  022D               	subwf	FIR_filter@oldest+1,w
 13221  07B0  3008               	movlw	8
 13222  07B1  1903               	skipnz
 13223  07B2  022C               	subwf	FIR_filter@oldest,w
 13224  07B3  1C03               	skipc
 13225  07B4  2FB6               	goto	u3471
 13226  07B5  2FB7               	goto	u3470
 13227  07B6                     u3471:	
 13228  07B6  2FB9               	goto	l5521
 13229  07B7                     u3470:	
 13230  07B7                     l5519:	
 13231  07B7  01AC               	clrf	FIR_filter@oldest
 13232  07B8  01AD               	clrf	FIR_filter@oldest+1
 13233  07B9                     l5521:	
 13234                           
 13235                           ;main.c: 374:     return (sum >> 3);
 13236  07B9  0021               	movlb	1	; select bank1
 13237  07BA  084D               	movf	FIR_filter@sum^(0+128),w
 13238  07BB  0020               	movlb	0	; select bank0
 13239  07BC  00DC               	movwf	??_FIR_filter
 13240  07BD  0021               	movlb	1	; select bank1
 13241  07BE  084E               	movf	(FIR_filter@sum+1)^(0+128),w
 13242  07BF  0020               	movlb	0	; select bank0
 13243  07C0  00DD               	movwf	??_FIR_filter+1
 13244  07C1  0021               	movlb	1	; select bank1
 13245  07C2  084F               	movf	(FIR_filter@sum+2)^(0+128),w
 13246  07C3  0020               	movlb	0	; select bank0
 13247  07C4  00DE               	movwf	??_FIR_filter+2
 13248  07C5  0021               	movlb	1	; select bank1
 13249  07C6  0850               	movf	(FIR_filter@sum+3)^(0+128),w
 13250  07C7  0020               	movlb	0	; select bank0
 13251  07C8  00DF               	movwf	??_FIR_filter+3
 13252  07C9  3003               	movlw	3
 13253  07CA                     u3485:	
 13254  07CA  36DF               	lsrf	??_FIR_filter+3,f
 13255  07CB  0CDE               	rrf	??_FIR_filter+2,f
 13256  07CC  0CDD               	rrf	??_FIR_filter+1,f
 13257  07CD  0CDC               	rrf	??_FIR_filter,f
 13258  07CE                     u3480:	
 13259  07CE  0B89               	decfsz	9,f
 13260  07CF  2FCA               	goto	u3485
 13261  07D0  085D               	movf	??_FIR_filter+1,w
 13262  07D1  00DB               	movwf	?_FIR_filter+1
 13263  07D2  085C               	movf	??_FIR_filter,w
 13264  07D3  00DA               	movwf	?_FIR_filter
 13265  07D4                     l1007:	
 13266  07D4  0008               	return
 13267  07D5                     __end_of_FIR_filter:	
 13268                           
 13269                           	psect	text86
 13270  09BC                     __ptext86:	
 13271 ;; *************** function _DATAEE_WriteByte *****************
 13272 ;; Defined at:
 13273 ;;		line 189 in file "mcc_generated_files/memory.c"
 13274 ;; Parameters:    Size  Location     Type
 13275 ;;  bAdd            1    wreg     unsigned char 
 13276 ;;  bData           1    0[BANK0 ] unsigned char 
 13277 ;; Auto vars:     Size  Location     Type
 13278 ;;  bAdd            1    1[BANK0 ] unsigned char 
 13279 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 13280 ;; Return value:  Size  Location     Type
 13281 ;;                  1    wreg      void 
 13282 ;; Registers used:
 13283 ;;		wreg, status,2, status,0
 13284 ;; Tracked objects:
 13285 ;;		On entry : 0/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13289 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;Total ram usage:        3 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    6
 13296 ;; This function calls:
 13297 ;;		Nothing
 13298 ;; This function is called by:
 13299 ;;		_main
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           
 13304                           ;psect for function _DATAEE_WriteByte
 13305  09BC                     _DATAEE_WriteByte:	
 13306                           
 13307                           ;incstack = 0
 13308                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 13309                           ;DATAEE_WriteByte@bAdd stored from wreg
 13310  09BC  0020               	movlb	0	; select bank0
 13311  09BD  00D7               	movwf	DATAEE_WriteByte@bAdd
 13312  09BE                     l7131:	
 13313  09BE                     l7133:	
 13314                           
 13315                           ;mcc_generated_files/memory.c: 193:     EEADRL = (uint8_t)(bAdd & 0x0ff);
 13316  09BE  0857               	movf	DATAEE_WriteByte@bAdd,w
 13317  09BF  0023               	movlb	3	; select bank3
 13318  09C0  0091               	movwf	17	;volatile
 13319  09C1                     l7135:	
 13320                           
 13321                           ;mcc_generated_files/memory.c: 194:     EEDATL = bData;
 13322  09C1  0020               	movlb	0	; select bank0
 13323  09C2  0856               	movf	DATAEE_WriteByte@bData,w
 13324  09C3  0023               	movlb	3	; select bank3
 13325  09C4  0093               	movwf	19	;volatile
 13326  09C5                     l7137:	
 13327                           
 13328                           ;mcc_generated_files/memory.c: 195:     EECON1bits.EEPGD = 0;
 13329  09C5  1395               	bcf	21,7	;volsfr
 13330  09C6                     l7139:	
 13331                           
 13332                           ;mcc_generated_files/memory.c: 196:     EECON1bits.CFGS = 0;
 13333  09C6  1315               	bcf	21,6	;volsfr
 13334  09C7                     l7141:	
 13335                           
 13336                           ;mcc_generated_files/memory.c: 197:     EECON1bits.WREN = 1;
 13337  09C7  1515               	bsf	21,2	;volsfr
 13338  09C8                     l7143:	
 13339                           
 13340                           ;mcc_generated_files/memory.c: 199:     GIEBitValue = INTCONbits.GIE;
 13341  09C8  3000               	movlw	0
 13342  09C9  1B8B               	btfsc	11,7	;volatile
 13343  09CA  3001               	movlw	1
 13344  09CB  0020               	movlb	0	; select bank0
 13345  09CC  00D8               	movwf	DATAEE_WriteByte@GIEBitValue
 13346  09CD                     l7145:	
 13347                           
 13348                           ;mcc_generated_files/memory.c: 200:     INTCONbits.GIE = 0;
 13349  09CD  138B               	bcf	11,7	;volatile
 13350                           
 13351                           ;mcc_generated_files/memory.c: 201:     EECON2 = 0x55;
 13352  09CE  3055               	movlw	85
 13353  09CF  0023               	movlb	3	; select bank3
 13354  09D0  0096               	movwf	22	;volsfr
 13355                           
 13356                           ;mcc_generated_files/memory.c: 202:     EECON2 = 0xAA;
 13357  09D1  30AA               	movlw	170
 13358  09D2  0096               	movwf	22	;volsfr
 13359  09D3                     l7147:	
 13360                           
 13361                           ;mcc_generated_files/memory.c: 203:     EECON1bits.WR = 1;
 13362  09D3  1495               	bsf	21,1	;volsfr
 13363  09D4                     l365:	
 13364                           ;mcc_generated_files/memory.c: 206:     {;mcc_generated_files/memory.c: 207:     }
 13365                           
 13366                           
 13367                           ;mcc_generated_files/memory.c: 205:     while (EECON1bits.WR)
 13368  09D4  1895               	btfsc	21,1	;volsfr
 13369  09D5  29D7               	goto	u5241
 13370  09D6  29D8               	goto	u5240
 13371  09D7                     u5241:	
 13372  09D7  29D4               	goto	l365
 13373  09D8                     u5240:	
 13374  09D8                     l367:	
 13375                           
 13376                           ;mcc_generated_files/memory.c: 209:     EECON1bits.WREN = 0;
 13377  09D8  1115               	bcf	21,2	;volsfr
 13378  09D9                     l7149:	
 13379                           
 13380                           ;mcc_generated_files/memory.c: 210:     INTCONbits.GIE = GIEBitValue;
 13381  09D9  0020               	movlb	0	; select bank0
 13382  09DA  0C58               	rrf	DATAEE_WriteByte@GIEBitValue,w
 13383  09DB  1C03               	skipc
 13384  09DC  138B               	bcf	11,7	;volatile
 13385  09DD  1803               	skipnc
 13386  09DE  178B               	bsf	11,7	;volatile
 13387  09DF                     l368:	
 13388  09DF  0008               	return
 13389  09E0                     __end_of_DATAEE_WriteByte:	
 13390                           
 13391                           	psect	text87
 13392  172F                     __ptext87:	
 13393 ;; *************** function _DATAEE_ReadByte *****************
 13394 ;; Defined at:
 13395 ;;		line 213 in file "mcc_generated_files/memory.c"
 13396 ;; Parameters:    Size  Location     Type
 13397 ;;  bAdd            1    wreg     unsigned char 
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;  bAdd            1    0[BANK0 ] unsigned char 
 13400 ;; Return value:  Size  Location     Type
 13401 ;;                  1    wreg      unsigned char 
 13402 ;; Registers used:
 13403 ;;		wreg
 13404 ;; Tracked objects:
 13405 ;;		On entry : 0/0
 13406 ;;		On exit  : 0/0
 13407 ;;		Unchanged: 0/0
 13408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;Total ram usage:        1 bytes
 13414 ;; Hardware stack levels used:    1
 13415 ;; Hardware stack levels required when called:    6
 13416 ;; This function calls:
 13417 ;;		Nothing
 13418 ;; This function is called by:
 13419 ;;		_main
 13420 ;; This function uses a non-reentrant model
 13421 ;;
 13422                           
 13423                           
 13424                           ;psect for function _DATAEE_ReadByte
 13425  172F                     _DATAEE_ReadByte:	
 13426                           
 13427                           ;incstack = 0
 13428                           ; Regs used in _DATAEE_ReadByte: [wreg]
 13429                           ;DATAEE_ReadByte@bAdd stored from wreg
 13430  172F  0020               	movlb	0	; select bank0
 13431  1730  00D6               	movwf	DATAEE_ReadByte@bAdd
 13432  1731                     l7151:	
 13433                           
 13434                           ;mcc_generated_files/memory.c: 213: uint8_t DATAEE_ReadByte(uint8_t bAdd);mcc_generated_
      +                          files/memory.c: 214: {;mcc_generated_files/memory.c: 215:     EEADRL = (uint8_t)(bAdd & 
      +                          0x0ff);
 13435  1731  0856               	movf	DATAEE_ReadByte@bAdd,w
 13436  1732  0023               	movlb	3	; select bank3
 13437  1733  0091               	movwf	17	;volatile
 13438  1734                     l7153:	
 13439                           
 13440                           ;mcc_generated_files/memory.c: 216:     EECON1bits.CFGS = 0;
 13441  1734  1315               	bcf	21,6	;volsfr
 13442  1735                     l7155:	
 13443                           
 13444                           ;mcc_generated_files/memory.c: 217:     EECON1bits.EEPGD = 0;
 13445  1735  1395               	bcf	21,7	;volsfr
 13446  1736                     l7157:	
 13447                           
 13448                           ;mcc_generated_files/memory.c: 218:     EECON1bits.RD = 1;
 13449  1736  1415               	bsf	21,0	;volsfr
 13450  1737                     l7159:	
 13451                           
 13452                           ;mcc_generated_files/memory.c: 219:     __nop();
 13453  1737  0000               	nop
 13454  1738                     l7161:	
 13455                           
 13456                           ;mcc_generated_files/memory.c: 220:     __nop();
 13457  1738  0000               	nop
 13458                           
 13459                           ;mcc_generated_files/memory.c: 222:     return (EEDATL);
 13460  1739  0023               	movlb	3	; select bank3
 13461  173A  0813               	movf	19,w	;volatile
 13462  173B                     l371:	
 13463  173B  0008               	return
 13464  173C                     __end_of_DATAEE_ReadByte:	
 13465                           
 13466                           	psect	text88
 13467  0998                     __ptext88:	
 13468 ;; *************** function _ADC_GetConversion *****************
 13469 ;; Defined at:
 13470 ;;		line 112 in file "mcc_generated_files/adc.c"
 13471 ;; Parameters:    Size  Location     Type
 13472 ;;  channel         1    wreg     enum E2939
 13473 ;; Auto vars:     Size  Location     Type
 13474 ;;  channel         1    3[BANK0 ] enum E2939
 13475 ;; Return value:  Size  Location     Type
 13476 ;;                  2    0[BANK0 ] unsigned short 
 13477 ;; Registers used:
 13478 ;;		wreg, status,2, status,0
 13479 ;; Tracked objects:
 13480 ;;		On entry : 0/0
 13481 ;;		On exit  : 0/0
 13482 ;;		Unchanged: 0/0
 13483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13484 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;Total ram usage:        4 bytes
 13489 ;; Hardware stack levels used:    1
 13490 ;; Hardware stack levels required when called:    6
 13491 ;; This function calls:
 13492 ;;		Nothing
 13493 ;; This function is called by:
 13494 ;;		_main
 13495 ;; This function uses a non-reentrant model
 13496 ;;
 13497                           
 13498                           
 13499                           ;psect for function _ADC_GetConversion
 13500  0998                     _ADC_GetConversion:	
 13501                           
 13502                           ;incstack = 0
 13503                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 13504                           ;ADC_GetConversion@channel stored from wreg
 13505  0998  0020               	movlb	0	; select bank0
 13506  0999  00D9               	movwf	ADC_GetConversion@channel
 13507  099A                     l7167:	
 13508                           
 13509                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
 13510  099A  0859               	movf	ADC_GetConversion@channel,w
 13511  099B  00D8               	movwf	??_ADC_GetConversion
 13512  099C  0DD8               	rlf	??_ADC_GetConversion,f
 13513  099D  0DD8               	rlf	??_ADC_GetConversion,f
 13514  099E  0021               	movlb	1	; select bank1
 13515  099F  081D               	movf	29,w	;volatile
 13516  09A0  0020               	movlb	0	; select bank0
 13517  09A1  0658               	xorwf	??_ADC_GetConversion,w
 13518  09A2  3983               	andlw	-125
 13519  09A3  0658               	xorwf	??_ADC_GetConversion,w
 13520  09A4  0021               	movlb	1	; select bank1
 13521  09A5  009D               	movwf	29	;volatile
 13522  09A6                     l7169:	
 13523                           
 13524                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
 13525  09A6  141D               	bsf	29,0	;volatile
 13526  09A7                     l7171:	
 13527                           
 13528                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(32000000/4000000.0)));
 13529  09A7  300D               	movlw	13
 13530  09A8                     u7047:	
 13531  09A8  0B89               	decfsz	9,f
 13532  09A9  29A8               	goto	u7047
 13533  09AA  0000               	nop
 13534  09AB                     l7173:	
 13535                           
 13536                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
 13537  09AB  0021               	movlb	1	; select bank1
 13538  09AC  149D               	bsf	29,1	;volatile
 13539                           
 13540                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
 13541  09AD  29AF               	goto	l743
 13542  09AE                     l744:	
 13543  09AE  0064               	clrwdt	;# 
 13544  09AF                     l743:	
 13545                           ;mcc_generated_files/adc.c: 130:     }
 13546                           
 13547                           
 13548                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
 13549  09AF  0021               	movlb	1	; select bank1
 13550  09B0  189D               	btfsc	29,1	;volatile
 13551  09B1  29B3               	goto	u5251
 13552  09B2  29B4               	goto	u5250
 13553  09B3                     u5251:	
 13554  09B3  29AE               	goto	l744
 13555  09B4                     u5250:	
 13556  09B4                     l7175:	
 13557                           
 13558                           ;mcc_generated_files/adc.c: 133:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 13559  09B4  081C               	movf	28,w	;volatile
 13560  09B5  0020               	movlb	0	; select bank0
 13561  09B6  00D7               	movwf	?_ADC_GetConversion+1
 13562  09B7  0021               	movlb	1	; select bank1
 13563  09B8  081B               	movf	27,w	;volatile
 13564  09B9  0020               	movlb	0	; select bank0
 13565  09BA  00D6               	movwf	?_ADC_GetConversion
 13566  09BB                     l746:	
 13567  09BB  0008               	return
 13568  09BC                     __end_of_ADC_GetConversion:	
 13569                           
 13570                           	psect	intentry
 13571  0004                     __pintentry:	
 13572 ;; *************** function _INTERRUPT_InterruptManager *****************
 13573 ;; Defined at:
 13574 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13575 ;; Parameters:    Size  Location     Type
 13576 ;;		None
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;		None
 13579 ;; Return value:  Size  Location     Type
 13580 ;;                  1    wreg      void 
 13581 ;; Registers used:
 13582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13583 ;; Tracked objects:
 13584 ;;		On entry : 0/0
 13585 ;;		On exit  : 0/0
 13586 ;;		Unchanged: 0/0
 13587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;Total ram usage:        0 bytes
 13593 ;; Hardware stack levels used:    1
 13594 ;; Hardware stack levels required when called:    5
 13595 ;; This function calls:
 13596 ;;		Absolute function
 13597 ;;		_PIN_MANAGER_IOC
 13598 ;;		_TMR0_ISR
 13599 ;;		_i2c_busCollisionISR
 13600 ;;		i1_i2c_ISR
 13601 ;; This function is called by:
 13602 ;;		Interrupt level 1
 13603 ;; This function uses a non-reentrant model
 13604 ;;
 13605                           
 13606  0004                     _INTERRUPT_InterruptManager:	
 13607                           
 13608                           ;incstack = 0
 13609  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 13610                           
 13611                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13612  0005  3180               	pagesel	$
 13613  0006                     i1l7595:	
 13614                           
 13615                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 13616  0006  1E8B               	btfss	11,5	;volatile
 13617  0007  2809               	goto	u579_21
 13618  0008  280A               	goto	u579_20
 13619  0009                     u579_21:	
 13620  0009  2812               	goto	i1l394
 13621  000A                     u579_20:	
 13622  000A                     i1l7597:	
 13623  000A  1D0B               	btfss	11,2	;volatile
 13624  000B  280D               	goto	u580_21
 13625  000C  280E               	goto	u580_20
 13626  000D                     u580_21:	
 13627  000D  2812               	goto	i1l394
 13628  000E                     u580_20:	
 13629  000E                     i1l7599:	
 13630                           
 13631                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 13632  000E  3196  2634  3180   	fcall	_TMR0_ISR
 13633                           
 13634                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13635  0011  2842               	goto	i1l404
 13636  0012                     i1l394:	
 13637                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
 13638                           
 13639  0012  1D8B               	btfss	11,3	;volatile
 13640  0013  2815               	goto	u581_21
 13641  0014  2816               	goto	u581_20
 13642  0015                     u581_21:	
 13643  0015  281E               	goto	i1l396
 13644  0016                     u581_20:	
 13645  0016                     i1l7601:	
 13646  0016  1C0B               	btfss	11,0	;volatile
 13647  0017  2819               	goto	u582_21
 13648  0018  281A               	goto	u582_20
 13649  0019                     u582_21:	
 13650  0019  281E               	goto	i1l396
 13651  001A                     u582_20:	
 13652  001A                     i1l7603:	
 13653                           
 13654                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         PIN_MANAGER_IOC();
 13655  001A  3196  265C  3180   	fcall	_PIN_MANAGER_IOC
 13656                           
 13657                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 13658  001D  2842               	goto	i1l404
 13659  001E                     i1l396:	
 13660                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.PEIE == 1)
 13661                           
 13662  001E  1F0B               	btfss	11,6	;volatile
 13663  001F  2821               	goto	u583_21
 13664  0020  2822               	goto	u583_20
 13665  0021                     u583_21:	
 13666  0021  2842               	goto	i1l403
 13667  0022                     u583_20:	
 13668  0022                     i1l7605:	
 13669                           
 13670                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         if(PIE2bits.BCLIE == 1 && PIR2bits.BCLIF == 1)
 13671  0022  0021               	movlb	1	; select bank1
 13672  0023  1D92               	btfss	18,3	;volatile
 13673  0024  2826               	goto	u584_21
 13674  0025  2827               	goto	u584_20
 13675  0026                     u584_21:	
 13676  0026  2832               	goto	i1l399
 13677  0027                     u584_20:	
 13678  0027                     i1l7607:	
 13679  0027  0020               	movlb	0	; select bank0
 13680  0028  1D92               	btfss	18,3	;volatile
 13681  0029  282B               	goto	u585_21
 13682  002A  282C               	goto	u585_20
 13683  002B                     u585_21:	
 13684  002B  2832               	goto	i1l399
 13685  002C                     u585_20:	
 13686  002C                     i1l7609:	
 13687                           
 13688                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c_driver_busCollisionISR();
 13689  002C  0839               	movf	_i2c_driver_busCollisionISR+1,w
 13690  002D  008A               	movwf	10
 13691  002E  0838               	movf	_i2c_driver_busCollisionISR,w
 13692  002F  000A               	callw
 13693  0030  3180               	pagesel	$
 13694                           
 13695                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13696  0031  2842               	goto	i1l404
 13697  0032                     i1l399:	
 13698                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
 13699                           
 13700  0032  0021               	movlb	1	; select bank1
 13701  0033  1D91               	btfss	17,3	;volatile
 13702  0034  2836               	goto	u586_21
 13703  0035  2837               	goto	u586_20
 13704  0036                     u586_21:	
 13705  0036  2842               	goto	i1l403
 13706  0037                     u586_20:	
 13707  0037                     i1l7611:	
 13708  0037  0020               	movlb	0	; select bank0
 13709  0038  1D91               	btfss	17,3	;volatile
 13710  0039  283B               	goto	u587_21
 13711  003A  283C               	goto	u587_20
 13712  003B                     u587_21:	
 13713  003B  2842               	goto	i1l403
 13714  003C                     u587_20:	
 13715  003C                     i1l7613:	
 13716                           
 13717                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c_driver_i2cISR();
 13718  003C  0837               	movf	_i2c_driver_i2cISR+1,w
 13719  003D  008A               	movwf	10
 13720  003E  0836               	movf	_i2c_driver_i2cISR,w
 13721  003F  000A               	callw
 13722  0040  3180               	pagesel	$
 13723                           
 13724                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 13725  0041  2842               	goto	i1l404
 13726  0042                     i1l403:	
 13727                           ;mcc_generated_files/interrupt_manager.c: 79:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 81:     }
 13728                           
 13729  0042                     i1l404:	
 13730  0042  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 13731  0043  0009               	retfie
 13732  0044                     __end_of_INTERRUPT_InterruptManager:	
 13733                           
 13734                           	psect	text90
 13735  0AEC                     __ptext90:	
 13736 ;; *************** function i1_i2c_ISR *****************
 13737 ;; Defined at:
 13738 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 13739 ;; Parameters:    Size  Location     Type
 13740 ;;		None
 13741 ;; Auto vars:     Size  Location     Type
 13742 ;;		None
 13743 ;; Return value:  Size  Location     Type
 13744 ;;                  1    wreg      void 
 13745 ;; Registers used:
 13746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13755 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13756 ;;Total ram usage:        3 bytes
 13757 ;; Hardware stack levels used:    1
 13758 ;; Hardware stack levels required when called:    4
 13759 ;; This function calls:
 13760 ;;		i1_do_I2C_DO_ACK
 13761 ;;		i1_do_I2C_DO_ADDRESS_NACK
 13762 ;;		i1_do_I2C_DO_NACK_RESTART
 13763 ;;		i1_do_I2C_DO_NACK_STOP
 13764 ;;		i1_do_I2C_IDLE
 13765 ;;		i1_do_I2C_RCEN
 13766 ;;		i1_do_I2C_RESET
 13767 ;;		i1_do_I2C_RX
 13768 ;;		i1_do_I2C_SEND_ADR_READ
 13769 ;;		i1_do_I2C_SEND_ADR_WRITE
 13770 ;;		i1_do_I2C_SEND_RESTART
 13771 ;;		i1_do_I2C_SEND_RESTART_READ
 13772 ;;		i1_do_I2C_SEND_RESTART_WRITE
 13773 ;;		i1_do_I2C_SEND_STOP
 13774 ;;		i1_do_I2C_TX
 13775 ;;		i1_do_I2C_TX_EMPTY
 13776 ;;		i1_i2c_driver_isNACK
 13777 ;;		i1_mssp_clearIRQ
 13778 ;; This function is called by:
 13779 ;;		_INTERRUPT_InterruptManager
 13780 ;; This function uses a non-reentrant model
 13781 ;;
 13782                           
 13783                           
 13784                           ;psect for function i1_i2c_ISR
 13785  0AEC                     i1_i2c_ISR:	
 13786  0AEC                     i1l7495:	
 13787                           ;incstack = 0
 13788                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13789                           
 13790                           
 13791                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
 13792  0AEC  3195  258B  318A   	fcall	i1_mssp_clearIRQ
 13793  0AEF                     i1l7497:	
 13794                           
 13795                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
 13796  0AEF  0021               	movlb	1	; select bank1
 13797  0AF0  1DA0               	btfss	_i2c_status^(0+128),3
 13798  0AF1  2AF3               	goto	u565_21
 13799  0AF2  2AF4               	goto	u565_20
 13800  0AF3                     u565_21:	
 13801  0AF3  2B00               	goto	i1l7503
 13802  0AF4                     u565_20:	
 13803  0AF4                     i1l7499:	
 13804  0AF4  3196  263C  318A   	fcall	i1_i2c_driver_isNACK
 13805  0AF7  1C03               	btfss	3,0
 13806  0AF8  2AFA               	goto	u566_21
 13807  0AF9  2AFB               	goto	u566_20
 13808  0AFA                     u566_21:	
 13809  0AFA  2B00               	goto	i1l7503
 13810  0AFB                     u566_20:	
 13811  0AFB                     i1l7501:	
 13812                           
 13813                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 13814  0AFB  300F               	movlw	15
 13815  0AFC  00F3               	movwf	??i1_i2c_ISR
 13816  0AFD  0873               	movf	??i1_i2c_ISR,w
 13817  0AFE  0021               	movlb	1	; select bank1
 13818  0AFF  00A9               	movwf	(_i2c_status^(0+128)+9)
 13819  0B00                     i1l7503:	
 13820                           
 13821                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 13822  0B00  0021               	movlb	1	; select bank1
 13823  0B01  0829               	movf	(_i2c_status^(0+128)+9),w
 13824  0B02  00F3               	movwf	??i1_i2c_ISR
 13825  0B03  01F4               	clrf	??i1_i2c_ISR+1
 13826  0B04  35F3               	lslf	??i1_i2c_ISR,f
 13827  0B05  0DF4               	rlf	??i1_i2c_ISR+1,f
 13828  0B06  3000               	movlw	low (_fsmStateTable| (0+32768))
 13829  0B07  0773               	addwf	??i1_i2c_ISR,w
 13830  0B08  0084               	movwf	4
 13831  0B09  3090               	movlw	high (_fsmStateTable| (0+32768))
 13832  0B0A  3D74               	addwfc	??i1_i2c_ISR+1,w
 13833  0B0B  0085               	movwf	5
 13834  0B0C  3F01               	moviw [1]fsr0
 13835  0B0D  008A               	movwf	10
 13836  0B0E  3F00               	moviw [0]fsr0
 13837  0B0F  000A               	callw
 13838  0B10  318A               	pagesel	$
 13839  0B11  00F5               	movwf	??i1_i2c_ISR+2
 13840  0B12  0875               	movf	??i1_i2c_ISR+2,w
 13841  0B13  0021               	movlb	1	; select bank1
 13842  0B14  00A9               	movwf	(_i2c_status^(0+128)+9)
 13843  0B15                     i1l198:	
 13844  0B15  0008               	return
 13845  0B16                     __end_ofi1_i2c_ISR:	
 13846                           
 13847                           	psect	text91
 13848  158B                     __ptext91:	
 13849 ;; *************** function i1_mssp_clearIRQ *****************
 13850 ;; Defined at:
 13851 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;		None
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;		None
 13856 ;; Return value:  Size  Location     Type
 13857 ;;                  1    wreg      void 
 13858 ;; Registers used:
 13859 ;;		None
 13860 ;; Tracked objects:
 13861 ;;		On entry : 0/0
 13862 ;;		On exit  : 0/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;Total ram usage:        0 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; This function calls:
 13872 ;;		Nothing
 13873 ;; This function is called by:
 13874 ;;		i1_i2c_ISR
 13875 ;; This function uses a non-reentrant model
 13876 ;;
 13877                           
 13878                           
 13879                           ;psect for function i1_mssp_clearIRQ
 13880  158B                     i1_mssp_clearIRQ:	
 13881  158B                     i1l5131:	
 13882                           ;incstack = 0
 13883                           ; Regs used in i1_mssp_clearIRQ: []
 13884                           
 13885                           
 13886                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
 13887  158B  0020               	movlb	0	; select bank0
 13888  158C  1191               	bcf	17,3	;volatile
 13889  158D                     i1l599:	
 13890  158D  0008               	return
 13891  158E                     __end_ofi1_mssp_clearIRQ:	
 13892                           
 13893                           	psect	text92
 13894  0E09                     __ptext92:	
 13895 ;; *************** function i1_do_I2C_RX *****************
 13896 ;; Defined at:
 13897 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13898 ;; Parameters:    Size  Location     Type
 13899 ;;		None
 13900 ;; Auto vars:     Size  Location     Type
 13901 ;;		None
 13902 ;; Return value:  Size  Location     Type
 13903 ;;                  1    wreg      enum E3411
 13904 ;; Registers used:
 13905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13906 ;; Tracked objects:
 13907 ;;		On entry : 0/0
 13908 ;;		On exit  : 0/0
 13909 ;;		Unchanged: 0/0
 13910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13913 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13914 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13915 ;;Total ram usage:        3 bytes
 13916 ;; Hardware stack levels used:    1
 13917 ;; Hardware stack levels required when called:    3
 13918 ;; This function calls:
 13919 ;;		Absolute function
 13920 ;;		i1_do_I2C_DO_NACK_RESTART
 13921 ;;		i1_do_I2C_DO_NACK_STOP
 13922 ;;		i1_i2c_driver_getRXData
 13923 ;;		i1_i2c_driver_sendACK
 13924 ;;		i1_i2c_restartWrite
 13925 ;;		i1_rd1RegCompleteHandler
 13926 ;;		i1_rd2RegCompleteHandler
 13927 ;;		i1_rdBlkRegCompleteHandler
 13928 ;;		i1_returnReset
 13929 ;;		i1_returnStop
 13930 ;;		i1_wr1RegCompleteHandler
 13931 ;;		i1_wr2RegCompleteHandler
 13932 ;; This function is called by:
 13933 ;; This function uses a non-reentrant model
 13934 ;;
 13935                           
 13936                           
 13937                           ;psect for function i1_do_I2C_RX
 13938  0E09                     i1_do_I2C_RX:	
 13939  0E09                     i1l7069:	
 13940                           ;incstack = 0
 13941                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13942                           
 13943                           
 13944                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
 13945  0E09  3195  2585  318E   	fcall	i1_i2c_driver_getRXData
 13946  0E0C  00F0               	movwf	??i1_do_I2C_RX
 13947  0E0D  0021               	movlb	1	; select bank1
 13948  0E0E  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 13949  0E0F  0086               	movwf	6
 13950  0E10  0187               	clrf	7
 13951  0E11  0870               	movf	??i1_do_I2C_RX,w
 13952  0E12  0081               	movwf	1
 13953  0E13                     i1l7071:	
 13954  0E13  3001               	movlw	1
 13955  0E14  00F0               	movwf	??i1_do_I2C_RX
 13956  0E15  0870               	movf	??i1_do_I2C_RX,w
 13957  0E16  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
 13958  0E17                     i1l7073:	
 13959                           
 13960                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 13961  0E17  3001               	movlw	1
 13962  0E18  02A3               	subwf	(_i2c_status^(0+128)+3),f
 13963  0E19  3000               	movlw	0
 13964  0E1A  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 13965  0E1B  0823               	movf	(_i2c_status^(0+128)+3),w
 13966  0E1C  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 13967  0E1D  1903               	btfsc	3,2
 13968  0E1E  2E20               	goto	u523_21
 13969  0E1F  2E21               	goto	u523_20
 13970  0E20                     u523_21:	
 13971  0E20  2E26               	goto	i1l173
 13972  0E21                     u523_20:	
 13973  0E21                     i1l7075:	
 13974                           
 13975                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
 13976  0E21  3195  25A7  318E   	fcall	i1_i2c_driver_sendACK
 13977  0E24                     i1l7077:	
 13978                           
 13979                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 13980  0E24  3005               	movlw	5
 13981  0E25  2E53               	goto	i1l174
 13982  0E26                     i1l173:	
 13983                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 13984                           
 13985                           
 13986                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 13987  0E26  1520               	bsf	_i2c_status^(0+128),2
 13988                           
 13989                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 13990  0E27  2E30               	goto	i1l7093
 13991  0E28                     i1l7083:	
 13992                           
 13993                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 13994  0E28  3195  25E7  318E   	fcall	i1_do_I2C_DO_NACK_RESTART
 13995  0E2B  2E53               	goto	i1l174
 13996  0E2C                     i1l7087:	
 13997                           
 13998                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 13999  0E2C  3195  25E2  318E   	fcall	i1_do_I2C_DO_NACK_STOP
 14000  0E2F  2E53               	goto	i1l174
 14001  0E30                     i1l7093:	
 14002  0E30  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 14003  0E31  00F0               	movwf	??i1_do_I2C_RX
 14004  0E32  0870               	movf	??i1_do_I2C_RX,w
 14005  0E33  0020               	movlb	0	; select bank0
 14006  0E34  00D6               	movwf	i1wr1RegCompleteHandler@p
 14007  0E35  300B               	movlw	11
 14008  0E36  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14009  0E37  0086               	movwf	6
 14010  0E38  0187               	clrf	7
 14011  0E39  3F41               	moviw [1]fsr1
 14012  0E3A  008A               	movwf	10
 14013  0E3B  3F40               	moviw [0]fsr1
 14014  0E3C  000A               	callw
 14015  0E3D  318E               	pagesel	$
 14016  0E3E  00F1               	movwf	??i1_do_I2C_RX+1
 14017  0E3F  01F2               	clrf	??i1_do_I2C_RX+2
 14018                           
 14019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14020                           ; Switch size 1, requested type "simple"
 14021                           ; Number of cases is 1, Range of values is 0 to 0
 14022                           ; switch strategies available:
 14023                           ; Name         Instructions Cycles
 14024                           ; simple_byte            4     3 (average)
 14025                           ; direct_byte            8     6 (fixed)
 14026                           ; jumptable            260     6 (fixed)
 14027                           ;	Chosen strategy is simple_byte
 14028  0E40  0872               	movf	??i1_do_I2C_RX+2,w
 14029  0E41  3A00               	xorlw	0	; case 0
 14030  0E42  1903               	skipnz
 14031  0E43  2E45               	goto	i1l8371
 14032  0E44  2E2C               	goto	i1l7087
 14033  0E45                     i1l8371:	
 14034                           
 14035                           ; Switch size 1, requested type "simple"
 14036                           ; Number of cases is 4, Range of values is 1 to 4
 14037                           ; switch strategies available:
 14038                           ; Name         Instructions Cycles
 14039                           ; simple_byte           13     7 (average)
 14040                           ; direct_byte           17     9 (fixed)
 14041                           ; jumptable            263     9 (fixed)
 14042                           ;	Chosen strategy is simple_byte
 14043  0E45  0871               	movf	??i1_do_I2C_RX+1,w
 14044  0E46  3A01               	xorlw	1	; case 1
 14045  0E47  1903               	skipnz
 14046  0E48  2E2C               	goto	i1l7087
 14047  0E49  3A03               	xorlw	3	; case 2
 14048  0E4A  1903               	skipnz
 14049  0E4B  2E28               	goto	i1l7083
 14050  0E4C  3A01               	xorlw	1	; case 3
 14051  0E4D  1903               	skipnz
 14052  0E4E  2E28               	goto	i1l7083
 14053  0E4F  3A07               	xorlw	7	; case 4
 14054  0E50  1903               	skipnz
 14055  0E51  2E2C               	goto	i1l7087
 14056  0E52  2E2C               	goto	i1l7087
 14057  0E53                     i1l174:	
 14058  0E53  0008               	return
 14059  0E54                     __end_ofi1_do_I2C_RX:	
 14060                           
 14061                           	psect	text93
 14062  0EF8                     __ptext93:	
 14063 ;; *************** function i1_do_I2C_TX *****************
 14064 ;; Defined at:
 14065 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 14066 ;; Parameters:    Size  Location     Type
 14067 ;;		None
 14068 ;; Auto vars:     Size  Location     Type
 14069 ;;		None
 14070 ;; Return value:  Size  Location     Type
 14071 ;;                  1    wreg      enum E3411
 14072 ;; Registers used:
 14073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14074 ;; Tracked objects:
 14075 ;;		On entry : 0/0
 14076 ;;		On exit  : 0/0
 14077 ;;		Unchanged: 0/0
 14078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;Total ram usage:        3 bytes
 14084 ;; Hardware stack levels used:    1
 14085 ;; Hardware stack levels required when called:    3
 14086 ;; This function calls:
 14087 ;;		Absolute function
 14088 ;;		i1_do_I2C_SEND_RESTART_READ
 14089 ;;		i1_do_I2C_SEND_RESTART_WRITE
 14090 ;;		i1_do_I2C_SEND_STOP
 14091 ;;		i1_i2c_driver_TXData
 14092 ;;		i1_i2c_driver_isNACK
 14093 ;;		i1_i2c_restartWrite
 14094 ;;		i1_rd1RegCompleteHandler
 14095 ;;		i1_rd2RegCompleteHandler
 14096 ;;		i1_rdBlkRegCompleteHandler
 14097 ;;		i1_returnReset
 14098 ;;		i1_returnStop
 14099 ;;		i1_wr1RegCompleteHandler
 14100 ;;		i1_wr2RegCompleteHandler
 14101 ;; This function is called by:
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           
 14106                           ;psect for function i1_do_I2C_TX
 14107  0EF8                     i1_do_I2C_TX:	
 14108  0EF8                     i1l7035:	
 14109                           ;incstack = 0
 14110                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14111                           
 14112                           
 14113                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
 14114  0EF8  3196  263C  318E   	fcall	i1_i2c_driver_isNACK
 14115  0EFB  1C03               	btfss	3,0
 14116  0EFC  2EFE               	goto	u521_21
 14117  0EFD  2EFF               	goto	u521_20
 14118  0EFE                     u521_21:	
 14119  0EFE  2F30               	goto	i1l157
 14120  0EFF                     u521_20:	
 14121  0EFF  2F0C               	goto	i1l7053
 14122  0F00                     i1l7039:	
 14123                           
 14124                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 14125  0F00  3195  25C9  318E   	fcall	i1_do_I2C_SEND_RESTART_READ
 14126  0F03  2F4C               	goto	i1l160
 14127  0F04                     i1l7043:	
 14128                           
 14129                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 14130  0F04  3195  25CE  318E   	fcall	i1_do_I2C_SEND_RESTART_WRITE
 14131  0F07  2F4C               	goto	i1l160
 14132  0F08                     i1l7047:	
 14133                           
 14134                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 14135  0F08  3195  25D8  318E   	fcall	i1_do_I2C_SEND_STOP
 14136  0F0B  2F4C               	goto	i1l160
 14137  0F0C                     i1l7053:	
 14138  0F0C  0021               	movlb	1	; select bank1
 14139  0F0D  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
 14140  0F0E  00F0               	movwf	??i1_do_I2C_TX
 14141  0F0F  0870               	movf	??i1_do_I2C_TX,w
 14142  0F10  0020               	movlb	0	; select bank0
 14143  0F11  00D6               	movwf	i1wr1RegCompleteHandler@p
 14144  0F12  3011               	movlw	17
 14145  0F13  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14146  0F14  0086               	movwf	6
 14147  0F15  0187               	clrf	7
 14148  0F16  3F41               	moviw [1]fsr1
 14149  0F17  008A               	movwf	10
 14150  0F18  3F40               	moviw [0]fsr1
 14151  0F19  000A               	callw
 14152  0F1A  318E               	pagesel	$
 14153  0F1B  00F1               	movwf	??i1_do_I2C_TX+1
 14154  0F1C  01F2               	clrf	??i1_do_I2C_TX+2
 14155                           
 14156                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14157                           ; Switch size 1, requested type "simple"
 14158                           ; Number of cases is 1, Range of values is 0 to 0
 14159                           ; switch strategies available:
 14160                           ; Name         Instructions Cycles
 14161                           ; simple_byte            4     3 (average)
 14162                           ; direct_byte            8     6 (fixed)
 14163                           ; jumptable            260     6 (fixed)
 14164                           ;	Chosen strategy is simple_byte
 14165  0F1D  0872               	movf	??i1_do_I2C_TX+2,w
 14166  0F1E  3A00               	xorlw	0	; case 0
 14167  0F1F  1903               	skipnz
 14168  0F20  2F22               	goto	i1l8373
 14169  0F21  2F08               	goto	i1l7047
 14170  0F22                     i1l8373:	
 14171                           
 14172                           ; Switch size 1, requested type "simple"
 14173                           ; Number of cases is 4, Range of values is 1 to 4
 14174                           ; switch strategies available:
 14175                           ; Name         Instructions Cycles
 14176                           ; simple_byte           13     7 (average)
 14177                           ; direct_byte           17     9 (fixed)
 14178                           ; jumptable            263     9 (fixed)
 14179                           ;	Chosen strategy is simple_byte
 14180  0F22  0871               	movf	??i1_do_I2C_TX+1,w
 14181  0F23  3A01               	xorlw	1	; case 1
 14182  0F24  1903               	skipnz
 14183  0F25  2F08               	goto	i1l7047
 14184  0F26  3A03               	xorlw	3	; case 2
 14185  0F27  1903               	skipnz
 14186  0F28  2F00               	goto	i1l7039
 14187  0F29  3A01               	xorlw	1	; case 3
 14188  0F2A  1903               	skipnz
 14189  0F2B  2F04               	goto	i1l7043
 14190  0F2C  3A07               	xorlw	7	; case 4
 14191  0F2D  1903               	skipnz
 14192  0F2E  2F08               	goto	i1l7047
 14193  0F2F  2F08               	goto	i1l7047
 14194  0F30                     i1l157:	
 14195                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 14196                           
 14197                           
 14198                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 14199  0F30  0021               	movlb	1	; select bank1
 14200  0F31  11A0               	bcf	_i2c_status^(0+128),3
 14201  0F32                     i1l7055:	
 14202                           
 14203                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
 14204  0F32  3002               	movlw	2
 14205  0F33  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14206  0F34  0086               	movwf	6
 14207  0F35  0187               	clrf	7
 14208  0F36  3F40               	moviw [0]fsr1
 14209  0F37  0084               	movwf	4
 14210  0F38  0185               	clrf	5
 14211  0F39  0A81               	incf	1,f
 14212  0F3A  0800               	movf	0,w
 14213  0F3B  3195  25BF  318E   	fcall	i1_i2c_driver_TXData
 14214  0F3E                     i1l7057:	
 14215                           
 14216                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 14217  0F3E  3001               	movlw	1
 14218  0F3F  0021               	movlb	1	; select bank1
 14219  0F40  02A3               	subwf	(_i2c_status^(0+128)+3),f
 14220  0F41  3000               	movlw	0
 14221  0F42  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 14222  0F43  0823               	movf	(_i2c_status^(0+128)+3),w
 14223  0F44  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 14224  0F45  1D03               	btfss	3,2
 14225  0F46  2F48               	goto	u522_21
 14226  0F47  2F49               	goto	u522_20
 14227  0F48                     u522_21:	
 14228  0F48  2F4B               	goto	i1l7061
 14229  0F49                     u522_20:	
 14230  0F49                     i1l7059:	
 14231  0F49  3006               	movlw	6
 14232  0F4A  2F4C               	goto	i1l160
 14233  0F4B                     i1l7061:	
 14234  0F4B  3003               	movlw	3
 14235  0F4C                     i1l160:	
 14236  0F4C  0008               	return
 14237  0F4D                     __end_ofi1_do_I2C_TX:	
 14238                           
 14239                           	psect	text94
 14240  0B40                     __ptext94:	
 14241 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 14242 ;; Defined at:
 14243 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;		None
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;		None
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      enum E3411
 14250 ;; Registers used:
 14251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;Total ram usage:        3 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    3
 14264 ;; This function calls:
 14265 ;;		Absolute function
 14266 ;;		i1_do_I2C_SEND_RESTART
 14267 ;;		i1_do_I2C_SEND_STOP
 14268 ;;		i1_i2c_restartWrite
 14269 ;;		i1_rd1RegCompleteHandler
 14270 ;;		i1_rd2RegCompleteHandler
 14271 ;;		i1_rdBlkRegCompleteHandler
 14272 ;;		i1_returnReset
 14273 ;;		i1_returnStop
 14274 ;;		i1_wr1RegCompleteHandler
 14275 ;;		i1_wr2RegCompleteHandler
 14276 ;; This function is called by:
 14277 ;; This function uses a non-reentrant model
 14278 ;;
 14279                           
 14280                           
 14281                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 14282  0B40                     i1_do_I2C_DO_ADDRESS_NACK:	
 14283  0B40                     i1l7013:	
 14284                           ;incstack = 0
 14285                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14286                           
 14287                           
 14288                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 14289  0B40  0021               	movlb	1	; select bank1
 14290  0B41  11A0               	bcf	_i2c_status^(0+128),3
 14291  0B42                     i1l7015:	
 14292                           
 14293                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 14294  0B42  3002               	movlw	2
 14295  0B43  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 14296  0B44  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 14297  0B45  00AA               	movwf	(_i2c_status^(0+128)+10)
 14298                           
 14299                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 14300  0B46  2B4F               	goto	i1l7027
 14301  0B47                     i1l7017:	
 14302                           
 14303                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 14304  0B47  3195  25D3  318B   	fcall	i1_do_I2C_SEND_RESTART
 14305  0B4A  2B6C               	goto	i1l152
 14306  0B4B                     i1l7021:	
 14307                           
 14308                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 14309  0B4B  3195  25D8  318B   	fcall	i1_do_I2C_SEND_STOP
 14310  0B4E  2B6C               	goto	i1l152
 14311  0B4F                     i1l7027:	
 14312  0B4F  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
 14313  0B50  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 14314  0B51  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 14315  0B52  0020               	movlb	0	; select bank0
 14316  0B53  00D6               	movwf	i1wr1RegCompleteHandler@p
 14317  0B54  300F               	movlw	15
 14318  0B55  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14319  0B56  0086               	movwf	6
 14320  0B57  0187               	clrf	7
 14321  0B58  3F41               	moviw [1]fsr1
 14322  0B59  008A               	movwf	10
 14323  0B5A  3F40               	moviw [0]fsr1
 14324  0B5B  000A               	callw
 14325  0B5C  318B               	pagesel	$
 14326  0B5D  00F1               	movwf	??i1_do_I2C_DO_ADDRESS_NACK+1
 14327  0B5E  01F2               	clrf	??i1_do_I2C_DO_ADDRESS_NACK+2
 14328                           
 14329                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14330                           ; Switch size 1, requested type "simple"
 14331                           ; Number of cases is 1, Range of values is 0 to 0
 14332                           ; switch strategies available:
 14333                           ; Name         Instructions Cycles
 14334                           ; simple_byte            4     3 (average)
 14335                           ; direct_byte            8     6 (fixed)
 14336                           ; jumptable            260     6 (fixed)
 14337                           ;	Chosen strategy is simple_byte
 14338  0B5F  0872               	movf	??i1_do_I2C_DO_ADDRESS_NACK+2,w
 14339  0B60  3A00               	xorlw	0	; case 0
 14340  0B61  1903               	skipnz
 14341  0B62  2B64               	goto	i1l8375
 14342  0B63  2B4B               	goto	i1l7021
 14343  0B64                     i1l8375:	
 14344                           
 14345                           ; Switch size 1, requested type "simple"
 14346                           ; Number of cases is 2, Range of values is 2 to 3
 14347                           ; switch strategies available:
 14348                           ; Name         Instructions Cycles
 14349                           ; simple_byte            7     4 (average)
 14350                           ; direct_byte           13     9 (fixed)
 14351                           ; jumptable            263     9 (fixed)
 14352                           ;	Chosen strategy is simple_byte
 14353  0B64  0871               	movf	??i1_do_I2C_DO_ADDRESS_NACK+1,w
 14354  0B65  3A02               	xorlw	2	; case 2
 14355  0B66  1903               	skipnz
 14356  0B67  2B47               	goto	i1l7017
 14357  0B68  3A01               	xorlw	1	; case 3
 14358  0B69  1903               	skipnz
 14359  0B6A  2B47               	goto	i1l7017
 14360  0B6B  2B4B               	goto	i1l7021
 14361  0B6C                     i1l152:	
 14362  0B6C  0008               	return
 14363  0B6D                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 14364                           
 14365                           	psect	text95
 14366  15E7                     __ptext95:	
 14367 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 14368 ;; Defined at:
 14369 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 14370 ;; Parameters:    Size  Location     Type
 14371 ;;		None
 14372 ;; Auto vars:     Size  Location     Type
 14373 ;;		None
 14374 ;; Return value:  Size  Location     Type
 14375 ;;                  1    wreg      enum E3411
 14376 ;; Registers used:
 14377 ;;		wreg, status,2, status,0, pclath, cstack
 14378 ;; Tracked objects:
 14379 ;;		On entry : 0/0
 14380 ;;		On exit  : 0/0
 14381 ;;		Unchanged: 0/0
 14382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;Total ram usage:        0 bytes
 14388 ;; Hardware stack levels used:    1
 14389 ;; Hardware stack levels required when called:    1
 14390 ;; This function calls:
 14391 ;;		i1_i2c_driver_sendNACK
 14392 ;; This function is called by:
 14393 ;;		i1_do_I2C_RX
 14394 ;; This function uses a non-reentrant model
 14395 ;;
 14396                           
 14397                           
 14398                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 14399  15E7                     i1_do_I2C_DO_NACK_RESTART:	
 14400  15E7                     i1l4739:	
 14401                           ;incstack = 0
 14402                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14403                           
 14404                           
 14405                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
 14406  15E7  3195  25AB  3195   	fcall	i1_i2c_driver_sendNACK
 14407  15EA                     i1l4741:	
 14408                           
 14409                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 14410  15EA  3009               	movlw	9
 14411  15EB                     i1l146:	
 14412  15EB  0008               	return
 14413  15EC                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 14414                           
 14415                           	psect	text96
 14416  15E2                     __ptext96:	
 14417 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 14418 ;; Defined at:
 14419 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 14420 ;; Parameters:    Size  Location     Type
 14421 ;;		None
 14422 ;; Auto vars:     Size  Location     Type
 14423 ;;		None
 14424 ;; Return value:  Size  Location     Type
 14425 ;;                  1    wreg      enum E3411
 14426 ;; Registers used:
 14427 ;;		wreg, status,2, status,0, pclath, cstack
 14428 ;; Tracked objects:
 14429 ;;		On entry : 0/0
 14430 ;;		On exit  : 0/0
 14431 ;;		Unchanged: 0/0
 14432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;Total ram usage:        0 bytes
 14438 ;; Hardware stack levels used:    1
 14439 ;; Hardware stack levels required when called:    1
 14440 ;; This function calls:
 14441 ;;		i1_i2c_driver_sendNACK
 14442 ;; This function is called by:
 14443 ;;		i1_do_I2C_RX
 14444 ;; This function uses a non-reentrant model
 14445 ;;
 14446                           
 14447                           
 14448                           ;psect for function i1_do_I2C_DO_NACK_STOP
 14449  15E2                     i1_do_I2C_DO_NACK_STOP:	
 14450  15E2                     i1l4733:	
 14451                           ;incstack = 0
 14452                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 14453                           
 14454                           
 14455                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
 14456  15E2  3195  25AB  3195   	fcall	i1_i2c_driver_sendNACK
 14457  15E5                     i1l4735:	
 14458                           
 14459                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 14460  15E5  300A               	movlw	10
 14461  15E6                     i1l143:	
 14462  15E6  0008               	return
 14463  15E7                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 14464                           
 14465                           	psect	text97
 14466  15DD                     __ptext97:	
 14467 ;; *************** function i1_do_I2C_DO_ACK *****************
 14468 ;; Defined at:
 14469 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 14470 ;; Parameters:    Size  Location     Type
 14471 ;;		None
 14472 ;; Auto vars:     Size  Location     Type
 14473 ;;		None
 14474 ;; Return value:  Size  Location     Type
 14475 ;;                  1    wreg      enum E3411
 14476 ;; Registers used:
 14477 ;;		wreg, status,2, status,0, pclath, cstack
 14478 ;; Tracked objects:
 14479 ;;		On entry : 0/0
 14480 ;;		On exit  : 0/0
 14481 ;;		Unchanged: 0/0
 14482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;Total ram usage:        0 bytes
 14488 ;; Hardware stack levels used:    1
 14489 ;; Hardware stack levels required when called:    1
 14490 ;; This function calls:
 14491 ;;		i1_i2c_driver_sendACK
 14492 ;; This function is called by:
 14493 ;; This function uses a non-reentrant model
 14494 ;;
 14495                           
 14496                           
 14497                           ;psect for function i1_do_I2C_DO_ACK
 14498  15DD                     i1_do_I2C_DO_ACK:	
 14499  15DD                     i1l5011:	
 14500                           ;incstack = 0
 14501                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 14502                           
 14503                           
 14504                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
 14505  15DD  3195  25A7  3195   	fcall	i1_i2c_driver_sendACK
 14506  15E0                     i1l5013:	
 14507                           
 14508                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 14509  15E0  3005               	movlw	5
 14510  15E1                     i1l140:	
 14511  15E1  0008               	return
 14512  15E2                     __end_ofi1_do_I2C_DO_ACK:	
 14513                           
 14514                           	psect	text98
 14515  162D                     __ptext98:	
 14516 ;; *************** function i1_do_I2C_RCEN *****************
 14517 ;; Defined at:
 14518 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 14519 ;; Parameters:    Size  Location     Type
 14520 ;;		None
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;		None
 14523 ;; Return value:  Size  Location     Type
 14524 ;;                  1    wreg      enum E3411
 14525 ;; Registers used:
 14526 ;;		wreg, status,2, status,0, pclath, cstack
 14527 ;; Tracked objects:
 14528 ;;		On entry : 0/0
 14529 ;;		On exit  : 0/0
 14530 ;;		Unchanged: 0/0
 14531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;Total ram usage:        0 bytes
 14537 ;; Hardware stack levels used:    1
 14538 ;; Hardware stack levels required when called:    1
 14539 ;; This function calls:
 14540 ;;		i1_i2c_driver_startRX
 14541 ;; This function is called by:
 14542 ;; This function uses a non-reentrant model
 14543 ;;
 14544                           
 14545                           
 14546                           ;psect for function i1_do_I2C_RCEN
 14547  162D                     i1_do_I2C_RCEN:	
 14548  162D                     i1l5003:	
 14549                           ;incstack = 0
 14550                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 14551                           
 14552                           
 14553                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 14554  162D  0021               	movlb	1	; select bank1
 14555  162E  11A0               	bcf	_i2c_status^(0+128),3
 14556  162F                     i1l5005:	
 14557                           
 14558                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
 14559  162F  3195  2582  3196   	fcall	i1_i2c_driver_startRX
 14560  1632                     i1l5007:	
 14561                           
 14562                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 14563  1632  3004               	movlw	4
 14564  1633                     i1l137:	
 14565  1633  0008               	return
 14566  1634                     __end_ofi1_do_I2C_RCEN:	
 14567                           
 14568                           	psect	text99
 14569  164C                     __ptext99:	
 14570 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 14571 ;; Defined at:
 14572 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 14573 ;; Parameters:    Size  Location     Type
 14574 ;;		None
 14575 ;; Auto vars:     Size  Location     Type
 14576 ;;		None
 14577 ;; Return value:  Size  Location     Type
 14578 ;;                  1    wreg      enum E3411
 14579 ;; Registers used:
 14580 ;;		wreg, status,2, status,0, pclath, cstack
 14581 ;; Tracked objects:
 14582 ;;		On entry : 0/0
 14583 ;;		On exit  : 0/0
 14584 ;;		Unchanged: 0/0
 14585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;Total ram usage:        0 bytes
 14591 ;; Hardware stack levels used:    1
 14592 ;; Hardware stack levels required when called:    1
 14593 ;; This function calls:
 14594 ;;		i1_i2c_driver_TXData
 14595 ;; This function is called by:
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           
 14600                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 14601  164C                     i1_do_I2C_SEND_ADR_WRITE:	
 14602  164C                     i1l4995:	
 14603                           ;incstack = 0
 14604                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14605                           
 14606                           
 14607                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 14608  164C  0021               	movlb	1	; select bank1
 14609  164D  15A0               	bsf	_i2c_status^(0+128),3
 14610  164E                     i1l4997:	
 14611                           
 14612                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
 14613  164E  3521               	lslf	(_i2c_status^(0+128)+1),w
 14614  164F  3195  25BF  3196   	fcall	i1_i2c_driver_TXData
 14615  1652                     i1l4999:	
 14616                           
 14617                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 14618  1652  3003               	movlw	3
 14619  1653                     i1l134:	
 14620  1653  0008               	return
 14621  1654                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 14622                           
 14623                           	psect	text100
 14624  1665                     __ptext100:	
 14625 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 14626 ;; Defined at:
 14627 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 14628 ;; Parameters:    Size  Location     Type
 14629 ;;		None
 14630 ;; Auto vars:     Size  Location     Type
 14631 ;;		None
 14632 ;; Return value:  Size  Location     Type
 14633 ;;                  1    wreg      enum E3411
 14634 ;; Registers used:
 14635 ;;		wreg, status,2, status,0, pclath, cstack
 14636 ;; Tracked objects:
 14637 ;;		On entry : 0/0
 14638 ;;		On exit  : 0/0
 14639 ;;		Unchanged: 0/0
 14640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;Total ram usage:        0 bytes
 14646 ;; Hardware stack levels used:    1
 14647 ;; Hardware stack levels required when called:    1
 14648 ;; This function calls:
 14649 ;;		i1_i2c_driver_TXData
 14650 ;; This function is called by:
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           
 14655                           ;psect for function i1_do_I2C_SEND_ADR_READ
 14656  1665                     i1_do_I2C_SEND_ADR_READ:	
 14657  1665                     i1l4987:	
 14658                           ;incstack = 0
 14659                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 14660                           
 14661                           
 14662                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 14663  1665  0021               	movlb	1	; select bank1
 14664  1666  15A0               	bsf	_i2c_status^(0+128),3
 14665  1667                     i1l4989:	
 14666                           
 14667                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
 14668  1667  1403               	setc
 14669  1668  0D21               	rlf	(_i2c_status^(0+128)+1),w
 14670  1669  3195  25BF  3196   	fcall	i1_i2c_driver_TXData
 14671  166C                     i1l4991:	
 14672                           
 14673                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 14674  166C  3005               	movlw	5
 14675  166D                     i1l131:	
 14676  166D  0008               	return
 14677  166E                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 14678                           
 14679                           	psect	text101
 14680  15D8                     __ptext101:	
 14681 ;; *************** function i1_do_I2C_SEND_STOP *****************
 14682 ;; Defined at:
 14683 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;		None
 14686 ;; Auto vars:     Size  Location     Type
 14687 ;;		None
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  1    wreg      enum E3411
 14690 ;; Registers used:
 14691 ;;		wreg, status,2, status,0, pclath, cstack
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;Total ram usage:        0 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:    1
 14704 ;; This function calls:
 14705 ;;		i1_i2c_driver_stop
 14706 ;; This function is called by:
 14707 ;;		i1_do_I2C_DO_ADDRESS_NACK
 14708 ;;		i1_do_I2C_TX
 14709 ;;		i1_do_I2C_TX_EMPTY
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           
 14714                           ;psect for function i1_do_I2C_SEND_STOP
 14715  15D8                     i1_do_I2C_SEND_STOP:	
 14716  15D8                     i1l4727:	
 14717                           ;incstack = 0
 14718                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 14719                           
 14720                           
 14721                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
 14722  15D8  3195  257F  3195   	fcall	i1_i2c_driver_stop
 14723  15DB                     i1l4729:	
 14724                           
 14725                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 14726  15DB  3000               	movlw	0
 14727  15DC                     i1l128:	
 14728  15DC  0008               	return
 14729  15DD                     __end_ofi1_do_I2C_SEND_STOP:	
 14730                           
 14731                           	psect	text102
 14732  15D3                     __ptext102:	
 14733 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 14734 ;; Defined at:
 14735 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;		None
 14738 ;; Auto vars:     Size  Location     Type
 14739 ;;		None
 14740 ;; Return value:  Size  Location     Type
 14741 ;;                  1    wreg      enum E3411
 14742 ;; Registers used:
 14743 ;;		wreg, status,2, status,0, pclath, cstack
 14744 ;; Tracked objects:
 14745 ;;		On entry : 0/0
 14746 ;;		On exit  : 0/0
 14747 ;;		Unchanged: 0/0
 14748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14753 ;;Total ram usage:        0 bytes
 14754 ;; Hardware stack levels used:    1
 14755 ;; Hardware stack levels required when called:    1
 14756 ;; This function calls:
 14757 ;;		i1_i2c_driver_restart
 14758 ;; This function is called by:
 14759 ;;		i1_do_I2C_DO_ADDRESS_NACK
 14760 ;;		i1_do_I2C_TX_EMPTY
 14761 ;; This function uses a non-reentrant model
 14762 ;;
 14763                           
 14764                           
 14765                           ;psect for function i1_do_I2C_SEND_RESTART
 14766  15D3                     i1_do_I2C_SEND_RESTART:	
 14767  15D3                     i1l4721:	
 14768                           ;incstack = 0
 14769                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14770                           
 14771                           
 14772                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
 14773  15D3  3195  257C  3195   	fcall	i1_i2c_driver_restart
 14774  15D6                     i1l4723:	
 14775                           
 14776                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 14777  15D6  3001               	movlw	1
 14778  15D7                     i1l125:	
 14779  15D7  0008               	return
 14780  15D8                     __end_ofi1_do_I2C_SEND_RESTART:	
 14781                           
 14782                           	psect	text103
 14783  15CE                     __ptext103:	
 14784 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 14785 ;; Defined at:
 14786 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 14787 ;; Parameters:    Size  Location     Type
 14788 ;;		None
 14789 ;; Auto vars:     Size  Location     Type
 14790 ;;		None
 14791 ;; Return value:  Size  Location     Type
 14792 ;;                  1    wreg      enum E3411
 14793 ;; Registers used:
 14794 ;;		wreg, status,2, status,0, pclath, cstack
 14795 ;; Tracked objects:
 14796 ;;		On entry : 0/0
 14797 ;;		On exit  : 0/0
 14798 ;;		Unchanged: 0/0
 14799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14804 ;;Total ram usage:        0 bytes
 14805 ;; Hardware stack levels used:    1
 14806 ;; Hardware stack levels required when called:    1
 14807 ;; This function calls:
 14808 ;;		i1_i2c_driver_restart
 14809 ;; This function is called by:
 14810 ;;		i1_do_I2C_TX
 14811 ;; This function uses a non-reentrant model
 14812 ;;
 14813                           
 14814                           
 14815                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 14816  15CE                     i1_do_I2C_SEND_RESTART_WRITE:	
 14817  15CE                     i1l4715:	
 14818                           ;incstack = 0
 14819                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14820                           
 14821                           
 14822                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
 14823  15CE  3195  257C  3195   	fcall	i1_i2c_driver_restart
 14824  15D1                     i1l4717:	
 14825                           
 14826                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 14827  15D1  3002               	movlw	2
 14828  15D2                     i1l122:	
 14829  15D2  0008               	return
 14830  15D3                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 14831                           
 14832                           	psect	text104
 14833  15C9                     __ptext104:	
 14834 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 14835 ;; Defined at:
 14836 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 14837 ;; Parameters:    Size  Location     Type
 14838 ;;		None
 14839 ;; Auto vars:     Size  Location     Type
 14840 ;;		None
 14841 ;; Return value:  Size  Location     Type
 14842 ;;                  1    wreg      enum E3411
 14843 ;; Registers used:
 14844 ;;		wreg, status,2, status,0, pclath, cstack
 14845 ;; Tracked objects:
 14846 ;;		On entry : 0/0
 14847 ;;		On exit  : 0/0
 14848 ;;		Unchanged: 0/0
 14849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;Total ram usage:        0 bytes
 14855 ;; Hardware stack levels used:    1
 14856 ;; Hardware stack levels required when called:    1
 14857 ;; This function calls:
 14858 ;;		i1_i2c_driver_restart
 14859 ;; This function is called by:
 14860 ;;		i1_do_I2C_TX
 14861 ;; This function uses a non-reentrant model
 14862 ;;
 14863                           
 14864                           
 14865                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 14866  15C9                     i1_do_I2C_SEND_RESTART_READ:	
 14867  15C9                     i1l4709:	
 14868                           ;incstack = 0
 14869                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 14870                           
 14871                           
 14872                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
 14873  15C9  3195  257C  3195   	fcall	i1_i2c_driver_restart
 14874  15CC                     i1l4711:	
 14875                           
 14876                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 14877  15CC  3001               	movlw	1
 14878  15CD                     i1l119:	
 14879  15CD  0008               	return
 14880  15CE                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 14881                           
 14882                           	psect	text105
 14883  15C4                     __ptext105:	
 14884 ;; *************** function i1_do_I2C_IDLE *****************
 14885 ;; Defined at:
 14886 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 14887 ;; Parameters:    Size  Location     Type
 14888 ;;		None
 14889 ;; Auto vars:     Size  Location     Type
 14890 ;;		None
 14891 ;; Return value:  Size  Location     Type
 14892 ;;                  1    wreg      enum E3411
 14893 ;; Registers used:
 14894 ;;		wreg, status,2
 14895 ;; Tracked objects:
 14896 ;;		On entry : 0/0
 14897 ;;		On exit  : 0/0
 14898 ;;		Unchanged: 0/0
 14899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14904 ;;Total ram usage:        0 bytes
 14905 ;; Hardware stack levels used:    1
 14906 ;; This function calls:
 14907 ;;		Nothing
 14908 ;; This function is called by:
 14909 ;; This function uses a non-reentrant model
 14910 ;;
 14911                           
 14912                           
 14913                           ;psect for function i1_do_I2C_IDLE
 14914  15C4                     i1_do_I2C_IDLE:	
 14915  15C4                     i1l4979:	
 14916                           ;incstack = 0
 14917                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 14918                           
 14919                           
 14920                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 14921  15C4  0021               	movlb	1	; select bank1
 14922  15C5  1020               	bcf	_i2c_status^(0+128),0
 14923  15C6                     i1l4981:	
 14924                           
 14925                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 14926  15C6  01AA               	clrf	(_i2c_status^(0+128)+10)
 14927  15C7                     i1l4983:	
 14928                           
 14929                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 14930  15C7  300E               	movlw	14
 14931  15C8                     i1l116:	
 14932  15C8  0008               	return
 14933  15C9                     __end_ofi1_do_I2C_IDLE:	
 14934                           
 14935                           	psect	text106
 14936  1644                     __ptext106:	
 14937 ;; *************** function i1_do_I2C_RESET *****************
 14938 ;; Defined at:
 14939 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14940 ;; Parameters:    Size  Location     Type
 14941 ;;		None
 14942 ;; Auto vars:     Size  Location     Type
 14943 ;;		None
 14944 ;; Return value:  Size  Location     Type
 14945 ;;                  1    wreg      enum E3411
 14946 ;; Registers used:
 14947 ;;		wreg, status,2, status,0, pclath, cstack
 14948 ;; Tracked objects:
 14949 ;;		On entry : 0/0
 14950 ;;		On exit  : 0/0
 14951 ;;		Unchanged: 0/0
 14952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;Total ram usage:        0 bytes
 14958 ;; Hardware stack levels used:    1
 14959 ;; Hardware stack levels required when called:    1
 14960 ;; This function calls:
 14961 ;;		i1_i2c_driver_resetBus
 14962 ;; This function is called by:
 14963 ;; This function uses a non-reentrant model
 14964 ;;
 14965                           
 14966                           
 14967                           ;psect for function i1_do_I2C_RESET
 14968  1644                     i1_do_I2C_RESET:	
 14969  1644                     i1l4969:	
 14970                           ;incstack = 0
 14971                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14972                           
 14973                           
 14974                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
 14975  1644  3195  2574  3196   	fcall	i1_i2c_driver_resetBus
 14976  1647                     i1l4971:	
 14977                           
 14978                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 14979  1647  0021               	movlb	1	; select bank1
 14980  1648  1020               	bcf	_i2c_status^(0+128),0
 14981  1649                     i1l4973:	
 14982                           
 14983                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 14984  1649  01AA               	clrf	(_i2c_status^(0+128)+10)
 14985  164A                     i1l4975:	
 14986                           
 14987                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 14988  164A  300E               	movlw	14
 14989  164B                     i1l113:	
 14990  164B  0008               	return
 14991  164C                     __end_ofi1_do_I2C_RESET:	
 14992                           
 14993                           	psect	text107
 14994  0BCB                     __ptext107:	
 14995 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 14996 ;; Defined at:
 14997 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;		None
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;		None
 15002 ;; Return value:  Size  Location     Type
 15003 ;;                  1    wreg      enum E3411
 15004 ;; Registers used:
 15005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;Total ram usage:        3 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; Hardware stack levels required when called:    3
 15018 ;; This function calls:
 15019 ;;		Absolute function
 15020 ;;		i1_do_I2C_SEND_RESTART
 15021 ;;		i1_do_I2C_SEND_STOP
 15022 ;;		i1_i2c_restartWrite
 15023 ;;		i1_mssp_setIRQ
 15024 ;;		i1_rd1RegCompleteHandler
 15025 ;;		i1_rd2RegCompleteHandler
 15026 ;;		i1_rdBlkRegCompleteHandler
 15027 ;;		i1_returnReset
 15028 ;;		i1_returnStop
 15029 ;;		i1_wr1RegCompleteHandler
 15030 ;;		i1_wr2RegCompleteHandler
 15031 ;; This function is called by:
 15032 ;; This function uses a non-reentrant model
 15033 ;;
 15034                           
 15035                           
 15036                           ;psect for function i1_do_I2C_TX_EMPTY
 15037  0BCB                     i1_do_I2C_TX_EMPTY:	
 15038  0BCB                     i1l7101:	
 15039                           ;incstack = 0
 15040                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15041                           
 15042                           
 15043                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 15044  0BCB  0021               	movlb	1	; select bank1
 15045  0BCC  1520               	bsf	_i2c_status^(0+128),2
 15046                           
 15047                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 15048  0BCD  2BDB               	goto	i1l7119
 15049  0BCE                     i1l7103:	
 15050                           
 15051                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 15052  0BCE  3195  25D3  318B   	fcall	i1_do_I2C_SEND_RESTART
 15053  0BD1  2BFE               	goto	i1l188
 15054  0BD2                     i1l7107:	
 15055                           
 15056                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
 15057  0BD2  3195  2588  318B   	fcall	i1_mssp_setIRQ
 15058  0BD5                     i1l7109:	
 15059                           
 15060                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 15061  0BD5  3003               	movlw	3
 15062  0BD6  2BFE               	goto	i1l188
 15063  0BD7                     i1l7113:	
 15064                           
 15065                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 15066  0BD7  3195  25D8  318B   	fcall	i1_do_I2C_SEND_STOP
 15067  0BDA  2BFE               	goto	i1l188
 15068  0BDB                     i1l7119:	
 15069  0BDB  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 15070  0BDC  00F0               	movwf	??i1_do_I2C_TX_EMPTY
 15071  0BDD  0870               	movf	??i1_do_I2C_TX_EMPTY,w
 15072  0BDE  0020               	movlb	0	; select bank0
 15073  0BDF  00D6               	movwf	i1wr1RegCompleteHandler@p
 15074  0BE0  300B               	movlw	11
 15075  0BE1  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 15076  0BE2  0086               	movwf	6
 15077  0BE3  0187               	clrf	7
 15078  0BE4  3F41               	moviw [1]fsr1
 15079  0BE5  008A               	movwf	10
 15080  0BE6  3F40               	moviw [0]fsr1
 15081  0BE7  000A               	callw
 15082  0BE8  318B               	pagesel	$
 15083  0BE9  00F1               	movwf	??i1_do_I2C_TX_EMPTY+1
 15084  0BEA  01F2               	clrf	??i1_do_I2C_TX_EMPTY+2
 15085                           
 15086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15087                           ; Switch size 1, requested type "simple"
 15088                           ; Number of cases is 1, Range of values is 0 to 0
 15089                           ; switch strategies available:
 15090                           ; Name         Instructions Cycles
 15091                           ; simple_byte            4     3 (average)
 15092                           ; direct_byte            8     6 (fixed)
 15093                           ; jumptable            260     6 (fixed)
 15094                           ;	Chosen strategy is simple_byte
 15095  0BEB  0872               	movf	??i1_do_I2C_TX_EMPTY+2,w
 15096  0BEC  3A00               	xorlw	0	; case 0
 15097  0BED  1903               	skipnz
 15098  0BEE  2BF0               	goto	i1l8377
 15099  0BEF  2BD7               	goto	i1l7113
 15100  0BF0                     i1l8377:	
 15101                           
 15102                           ; Switch size 1, requested type "simple"
 15103                           ; Number of cases is 4, Range of values is 1 to 4
 15104                           ; switch strategies available:
 15105                           ; Name         Instructions Cycles
 15106                           ; simple_byte           13     7 (average)
 15107                           ; direct_byte           17     9 (fixed)
 15108                           ; jumptable            263     9 (fixed)
 15109                           ;	Chosen strategy is simple_byte
 15110  0BF0  0871               	movf	??i1_do_I2C_TX_EMPTY+1,w
 15111  0BF1  3A01               	xorlw	1	; case 1
 15112  0BF2  1903               	skipnz
 15113  0BF3  2BD7               	goto	i1l7113
 15114  0BF4  3A03               	xorlw	3	; case 2
 15115  0BF5  1903               	skipnz
 15116  0BF6  2BCE               	goto	i1l7103
 15117  0BF7  3A01               	xorlw	1	; case 3
 15118  0BF8  1903               	skipnz
 15119  0BF9  2BCE               	goto	i1l7103
 15120  0BFA  3A07               	xorlw	7	; case 4
 15121  0BFB  1903               	skipnz
 15122  0BFC  2BD2               	goto	i1l7107
 15123  0BFD  2BD7               	goto	i1l7113
 15124  0BFE                     i1l188:	
 15125  0BFE  0008               	return
 15126  0BFF                     __end_ofi1_do_I2C_TX_EMPTY:	
 15127                           
 15128                           	psect	text108
 15129  1588                     __ptext108:	
 15130 ;; *************** function i1_mssp_setIRQ *****************
 15131 ;; Defined at:
 15132 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
 15133 ;; Parameters:    Size  Location     Type
 15134 ;;		None
 15135 ;; Auto vars:     Size  Location     Type
 15136 ;;		None
 15137 ;; Return value:  Size  Location     Type
 15138 ;;                  1    wreg      void 
 15139 ;; Registers used:
 15140 ;;		None
 15141 ;; Tracked objects:
 15142 ;;		On entry : 0/0
 15143 ;;		On exit  : 0/0
 15144 ;;		Unchanged: 0/0
 15145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15150 ;;Total ram usage:        0 bytes
 15151 ;; Hardware stack levels used:    1
 15152 ;; This function calls:
 15153 ;;		Nothing
 15154 ;; This function is called by:
 15155 ;;		i1_do_I2C_TX_EMPTY
 15156 ;; This function uses a non-reentrant model
 15157 ;;
 15158                           
 15159                           
 15160                           ;psect for function i1_mssp_setIRQ
 15161  1588                     i1_mssp_setIRQ:	
 15162  1588                     i1l4795:	
 15163                           ;incstack = 0
 15164                           ; Regs used in i1_mssp_setIRQ: []
 15165                           
 15166                           
 15167                           ;mcc_generated_files/i2c_driver.c: 61:     else
 15168  1588  0020               	movlb	0	; select bank0
 15169  1589  1591               	bsf	17,3	;volatile
 15170  158A                     i1l602:	
 15171  158A  0008               	return
 15172  158B                     __end_ofi1_mssp_setIRQ:	
 15173                           
 15174                           	psect	text109
 15175  163C                     __ptext109:	
 15176 ;; *************** function i1_i2c_driver_isNACK *****************
 15177 ;; Defined at:
 15178 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
 15179 ;; Parameters:    Size  Location     Type
 15180 ;;		None
 15181 ;; Auto vars:     Size  Location     Type
 15182 ;;		None
 15183 ;; Return value:  Size  Location     Type
 15184 ;;		None               void
 15185 ;; Registers used:
 15186 ;;		wreg, status,2, status,0
 15187 ;; Tracked objects:
 15188 ;;		On entry : 0/0
 15189 ;;		On exit  : 0/0
 15190 ;;		Unchanged: 0/0
 15191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15196 ;;Total ram usage:        1 bytes
 15197 ;; Hardware stack levels used:    1
 15198 ;; This function calls:
 15199 ;;		Nothing
 15200 ;; This function is called by:
 15201 ;;		i1_do_I2C_TX
 15202 ;;		i1_i2c_ISR
 15203 ;; This function uses a non-reentrant model
 15204 ;;
 15205                           
 15206                           
 15207                           ;psect for function i1_i2c_driver_isNACK
 15208  163C                     i1_i2c_driver_isNACK:	
 15209  163C                     i1l4797:	
 15210                           ;incstack = 0
 15211                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 15212                           
 15213                           
 15214                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
 15215  163C  0024               	movlb	4	; select bank4
 15216  163D  0E16               	swapf	22,w	;volatile
 15217  163E  0C89               	rrf	9,f
 15218  163F  0C89               	rrf	9,f
 15219  1640  3901               	andlw	1
 15220  1641  00F0               	movwf	??i1_i2c_driver_isNACK
 15221  1642  0C70               	rrf	??i1_i2c_driver_isNACK,w
 15222  1643                     i1l637:	
 15223  1643  0008               	return
 15224  1644                     __end_ofi1_i2c_driver_isNACK:	
 15225                           
 15226                           	psect	text110
 15227  15BF                     __ptext110:	
 15228 ;; *************** function i1_i2c_driver_TXData *****************
 15229 ;; Defined at:
 15230 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;  d               1    wreg     unsigned char 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  d               1    0[COMMON] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		wreg
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15247 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15248 ;;Total ram usage:        1 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; This function calls:
 15251 ;;		Nothing
 15252 ;; This function is called by:
 15253 ;;		i1_do_I2C_SEND_ADR_READ
 15254 ;;		i1_do_I2C_SEND_ADR_WRITE
 15255 ;;		i1_do_I2C_TX
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259                           
 15260                           ;psect for function i1_i2c_driver_TXData
 15261  15BF                     i1_i2c_driver_TXData:	
 15262                           
 15263                           ;incstack = 0
 15264                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 15265                           ;i1i2c_driver_TXData@d stored from wreg
 15266  15BF  00F0               	movwf	i1i2c_driver_TXData@d
 15267  15C0                     i1l4807:	
 15268                           
 15269                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
 15270  15C0  0870               	movf	i1i2c_driver_TXData@d,w
 15271  15C1  0024               	movlb	4	; select bank4
 15272  15C2  0091               	movwf	17	;volatile
 15273  15C3                     i1l652:	
 15274  15C3  0008               	return
 15275  15C4                     __end_ofi1_i2c_driver_TXData:	
 15276                           
 15277                           	psect	text111
 15278  1585                     __ptext111:	
 15279 ;; *************** function i1_i2c_driver_getRXData *****************
 15280 ;; Defined at:
 15281 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;		None
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;		None
 15286 ;; Return value:  Size  Location     Type
 15287 ;;                  1    wreg      unsigned char 
 15288 ;; Registers used:
 15289 ;;		wreg
 15290 ;; Tracked objects:
 15291 ;;		On entry : 0/0
 15292 ;;		On exit  : 0/0
 15293 ;;		Unchanged: 0/0
 15294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;Total ram usage:        0 bytes
 15300 ;; Hardware stack levels used:    1
 15301 ;; This function calls:
 15302 ;;		Nothing
 15303 ;; This function is called by:
 15304 ;;		i1_do_I2C_RX
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           
 15309                           ;psect for function i1_i2c_driver_getRXData
 15310  1585                     i1_i2c_driver_getRXData:	
 15311  1585                     i1l4803:	
 15312                           ;incstack = 0
 15313                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 15314                           
 15315                           
 15316                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
 15317  1585  0024               	movlb	4	; select bank4
 15318  1586  0811               	movf	17,w	;volatile
 15319  1587                     i1l643:	
 15320  1587  0008               	return
 15321  1588                     __end_ofi1_i2c_driver_getRXData:	
 15322                           
 15323                           	psect	text112
 15324  15AB                     __ptext112:	
 15325 ;; *************** function i1_i2c_driver_sendNACK *****************
 15326 ;; Defined at:
 15327 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
 15328 ;; Parameters:    Size  Location     Type
 15329 ;;		None
 15330 ;; Auto vars:     Size  Location     Type
 15331 ;;		None
 15332 ;; Return value:  Size  Location     Type
 15333 ;;                  1    wreg      void 
 15334 ;; Registers used:
 15335 ;;		None
 15336 ;; Tracked objects:
 15337 ;;		On entry : 0/0
 15338 ;;		On exit  : 0/0
 15339 ;;		Unchanged: 0/0
 15340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;Total ram usage:        0 bytes
 15346 ;; Hardware stack levels used:    1
 15347 ;; This function calls:
 15348 ;;		Nothing
 15349 ;; This function is called by:
 15350 ;;		i1_do_I2C_DO_NACK_STOP
 15351 ;;		i1_do_I2C_DO_NACK_RESTART
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           
 15356                           ;psect for function i1_i2c_driver_sendNACK
 15357  15AB                     i1_i2c_driver_sendNACK:	
 15358  15AB                     i1l4593:	
 15359                           ;incstack = 0
 15360                           ; Regs used in i1_i2c_driver_sendNACK: []
 15361                           
 15362                           
 15363                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
 15364  15AB  0024               	movlb	4	; select bank4
 15365  15AC  1696               	bsf	22,5	;volatile
 15366                           
 15367                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
 15368  15AD  1616               	bsf	22,4	;volatile
 15369  15AE                     i1l661:	
 15370  15AE  0008               	return
 15371  15AF                     __end_ofi1_i2c_driver_sendNACK:	
 15372                           
 15373                           	psect	text113
 15374  1574                     __ptext113:	
 15375 ;; *************** function i1_i2c_driver_resetBus *****************
 15376 ;; Defined at:
 15377 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;		None
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;		None
 15382 ;; Return value:  Size  Location     Type
 15383 ;;                  1    wreg      void 
 15384 ;; Registers used:
 15385 ;;		None
 15386 ;; Tracked objects:
 15387 ;;		On entry : 0/0
 15388 ;;		On exit  : 0/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;Total ram usage:        0 bytes
 15396 ;; Hardware stack levels used:    1
 15397 ;; This function calls:
 15398 ;;		Nothing
 15399 ;; This function is called by:
 15400 ;;		i1_do_I2C_RESET
 15401 ;; This function uses a non-reentrant model
 15402 ;;
 15403                           
 15404                           
 15405                           ;psect for function i1_i2c_driver_resetBus
 15406  1574                     i1_i2c_driver_resetBus:	
 15407  1574                     i1l625:	
 15408                           ;incstack = 0
 15409                           ; Regs used in i1_i2c_driver_resetBus: []
 15410                           
 15411  1574  0008               	return
 15412  1575                     __end_ofi1_i2c_driver_resetBus:	
 15413                           
 15414                           	psect	text114
 15415  1582                     __ptext114:	
 15416 ;; *************** function i1_i2c_driver_startRX *****************
 15417 ;; Defined at:
 15418 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
 15419 ;; Parameters:    Size  Location     Type
 15420 ;;		None
 15421 ;; Auto vars:     Size  Location     Type
 15422 ;;		None
 15423 ;; Return value:  Size  Location     Type
 15424 ;;                  1    wreg      void 
 15425 ;; Registers used:
 15426 ;;		None
 15427 ;; Tracked objects:
 15428 ;;		On entry : 0/0
 15429 ;;		On exit  : 0/0
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;Total ram usage:        0 bytes
 15437 ;; Hardware stack levels used:    1
 15438 ;; This function calls:
 15439 ;;		Nothing
 15440 ;; This function is called by:
 15441 ;;		i1_do_I2C_RCEN
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           
 15446                           ;psect for function i1_i2c_driver_startRX
 15447  1582                     i1_i2c_driver_startRX:	
 15448  1582                     i1l4801:	
 15449                           ;incstack = 0
 15450                           ; Regs used in i1_i2c_driver_startRX: []
 15451                           
 15452                           
 15453                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
 15454  1582  0024               	movlb	4	; select bank4
 15455  1583  1596               	bsf	22,3	;volatile
 15456  1584                     i1l640:	
 15457  1584  0008               	return
 15458  1585                     __end_ofi1_i2c_driver_startRX:	
 15459                           
 15460                           	psect	text115
 15461  0002                     __ptext115:	
 15462 ;; *************** function i1_i2c_restartWrite *****************
 15463 ;; Defined at:
 15464 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 15465 ;; Parameters:    Size  Location     Type
 15466 ;;  p               1    0[BANK0 ] PTR void 
 15467 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15468 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15469 ;; Auto vars:     Size  Location     Type
 15470 ;;		None
 15471 ;; Return value:  Size  Location     Type
 15472 ;;                  1    wreg      enum E358
 15473 ;; Registers used:
 15474 ;;		wreg
 15475 ;; Tracked objects:
 15476 ;;		On entry : 0/0
 15477 ;;		On exit  : 0/0
 15478 ;;		Unchanged: 0/0
 15479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15480 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15483 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;Total ram usage:        1 bytes
 15485 ;; Hardware stack levels used:    1
 15486 ;; This function calls:
 15487 ;;		Nothing
 15488 ;; This function is called by:
 15489 ;;		_do_I2C_DO_ADDRESS_NACK
 15490 ;;		_do_I2C_TX
 15491 ;;		_do_I2C_RX
 15492 ;;		_do_I2C_TX_EMPTY
 15493 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15494 ;;		i1_do_I2C_TX
 15495 ;;		i1_do_I2C_RX
 15496 ;;		i1_do_I2C_TX_EMPTY
 15497 ;; This function uses a non-reentrant model
 15498 ;;
 15499                           
 15500                           
 15501                           ;psect for function i1_i2c_restartWrite
 15502  0002                     i1_i2c_restartWrite:	
 15503  0002                     i1l6863:	
 15504                           ;incstack = 0
 15505                           ; Regs used in i1_i2c_restartWrite: [wreg]
 15506                           
 15507                           
 15508                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
 15509  0002  3003               	movlw	3
 15510  0003                     i1l318:	
 15511  0003  0008               	return
 15512  0004                     __end_ofi1_i2c_restartWrite:	
 15513                           
 15514                           	psect	text116
 15515  08E7                     __ptext116:	
 15516 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 15517 ;; Defined at:
 15518 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15519 ;; Parameters:    Size  Location     Type
 15520 ;;  p               1    0[BANK0 ] PTR void 
 15521 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15522 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15523 ;; Auto vars:     Size  Location     Type
 15524 ;;		None
 15525 ;; Return value:  Size  Location     Type
 15526 ;;                  1    wreg      enum E358
 15527 ;; Registers used:
 15528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15529 ;; Tracked objects:
 15530 ;;		On entry : 0/0
 15531 ;;		On exit  : 0/0
 15532 ;;		Unchanged: 0/0
 15533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15534 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;Total ram usage:        1 bytes
 15539 ;; Hardware stack levels used:    1
 15540 ;; Hardware stack levels required when called:    2
 15541 ;; This function calls:
 15542 ;;		i1_i2c_setBuffer
 15543 ;;		i1_i2c_setDataCompleteCallback
 15544 ;; This function is called by:
 15545 ;;		_do_I2C_DO_ADDRESS_NACK
 15546 ;;		_do_I2C_TX
 15547 ;;		_do_I2C_RX
 15548 ;;		_do_I2C_TX_EMPTY
 15549 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15550 ;;		i1_do_I2C_TX
 15551 ;;		i1_do_I2C_RX
 15552 ;;		i1_do_I2C_TX_EMPTY
 15553 ;; This function uses a non-reentrant model
 15554 ;;
 15555                           
 15556                           
 15557                           ;psect for function i1_rdBlkRegCompleteHandler
 15558  08E7                     i1_rdBlkRegCompleteHandler:	
 15559  08E7                     i1l6857:	
 15560                           ;incstack = 0
 15561                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 15562                           
 15563                           
 15564                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 15565  08E7  0020               	movlb	0	; select bank0
 15566  08E8  0856               	movf	i1rdBlkRegCompleteHandler@p,w
 15567  08E9  0086               	movwf	6
 15568  08EA  0187               	clrf	7
 15569  08EB  3F40               	moviw [0]fsr1
 15570  08EC  00F0               	movwf	i1i2c_setBuffer@bufferSize
 15571  08ED  3F41               	moviw [1]fsr1
 15572  08EE  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 15573  08EF  0856               	movf	i1rdBlkRegCompleteHandler@p,w
 15574  08F0  3E02               	addlw	2
 15575  08F1  0086               	movwf	6
 15576  08F2  0187               	clrf	7
 15577  08F3  0801               	movf	1,w
 15578  08F4  3197  2782  3188   	fcall	i1_i2c_setBuffer
 15579                           
 15580                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 15581  08F7  3000               	movlw	0
 15582  08F8  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 15583  08F9  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 15584  08FA  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 15585  08FB  3197  2722  3188   	fcall	i1_i2c_setDataCompleteCallback
 15586  08FE                     i1l6859:	
 15587                           
 15588                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
 15589  08FE  3002               	movlw	2
 15590  08FF                     i1l291:	
 15591  08FF  0008               	return
 15592  0900                     __end_ofi1_rdBlkRegCompleteHandler:	
 15593                           
 15594                           	psect	text117
 15595  17D9                     __ptext117:	
 15596 ;; *************** function i1_rd2RegCompleteHandler *****************
 15597 ;; Defined at:
 15598 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15599 ;; Parameters:    Size  Location     Type
 15600 ;;  p               1    0[BANK0 ] PTR void 
 15601 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15602 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15603 ;; Auto vars:     Size  Location     Type
 15604 ;;		None
 15605 ;; Return value:  Size  Location     Type
 15606 ;;                  1    wreg      enum E358
 15607 ;; Registers used:
 15608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15609 ;; Tracked objects:
 15610 ;;		On entry : 0/0
 15611 ;;		On exit  : 0/0
 15612 ;;		Unchanged: 0/0
 15613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15614 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;Total ram usage:        1 bytes
 15619 ;; Hardware stack levels used:    1
 15620 ;; Hardware stack levels required when called:    2
 15621 ;; This function calls:
 15622 ;;		i1_i2c_setBuffer
 15623 ;;		i1_i2c_setDataCompleteCallback
 15624 ;; This function is called by:
 15625 ;;		_do_I2C_DO_ADDRESS_NACK
 15626 ;;		_do_I2C_TX
 15627 ;;		_do_I2C_RX
 15628 ;;		_do_I2C_TX_EMPTY
 15629 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15630 ;;		i1_do_I2C_TX
 15631 ;;		i1_do_I2C_RX
 15632 ;;		i1_do_I2C_TX_EMPTY
 15633 ;; This function uses a non-reentrant model
 15634 ;;
 15635                           
 15636                           
 15637                           ;psect for function i1_rd2RegCompleteHandler
 15638  17D9                     i1_rd2RegCompleteHandler:	
 15639  17D9                     i1l6841:	
 15640                           ;incstack = 0
 15641                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15642                           
 15643                           
 15644                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
 15645  17D9  3002               	movlw	2
 15646  17DA  00F0               	movwf	i1i2c_setBuffer@bufferSize
 15647  17DB  3000               	movlw	0
 15648  17DC  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 15649  17DD  0020               	movlb	0	; select bank0
 15650  17DE  0856               	movf	i1rd2RegCompleteHandler@p,w
 15651  17DF  3197  2782  3197   	fcall	i1_i2c_setBuffer
 15652  17E2                     i1l6843:	
 15653                           
 15654                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 15655  17E2  3000               	movlw	0
 15656  17E3  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 15657  17E4  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 15658  17E5  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 15659  17E6  3197  2722  3197   	fcall	i1_i2c_setDataCompleteCallback
 15660  17E9                     i1l6845:	
 15661                           
 15662                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
 15663  17E9  3002               	movlw	2
 15664  17EA                     i1l267:	
 15665  17EA  0008               	return
 15666  17EB                     __end_ofi1_rd2RegCompleteHandler:	
 15667                           
 15668                           	psect	text118
 15669  17C7                     __ptext118:	
 15670 ;; *************** function i1_rd1RegCompleteHandler *****************
 15671 ;; Defined at:
 15672 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;  p               1    0[BANK0 ] PTR void 
 15675 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15676 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15677 ;; Auto vars:     Size  Location     Type
 15678 ;;		None
 15679 ;; Return value:  Size  Location     Type
 15680 ;;                  1    wreg      enum E358
 15681 ;; Registers used:
 15682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15683 ;; Tracked objects:
 15684 ;;		On entry : 0/0
 15685 ;;		On exit  : 0/0
 15686 ;;		Unchanged: 0/0
 15687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15688 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;Total ram usage:        1 bytes
 15693 ;; Hardware stack levels used:    1
 15694 ;; Hardware stack levels required when called:    2
 15695 ;; This function calls:
 15696 ;;		i1_i2c_setBuffer
 15697 ;;		i1_i2c_setDataCompleteCallback
 15698 ;; This function is called by:
 15699 ;;		_do_I2C_DO_ADDRESS_NACK
 15700 ;;		_do_I2C_TX
 15701 ;;		_do_I2C_RX
 15702 ;;		_do_I2C_TX_EMPTY
 15703 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15704 ;;		i1_do_I2C_TX
 15705 ;;		i1_do_I2C_RX
 15706 ;;		i1_do_I2C_TX_EMPTY
 15707 ;; This function uses a non-reentrant model
 15708 ;;
 15709                           
 15710                           
 15711                           ;psect for function i1_rd1RegCompleteHandler
 15712  17C7                     i1_rd1RegCompleteHandler:	
 15713  17C7                     i1l6833:	
 15714                           ;incstack = 0
 15715                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15716                           
 15717                           
 15718                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
 15719  17C7  3001               	movlw	1
 15720  17C8  00F0               	movwf	i1i2c_setBuffer@bufferSize
 15721  17C9  3000               	movlw	0
 15722  17CA  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 15723  17CB  0020               	movlb	0	; select bank0
 15724  17CC  0856               	movf	i1rd1RegCompleteHandler@p,w
 15725  17CD  3197  2782  3197   	fcall	i1_i2c_setBuffer
 15726  17D0                     i1l6835:	
 15727                           
 15728                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 15729  17D0  3000               	movlw	0
 15730  17D1  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 15731  17D2  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 15732  17D3  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 15733  17D4  3197  2722  3197   	fcall	i1_i2c_setDataCompleteCallback
 15734  17D7                     i1l6837:	
 15735                           
 15736                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
 15737  17D7  3002               	movlw	2
 15738  17D8                     i1l252:	
 15739  17D8  0008               	return
 15740  17D9                     __end_ofi1_rd1RegCompleteHandler:	
 15741                           
 15742                           	psect	text119
 15743  17B5                     __ptext119:	
 15744 ;; *************** function i1_wr1RegCompleteHandler *****************
 15745 ;; Defined at:
 15746 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15747 ;; Parameters:    Size  Location     Type
 15748 ;;  p               1    0[BANK0 ] PTR void 
 15749 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15750 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15751 ;; Auto vars:     Size  Location     Type
 15752 ;;		None
 15753 ;; Return value:  Size  Location     Type
 15754 ;;                  1    wreg      enum E358
 15755 ;; Registers used:
 15756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15757 ;; Tracked objects:
 15758 ;;		On entry : 0/0
 15759 ;;		On exit  : 0/0
 15760 ;;		Unchanged: 0/0
 15761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15762 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;Total ram usage:        1 bytes
 15767 ;; Hardware stack levels used:    1
 15768 ;; Hardware stack levels required when called:    2
 15769 ;; This function calls:
 15770 ;;		i1_i2c_setBuffer
 15771 ;;		i1_i2c_setDataCompleteCallback
 15772 ;; This function is called by:
 15773 ;;		_do_I2C_DO_ADDRESS_NACK
 15774 ;;		_do_I2C_TX
 15775 ;;		_do_I2C_RX
 15776 ;;		_do_I2C_TX_EMPTY
 15777 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15778 ;;		i1_do_I2C_TX
 15779 ;;		i1_do_I2C_RX
 15780 ;;		i1_do_I2C_TX_EMPTY
 15781 ;; This function uses a non-reentrant model
 15782 ;;
 15783                           
 15784                           
 15785                           ;psect for function i1_wr1RegCompleteHandler
 15786  17B5                     i1_wr1RegCompleteHandler:	
 15787  17B5                     i1l6825:	
 15788                           ;incstack = 0
 15789                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15790                           
 15791                           
 15792                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
 15793  17B5  3001               	movlw	1
 15794  17B6  00F0               	movwf	i1i2c_setBuffer@bufferSize
 15795  17B7  3000               	movlw	0
 15796  17B8  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 15797  17B9  0020               	movlb	0	; select bank0
 15798  17BA  0856               	movf	i1wr1RegCompleteHandler@p,w
 15799  17BB  3197  2782  3197   	fcall	i1_i2c_setBuffer
 15800  17BE                     i1l6827:	
 15801                           
 15802                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 15803  17BE  3000               	movlw	0
 15804  17BF  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 15805  17C0  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 15806  17C1  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 15807  17C2  3197  2722  3197   	fcall	i1_i2c_setDataCompleteCallback
 15808  17C5                     i1l6829:	
 15809                           
 15810                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
 15811  17C5  3004               	movlw	4
 15812  17C6                     i1l231:	
 15813  17C6  0008               	return
 15814  17C7                     __end_ofi1_wr1RegCompleteHandler:	
 15815                           
 15816                           	psect	text120
 15817  1577                     __ptext120:	
 15818 ;; *************** function i1_returnReset *****************
 15819 ;; Defined at:
 15820 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 15821 ;; Parameters:    Size  Location     Type
 15822 ;;  p               1    0[BANK0 ] PTR void 
 15823 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15824 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;		None
 15827 ;; Return value:  Size  Location     Type
 15828 ;;                  1    wreg      enum E3257
 15829 ;; Registers used:
 15830 ;;		wreg
 15831 ;; Tracked objects:
 15832 ;;		On entry : 0/0
 15833 ;;		On exit  : 0/0
 15834 ;;		Unchanged: 0/0
 15835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15836 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15839 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15840 ;;Total ram usage:        1 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; This function calls:
 15843 ;;		Nothing
 15844 ;; This function is called by:
 15845 ;;		_do_I2C_DO_ADDRESS_NACK
 15846 ;;		_do_I2C_TX
 15847 ;;		_do_I2C_RX
 15848 ;;		_do_I2C_TX_EMPTY
 15849 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15850 ;;		i1_do_I2C_TX
 15851 ;;		i1_do_I2C_RX
 15852 ;;		i1_do_I2C_TX_EMPTY
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           
 15857                           ;psect for function i1_returnReset
 15858  1577                     i1_returnReset:	
 15859  1577                     i1l6821:	
 15860                           ;incstack = 0
 15861                           ; Regs used in i1_returnReset: [wreg]
 15862                           
 15863                           
 15864                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 15865  1577  3005               	movlw	5
 15866  1578                     i1l207:	
 15867  1578  0008               	return
 15868  1579                     __end_ofi1_returnReset:	
 15869                           
 15870                           	psect	text121
 15871  1575                     __ptext121:	
 15872 ;; *************** function i1_returnStop *****************
 15873 ;; Defined at:
 15874 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 15875 ;; Parameters:    Size  Location     Type
 15876 ;;  p               1    0[BANK0 ] PTR void 
 15877 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15878 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15879 ;; Auto vars:     Size  Location     Type
 15880 ;;		None
 15881 ;; Return value:  Size  Location     Type
 15882 ;;                  1    wreg      enum E3257
 15883 ;; Registers used:
 15884 ;;		wreg
 15885 ;; Tracked objects:
 15886 ;;		On entry : 0/0
 15887 ;;		On exit  : 0/0
 15888 ;;		Unchanged: 0/0
 15889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15890 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15894 ;;Total ram usage:        1 bytes
 15895 ;; Hardware stack levels used:    1
 15896 ;; This function calls:
 15897 ;;		Nothing
 15898 ;; This function is called by:
 15899 ;;		i1_setCallBack
 15900 ;;		_do_I2C_DO_ADDRESS_NACK
 15901 ;;		_do_I2C_TX
 15902 ;;		_do_I2C_RX
 15903 ;;		_do_I2C_TX_EMPTY
 15904 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15905 ;;		i1_do_I2C_TX
 15906 ;;		i1_do_I2C_RX
 15907 ;;		i1_do_I2C_TX_EMPTY
 15908 ;; This function uses a non-reentrant model
 15909 ;;
 15910                           
 15911                           
 15912                           ;psect for function i1_returnStop
 15913  1575                     i1_returnStop:	
 15914  1575                     i1l6817:	
 15915                           ;incstack = 0
 15916                           ; Regs used in i1_returnStop: [wreg]
 15917                           
 15918                           
 15919                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 15920  1575  3001               	movlw	1
 15921  1576                     i1l204:	
 15922  1576  0008               	return
 15923  1577                     __end_ofi1_returnStop:	
 15924                           
 15925                           	psect	text122
 15926  17A3                     __ptext122:	
 15927 ;; *************** function i1_wr2RegCompleteHandler *****************
 15928 ;; Defined at:
 15929 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15930 ;; Parameters:    Size  Location     Type
 15931 ;;  p               1    0[BANK0 ] PTR void 
 15932 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15933 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;		None
 15936 ;; Return value:  Size  Location     Type
 15937 ;;                  1    wreg      enum E358
 15938 ;; Registers used:
 15939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15940 ;; Tracked objects:
 15941 ;;		On entry : 0/0
 15942 ;;		On exit  : 0/0
 15943 ;;		Unchanged: 0/0
 15944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15945 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15948 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;Total ram usage:        1 bytes
 15950 ;; Hardware stack levels used:    1
 15951 ;; Hardware stack levels required when called:    2
 15952 ;; This function calls:
 15953 ;;		i1_i2c_setBuffer
 15954 ;;		i1_i2c_setDataCompleteCallback
 15955 ;; This function is called by:
 15956 ;;		_do_I2C_DO_ADDRESS_NACK
 15957 ;;		_do_I2C_TX
 15958 ;;		_do_I2C_RX
 15959 ;;		_do_I2C_TX_EMPTY
 15960 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15961 ;;		i1_do_I2C_TX
 15962 ;;		i1_do_I2C_RX
 15963 ;;		i1_do_I2C_TX_EMPTY
 15964 ;; This function uses a non-reentrant model
 15965 ;;
 15966                           
 15967                           
 15968                           ;psect for function i1_wr2RegCompleteHandler
 15969  17A3                     i1_wr2RegCompleteHandler:	
 15970  17A3                     i1l6849:	
 15971                           ;incstack = 0
 15972                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15973                           
 15974                           
 15975                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
 15976  17A3  3002               	movlw	2
 15977  17A4  00F0               	movwf	i1i2c_setBuffer@bufferSize
 15978  17A5  3000               	movlw	0
 15979  17A6  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 15980  17A7  0020               	movlb	0	; select bank0
 15981  17A8  0856               	movf	i1wr2RegCompleteHandler@p,w
 15982  17A9  3197  2782  3197   	fcall	i1_i2c_setBuffer
 15983  17AC                     i1l6851:	
 15984                           
 15985                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 15986  17AC  3000               	movlw	0
 15987  17AD  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 15988  17AE  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 15989  17AF  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 15990  17B0  3197  2722  3197   	fcall	i1_i2c_setDataCompleteCallback
 15991  17B3                     i1l6853:	
 15992                           
 15993                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
 15994  17B3  3004               	movlw	4
 15995  17B4                     i1l279:	
 15996  17B4  0008               	return
 15997  17B5                     __end_ofi1_wr2RegCompleteHandler:	
 15998                           
 15999                           	psect	text123
 16000  1722                     __ptext123:	
 16001 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 16002 ;; Defined at:
 16003 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 16004 ;; Parameters:    Size  Location     Type
 16005 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 16006 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 16007 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 16008 ;;  p               1    7[COMMON] PTR void 
 16009 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16010 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16011 ;; Auto vars:     Size  Location     Type
 16012 ;;		None
 16013 ;; Return value:  Size  Location     Type
 16014 ;;                  1    wreg      void 
 16015 ;; Registers used:
 16016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16017 ;; Tracked objects:
 16018 ;;		On entry : 0/0
 16019 ;;		On exit  : 0/0
 16020 ;;		Unchanged: 0/0
 16021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16022 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16026 ;;Total ram usage:        4 bytes
 16027 ;; Hardware stack levels used:    1
 16028 ;; Hardware stack levels required when called:    1
 16029 ;; This function calls:
 16030 ;;		i1_setCallBack
 16031 ;; This function is called by:
 16032 ;;		i1_wr1RegCompleteHandler
 16033 ;;		i1_rd1RegCompleteHandler
 16034 ;;		i1_rd2RegCompleteHandler
 16035 ;;		i1_wr2RegCompleteHandler
 16036 ;;		i1_rdBlkRegCompleteHandler
 16037 ;; This function uses a non-reentrant model
 16038 ;;
 16039                           
 16040                           
 16041                           ;psect for function i1_i2c_setDataCompleteCallback
 16042  1722                     i1_i2c_setDataCompleteCallback:	
 16043  1722                     i1l6751:	
 16044                           ;incstack = 0
 16045                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 16046                           
 16047                           
 16048                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
 16049  1722  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 16050  1723  00F1               	movwf	i1setCallBack@cb+1
 16051  1724  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 16052  1725  00F0               	movwf	i1setCallBack@cb
 16053  1726  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 16054  1727  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 16055  1728  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 16056  1729  00F2               	movwf	i1setCallBack@p
 16057  172A  3000               	movlw	0
 16058  172B  318A  224F  3197   	fcall	i1_setCallBack
 16059  172E                     i1l61:	
 16060  172E  0008               	return
 16061  172F                     __end_ofi1_i2c_setDataCompleteCallback:	
 16062                           
 16063                           	psect	text124
 16064  0A4F                     __ptext124:	
 16065 ;; *************** function i1_setCallBack *****************
 16066 ;; Defined at:
 16067 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 16068 ;; Parameters:    Size  Location     Type
 16069 ;;  idx             1    wreg     enum E3429
 16070 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 16071 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 16072 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 16073 ;;  p               1    2[COMMON] PTR void 
 16074 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16075 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16076 ;; Auto vars:     Size  Location     Type
 16077 ;;  idx             1    4[COMMON] enum E3429
 16078 ;; Return value:  Size  Location     Type
 16079 ;;                  1    wreg      void 
 16080 ;; Registers used:
 16081 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16082 ;; Tracked objects:
 16083 ;;		On entry : 0/0
 16084 ;;		On exit  : 0/0
 16085 ;;		Unchanged: 0/0
 16086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16087 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16090 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;Total ram usage:        5 bytes
 16092 ;; Hardware stack levels used:    1
 16093 ;; This function calls:
 16094 ;;		Nothing
 16095 ;; This function is called by:
 16096 ;;		i1_i2c_setDataCompleteCallback
 16097 ;; This function uses a non-reentrant model
 16098 ;;
 16099                           
 16100                           
 16101                           ;psect for function i1_setCallBack
 16102  0A4F                     i1_setCallBack:	
 16103                           
 16104                           ;incstack = 0
 16105                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 16106                           ;i1setCallBack@idx stored from wreg
 16107  0A4F  00F4               	movwf	i1setCallBack@idx
 16108  0A50                     i1l6707:	
 16109                           
 16110                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
 16111  0A50  0870               	movf	i1setCallBack@cb,w
 16112  0A51  0471               	iorwf	i1setCallBack@cb+1,w
 16113  0A52  1903               	btfsc	3,2
 16114  0A53  2A55               	goto	u496_21
 16115  0A54  2A56               	goto	u496_20
 16116  0A55                     u496_21:	
 16117  0A55  2A67               	goto	i1l6711
 16118  0A56                     u496_20:	
 16119  0A56                     i1l6709:	
 16120                           
 16121                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
 16122  0A56  3574               	lslf	i1setCallBack@idx,w
 16123  0A57  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 16124  0A58  0086               	movwf	6
 16125  0A59  0187               	clrf	7
 16126  0A5A  0870               	movf	i1setCallBack@cb,w
 16127  0A5B  3FC0               	movwi [0]fsr1
 16128  0A5C  0871               	movf	i1setCallBack@cb+1,w
 16129  0A5D  3FC1               	movwi [1]fsr1
 16130                           
 16131                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
 16132  0A5E  0872               	movf	i1setCallBack@p,w
 16133  0A5F  00F3               	movwf	??i1_setCallBack
 16134  0A60  0874               	movf	i1setCallBack@idx,w
 16135  0A61  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 16136  0A62  0086               	movwf	6
 16137  0A63  0187               	clrf	7
 16138  0A64  0873               	movf	??i1_setCallBack,w
 16139  0A65  0081               	movwf	1
 16140                           
 16141                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
 16142  0A66  2A74               	goto	i1l212
 16143  0A67                     i1l6711:	
 16144                           
 16145                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
 16146  0A67  3574               	lslf	i1setCallBack@idx,w
 16147  0A68  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 16148  0A69  0086               	movwf	6
 16149  0A6A  0187               	clrf	7
 16150  0A6B  3003               	movlw	low _returnStop
 16151  0A6C  3FC0               	movwi [0]fsr1
 16152  0A6D  3016               	movlw	high _returnStop
 16153  0A6E  3FC1               	movwi [1]fsr1
 16154                           
 16155                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
 16156  0A6F  0874               	movf	i1setCallBack@idx,w
 16157  0A70  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 16158  0A71  0086               	movwf	6
 16159  0A72  0187               	clrf	7
 16160  0A73  0181               	clrf	1
 16161  0A74                     i1l212:	
 16162  0A74  0008               	return
 16163  0A75                     __end_ofi1_setCallBack:	
 16164                           
 16165                           	psect	text125
 16166  1782                     __ptext125:	
 16167 ;; *************** function i1_i2c_setBuffer *****************
 16168 ;; Defined at:
 16169 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 16170 ;; Parameters:    Size  Location     Type
 16171 ;;  buffer          1    wreg     PTR void 
 16172 ;;		 -> rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 16173 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 16174 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 16175 ;;  bufferSize      2    0[COMMON] unsigned int 
 16176 ;; Auto vars:     Size  Location     Type
 16177 ;;  buffer          1    3[COMMON] PTR void 
 16178 ;;		 -> rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 16179 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 16180 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 16181 ;; Return value:  Size  Location     Type
 16182 ;;                  1    wreg      void 
 16183 ;; Registers used:
 16184 ;;		wreg
 16185 ;; Tracked objects:
 16186 ;;		On entry : 0/0
 16187 ;;		On exit  : 0/0
 16188 ;;		Unchanged: 0/0
 16189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16193 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16194 ;;Total ram usage:        4 bytes
 16195 ;; Hardware stack levels used:    1
 16196 ;; This function calls:
 16197 ;;		Nothing
 16198 ;; This function is called by:
 16199 ;;		i1_wr1RegCompleteHandler
 16200 ;;		i1_rd1RegCompleteHandler
 16201 ;;		i1_rd2RegCompleteHandler
 16202 ;;		i1_wr2RegCompleteHandler
 16203 ;;		i1_rdBlkRegCompleteHandler
 16204 ;; This function uses a non-reentrant model
 16205 ;;
 16206                           
 16207                           
 16208                           ;psect for function i1_i2c_setBuffer
 16209  1782                     i1_i2c_setBuffer:	
 16210                           
 16211                           ;incstack = 0
 16212                           ; Regs used in i1_i2c_setBuffer: [wreg]
 16213                           ;i1i2c_setBuffer@buffer stored from wreg
 16214  1782  00F3               	movwf	i1i2c_setBuffer@buffer
 16215  1783                     i1l4583:	
 16216                           
 16217                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
 16218  1783  0021               	movlb	1	; select bank1
 16219  1784  1D20               	btfss	_i2c_status^(0+128),2
 16220  1785  2F87               	goto	u264_21
 16221  1786  2F88               	goto	u264_20
 16222  1787                     u264_21:	
 16223  1787  2F91               	goto	i1l91
 16224  1788                     u264_20:	
 16225  1788                     i1l4585:	
 16226                           
 16227                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
 16228  1788  0873               	movf	i1i2c_setBuffer@buffer,w
 16229  1789  00F2               	movwf	??i1_i2c_setBuffer
 16230  178A  0872               	movf	??i1_i2c_setBuffer,w
 16231  178B  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 16232                           
 16233                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
 16234  178C  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 16235  178D  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
 16236  178E  0870               	movf	i1i2c_setBuffer@bufferSize,w
 16237  178F  00A3               	movwf	(_i2c_status^(0+128)+3)
 16238  1790                     i1l4587:	
 16239                           
 16240                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
 16241  1790  1120               	bcf	_i2c_status^(0+128),2
 16242  1791                     i1l91:	
 16243  1791  0008               	return
 16244  1792                     __end_ofi1_i2c_setBuffer:	
 16245                           
 16246                           	psect	text126
 16247  157F                     __ptext126:	
 16248 ;; *************** function i1_i2c_driver_stop *****************
 16249 ;; Defined at:
 16250 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
 16251 ;; Parameters:    Size  Location     Type
 16252 ;;		None
 16253 ;; Auto vars:     Size  Location     Type
 16254 ;;		None
 16255 ;; Return value:  Size  Location     Type
 16256 ;;                  1    wreg      void 
 16257 ;; Registers used:
 16258 ;;		None
 16259 ;; Tracked objects:
 16260 ;;		On entry : 0/0
 16261 ;;		On exit  : 0/0
 16262 ;;		Unchanged: 0/0
 16263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;Total ram usage:        0 bytes
 16269 ;; Hardware stack levels used:    1
 16270 ;; This function calls:
 16271 ;;		Nothing
 16272 ;; This function is called by:
 16273 ;;		i1_do_I2C_SEND_STOP
 16274 ;; This function uses a non-reentrant model
 16275 ;;
 16276                           
 16277                           
 16278                           ;psect for function i1_i2c_driver_stop
 16279  157F                     i1_i2c_driver_stop:	
 16280  157F                     i1l4591:	
 16281                           ;incstack = 0
 16282                           ; Regs used in i1_i2c_driver_stop: []
 16283                           
 16284                           
 16285                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
 16286  157F  0024               	movlb	4	; select bank4
 16287  1580  1516               	bsf	22,2	;volatile
 16288  1581                     i1l634:	
 16289  1581  0008               	return
 16290  1582                     __end_ofi1_i2c_driver_stop:	
 16291                           
 16292                           	psect	text127
 16293  157C                     __ptext127:	
 16294 ;; *************** function i1_i2c_driver_restart *****************
 16295 ;; Defined at:
 16296 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
 16297 ;; Parameters:    Size  Location     Type
 16298 ;;		None
 16299 ;; Auto vars:     Size  Location     Type
 16300 ;;		None
 16301 ;; Return value:  Size  Location     Type
 16302 ;;                  1    wreg      void 
 16303 ;; Registers used:
 16304 ;;		None
 16305 ;; Tracked objects:
 16306 ;;		On entry : 0/0
 16307 ;;		On exit  : 0/0
 16308 ;;		Unchanged: 0/0
 16309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16314 ;;Total ram usage:        0 bytes
 16315 ;; Hardware stack levels used:    1
 16316 ;; This function calls:
 16317 ;;		Nothing
 16318 ;; This function is called by:
 16319 ;;		i1_do_I2C_SEND_RESTART_READ
 16320 ;;		i1_do_I2C_SEND_RESTART_WRITE
 16321 ;;		i1_do_I2C_SEND_RESTART
 16322 ;; This function uses a non-reentrant model
 16323 ;;
 16324                           
 16325                           
 16326                           ;psect for function i1_i2c_driver_restart
 16327  157C                     i1_i2c_driver_restart:	
 16328  157C                     i1l4589:	
 16329                           ;incstack = 0
 16330                           ; Regs used in i1_i2c_driver_restart: []
 16331                           
 16332                           
 16333                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
 16334  157C  0024               	movlb	4	; select bank4
 16335  157D  1496               	bsf	22,1	;volatile
 16336  157E                     i1l631:	
 16337  157E  0008               	return
 16338  157F                     __end_ofi1_i2c_driver_restart:	
 16339                           
 16340                           	psect	text128
 16341  15A7                     __ptext128:	
 16342 ;; *************** function i1_i2c_driver_sendACK *****************
 16343 ;; Defined at:
 16344 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
 16345 ;; Parameters:    Size  Location     Type
 16346 ;;		None
 16347 ;; Auto vars:     Size  Location     Type
 16348 ;;		None
 16349 ;; Return value:  Size  Location     Type
 16350 ;;                  1    wreg      void 
 16351 ;; Registers used:
 16352 ;;		None
 16353 ;; Tracked objects:
 16354 ;;		On entry : 0/0
 16355 ;;		On exit  : 0/0
 16356 ;;		Unchanged: 0/0
 16357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16362 ;;Total ram usage:        0 bytes
 16363 ;; Hardware stack levels used:    1
 16364 ;; This function calls:
 16365 ;;		Nothing
 16366 ;; This function is called by:
 16367 ;;		i1_do_I2C_DO_ACK
 16368 ;;		i1_do_I2C_RX
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           
 16373                           ;psect for function i1_i2c_driver_sendACK
 16374  15A7                     i1_i2c_driver_sendACK:	
 16375  15A7                     i1l4809:	
 16376                           ;incstack = 0
 16377                           ; Regs used in i1_i2c_driver_sendACK: []
 16378                           
 16379                           
 16380                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
 16381  15A7  0024               	movlb	4	; select bank4
 16382  15A8  1296               	bcf	22,5	;volatile
 16383                           
 16384                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
 16385  15A9  1616               	bsf	22,4	;volatile
 16386  15AA                     i1l658:	
 16387  15AA  0008               	return
 16388  15AB                     __end_ofi1_i2c_driver_sendACK:	
 16389                           
 16390                           	psect	text129
 16391  15A3                     __ptext129:	
 16392 ;; *************** function _i2c_busCollisionISR *****************
 16393 ;; Defined at:
 16394 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 16395 ;; Parameters:    Size  Location     Type
 16396 ;;		None
 16397 ;; Auto vars:     Size  Location     Type
 16398 ;;		None
 16399 ;; Return value:  Size  Location     Type
 16400 ;;                  1    wreg      void 
 16401 ;; Registers used:
 16402 ;;		status,2, status,0, pclath, cstack
 16403 ;; Tracked objects:
 16404 ;;		On entry : 0/0
 16405 ;;		On exit  : 0/0
 16406 ;;		Unchanged: 0/0
 16407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;Total ram usage:        0 bytes
 16413 ;; Hardware stack levels used:    1
 16414 ;; Hardware stack levels required when called:    1
 16415 ;; This function calls:
 16416 ;;		_i2c_driver_clearBusCollision
 16417 ;; This function is called by:
 16418 ;;		_i2c_open
 16419 ;;		_INTERRUPT_InterruptManager
 16420 ;; This function uses a non-reentrant model
 16421 ;;
 16422                           
 16423                           
 16424                           ;psect for function _i2c_busCollisionISR
 16425  15A3                     _i2c_busCollisionISR:	
 16426  15A3                     i1l5137:	
 16427                           ;incstack = 0
 16428                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 16429                           
 16430                           
 16431                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c_driver_clearBusCollision();
 16432  15A3  3195  2579  3195   	fcall	_i2c_driver_clearBusCollision
 16433  15A6                     i1l201:	
 16434  15A6  0008               	return
 16435  15A7                     __end_of_i2c_busCollisionISR:	
 16436                           
 16437                           	psect	text130
 16438  1579                     __ptext130:	
 16439 ;; *************** function _i2c_driver_clearBusCollision *****************
 16440 ;; Defined at:
 16441 ;;		line 254 in file "mcc_generated_files/i2c_driver.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;		None
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;		None
 16446 ;; Return value:  Size  Location     Type
 16447 ;;                  1    wreg      void 
 16448 ;; Registers used:
 16449 ;;		None
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;Total ram usage:        0 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; This function calls:
 16462 ;;		Nothing
 16463 ;; This function is called by:
 16464 ;;		_i2c_busCollisionISR
 16465 ;; This function uses a non-reentrant model
 16466 ;;
 16467                           
 16468                           
 16469                           ;psect for function _i2c_driver_clearBusCollision
 16470  1579                     _i2c_driver_clearBusCollision:	
 16471  1579                     i1l4811:	
 16472                           ;incstack = 0
 16473                           ; Regs used in _i2c_driver_clearBusCollision: []
 16474                           
 16475                           
 16476                           ;mcc_generated_files/i2c_driver.c: 256:     PIR2bits.BCLIF = 0;
 16477  1579  0020               	movlb	0	; select bank0
 16478  157A  1192               	bcf	18,3	;volatile
 16479  157B                     i1l695:	
 16480  157B  0008               	return
 16481  157C                     __end_of_i2c_driver_clearBusCollision:	
 16482                           
 16483                           	psect	text131
 16484  1634                     __ptext131:	
 16485 ;; *************** function _TMR0_ISR *****************
 16486 ;; Defined at:
 16487 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 16488 ;; Parameters:    Size  Location     Type
 16489 ;;		None
 16490 ;; Auto vars:     Size  Location     Type
 16491 ;;		None
 16492 ;; Return value:  Size  Location     Type
 16493 ;;                  1    wreg      void 
 16494 ;; Registers used:
 16495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16496 ;; Tracked objects:
 16497 ;;		On entry : 0/0
 16498 ;;		On exit  : 0/0
 16499 ;;		Unchanged: 0/0
 16500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16505 ;;Total ram usage:        0 bytes
 16506 ;; Hardware stack levels used:    1
 16507 ;; Hardware stack levels required when called:    2
 16508 ;; This function calls:
 16509 ;;		_TMR0_CallBack
 16510 ;; This function is called by:
 16511 ;;		_INTERRUPT_InterruptManager
 16512 ;; This function uses a non-reentrant model
 16513 ;;
 16514                           
 16515                           
 16516                           ;psect for function _TMR0_ISR
 16517  1634                     _TMR0_ISR:	
 16518  1634                     i1l5173:	
 16519                           ;incstack = 0
 16520                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16521                           
 16522                           
 16523                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 16524  1634  110B               	bcf	11,2	;volatile
 16525  1635                     i1l5175:	
 16526                           
 16527                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 16528  1635  087D               	movf	_timer0ReloadVal,w	;volatile
 16529  1636  0020               	movlb	0	; select bank0
 16530  1637  0095               	movwf	21	;volatile
 16531  1638                     i1l5177:	
 16532                           
 16533                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
 16534  1638  3196  26E6  3196   	fcall	_TMR0_CallBack
 16535  163B                     i1l544:	
 16536  163B  0008               	return
 16537  163C                     __end_of_TMR0_ISR:	
 16538                           
 16539                           	psect	text132
 16540  16E6                     __ptext132:	
 16541 ;; *************** function _TMR0_CallBack *****************
 16542 ;; Defined at:
 16543 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 16544 ;; Parameters:    Size  Location     Type
 16545 ;;		None
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;		None
 16548 ;; Return value:  Size  Location     Type
 16549 ;;                  1    wreg      void 
 16550 ;; Registers used:
 16551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16552 ;; Tracked objects:
 16553 ;;		On entry : 0/0
 16554 ;;		On exit  : 0/0
 16555 ;;		Unchanged: 0/0
 16556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;Total ram usage:        0 bytes
 16562 ;; Hardware stack levels used:    1
 16563 ;; Hardware stack levels required when called:    1
 16564 ;; This function calls:
 16565 ;;		Absolute function
 16566 ;;		_TMR0_DefaultInterruptHandler
 16567 ;;		_displayRefreshISR
 16568 ;; This function is called by:
 16569 ;;		_TMR0_ISR
 16570 ;; This function uses a non-reentrant model
 16571 ;;
 16572                           
 16573                           
 16574                           ;psect for function _TMR0_CallBack
 16575  16E6                     _TMR0_CallBack:	
 16576  16E6                     i1l4917:	
 16577                           ;incstack = 0
 16578                           ; Regs used in _TMR0_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16579                           
 16580                           
 16581                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
 16582  16E6  0879               	movf	_TMR0_InterruptHandler,w
 16583  16E7  047A               	iorwf	_TMR0_InterruptHandler+1,w
 16584  16E8  1903               	btfsc	3,2
 16585  16E9  2EEB               	goto	u288_21
 16586  16EA  2EEC               	goto	u288_20
 16587  16EB                     u288_21:	
 16588  16EB  2EF1               	goto	i1l548
 16589  16EC                     u288_20:	
 16590  16EC                     i1l4919:	
 16591                           
 16592                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
 16593  16EC  087A               	movf	_TMR0_InterruptHandler+1,w
 16594  16ED  008A               	movwf	10
 16595  16EE  0879               	movf	_TMR0_InterruptHandler,w
 16596  16EF  000A               	callw
 16597  16F0  3196               	pagesel	$
 16598  16F1                     i1l548:	
 16599  16F1  0008               	return
 16600  16F2                     __end_of_TMR0_CallBack:	
 16601                           
 16602                           	psect	text133
 16603  1573                     __ptext133:	
 16604 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 16605 ;; Defined at:
 16606 ;;		line 137 in file "mcc_generated_files/tmr0.c"
 16607 ;; Parameters:    Size  Location     Type
 16608 ;;		None
 16609 ;; Auto vars:     Size  Location     Type
 16610 ;;		None
 16611 ;; Return value:  Size  Location     Type
 16612 ;;                  1    wreg      void 
 16613 ;; Registers used:
 16614 ;;		None
 16615 ;; Tracked objects:
 16616 ;;		On entry : 0/0
 16617 ;;		On exit  : 0/0
 16618 ;;		Unchanged: 0/0
 16619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;Total ram usage:        0 bytes
 16625 ;; Hardware stack levels used:    1
 16626 ;; This function calls:
 16627 ;;		Nothing
 16628 ;; This function is called by:
 16629 ;;		_TMR0_Initialize
 16630 ;;		_TMR0_CallBack
 16631 ;; This function uses a non-reentrant model
 16632 ;;
 16633                           
 16634                           
 16635                           ;psect for function _TMR0_DefaultInterruptHandler
 16636  1573                     _TMR0_DefaultInterruptHandler:	
 16637  1573                     i1l554:	
 16638                           ;incstack = 0
 16639                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 16640                           
 16641  1573  0008               	return
 16642  1574                     __end_of_TMR0_DefaultInterruptHandler:	
 16643                           
 16644                           	psect	text134
 16645  0708                     __ptext134:	
 16646 ;; *************** function _displayRefreshISR *****************
 16647 ;; Defined at:
 16648 ;;		line 821 in file "main.c"
 16649 ;; Parameters:    Size  Location     Type
 16650 ;;		None
 16651 ;; Auto vars:     Size  Location     Type
 16652 ;;		None
 16653 ;; Return value:  Size  Location     Type
 16654 ;;                  1    wreg      void 
 16655 ;; Registers used:
 16656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 16657 ;; Tracked objects:
 16658 ;;		On entry : 0/0
 16659 ;;		On exit  : 0/0
 16660 ;;		Unchanged: 0/0
 16661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;Total ram usage:        2 bytes
 16667 ;; Hardware stack levels used:    1
 16668 ;; This function calls:
 16669 ;;		Nothing
 16670 ;; This function is called by:
 16671 ;;		_main
 16672 ;;		_TMR0_CallBack
 16673 ;; This function uses a non-reentrant model
 16674 ;;
 16675                           
 16676                           
 16677                           ;psect for function _displayRefreshISR
 16678  0708                     _displayRefreshISR:	
 16679  0708                     i1l4679:	
 16680                           ;incstack = 0
 16681                           ; Regs used in _displayRefreshISR: [wreg-fsr1h+status,2+status,0]
 16682                           
 16683                           
 16684                           ;main.c: 822:     static uint8_t i;;main.c: 823:     i &= 0x03;
 16685  0708  3003               	movlw	3
 16686  0709  00F0               	movwf	??_displayRefreshISR
 16687  070A  0870               	movf	??_displayRefreshISR,w
 16688  070B  05FB               	andwf	displayRefreshISR@i,f
 16689  070C                     i1l4681:	
 16690                           
 16691                           ;main.c: 824:     LATD = displayBuff[i];
 16692  070C  087B               	movf	displayRefreshISR@i,w
 16693  070D  3E28               	addlw	(low (_displayBuff| 0))& (0+255)
 16694  070E  0086               	movwf	6
 16695  070F  0187               	clrf	7
 16696  0710  0801               	movf	1,w
 16697  0711  0022               	movlb	2	; select bank2
 16698  0712  008F               	movwf	15	;volatile
 16699                           
 16700                           ;main.c: 825:     switch(i){
 16701  0713  2F20               	goto	i1l4685
 16702  0714                     i1l1207:	
 16703                           ;main.c: 827:             do { LATAbits.LATA3 = 0; } while(0);
 16704                           
 16705  0714  118C               	bcf	12,3	;volatile
 16706  0715                     i1l1209:	
 16707                           ;main.c: 828:             do { LATEbits.LATE1 = 1; } while(0);
 16708                           
 16709  0715  1490               	bsf	16,1	;volatile
 16710  0716  2F36               	goto	i1l4687
 16711  0717                     i1l1213:	
 16712                           ;main.c: 831:             do { LATEbits.LATE1 = 0; } while(0);
 16713                           
 16714  0717  1090               	bcf	16,1	;volatile
 16715  0718                     i1l1215:	
 16716                           ;main.c: 832:             do { LATCbits.LATC1 = 1; } while(0);
 16717                           
 16718  0718  148E               	bsf	14,1	;volatile
 16719  0719  2F36               	goto	i1l4687
 16720  071A                     i1l1218:	
 16721                           ;main.c: 835:             do { LATCbits.LATC1 = 0; } while(0);
 16722                           
 16723  071A  108E               	bcf	14,1	;volatile
 16724  071B                     i1l1220:	
 16725                           ;main.c: 836:             do { LATAbits.LATA4 = 1; } while(0);
 16726                           
 16727  071B  160C               	bsf	12,4	;volatile
 16728  071C  2F36               	goto	i1l4687
 16729  071D                     i1l1223:	
 16730                           ;main.c: 839:             do { LATAbits.LATA4 = 0; } while(0);
 16731                           
 16732  071D  120C               	bcf	12,4	;volatile
 16733  071E                     i1l1225:	
 16734                           ;main.c: 840:             do { LATAbits.LATA3 = 1; } while(0);
 16735                           
 16736  071E  158C               	bsf	12,3	;volatile
 16737  071F  2F36               	goto	i1l4687
 16738  0720                     i1l4685:	
 16739  0720  087B               	movf	displayRefreshISR@i,w
 16740  0721  00F0               	movwf	??_displayRefreshISR
 16741  0722  01F1               	clrf	??_displayRefreshISR+1
 16742                           
 16743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16744                           ; Switch size 1, requested type "simple"
 16745                           ; Number of cases is 1, Range of values is 0 to 0
 16746                           ; switch strategies available:
 16747                           ; Name         Instructions Cycles
 16748                           ; simple_byte            4     3 (average)
 16749                           ; direct_byte            8     6 (fixed)
 16750                           ; jumptable            260     6 (fixed)
 16751                           ;	Chosen strategy is simple_byte
 16752  0723  0871               	movf	??_displayRefreshISR+1,w
 16753  0724  3A00               	xorlw	0	; case 0
 16754  0725  1903               	skipnz
 16755  0726  2F28               	goto	i1l8379
 16756  0727  2F36               	goto	i1l4687
 16757  0728                     i1l8379:	
 16758                           
 16759                           ; Switch size 1, requested type "simple"
 16760                           ; Number of cases is 4, Range of values is 0 to 3
 16761                           ; switch strategies available:
 16762                           ; Name         Instructions Cycles
 16763                           ; simple_byte           13     7 (average)
 16764                           ; direct_byte           14     6 (fixed)
 16765                           ; jumptable            260     6 (fixed)
 16766                           ;	Chosen strategy is simple_byte
 16767  0728  0870               	movf	??_displayRefreshISR,w
 16768  0729  3A00               	xorlw	0	; case 0
 16769  072A  1903               	skipnz
 16770  072B  2F14               	goto	i1l1207
 16771  072C  3A01               	xorlw	1	; case 1
 16772  072D  1903               	skipnz
 16773  072E  2F17               	goto	i1l1213
 16774  072F  3A03               	xorlw	3	; case 2
 16775  0730  1903               	skipnz
 16776  0731  2F1A               	goto	i1l1218
 16777  0732  3A01               	xorlw	1	; case 3
 16778  0733  1903               	skipnz
 16779  0734  2F1D               	goto	i1l1223
 16780  0735  2F36               	goto	i1l4687
 16781  0736                     i1l4687:	
 16782                           
 16783                           ;main.c: 844:     i++;
 16784  0736  3001               	movlw	1
 16785  0737  00F0               	movwf	??_displayRefreshISR
 16786  0738  0870               	movf	??_displayRefreshISR,w
 16787  0739  07FB               	addwf	displayRefreshISR@i,f
 16788                           
 16789                           ;main.c: 847:     if(flag_button_press_count[0] != 0){
 16790  073A  0020               	movlb	0	; select bank0
 16791  073B  0824               	movf	_flag_button_press_count,w
 16792  073C  1903               	btfsc	3,2
 16793  073D  2F3F               	goto	u274_21
 16794  073E  2F40               	goto	u274_20
 16795  073F                     u274_21:	
 16796  073F  2F4A               	goto	i1l1227
 16797  0740                     u274_20:	
 16798  0740                     i1l4689:	
 16799                           
 16800                           ;main.c: 848:   if(button_press_count[0] < 200) button_press_count[0]++;
 16801  0740  30C8               	movlw	200
 16802  0741  0220               	subwf	_button_press_count,w
 16803  0742  1803               	skipnc
 16804  0743  2F45               	goto	u275_21
 16805  0744  2F46               	goto	u275_20
 16806  0745                     u275_21:	
 16807  0745  2F4A               	goto	i1l1227
 16808  0746                     u275_20:	
 16809  0746                     i1l4691:	
 16810  0746  3001               	movlw	1
 16811  0747  00F0               	movwf	??_displayRefreshISR
 16812  0748  0870               	movf	??_displayRefreshISR,w
 16813  0749  07A0               	addwf	_button_press_count,f
 16814  074A                     i1l1227:	
 16815                           ;main.c: 849:  }
 16816                           
 16817                           
 16818                           ;main.c: 850:     if(flag_button_press_count[1] != 0){
 16819  074A  0825               	movf	_flag_button_press_count+1,w
 16820  074B  1903               	btfsc	3,2
 16821  074C  2F4E               	goto	u276_21
 16822  074D  2F4F               	goto	u276_20
 16823  074E                     u276_21:	
 16824  074E  2F59               	goto	i1l1229
 16825  074F                     u276_20:	
 16826  074F                     i1l4693:	
 16827                           
 16828                           ;main.c: 851:   if(button_press_count[1] < 200) button_press_count[1]++;
 16829  074F  30C8               	movlw	200
 16830  0750  0221               	subwf	_button_press_count+1,w
 16831  0751  1803               	skipnc
 16832  0752  2F54               	goto	u277_21
 16833  0753  2F55               	goto	u277_20
 16834  0754                     u277_21:	
 16835  0754  2F59               	goto	i1l1229
 16836  0755                     u277_20:	
 16837  0755                     i1l4695:	
 16838  0755  3001               	movlw	1
 16839  0756  00F0               	movwf	??_displayRefreshISR
 16840  0757  0870               	movf	??_displayRefreshISR,w
 16841  0758  07A1               	addwf	_button_press_count+1,f
 16842  0759                     i1l1229:	
 16843                           ;main.c: 852:  }
 16844                           
 16845                           
 16846                           ;main.c: 853:     if(flag_button_press_count[2] != 0){
 16847  0759  0826               	movf	_flag_button_press_count+2,w
 16848  075A  1903               	btfsc	3,2
 16849  075B  2F5D               	goto	u278_21
 16850  075C  2F5E               	goto	u278_20
 16851  075D                     u278_21:	
 16852  075D  2F68               	goto	i1l1231
 16853  075E                     u278_20:	
 16854  075E                     i1l4697:	
 16855                           
 16856                           ;main.c: 854:   if(button_press_count[2] < 200) button_press_count[2]++;
 16857  075E  30C8               	movlw	200
 16858  075F  0222               	subwf	_button_press_count+2,w
 16859  0760  1803               	skipnc
 16860  0761  2F63               	goto	u279_21
 16861  0762  2F64               	goto	u279_20
 16862  0763                     u279_21:	
 16863  0763  2F68               	goto	i1l1231
 16864  0764                     u279_20:	
 16865  0764                     i1l4699:	
 16866  0764  3001               	movlw	1
 16867  0765  00F0               	movwf	??_displayRefreshISR
 16868  0766  0870               	movf	??_displayRefreshISR,w
 16869  0767  07A2               	addwf	_button_press_count+2,f
 16870  0768                     i1l1231:	
 16871                           ;main.c: 855:  }
 16872                           
 16873                           
 16874                           ;main.c: 856:     if(flag_button_press_count[3] != 0){
 16875  0768  0827               	movf	_flag_button_press_count+3,w
 16876  0769  1903               	btfsc	3,2
 16877  076A  2F6C               	goto	u280_21
 16878  076B  2F6D               	goto	u280_20
 16879  076C                     u280_21:	
 16880  076C  2F77               	goto	i1l1235
 16881  076D                     u280_20:	
 16882  076D                     i1l4701:	
 16883                           
 16884                           ;main.c: 857:   if(button_press_count[3] < 200) button_press_count[3]++;
 16885  076D  30C8               	movlw	200
 16886  076E  0223               	subwf	_button_press_count+3,w
 16887  076F  1803               	skipnc
 16888  0770  2F72               	goto	u281_21
 16889  0771  2F73               	goto	u281_20
 16890  0772                     u281_21:	
 16891  0772  2F77               	goto	i1l1235
 16892  0773                     u281_20:	
 16893  0773                     i1l4703:	
 16894  0773  3001               	movlw	1
 16895  0774  00F0               	movwf	??_displayRefreshISR
 16896  0775  0870               	movf	??_displayRefreshISR,w
 16897  0776  07A3               	addwf	_button_press_count+3,f
 16898  0777                     i1l1235:	
 16899  0777  0008               	return
 16900  0778                     __end_of_displayRefreshISR:	
 16901                           
 16902                           	psect	text135
 16903  165C                     __ptext135:	
 16904 ;; *************** function _PIN_MANAGER_IOC *****************
 16905 ;; Defined at:
 16906 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 16907 ;; Parameters:    Size  Location     Type
 16908 ;;		None
 16909 ;; Auto vars:     Size  Location     Type
 16910 ;;		None
 16911 ;; Return value:  Size  Location     Type
 16912 ;;                  1    wreg      void 
 16913 ;; Registers used:
 16914 ;;		wreg, status,2, status,0, pclath, cstack
 16915 ;; Tracked objects:
 16916 ;;		On entry : 0/0
 16917 ;;		On exit  : 0/0
 16918 ;;		Unchanged: 0/0
 16919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;Total ram usage:        0 bytes
 16925 ;; Hardware stack levels used:    1
 16926 ;; Hardware stack levels required when called:    2
 16927 ;; This function calls:
 16928 ;;		_IOCBF4_ISR
 16929 ;; This function is called by:
 16930 ;;		_INTERRUPT_InterruptManager
 16931 ;; This function uses a non-reentrant model
 16932 ;;
 16933                           
 16934                           
 16935                           ;psect for function _PIN_MANAGER_IOC
 16936  165C                     _PIN_MANAGER_IOC:	
 16937  165C                     i1l5179:	
 16938                           ;incstack = 0
 16939                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 16940                           
 16941                           
 16942                           ;mcc_generated_files/pin_manager.c: 121:     if(IOCBFbits.IOCBF4 == 1)
 16943  165C  0027               	movlb	7	; select bank7
 16944  165D  1E16               	btfss	22,4	;volatile
 16945  165E  2E60               	goto	u306_21
 16946  165F  2E61               	goto	u306_20
 16947  1660                     u306_21:	
 16948  1660  2E64               	goto	i1l503
 16949  1661                     u306_20:	
 16950  1661                     i1l5181:	
 16951                           
 16952                           ;mcc_generated_files/pin_manager.c: 122:     {;mcc_generated_files/pin_manager.c: 123:  
      +                                 IOCBF4_ISR();
 16953  1661  3197  2773  3196   	fcall	_IOCBF4_ISR
 16954  1664                     i1l503:	
 16955  1664  0008               	return
 16956  1665                     __end_of_PIN_MANAGER_IOC:	
 16957                           
 16958                           	psect	text136
 16959  1773                     __ptext136:	
 16960 ;; *************** function _IOCBF4_ISR *****************
 16961 ;; Defined at:
 16962 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
 16963 ;; Parameters:    Size  Location     Type
 16964 ;;		None
 16965 ;; Auto vars:     Size  Location     Type
 16966 ;;		None
 16967 ;; Return value:  Size  Location     Type
 16968 ;;                  1    wreg      void 
 16969 ;; Registers used:
 16970 ;;		wreg, status,2, status,0, pclath, cstack
 16971 ;; Tracked objects:
 16972 ;;		On entry : 0/0
 16973 ;;		On exit  : 0/0
 16974 ;;		Unchanged: 0/0
 16975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16980 ;;Total ram usage:        0 bytes
 16981 ;; Hardware stack levels used:    1
 16982 ;; Hardware stack levels required when called:    1
 16983 ;; This function calls:
 16984 ;;		Absolute function
 16985 ;;		_IOCBF4_DefaultInterruptHandler
 16986 ;;		_secondISR
 16987 ;; This function is called by:
 16988 ;;		_PIN_MANAGER_IOC
 16989 ;; This function uses a non-reentrant model
 16990 ;;
 16991                           
 16992                           
 16993                           ;psect for function _IOCBF4_ISR
 16994  1773                     _IOCBF4_ISR:	
 16995  1773                     i1l4911:	
 16996                           ;incstack = 0
 16997                           ; Regs used in _IOCBF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 16998                           
 16999                           
 17000                           ;mcc_generated_files/pin_manager.c: 135:     if(IOCBF4_InterruptHandler)
 17001  1773  0021               	movlb	1	; select bank1
 17002  1774  0853               	movf	_IOCBF4_InterruptHandler^(0+128),w
 17003  1775  0454               	iorwf	(_IOCBF4_InterruptHandler+1)^(0+128),w
 17004  1776  1903               	btfsc	3,2
 17005  1777  2F79               	goto	u287_21
 17006  1778  2F7A               	goto	u287_20
 17007  1779                     u287_21:	
 17008  1779  2F7F               	goto	i1l4915
 17009  177A                     u287_20:	
 17010  177A                     i1l4913:	
 17011                           
 17012                           ;mcc_generated_files/pin_manager.c: 136:     {;mcc_generated_files/pin_manager.c: 137:  
      +                                 IOCBF4_InterruptHandler();
 17013  177A  0854               	movf	(_IOCBF4_InterruptHandler+1)^(0+128),w
 17014  177B  008A               	movwf	10
 17015  177C  0853               	movf	_IOCBF4_InterruptHandler^(0+128),w
 17016  177D  000A               	callw
 17017  177E  3197               	pagesel	$
 17018  177F                     i1l4915:	
 17019                           
 17020                           ;mcc_generated_files/pin_manager.c: 139:     IOCBFbits.IOCBF4 = 0;
 17021  177F  0027               	movlb	7	; select bank7
 17022  1780  1216               	bcf	22,4	;volatile
 17023  1781                     i1l507:	
 17024  1781  0008               	return
 17025  1782                     __end_of_IOCBF4_ISR:	
 17026                           
 17027                           	psect	text137
 17028  1572                     __ptext137:	
 17029 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 17030 ;; Defined at:
 17031 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 17032 ;; Parameters:    Size  Location     Type
 17033 ;;		None
 17034 ;; Auto vars:     Size  Location     Type
 17035 ;;		None
 17036 ;; Return value:  Size  Location     Type
 17037 ;;                  1    wreg      void 
 17038 ;; Registers used:
 17039 ;;		None
 17040 ;; Tracked objects:
 17041 ;;		On entry : 0/0
 17042 ;;		On exit  : 0/0
 17043 ;;		Unchanged: 0/0
 17044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;Total ram usage:        0 bytes
 17050 ;; Hardware stack levels used:    1
 17051 ;; This function calls:
 17052 ;;		Nothing
 17053 ;; This function is called by:
 17054 ;;		_PIN_MANAGER_Initialize
 17055 ;;		_IOCBF4_ISR
 17056 ;; This function uses a non-reentrant model
 17057 ;;
 17058                           
 17059                           
 17060                           ;psect for function _IOCBF4_DefaultInterruptHandler
 17061  1572                     _IOCBF4_DefaultInterruptHandler:	
 17062  1572                     i1l513:	
 17063                           ;incstack = 0
 17064                           ; Regs used in _IOCBF4_DefaultInterruptHandler: []
 17065                           
 17066  1572  0008               	return
 17067  1573                     __end_of_IOCBF4_DefaultInterruptHandler:	
 17068                           
 17069                           	psect	text138
 17070  0C33                     __ptext138:	
 17071 ;; *************** function _secondISR *****************
 17072 ;; Defined at:
 17073 ;;		line 800 in file "main.c"
 17074 ;; Parameters:    Size  Location     Type
 17075 ;;		None
 17076 ;; Auto vars:     Size  Location     Type
 17077 ;;		None
 17078 ;; Return value:  Size  Location     Type
 17079 ;;                  1    wreg      void 
 17080 ;; Registers used:
 17081 ;;		wreg, status,2, status,0
 17082 ;; Tracked objects:
 17083 ;;		On entry : 0/0
 17084 ;;		On exit  : 0/0
 17085 ;;		Unchanged: 0/0
 17086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;Total ram usage:        0 bytes
 17092 ;; Hardware stack levels used:    1
 17093 ;; This function calls:
 17094 ;;		Nothing
 17095 ;; This function is called by:
 17096 ;;		_main
 17097 ;;		_IOCBF4_ISR
 17098 ;; This function uses a non-reentrant model
 17099 ;;
 17100                           
 17101                           
 17102                           ;psect for function _secondISR
 17103  0C33                     _secondISR:	
 17104  0C33                     i1l4659:	
 17105                           ;incstack = 0
 17106                           ; Regs used in _secondISR: [wreg+status,2+status,0]
 17107                           
 17108                           
 17109                           ;main.c: 802:     if(mode == MODE_NORMAL){
 17110  0C33  0020               	movlb	0	; select bank0
 17111  0C34  083F               	movf	_mode,w	;volatile
 17112  0C35  1D03               	btfss	3,2
 17113  0C36  2C38               	goto	u267_21
 17114  0C37  2C39               	goto	u267_20
 17115  0C38                     u267_21:	
 17116  0C38  2C49               	goto	i1l4665
 17117  0C39                     u267_20:	
 17118  0C39                     i1l4661:	
 17119  0C39  1003               	clrc
 17120  0C3A  0022               	movlb	2	; select bank2
 17121  0C3B  1F8C               	btfss	12,7	;volatile
 17122  0C3C  1403               	setc
 17123  0C3D  1803               	btfsc	3,0
 17124  0C3E  2C40               	goto	u268_21
 17125  0C3F  2C43               	goto	u268_20
 17126  0C40                     u268_21:	
 17127  0C40  0022               	movlb	2	; select bank2
 17128  0C41  178C               	bsf	12,7	;volatile
 17129  0C42  2C45               	goto	u269_24
 17130  0C43                     u268_20:	
 17131  0C43  0022               	movlb	2	; select bank2
 17132  0C44  138C               	bcf	12,7	;volatile
 17133  0C45                     u269_24:	
 17134  0C45                     i1l4663:	
 17135                           
 17136                           ;main.c: 804:         flag_time_display_update = 1;
 17137  0C45  0020               	movlb	0	; select bank0
 17138  0C46  01C1               	clrf	_flag_time_display_update
 17139  0C47  0AC1               	incf	_flag_time_display_update,f
 17140                           
 17141                           ;main.c: 805:     } else {
 17142  0C48  2C53               	goto	i1l4669
 17143  0C49                     i1l4665:	
 17144                           
 17145                           ;main.c: 806:         if(flag_dot_blink) flag_dot_blink = 0;
 17146  0C49  0840               	movf	_flag_dot_blink,w
 17147  0C4A  1903               	btfsc	3,2
 17148  0C4B  2C4D               	goto	u270_21
 17149  0C4C  2C4E               	goto	u270_20
 17150  0C4D                     u270_21:	
 17151  0C4D  2C50               	goto	i1l1195
 17152  0C4E                     u270_20:	
 17153  0C4E                     i1l4667:	
 17154  0C4E  01C0               	clrf	_flag_dot_blink
 17155  0C4F  2C45               	goto	i1l4663
 17156  0C50                     i1l1195:	
 17157                           ;main.c: 807:         else flag_dot_blink = 1;
 17158                           
 17159  0C50  01C0               	clrf	_flag_dot_blink
 17160  0C51  0AC0               	incf	_flag_dot_blink,f
 17161  0C52  2C45               	goto	i1l4663
 17162  0C53                     i1l4669:	
 17163                           
 17164                           ;main.c: 811:     if(mode_timeout_count) {
 17165  0C53  083E               	movf	_mode_timeout_count,w	;volatile
 17166  0C54  1903               	btfsc	3,2
 17167  0C55  2C57               	goto	u271_21
 17168  0C56  2C58               	goto	u271_20
 17169  0C57                     u271_21:	
 17170  0C57  2C60               	goto	i1l4675
 17171  0C58                     u271_20:	
 17172  0C58                     i1l4671:	
 17173                           
 17174                           ;main.c: 812:         mode_timeout_count--;
 17175  0C58  3001               	movlw	1
 17176  0C59  02BE               	subwf	_mode_timeout_count,f	;volatile
 17177                           
 17178                           ;main.c: 813:         if(mode_timeout_count == 0){
 17179  0C5A  083E               	movf	_mode_timeout_count,w	;volatile
 17180  0C5B  1D03               	btfss	3,2
 17181  0C5C  2C5E               	goto	u272_21
 17182  0C5D  2C5F               	goto	u272_20
 17183  0C5E                     u272_21:	
 17184  0C5E  2C60               	goto	i1l4675
 17185  0C5F                     u272_20:	
 17186  0C5F                     i1l4673:	
 17187                           
 17188                           ;main.c: 814:             mode = MODE_NORMAL;
 17189  0C5F  01BF               	clrf	_mode	;volatile
 17190  0C60                     i1l4675:	
 17191                           
 17192                           ;main.c: 818:     if(mode_flash_count) mode_flash_count--;
 17193  0C60  083D               	movf	_mode_flash_count,w	;volatile
 17194  0C61  1903               	btfsc	3,2
 17195  0C62  2C64               	goto	u273_21
 17196  0C63  2C65               	goto	u273_20
 17197  0C64                     u273_21:	
 17198  0C64  2C67               	goto	i1l1200
 17199  0C65                     u273_20:	
 17200  0C65                     i1l4677:	
 17201  0C65  3001               	movlw	1
 17202  0C66  02BD               	subwf	_mode_flash_count,f	;volatile
 17203  0C67                     i1l1200:	
 17204  0C67  0008               	return
 17205  0C68                     __end_of_secondISR:	
 17206  007E                     btemp	set	126	;btemp
 17207  007E                     int$flags	set	126
 17208  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    42
    Data        0
    BSS         110
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     26      80
    BANK1            80      0      53
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    do_I2C_TX$2597$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$2603	const PTR FTN()enum E3411 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX$2602	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$2597	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned short  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    i2c_driver_setI2cISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_setBusCollisionISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), IOCBF4_DefaultInterruptHandler(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), IOCBF4_DefaultInterruptHandler(), Absolute function(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i1_i2c_ISR(), Absolute function(), i2c_ISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    i2c_readDataBlock@data	PTR void  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    d.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    S373$data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E3411[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_i2c_restartWrite(), i1_rd1RegCompleteHandler(), i1_rd2RegCompleteHandler(), 
		 -> i1_wr2RegCompleteHandler(), i1_rdBlkRegCompleteHandler(), i1_returnReset(), i1_returnStop(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_DO_ADDRESS_NACK
    i1_i2c_ISR->i1_do_I2C_RX
    i1_i2c_ISR->i1_do_I2C_TX
    i1_i2c_ISR->i1_do_I2C_TX_EMPTY
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _TMR0_CallBack->_displayRefreshISR

Critical Paths under _main in BANK0

    _main->_initRTC
    _main->_intToBCD
    _updateRTC->_i2c_writeNBytes
    _updateMonth->_i2c_writeNBytes
    _updateDate->_i2c_writeNBytes
    _updateAlarm2->_i2c_writeNBytes
    _updateAlarm1->_i2c_writeNBytes
    _intToBCD->_FIR_filter
    _initRTC->_i2c_readDataBlock
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c_driver_TXData
    _do_I2C_TX->_i2c_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _FIR_filter->_ADC_GetConversion

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  800315
                                             21 BANK0      5     5      0
                  _ADC_GetConversion
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                         _FIR_filter
         _IOCBF4_SetInterruptHandler
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                        _bcdDateDecr
                        _bcdDateIncr
                        _bcdHourDecr
                        _bcdHourIncr
                      _bcdMinuteDecr
                      _bcdMinuteIncr
                       _bcdMonthDecr
                       _bcdMonthIncr
                  _i2c_readDataBlock
                            _initRTC
                           _intToBCD
                       _updateAlarm1
                       _updateAlarm2
                         _updateDate
                        _updateMonth
                          _updateRTC
 ---------------------------------------------------------------------------------
 (1) _updateRTC                                            3     2      1   99105
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateMonth                                          2     2      0   98984
                                             14 BANK0      2     2      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateDate                                           2     2      0   98984
                                             14 BANK0      2     2      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateAlarm2                                         3     2      1   99167
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateAlarm1                                         3     2      1   99167
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _intToBCD                                             9     7      2    1183
                                             12 BANK0      9     7      2
                  _ADC_GetConversion (ARG)
                         _FIR_filter (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              2     2      0  199955
                                             19 BANK0      2     2      0
                  _i2c_readDataBlock
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   98953
                                             10 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_readDataBlock                                    9     5      4  101002
                                             10 BANK0      9     5      4
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    2259
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     310
                                              2 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   93060
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   93060
                                              7 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   92992
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              3     3      0   92937
                                              4 BANK0      3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   23242
                                              1 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    4692
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1      32
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4735
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2979
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3    1117
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1574
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      37
                                              0 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bcdMonthIncr                                         1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdMonthDecr                                         1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteIncr                                        2     2      0     220
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteDecr                                        2     2      0     220
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourIncr                                          2     2      0     127
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourDecr                                          2     2      0     127
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdDateIncr                                          1     1      0     155
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdDateDecr                                          1     1      0     155
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     785
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     211
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     363
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FIR_filter                                           8     6      2     120
                                              4 BANK0      8     6      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     189
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0   18830
                   Absolute function *
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           3     3      0   18830
                                              3 COMMON     3     3      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         3     3      0    4713
                                              0 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_wr2RegCompleteHandler                             1     0      1     904
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_wr1RegCompleteHandler                             1     0      1    1044
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_rdBlkRegCompleteHandler                           1     0      1     935
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd2RegCompleteHandler                             1     0      1     904
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd1RegCompleteHandler                             1     0      1     904
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setDataCompleteCallback                       4     1      3     699
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (16) i1_setCallBack                                       5     2      3     287
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) i1_i2c_restartWrite                                  1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                  _displayRefreshISR *
 ---------------------------------------------------------------------------------
 (14) _displayRefreshISR                                   2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF4_DefaultInterruptHandler *
                          _secondISR *
 ---------------------------------------------------------------------------------
 (14) _secondISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _FIR_filter
     _ADC_GetConversion (ARG)
   _IOCBF4_SetInterruptHandler
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _bcdDateDecr
   _bcdDateIncr
   _bcdHourDecr
   _bcdHourIncr
   _bcdMinuteDecr
   _bcdMinuteIncr
   _bcdMonthDecr
   _bcdMonthIncr
   _i2c_readDataBlock
     _i2c_close
       _mssp_clearIRQ
       _mssp_disableIRQ
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_DO_NACK_RESTART *
               _i2c_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c_driver_startRX
             _do_I2C_RESET *
               _i2c_driver_resetBus
             _do_I2C_RX *
               Absolute function(Fake) *
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _i2c_driver_getRXData *
               _i2c_driver_sendACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_SEND_ADR_READ *
               _i2c_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c_driver_restart
             _do_I2C_SEND_STOP *
               _i2c_driver_stop
             _do_I2C_TX *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_driver_TXData *
               _i2c_driver_isNACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_TX_EMPTY *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _mssp_setIRQ *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _i2c_driver_isNACK *
             _mssp_clearIRQ *
           _mssp_waitForEvent
         _mssp_IRQisEnabled
     _i2c_open
       _i2c_driver_open
       _i2c_driver_setBusCollisionISR
       _i2c_driver_setI2cISR
       _mssp_clearIRQ
     _i2c_setAddressNACKCallback
       _setCallBack
     _i2c_setBuffer
     _i2c_setDataCompleteCallback
       _setCallBack
   _initRTC
     _i2c_readDataBlock
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
       _i2c_setDataCompleteCallback
         _setCallBack
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _intToBCD
     _ADC_GetConversion (ARG)
     _FIR_filter (ARG)
       _ADC_GetConversion (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
   _updateAlarm1
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateAlarm2
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateDate
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateMonth
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateRTC
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCBF4_ISR
       Absolute function(Fake) *
       _IOCBF4_DefaultInterruptHandler *
       _secondISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _displayRefreshISR *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      35       7       66.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      90      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      90      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Jul 19 17:26:57 2020

                   __end_of_i2c_driver_restart 159A                            i1_i2c_driver_isNACK 163C  
                                 returnReset@p 005F                                     __CFG_CP$ON 0000  
                   __end_of_i2c_driver_startRX 15A0                         __size_of_bcdMinuteDecr 0038  
                _do_I2C_SEND_RESTART$intlevel0 16A8                                    _SSPSTATbits 0214  
                       __size_of_bcdMinuteIncr 0039                                             l61 1756  
                                           l83 0936                                             l91 085A  
                                           l67 1772                                             l84 0938  
                                           l76 0EA2                                             l77 0EA4  
                        __size_of_bcdMonthDecr 0015                                             l98 0B3F  
                              i1_mssp_clearIRQ 158B                          __size_of_bcdMonthIncr 0015  
                         __size_of_do_I2C_IDLE 0009                         __end_of_FVR_Initialize 15B3  
                          _do_I2C_SEND_RESTART 16A4                           __size_of_do_I2C_RCEN 000B  
                              _timer0ReloadVal 007D                           __end_ofi1_returnStop 1577  
                         ?i1_i2c_driver_TXData 0070                                    i1_do_I2C_RX 0E09  
                                  i1_do_I2C_TX 0EF8                                    __CFG_LVP$ON 0000  
                         i1_i2c_driver_sendACK 15A7                                            l110 1764  
                                          l104 15F0                                            l113 1709  
                                          l122 16A3                                            l131 1748  
                                          l212 0A9B                                            l204 1608  
                                          l116 1691                                            l140 16BE  
                                          l300 0DC1                                            l125 16AC  
                                          l134 1715                                            l207 160E  
                                          l231 0888                                            l119 169A  
                                          l143 16C7                                            l128 16B5  
                                          l152 0C32                                            l160 0FFF  
                                          l137 16E5                                            l146 16D0  
                                          l252 089F                                            l157 0FE3  
                                          l173 0EC9                                            l510 167F  
                                          l318 1614                                            l174 0EF7  
                                          l441 16FD                                            l249 07FE  
                                          l602 0802                                            l371 173B  
                                          l435 0843                                            l267 08B6  
                                          l291 0956                                            l532 082D  
                                          l444 15B6                                            l188 0D46  
                                          l365 09D4                                            l613 17A2  
                                          l701 1626                                            l438 16F8  
                                          l198 0BCA                                            l367 09D8  
                                          l551 1602                                            l631 1599  
                                          l279 0871                                            l368 09DF  
                                          l640 159F                                            l625 07FF  
                                          l609 1797                                            l617 1721  
                                          l634 159C                                            l643 15A2  
                                          l708 15B2                                            l628 1596  
                                          l652 161A                                            l661 15BE  
                                          l637 1688                                            l743 09AF  
                                          l831 15F6                                            l744 09AE  
                                          l728 165B                                            l912 091A  
                                          l593 16DA                                            l746 09BB  
                                          l834 15FC                                            l658 15BA  
                                          l906 0F90                                            l930 08CE  
                                          l499 0B99                                            l923 0ADD  
                                          l596 1593                                            l924 0AEB  
                                          l837 1676                                            l941 0997  
                                          l909 0FA5                                            l917 0AB5  
                                          l933 08E6                                            l918 0AC3  
                                          l599 1590                                            l792 0A04  
                                          l953 0D0D                                            l962 0CD4  
                                          l698 1620                                            l947 0976  
                                          l971 0817                                            l981 0A4E  
                                          l976 17FF                                            l988 0A29  
                                          l997 0E08                                   __CFG_CPD$OFF 0000  
                     i1_do_I2C_DO_NACK_RESTART 15E7                                 bcdMonthDecr@mo 0056  
                 __size_of_i2c_masterOperation 002A                           _returnStop$intlevel0 1607  
                                  ?_FIR_filter 005A                 ?_EUSART_SetFramingErrorHandler 0056  
                         i1_i2c_driver_restart 157C                  i2c_setDataCompleteCallback@cb 005B  
                     ?i1_rd2RegCompleteHandler 0056                          __size_of_do_I2C_RESET 000C  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                           i1_i2c_driver_startRX 1582  
                        __end_ofi1_returnReset 1579             __end_of_IOCBF4_SetInterruptHandler 1680  
                   _IOCBF4_SetInterruptHandler 1677                           ?i1_i2c_driver_isNACK 0070  
                     ?i1_wr2RegCompleteHandler 0056                                 bcdMonthIncr@mo 0056  
              ??i1_i2c_setDataCompleteCallback 0078                         i1_i2c_driver_getRXData 1585  
                        __end_ofi1_mssp_setIRQ 158B                                           l1021 008E  
                                         l1022 0097                                           l1007 07D4  
                                         l1031 0152                                           l1112 0334  
                                         l1024 009E                                           l1025 0312  
                                         l1122 03EE                                           l1026 00A5  
                      ??_rd2RegCompleteHandler 0060                                           l1117 0382  
                                         l1151 054E                                           l1135 0495  
                                         l1063 01F5                                           l1160 05AF  
                                         l1144 04F9                                           l1128 043F  
                        i1_i2c_driver_sendNACK 15AB                                           l1170 0615  
                                         l1154 055F                                           l1138 04A9  
                                         l1083 0294                                           l1182 06B5  
                                         l1167 0604                                           l1176 0665  
                                         l1099 030B                                           l1665 0D83  
                                         l1675 0C9C                                  i1returnStop@p 0056  
                                         l7001 0C7F                                           l7003 0C89  
                                         l7005 0C8D                                           l7007 0C92  
                                         l5521 07B9                                           l5513 0778  
                                         l6401 0A8E                                           l7201 0F7D  
                                         l7009 0C98                                           l8001 0441  
                                         l7131 09BE                                           l5515 0796  
                                         l6411 1597                                           l6403 1749  
                                         l7211 0F82                                           l7203 0F7E  
                                         l8003 0454                                           l7141 09C7  
                                         l7133 09BE                                           l5517 07A1  
                                         l7301 0972                                           l6413 159A  
                                         l6405 0846                                           l6501 085F  
                                         l7213 0F83                                           l7205 0F7F  
                                         l7221 0902                                           l8101 0617  
                                         l8021 04AB                                           l8005 0460  
                                         l8013 0485                                           l7151 1731  
                                         l7143 09C8                                           l7135 09C1  
                                         l5519 07B7                                           l7311 0CDB  
                                         l6407 084B                                           l6503 0868  
                                         l6511 0955                                           l6415 15BB  
                                         l6423 169F                                           l6431 16AB  
                                         l7215 0F94                                           l7207 0F80  
                                         l7231 0AA6                                           l7223 0904  
                                         l8103 062A                                           l8023 04BE  
                                         l8015 048B                                           l8007 047E  
                                         l7161 1738                                           l7153 1734  
                                         l7145 09CD                                           l7137 09C5  
                                         l7305 0974                                           l7313 0CE1  
                                         l7401 0813                                           l6409 0859  
                                         l6505 0870                                           l6441 1617  
                                         l6521 1702                                           l6417 1696  
                                         l6425 16A2                                           l6601 0FBA  
                                         l7217 0F98                                           l7209 0F81  
                                         l7233 0AAB                                           l7241 0ACE  
                                         l7225 0909                                           l8121 0686  
                                         l8105 0636                                           l8113 065A  
                                         l8041 051A                                           l8025 04CA  
                                         l8017 0490                                           l8033 04EE  
                                         l8009 0483                                           l7171 09A7  
                                         l7155 1735                                           l7147 09D3  
                                         l7139 09C6                                           l7331 0CF9  
                                         l7323 0CEB                                           l7411 17F3  
                                         l6515 1613                                           l6443 159D  
                                         l6523 1705                                           l6531 168D  
                                         l6419 1699                                           l6435 16B1  
                                         l6611 0FF1                                           l7219 0F99  
                                         l7235 0AB0                                           l7243 0AD3  
                                         l7251 08BD                                           l7227 090E  
                                         l8131 06B0                                           l8123 06A4  
                                         l8115 0660                                           l8107 0654  
                                         l8051 0544                                           l8043 0538  
                                         l8035 04F4                                           l8027 04E8  
                                         l8019 0497                                           l7173 09AB  
                                         l7157 1736                                           l7149 09D9  
                                         l7165 082E                                           l7261 0979  
                                         l7341 0D03                                           l7325 0CF1  
                                         l7317 0CE3                                           l7309 0CD7  
                                         l7421 17FD                                           l7405 0815  
                                         l6445 15B7                                           l6509 093D  
                                         l6525 1707                                           l6533 168F  
                                         l6429 16A8                                           l6437 16B4  
                                         l6541 1742                                           l6453 16CC  
                                         l6613 0FFC                                           l6701 1758  
                                         l7181 0F59                                           l7237 0AB7  
                                         l7229 0A9E                                           l7245 0AD8  
                                         l7253 08C2                                           l8141 06E8  
                                         l8133 06B7                                           l8117 0667  
                                         l8061 0561                                           l8053 0549  
                                         l8037 04FB                                           l7175 09B4  
                                         l7167 099A                                           l7159 1737  
                                         l7431 0A34                                           l7271 098B  
                                         l7263 097D                                           l7351 0C9F  
                                         l7343 0D09                                           l7335 0CFB  
                                         l7319 0CE9                                           l7415 17F5  
                                         l6519 158E                                           l6463 15A0  
                                         l6527 1708                                           l6535 1690  
                                         l6543 1747                                           l6551 1714  
                                         l6447 16C3                                           l6455 16CF  
                                         l6615 0FFE                                           l6607 0FBE  
                                         l6631 0EC7                                           l6623 0EA9  
                                         l6703 175C                                           l7191 0F74  
                                         l7183 0F67                                           l7247 0ADF  
                                         l7239 0AC6                                           l7255 08D1  
                                         l8151 0704                                           l8135 06CA  
                                         l8119 067A                                           l8063 0574  
                                         l8055 0550                                           l8039 050E  
                                         l7169 09A6                                           l7433 0A3A  
                                         l7425 0A2C                                           l7281 0995  
                                         l7265 0983                                           l7361 0CB0  
                                         l7353 0CA3                                           l7337 0D01  
                                         l7329 0CF3                                           l7417 17FB  
                                         l7409 17ED                                           l6473 160D  
                                         l6481 0887                                           l6449 16C6  
                                         l6609 0FE5                                           l6641 0ECF  
                                         l6625 0EB5                                           l6705 175F  
                                         l6713 1716                                           l7193 0F76  
                                         l7185 0F6C                                           l7249 08B9  
                                         l7257 08D5                                           l8137 06CE  
                                         l8129 06AA                                           l8081 05D0  
                                         l8065 0580                                           l8057 0559  
                                         l8073 05A4                                           l8049 053E  
                                         l8145 06F9                                           l6811 15F1  
                                         l7443 0A44                                           l7427 0A32  
                                         l7275 098D                                           l7371 0CBA  
                                         l7355 0CA8                                           l7347 0D0B  
                                         l6459 1680                                           l6467 0800  
                                         l6539 1740                                           l6547 170E  
                                         l6555 16DF                                           l6563 16BA  
                                         l6571 0C05                                           l6627 0EBA  
                                         l6731 0B18                                           l6803 15EC  
                                         l6715 171B                                           l7195 0F7A  
                                         l7187 0F70                                           l7179 0F4D  
                                         l7259 08DA                                           l8147 06FE  
                                         l8139 06CF                                           l8091 05FA  
                                         l8083 05EE                                           l8075 05AA  
                                         l8067 059E                                           l8059 055A  
                                         l6813 15F7                                           l6901 0B7A  
                                         l7461 0A15                                           l7453 0A07  
                                         l7445 0A4A                                           l7437 0A3C  
                                         l7293 0964                                           l7285 0959  
                                         l7277 0993                                           l7269 0985  
                                         l7373 0CC0                                           l7365 0CB2  
                                         l6397 0A77                                           l6469 1607  
                                         l6477 0876                                           l6485 088D  
                                         l6493 08A4                                           l6661 0D1C  
                                         l6653 0D12                                           l6549 1710  
                                         l6557 16E1                                           l6565 16BD  
                                         l6573 0C0C                                           l6637 0ECB  
                                         l6629 0EC4                                           l6741 0B2B  
                                         l6733 0B1F                                           l6717 171C  
                                         l6725 161B                                           l7197 0F7B  
                                         l7189 0F72                                           l8149 06FF  
                                         l8093 05FF                                           l8077 05B1  
                                         l7701 0104                                           l6815 166E  
                                         l6807 1677                                           l6911 0B87  
                                         l6903 0B7F                                           l7471 0A1F  
                                         l7455 0A0D                                           l7439 0A42  
                                         l7295 096A                                           l7287 095D  
                                         l7383 0CCA                                           l7367 0CB8  
                                         l7359 0CAA                                           l6399 0A7D  
                                         l6479 087F                                           l6487 0896  
                                         l6495 08AD                                           l6655 0D15  
                                         l6671 0D22                                           l6559 16E4  
                                         l6583 0C14                                           l6647 0ED3  
                                         l6743 0B30                                           l6735 0B20  
                                         l6719 171E                                           l6727 1621  
                                         l7199 0F7C                                           l8095 0606  
                                         l8079 05C4                                           l7711 0120  
                                         l7631 0064                                           l6921 0B8F  
                                         l6913 0B88                                           l6905 0B81  
                                         l6809 15FD                                           l7473 0A25  
                                         l7465 0A17                                           l7449 0A4C  
                                         l7289 0962                                           l7385 0CD0  
                                         l7377 0CC2                                           l7393 0805  
                                         l6729 1591                                           l6489 089E  
                                         l6497 08B5                                           l6665 0D1E  
                                         l6577 0C10                                           l6569 0C03  
                                         l6593 0FB2                                           l6681 179D  
                                         l6745 0B3A                                           l6737 0B22  
                                         l6761 0E64                                           l6753 1765  
                                         l7481 0DC2                                           l8097 060F  
                                         l8089 05F4                                           l7801 01E3  
                                         l7713 0126                                           l7705 0111  
                                         l7641 006A                                           l7633 0065  
                                         l6931 16F6                                           l6923 0B90  
                                         l6915 0B8A                                           l6907 0B83  
                                         l7467 0A1D                                           l7459 0A0F  
                                         l7299 096C                                           l7379 0CC8  
                                         l7395 080B                                           l6659 0D19  
                                         l8363 0EE9                                           l6691 0BB3  
                                         l6683 0B9E                                           l6739 0B27  
                                         l6747 0B3D                                           l6771 0E7B  
                                         l6763 0E65                                           l6755 0E56  
                                         l7491 0E04                                           l7483 0DC8  
                                         l8099 0610                                           l7803 01E9  
                                         l7811 01F5                                           l7723 0142  
                                         l7707 0117                                           l7731 0154  
                                         l7651 0081                                           l7643 006B  
                                         l7635 0066                                           l7627 005F  
                                         l6941 165A                                           l6925 0B98  
                                         l6917 0B8C                                           l6909 0B85  
                                         l6933 15B3                                           l7477 0A27  
                                         l7389 0CD2                                           l6693 1594  
                                         l8365 0FD5                                           l6597 0FB6  
                                         l6589 0FAA                                           l6685 0BA1  
                                         l6677 1792                                           l6781 0E8D  
                                         l6773 0E7F                                           l6765 0E70  
                                         l6757 0E5D                                           l7485 0DEA  
                                         l7901 029B                                           l7821 0208  
                                         l7813 01F6                                           l7805 01F3  
                                         l7741 0173                                           l7733 0159  
                                         l7725 0148                                           l7717 0133  
                                         l7661 0094                                           l7653 0089  
                                         l7645 0073                                           l7637 0067  
                                         l7629 0062                                           l6935 15AF  
                                         l6927 16F2                                           l6919 0B8E  
                                         l6951 0825                                           l6943 0818  
                                         l7399 080D                                           l6791 091B  
                                         l8367 0C2A                                           l6687 0BA6  
                                         l6695 16D1                                           l6783 0E90  
                                         l6775 0E84                                           l6767 0E75  
                                         l6759 0E63                                           l6871 07E1  
                                         l7487 0DEE                                           l7911 02BC  
                                         l7903 02A1                                           l7831 0223  
                                         l7823 020E                                           l7743 0177  
                                         l7735 015F                                           l7815 01F7  
                                         l7719 0139                                           l7671 00B1  
                                         l7663 009B                                           l7655 008A  
                                         l7647 0079                                           l7639 0069  
                                         l6937 1654                                           l6961 09FB  
                                         l6929 16F5                                           l6953 0826  
                                         l6945 081D                                           l6793 0923  
                                         l8369 0D38                                           l6689 0BAD  
                                         l6785 0E98                                           l6777 0E85  
                                         l6769 0E76                                           l6881 0D8E  
                                         l6873 07EA                                           l7489 0DFE  
                                         l7921 02D8                                           l7913 02C2  
                                         l7905 02A7                                           l7825 0216  
                                         l7817 01FC                                           l7761 0198  
                                         l7753 0189                                           l7745 017A  
                                         l7737 0165                                           l7729 0151  
                                         l7681 00CD                                           l7673 00B7  
                                         l7665 00A2                                           l7657 008B  
                                         l7649 007A                                           l6939 1659  
                                         l6963 0A03                                           l6955 09E0  
                                         l6947 0820                                           l6795 0924  
                                         l6699 1757                                           l6787 0EA0  
                                         l6779 0E8A                                           l6891 0DB9  
                                         l6883 0D98                                           l6875 07F3  
                                         l6867 07D7                                           l6971 0D53  
                                         l7931 02FC                                           l7923 02DE  
                                         l7915 02C7                                           l7907 02AD  
                                         l7827 021A                                           l7819 0202  
                                         l7771 01AD                                           l7763 019E  
                                         l7755 018F                                           l7747 0180  
                                         l7739 016B                                           l7683 00D3  
                                         l7675 00BD                                           l7667 00A9  
                                         l7659 008F                                           l6957 09EB  
                                         l6893 0B6D                                           l6949 0824  
                                         l6797 092A                                           l6885 0DA4  
                                         l6877 07F6                                           l6869 07D7  
                                         l6981 0D73                                           l6973 0D58  
                                         l6965 0D47                                           l7941 0310  
                                         l7933 0302                                           l7925 02E7  
                                         l7917 02CD                                           l7909 02B3  
                                         l7861 0259                                           l7853 024A  
                                         l7845 023B                                           l7837 022C  
                                         l7829 021D                                           l7693 00EF  
                                         l7677 00C2                                           l7669 00AC  
                                         l6959 09F3                                           l6895 0B73  
                                         l6799 092D                                           l6887 0DAD  
                                         l6879 0D86                                           l6983 0D74  
                                         l6975 0D5C                                           l6967 0D4A  
                                         l6991 0C68                                           l7951 032D  
                                         l7927 02ED                                           l7919 02D2  
                                         l7935 030B                                           l7871 026E  
                                         l7863 025F                                           l7855 0250  
                                         l7847 0241                                           l7839 0232  
                                         l7695 00F5                                           l7687 00DC  
                                         l7679 00CA                                           l7943 0312  
                                         l6897 0B76                                           l6889 0DB6  
                                         l6985 0D79                                           l6977 0D60  
                                         l6969 0D50                                           l6993 0C6F  
                                         l7961 0358                                           l7953 0332  
                                         l7945 0317                                           l7937 030D  
                                         l7929 02F3                                           l7793 01D4  
                                         l7785 01C5                                           l7777 01B6  
                                         l7769 01A7                                           l7689 00E2  
                                         l6899 0B78                                           l6979 0D6F  
                                         l6987 0D7F                                           l6995 0C72  
                                         l7971 039D                                           l7963 0376  
                                         l7955 0338                                           l7947 031C  
                                         l7939 030F                                           l7795 01DA  
                                         l7787 01CB                                           l7779 01BC  
                                         l7699 00FE                                           l6997 0C77  
                                         l7973 03B4                                           l7981 03E3  
                                         l7949 0320                                           l7957 033A  
                                         l7965 0378                                           l7885 0286  
                                         l7877 0277                                           l7869 0268  
                                         l6999 0C7B                                           l7991 042D  
                                         l7983 03E9                                           l7975 03CE  
                                         l7967 037D                                           l7959 034C  
                                         l7887 028C                                           l7879 027D  
                                         l7895 0294                                           l7993 0432  
                                         l7985 03F0                                           l7977 03DE  
                                         l7969 0384                                           l7897 0295  
                                         l7889 0291                                           l7987 0403  
                                         l7899 0296                                           l7989 040F  
                                         l7997 0434                                           l7999 043A  
                                 __CFG_WDTE$ON 0000                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         _LATD 010F                                           _LATE 0110  
                                         u5000 0B3A                                           u5001 0B39  
                                         u5010 0E5D                                           u5011 0E5C  
                                         u5020 0923                                           u5100 0D60  
                                         u5021 0922                                           u5101 0D5F  
                                         u5030 07E1                                           u5031 07E0  
                                         u5040 07FE                                           u5120 0D6F  
                                         u5200 0C98                                           u6000 00F5  
                                         u5041 07FD                                           u5121 0D6E  
                                         u5201 0C97                                           u6001 00F4  
                                         u5050 0D98                                           u6010 0104  
                                         u5051 0D97                                           u5115 0D61  
                                         u6011 0103                                           u5060 0DC1  
                                         u5140 0D7F                                           u5300 0AD8  
                                         u6100 0180                                           u6020 0117  
                                         u5061 0DC0                                           u5141 0D7E  
                                         u5125 0D6B                                           u5301 0AD7  
                                         u6101 017F                                           u6021 0116  
                                         u3470 07B7                                           u5070 16FD  
                                         u5150 0C6F                                           u5310 0ADD  
                                         u6110 018F                                           u6030 0126  
                                         u3471 07B6                                           u5071 16FC  
                                         u5135 0D75                                           u5151 0C6E  
                                         u5311 0ADC                                           u6111 018E  
                                         u6031 0125                                           u5240 09D8  
                                         u3480 07CE                                           u5320 0983  
                                         u5400 0CF1                                           u5080 0D50  
                                         u7000 06FE                                           u6200 0202  
                                         u6120 019E                                           u6040 0139  
                                         u5241 09D7                                           u5321 0982  
                                         u5401 0CF0                                           u5081 0D4F  
                                         u7001 06FD                                           u6201 0201  
                                         u6121 019D                                           u6041 0138  
                                         u5250 09B4                                           u5330 098B  
                                         u5410 0CF9                                           u5170 0C7F  
                                         u7010 0704                                           u6210 0208  
                                         u6130 01AD                                           u6050 0148  
                                         u5251 09B3                                           u5331 098A  
                                         u5411 0CF8                                           u5171 0C7E  
                                         u7011 0703                                           u6211 0207  
                                         u6131 01AC                                           u6051 0147  
                                         u5340 0993                                           u5420 0D01  
                                         u5500 080B                                           u5260 0F6C  
                                         u5180 0C89                                           u6300 028C  
                                         u6220 020E                                           u6140 01BC  
                                         u6060 0159                                           u3485 07CA  
                                         u5341 0992                                           u5421 0D00  
                                         u5501 080A                                           u5261 0F6B  
                                         u5181 0C88                                           u5165 0C73  
                                         u6301 028B                                           u6221 020D  
                                         u6141 01BB                                           u6061 0158  
                                         u5350 0962                                           u5430 0D09  
                                         u5510 0813                                           u5270 0F94  
                                         u6310 0291                                           u6230 0223  
                                         u6150 01CB                                           u6070 015F  
                                         u5351 0961                                           u5431 0D08  
                                         u5511 0812                                           u5271 0F93  
                                         u5095 0D54                                           u6311 0290  
                                         u6231 0222                                           u6151 01CA  
                                         u6071 015E                                           u5600 0A1D  
                                         u5360 096A                                           u5440 0CA8  
                                         u5520 17F3                                           u5280 0AB0  
                                         u6400 02DE                                           u6320 029B  
                                         u6240 0232                                           u6160 01DA  
                                         u6080 0165                                           u5601 0A1C  
                                         u5361 0969                                           u5441 0CA7  
                                         u5521 17F2                                           u5185 0C85  
                                         u5281 0AAF                                           u6401 02DD  
                                         u6321 029A                                           u6241 0231  
                                         u6161 01D9                                           u6081 0164  
                                         u5610 0A25                                           u5370 0972  
                                         u5450 0CB0                                           u5530 17FB  
                                         u5290 0AB5                                           u6410 02ED  
                                         u6330 02A1                                           u6250 0241  
                                         u6170 01E9                                           u6090 016B  
                                         u5611 0A24                                           u5371 0971  
                                         u5451 0CAF                                           u5531 17FA  
                                         u7027 0F53                                           u5195 0C8E  
                                         u5291 0AB4                                           u6411 02EC  
                                         u6331 02A0                                           u6251 0240  
                                         u6171 01E8                                           u6091 016A  
                                         u5540 0A32                                           u5460 0CB8  
                                         u5380 0CE1                                           u4900 0EC4  
                                         u6420 02F3                                           u6340 02A7  
                                         u6260 0250                                           u6180 01F3  
                                         i1l61 172E                                           u5541 0A31  
                                         u5461 0CB7                                           u5381 0CE0  
                                         u4901 0EC3                                           u7037 179E  
                                         u6421 02F2                                           u6341 02A6  
                                         u6261 024F                                           u6181 01F2  
                                         u5550 0A3A                                           u5470 0CC0  
                                         u5390 0CE9                                           u4910 1797  
                                         u6510 037D                                           u6430 0302  
                                         u6350 02AD                                           u6270 025F  
                                         u6190 01FC                                           u7047 09A8  
                                         u5551 0A39                                           u5471 0CBF  
                                         u5391 0CE8                                           u4911 1796  
                                         u6511 037C                                           u6431 0301  
                                         u6351 02AC                                           u6271 025E  
                                         u6191 01FB                                           u5560 0A42  
                                         u5480 0CC8                                           u4920 179C  
                                         u5640 0E04                                           u6600 043F  
                                         u6520 0382                                           u6440 0317  
                                         u6360 02B3                                           u6280 026E  
                                         u5561 0A41                                           u5481 0CC7  
                                         u4921 179B                                           u5641 0E03  
                                         u5625 0DDB                                           u6601 043E  
                                         u6521 0381                                           u6505 035B  
                                         u6441 0316                                           u6361 02B2  
                                         u6281 026D                                           u5570 0A4A  
                                         u5490 0CD0                                           u4930 0BA6  
                                         u5634 0DE4                                           u6450 031C  
                                         u6370 02C2                                           u6290 027D  
                                         i1l91 1791                                           u5571 0A49  
                                         u5491 0CCF                                           u4931 0BA5  
                                         u5635 0DE2                                           u6451 031B  
                                         u6371 02C1                                           u6291 027C  
                                         u5580 0A0D                                           u4860 0A7D  
                                         u4940 0BAD                                           u6700 04F4  
                                         u6540 03E9                                           u6460 0320  
                                         u6380 02CD                                           u5900 0094  
                                         u5581 0A0C                                           u4861 0A7C  
                                         u4941 0BAC                                           u6701 04F3  
                                         u6541 03E8                                           u6461 031F  
                                         u6381 02CC                                           u5901 0093  
                                         u5590 0A15                                           u4870 084B  
                                         u4950 1764                                           u6710 04F9  
                                         u6630 0483                                           u6550 03EE  
                                         u6470 0332                                           u6390 02D8  
                                         u5910 009B                                           u5591 0A14  
                                         u4871 084A                                           u4951 1763  
                                         u6711 04F8                                           u6631 0482  
                                         u6615 0445                                           u6551 03ED  
                                         u6535 03B9                                           u6471 0331  
                                         u6391 02D7                                           u5911 009A  
                                         u4880 0FB1                                           u6800 05A3  
                                         u6640 048B                                           u6480 0338  
                                         u5920 00A2                                           u4881 0FB0  
                                         u6801 05A2                                           u6641 048A  
                                         u6625 0463                                           u6481 0337  
                                         u5921 00A1                                           u4890 0FFC  
                                         u4970 171B                                           u6810 05AA  
                                         u6650 0490                                           u5930 00A9  
                                         u4891 0FFB                                           u4971 171A  
                                         u6811 05A9                                           u6651 048F  
                                         u5931 00A8                                           u4980 0B1F  
                                         u6820 05AF                                           u6740 053D  
                                         u6660 0495                                           u6580 0432  
                                         u5940 00B1                                           u4981 0B1E  
                                         u6821 05AE                                           u6741 053C  
                                         u6725 04FF                                           u6661 0494  
                                         u6581 0431                                           u6565 03F4  
                                         u5941 00B0                                           u4990 0B27  
                                         u6910 0659                                           u6750 0544  
                                         u6590 043A                                           u5950 00B7  
                         ?_do_I2C_SEND_RESTART 0070                                           u4991 0B26  
                                         u6911 0658                                           u6751 0543  
                                         u6735 051D                                           u6591 0439  
                                         u6575 0412                                           u6495 033D  
                                         u5951 00B6                                           u6920 0660  
                                         u6760 0549                                           u5960 00BD  
                                         u6921 065F                                           u6905 0639  
                                         u6761 0548                                           u5961 00BC  
                                         u6930 0665                                           u6850 05F3  
                                         u6770 054E                                           u6690 04ED  
                                         u5970 00C2                                           u5890 0079  
                                         u6931 0664                                           u6851 05F2  
                                         u6835 05B5                                           u6771 054D  
                                         u6691 04EC                                           u6675 04AF  
                                         u5971 00C1                                           u5891 0078  
                                         u6860 05FA                                           u5980 00D3  
                                         u6861 05F9                                           u6845 05D3  
                                         u6685 04CD                                           u5981 00D2  
                                         u6870 05FF                                           u5990 00E2  
                                         u6871 05FE                                           u5991 00E1  
                                         u6960 06A9                                           u6880 0604  
                                         u6961 06A8                                           u6945 066B  
                                         u6881 0603                                           u6785 0565  
                                         u6970 06B0                                           u6971 06AF  
                                         u6955 0689                                           u6795 0583  
                                         u6980 06B5                                           u6981 06B4  
                                         u6895 061B                                           _PLLR 04D6  
                                         u6995 06D4                                           _TMR0 0015  
                                         _WPUB 020D                                           _WPUE 0210  
                      ??_wr2RegCompleteHandler 0060                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                          i1_i2c_driver_resetBus 1574  
            __size_of_do_I2C_SEND_RESTART_READ 0009                      ?_do_I2C_SEND_RESTART_READ 0070  
                              ??_mssp_clearIRQ 0056                                           _main 005F  
                                         _mode 003F                      __size_of_do_I2C_SEND_STOP 0009  
                       __size_of_do_I2C_DO_ACK 0009                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                            ??i1_do_I2C_DO_ACK 0070                                  __CFG_BOREN$ON 0000  
                        ?_do_I2C_SEND_ADR_READ 0070                       __size_of_i2c_writeNBytes 002A  
                                         start 0044                                   _bcdMonthDecr 17EB  
                                 _bcdMonthIncr 0803                                  _i2c_setBuffer 0844  
                                __CFG_MCLRE$ON 0000                                __end_of_i2c_ISR 0BCB  
             __size_of_rdBlkRegCompleteHandler 001E                       ??_do_I2C_DO_NACK_RESTART 0056  
                                i1_do_I2C_IDLE 15C4                                  i1_do_I2C_RCEN 162D  
                    __size_of_DATAEE_WriteByte 0024                        __end_of_TMR0_Initialize 082E  
                                 _do_I2C_RESET 16FE                                 i1returnReset@p 0056  
                                __CFG_PLLEN$ON 0000                 ??_TMR0_DefaultInterruptHandler 0070  
                              ?_FVR_Initialize 0070                 __size_of_OSCILLATOR_Initialize 000C  
                  i2c_setAddressNACKCallback@p 005D                          ??i1_i2c_driver_TXData 0070  
                __end_of_OSCILLATOR_Initialize 16FE                            __size_of_IOCBF4_ISR 000F  
                        ?i1_i2c_driver_sendACK 0070                                          ?_main 0070  
                     __size_of_mssp_disableIRQ 0003                    i2c_driver_setI2cISR@handler 0056  
                              __end_of___lwdiv 0D84                                          i1l201 15A6  
                                        i1l113 164B                                          i1l122 15D2  
                                        i1l131 166D                                          i1l212 0A74  
                                        i1l204 1576                                          i1l116 15C8  
                                        i1l140 15E1                                          i1l125 15D7  
                                        i1l134 1653                                          i1l207 1578  
                                        i1l231 17C6                                          i1l119 15CD  
                                        i1l143 15E6                                          i1l128 15DC  
                                        i1l152 0B6C                                          i1l160 0F4C  
                                        i1l137 1633                                          i1l146 15EB  
                                        i1l403 0042                                          i1l252 17D8  
                                        i1l404 0042                                          i1l157 0F30  
                                        i1l173 0E26                                          i1l318 0003  
                                        i1l174 0E53                                          i1l503 1664  
                                        i1l513 1572                                __end_of___lwmod 0C9D  
                                        i1l602 158A                                          i1l507 1781  
                                        i1l267 17EA                                          i1l291 08FF  
                                        i1l188 0BFE                                          i1l198 0B15  
                                        i1l631 157E                                          i1l279 17B4  
                                        i1l544 163B                                          i1l640 1584  
                                        i1l625 1574                                          i1l554 1573  
                                        i1l634 1581                                          i1l394 0012  
                                        i1l643 1587                                          i1l548 16F1  
                                        i1l652 15C3                                          i1l396 001E  
                                        i1l661 15AE                                          i1l637 1643  
                                        i1l399 0032                                          i1l658 15AA  
                                        i1l695 157B                                          i1l599 158D  
                                        _RCREG 0199                          ?i1_i2c_driver_restart 0070  
                                        _RCSTA 019D                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TRISD 008F                                          _TRISE 0090  
                                        _TXREG 019A                                          _TXSTA 019E  
                        ?i1_i2c_driver_startRX 0070              __size_of_TMR0_SetInterruptHandler 0006  
                    ?_TMR0_SetInterruptHandler 0056                                  __CFG_PWRTE$ON 0000  
                        ??i1_i2c_driver_isNACK 0070                                    i2c_open@ret 005A  
                             __end_of_TMR0_ISR 163C                             __size_ofi1_i2c_ISR 002A  
                              _DATAEE_ReadByte 172F                                __end_of_initRTC 0FA6  
                      __end_of_PIN_MANAGER_IOC 1665                                 _WDT_Initialize 15B3  
                                _bcdMinuteDecr 0C9D                           _i2c_driver_getRXData 15A0  
                 ?i1_do_I2C_SEND_RESTART_WRITE 0070                     ?_do_I2C_SEND_RESTART_WRITE 0070  
                                _bcdMinuteIncr 0CD5                          ??_do_I2C_SEND_RESTART 0056  
                                        pclath 000A                     _i2c_driver_busCollisionISR 0038  
                       ?_do_I2C_SEND_ADR_WRITE 0070                                          status 0003  
                                        wtemp0 007E                             i2c_driver_TXData@d 0056  
                    __size_of_i2c_driver_start 0003                                 ?_i2c_setBuffer 0056  
                                 ?_setCallBack 0056                            updateAlarm1@bcdHour 0066  
                      __end_ofi1_mssp_clearIRQ 158E                            __size_of_FIR_filter 005D  
                          updateAlarm2@bcdHour 0066                                  _fsmStateTable 1000  
                              __initialization 0046                               _mode_flash_count 003D  
               __size_ofi1_do_I2C_SEND_RESTART 0005                                     _i2c_poller 1757  
                __end_ofi1_do_I2C_SEND_RESTART 15D8                                     _i2c_status 00A0  
                               ?i1_do_I2C_IDLE 0070                                   __end_of_main 0708  
                               ?i1_do_I2C_RCEN 0070                     __end_ofi1_do_I2C_SEND_STOP 15DD  
                             __end_of_i2c_open 0EA5                           _i2c_driver_setI2cISR 1621  
                  ?_INTERRUPT_InterruptManager 0070                __end_ofi1_rd2RegCompleteHandler 17EB  
                                setCallBack@cb 0056                                 i1_do_I2C_RESET 1644  
                                _do_I2C_DO_ACK 16B6                                         ??_main 006B  
                            ?_i2c_restartWrite 005F                __end_ofi1_wr2RegCompleteHandler 17B5  
                                 i2c_close@ret 0057                                _i2c_driver_open 1716  
                           ??_i2c_restartWrite 0060                                _i2c_driver_stop 159A  
                       __end_of_WDT_Initialize 15B7                        ?_do_I2C_DO_ADDRESS_NACK 0070  
                       ?i1_i2c_driver_sendNACK 0070              _EUSART_DefaultFramingErrorHandler 0000  
                               ?_bcdMinuteDecr 0070                                         _ADCON0 009D  
                                       _ADCON1 009E                          ?_i2c_driver_getRXData 0070  
                               ?_bcdMinuteIncr 0070                     _EUSART_OverrunErrorHandler 0030  
                                       _ADRESH 009C                                         _EEADRH 0192  
                                       _ADRESL 009B                                         _EEADRL 0191  
                                       _EEDATH 0194                                         _EEDATL 0193  
                                       _EECON2 0196                                         _APFCON 011D  
              i1i2c_setDataCompleteCallback@cb 0075                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELD 018F  
                                       _ANSELE 0190                                         _BORCON 0116  
                      ?i1_do_I2C_SEND_ADR_READ 0070                         ?i1_i2c_driver_resetBus 0070  
                                       i1l1200 0C67                                         i1l1220 071B  
                                       i1l1213 0717                                         i1l1231 0768  
                                       i1l1223 071D                                         i1l1215 0718  
                                       i1l1207 0714                                         i1l1225 071E  
                                       i1l1209 0715                                         i1l1218 071A  
                                       i1l1235 0777                                         i1l1227 074A  
                                       i1l1229 0759                                         i1l1195 0C50  
                                       i1l5003 162D                                         i1l5011 15DD  
                                       i1l5005 162F                                         i1l5013 15E0  
                                       i1l5007 1632                                         i1l5131 158B  
                                       i1l5137 15A3                                         i1l5181 1661  
                                       i1l4701 076D                                         i1l5173 1634  
                                       i1l7101 0BCB                                         i1l7021 0B4B  
                                       i1l7013 0B40                                         i1l4703 0773  
                                       i1l5175 1635                                         i1l7103 0BCE  
                                       i1l4711 15CC                                         i1l7015 0B42  
                                       i1l5177 1638                                         i1l4801 1582  
                                       i1l7113 0BD7                                         i1l4721 15D3  
                                       i1l7017 0B47                                         i1l5179 165C  
                                       i1l4811 1579                                         i1l4803 1585  
                                       i1l7107 0BD2                                         i1l4715 15CE  
                                       i1l4723 15D6                                         i1l7027 0B4F  
                                       i1l7043 0F04                                         i1l7035 0EF8  
                                       i1l4661 0C39                                         i1l7109 0BD5  
                                       i1l4709 15C9                                         i1l4717 15D1  
                                       i1l4733 15E2                                         i1l4741 15EA  
                                       i1l7061 0F4B                                         i1l7053 0F0C  
                                       i1l4671 0C58                                         i1l4663 0C45  
                                       i1l4911 1773                                         i1l4591 157F  
                                       i1l4583 1783                                         i1l4807 15C0  
                                       i1l7119 0BDB                                         i1l4727 15D8  
                                       i1l4735 15E5                                         i1l7055 0F32  
                                       i1l7047 0F08                                         i1l7039 0F00  
                                       i1l7071 0E13                                         i1l4673 0C5F  
                                       i1l4665 0C49                                         i1l4913 177A  
                                       i1l4681 070C                                         i1l4809 15A7  
                                       i1l4585 1788                                         i1l4593 15AB  
                                       i1l4729 15DB                                         i1l7057 0F3E  
                                       i1l7073 0E17                                         i1l4675 0C60  
                                       i1l4667 0C4E                                         i1l4659 0C33  
                                       i1l4915 177F                                         i1l4691 0746  
                                       i1l4587 1790                                         i1l4739 15E7  
                                       i1l7059 0F49                                         i1l7083 0E28  
                                       i1l7075 0E21                                         i1l4677 0C65  
                                       i1l4669 0C53                                         i1l4693 074F  
                                       i1l4685 0720                                         i1l4917 16E6  
                                       i1l4589 157C                                         i1l7093 0E30  
                                       i1l7077 0E24                                         i1l7069 0E09  
                                       i1l7501 0AFB                                         i1l4695 0755  
                                       i1l4687 0736                                         i1l4679 0708  
                                       i1l4919 16EC                                         i1l6711 0A67  
                                       i1l7087 0E2C                                         i1l7503 0B00  
                                       i1l4697 075E                                         i1l4689 0740  
                                       i1l7601 0016                                         i1l4699 0764  
                                       i1l6707 0A50                                         i1l4795 1588  
                                       i1l4971 1647                                         i1l7611 0037  
                                       i1l7603 001A                                         i1l6709 0A56  
                                       i1l6821 1577                                         i1l4797 163C  
                                       i1l4973 1649                                         i1l4981 15C6  
                                       i1l7613 003C                                         i1l7605 0022  
                                       i1l6751 1722                                         i1l4975 164A  
                                       i1l4983 15C7                                         i1l4991 166C  
                                       i1l7607 0027                                         i1l6817 1575  
                                       i1l6825 17B5                                         i1l6833 17C7  
                                       i1l6841 17D9                                         i1l4969 1644  
                                       i1l7609 002C                                         i1l6851 17AC  
                                       i1l6827 17BE                                         i1l6835 17D0  
                                       i1l6843 17E2                                         i1l4979 15C4  
                                       i1l4987 1665                                         i1l4995 164C  
                                       i1l8371 0E45                                         i1l6853 17B3  
                                       i1l6829 17C5                                         i1l6837 17D7  
                                       i1l6845 17E9                                         i1l4989 1667  
                                       i1l4997 164E                                         i1l8373 0F22  
                                       i1l6863 0002                                         i1l4999 1652  
                                       i1l8375 0B64                                         i1l7495 0AEC  
                                       i1l6849 17A3                                         i1l6857 08E7  
                                       i1l8377 0BF0                                         i1l7497 0AEF  
                                       i1l8379 0728                                         i1l6859 08FE  
                                       i1l7499 0AF4                                         i1l7595 0006  
                                       i1l7597 000A                                         i1l7599 000E  
                                       u306_20 1661                                         u306_21 1660  
                                       _FVRCON 0117                                         u270_20 0C4E  
                                       u270_21 0C4D                                         u271_20 0C58  
                                       u271_21 0C57                                         u272_20 0C5F  
                                       u280_20 076D                                         u264_20 1788  
                                       u272_21 0C5E                                         u280_21 076C  
                                       u264_21 1787                                         u273_20 0C65  
                                       u281_20 0773                                         u521_20 0EFF  
                                       u273_21 0C64                                         u281_21 0772  
                                       u521_21 0EFE                  ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                                       u274_20 0740                                         u522_20 0F49  
                                       u274_21 073F                                         u522_21 0F48  
                                       u267_20 0C39                                         u275_20 0746  
                                       u523_20 0E21                                         u267_21 0C38  
                                       u275_21 0745                                         u523_21 0E20  
                                       u268_20 0C43                                         u276_20 074F  
                                       u268_21 0C40                                         u276_21 074E  
                                       u277_20 0755                                         u277_21 0754  
                                       u269_24 0C45                                         u278_20 075E  
                                       u278_21 075D                                         u287_20 177A  
                                       u279_20 0764                                         u287_21 1779  
                                       u279_21 0763                                         u288_20 16EC  
                                       u288_21 16EB                             __size_of_i2c_close 001E  
                                       _OSCCON 0099                                         u580_20 000E  
                                       u580_21 000D                                         u565_20 0AF4  
                                       u581_20 0016                                         u565_21 0AF3  
                                       u581_21 0015                                         u566_20 0AFB  
                                       u582_20 001A                                         u566_21 0AFA  
                                       u582_21 0019                                         u583_20 0022  
                                       u583_21 0021                                         u496_20 0A56  
                                       u584_20 0027                                         u496_21 0A55  
                                       u584_21 0026                                         u585_20 002C  
                                       u585_21 002B                                         u586_20 0037  
                                       u586_21 0036                        i1_rd1RegCompleteHandler 17C7  
                                       u587_20 003C                                         u579_20 000A  
                                       u587_21 003B                                         u579_21 0009  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                       ??_do_I2C_SEND_ADR_READ 0056                                         _WDTCON 0097  
                                       _SSPADD 0212                                         _SSPBUF 0211  
                     rdBlkRegCompleteHandler@p 005F                                         _SSPMSK 0213  
                                    ??_i2c_ISR 005A                        i1_wr1RegCompleteHandler 17B5  
                  ??i1_rdBlkRegCompleteHandler 0079                            _do_I2C_RX$intlevel0 0EA9  
                        __size_ofi1_returnStop 0002                    __end_of_do_I2C_DO_NACK_STOP 16C8  
                            __end_ofi1_i2c_ISR 0B16            __end_of_i2c_setDataCompleteCallback 1757  
                  _i2c_setDataCompleteCallback 1749                                _i2c_masterWrite 15EC  
                               __CFG_STVREN$ON 0000                               __end_of_intToBCD 0E09  
              __size_of_do_I2C_DO_NACK_RESTART 0009                          ?_i2c_driver_setI2cISR 0056  
                                    ??___lwdiv 005A                              ??_i2c_writeNBytes 0063  
                                    ??___lwmod 005A                         __end_ofi1_do_I2C_RESET 164C  
                              i1_i2c_setBuffer 1782                         ??i1_i2c_driver_sendACK 0070  
                             ?_TMR0_Initialize 0070                                  bcdDateDecr@dt 0056  
                               ?_do_I2C_DO_ACK 0070                    __size_ofi1_i2c_restartWrite 0002  
                       ??i1_i2c_driver_restart 0070                        __end_of_DATAEE_ReadByte 173C  
                       ??i1_i2c_driver_startRX 0070                                      ??_initRTC 0069  
                                bcdDateIncr@dt 0056                 __end_of_do_I2C_DO_ADDRESS_NACK 0C33  
                  ?_i2c_setAddressNACKCallback 005B                                ?_WDT_Initialize 0070  
                                 ?_returnReset 005F                  _do_I2C_DO_NACK_STOP$intlevel0 16C3  
                     ADC_GetConversion@channel 0059                     i1rdBlkRegCompleteHandler@p 0056  
                        __end_of_TMR0_CallBack 16F2              __size_ofi1_do_I2C_DO_ADDRESS_NACK 002D  
                                 ?_mssp_setIRQ 0070                 __end_ofi1_do_I2C_SEND_ADR_READ 166E  
                            ??_mssp_disableIRQ 0056       TMR0_SetInterruptHandler@InterruptHandler 0056  
   IOCBF4_SetInterruptHandler@InterruptHandler 0056                      ?i1_do_I2C_DO_ADDRESS_NACK 0070  
                             ?_PIN_MANAGER_IOC 0070                                   ??_IOCBF4_ISR 0070  
                            i1_do_I2C_TX_EMPTY 0BCB                              _SYSTEM_Initialize 082E  
                      __end_of__initialization 005B                                ??_i2c_setBuffer 0058  
               _do_I2C_SEND_ADR_READ$intlevel0 1740                               _do_I2C_SEND_STOP 16AD  
                                 i1_returnStop 1575                          i1_do_I2C_DO_NACK_STOP 15E2  
                           __size_of_do_I2C_RX 0053                             __size_of_do_I2C_TX 005A  
                           ?i1_do_I2C_TX_EMPTY 0070                             ?_SYSTEM_Initialize 0070  
            _rdBlkRegCompleteHandler$intlevel0 093D                            _i2c_masterOperation 0B16  
                     __size_of_do_I2C_TX_EMPTY 0039                               ?i1_mssp_clearIRQ 0070  
                              ??i1_do_I2C_IDLE 0070                                   ?_updateMonth 0070  
                              ??i1_do_I2C_RCEN 0070                        _rdBlkRegCompleteHandler 0939  
                                  ?_i2c_poller 0070                                 __pcstackCOMMON 0070  
                   ??i1_do_I2C_DO_NACK_RESTART 0070                            _do_I2C_TX$intlevel0 0FAA  
                          ??i1_do_I2C_TX_EMPTY 0070                            ??_SYSTEM_Initialize 0059  
                                    ?_TMR0_ISR 0070                               _DATAEE_WriteByte 09BC  
                              ?i1_do_I2C_RESET 0070                        __end_of_i2c_driver_open 1722  
                      __end_of_i2c_driver_stop 159D                              __end_of_i2c_close 0939  
                                 ?i1_do_I2C_RX 0070                                   ?i1_do_I2C_TX 0070  
                           __end_of_IOCBF4_ISR 1782                            i1i2c_restartWrite@p 0056  
                           _i2c_driver_sendACK 15B7                      i1_rdBlkRegCompleteHandler 08E7  
                                ??_bcdDateDecr 0056                           ?_i2c_masterOperation 0070  
                                ??_bcdDateIncr 0056                                   ??_FIR_filter 005C  
               i1i2c_setDataCompleteCallback@p 0077                        ?i1_i2c_driver_getRXData 0070  
                               _OPTION_REGbits 0095                   ??i1_do_I2C_SEND_RESTART_READ 0070  
                           _i2c_driver_restart 1597                                ??_bcdMinuteDecr 0056  
                              ??_bcdMinuteIncr 0056                         __size_ofi1_setCallBack 0026  
                           _i2c_driver_startRX 159D                         ??_i2c_driver_getRXData 0056  
                              i1setCallBack@cb 0070                       i1rd1RegCompleteHandler@p 0056  
                              i1_do_I2C_DO_ACK 15DD                ??_EUSART_SetOverrunErrorHandler 0058  
                  ?_IOCBF4_SetInterruptHandler 0056                            ?_i2c_driver_sendACK 0070  
                               setCallBack@idx 005A                      __end_ofi1_do_I2C_TX_EMPTY 0BFF  
                       _do_I2C_DO_NACK_RESTART 16C8                      __end_of_SYSTEM_Initialize 0844  
                    ??i1_rd1RegCompleteHandler 0079                            ?_i2c_driver_restart 0070  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                    ??i1_wr1RegCompleteHandler 0079                            ?_i2c_driver_startRX 0070  
               __size_of_rd2RegCompleteHandler 0017                                      ?_i2c_open 0070  
                __end_of_rd2RegCompleteHandler 08B7                                  ??_bcdHourDecr 0056  
                                ??_bcdHourIncr 0056                                __CFG_VCAPEN$RA0 0000  
               __size_of_wr2RegCompleteHandler 0017               __size_ofi1_rd2RegCompleteHandler 0012  
                __end_of_wr2RegCompleteHandler 0872                        __end_of_i2c_masterWrite 15F1  
                     i1wr1RegCompleteHandler@p 0056                               _i2c_driver_start 1594  
                        _rd1RegCompleteHandler 0889                        __end_ofi1_i2c_setBuffer 1792  
             __size_ofi1_wr2RegCompleteHandler 0012                          _do_I2C_IDLE$intlevel0 168D  
                        _wr1RegCompleteHandler 0872                   __size_of_i2c_busCollisionISR 0004  
                             ??_FVR_Initialize 0056                _wr1RegCompleteHandler$intlevel0 0876  
              _rd1RegCompleteHandler$intlevel0 088D                                     __pmaintext 005F  
                                ??_do_I2C_IDLE 0056                             __end_of_FIR_filter 07D5  
                         __size_of_setCallBack 0027                                  ??_do_I2C_RCEN 0056  
                         ??_i2c_driver_sendACK 0056                         ??_i2c_driver_setI2cISR 0058  
             __end_of_TMR0_SetInterruptHandler 1603                             __size_of_secondISR 0035  
                                   ??_TMR0_ISR 0072                                ??_do_I2C_DO_ACK 0056  
                                   __pintentry 0004                           ??_i2c_driver_restart 0056  
                 __size_of_i2c_driver_sendNACK 0004                                        _BAUDCON 019F  
                         ??_i2c_driver_startRX 0056                            intToBCD@binaryInput 0062  
             ??_IOCBF4_DefaultInterruptHandler 0070                ?_IOCBF4_DefaultInterruptHandler 0070  
                          i2c_setBuffer@buffer 0059                   __size_of_i2c_driver_resetBus 0001  
               __end_ofi1_i2c_driver_getRXData 1588                 ?_i2c_driver_setBusCollisionISR 0056  
                      __size_of_ADC_Initialize 0008                          ??_i2c_masterOperation 005D  
                             ?_DATAEE_ReadByte 0070                              __end_of_do_I2C_RX 0EF8  
                            __end_of_do_I2C_TX 1000                          i2c_readDataBlock@data 0061  
                     ?i1_do_I2C_SEND_ADR_WRITE 0070                             __size_of_updateRTC 001B  
                                      _OSCTUNE 0098                                     _displayNum 1800  
                     ??_EUSART_SetErrorHandler 0058                            __size_of_i2c_poller 000E  
                                      _SSPCON1 0215                                        _SSPCON2 0216  
                      ??_do_I2C_SEND_ADR_WRITE 0057            _do_I2C_SEND_RESTART_WRITE$intlevel0 169F  
                                      _SSPSTAT 0214                            __end_of_bcdDateDecr 0A2A  
                  ??_do_I2C_SEND_RESTART_WRITE 0056                            __end_of_bcdDateIncr 0A4F  
                                    ?_intToBCD 0062                         ?i1_do_I2C_DO_NACK_STOP 0070  
                            _mssp_IRQisEnabled 16D1                                     ??_i2c_open 0058  
                         DATAEE_WriteByte@bAdd 0057                                        _i2c_ISR 0B9A  
                    ??_rdBlkRegCompleteHandler 0060                              _mssp_waitForEvent 1792  
                           ?_mssp_IRQisEnabled 0070                          __end_of_mssp_clearIRQ 1591  
                         _ADC_InterruptHandler 0034                          _returnReset$intlevel0 160D  
                        _do_I2C_RCEN$intlevel0 16DF                                  i1_setCallBack 0A4F  
                           ?_mssp_waitForEvent 0070               _do_I2C_DO_ADDRESS_NACK$intlevel0 0C03  
                  __end_ofi1_i2c_driver_TXData 15C4                            __end_of_bcdHourDecr 0977  
                          __end_of_bcdHourIncr 0998            __size_of_i2c_setAddressNACKCallback 000E  
                       __size_ofi1_returnReset 0002                            ??_mssp_IRQisEnabled 0056  
                                      ___lwdiv 0D47                                        ___lwmod 0C68  
                       __size_ofi1_mssp_setIRQ 0003                              ??_do_I2C_TX_EMPTY 0056  
                             ?_i2c_driver_open 0070                            ??_mssp_waitForEvent 0056  
                             ?_i2c_driver_stop 0070                         i2c_writeNBytes@address 0063  
                  __end_ofi1_i2c_driver_isNACK 1644                        __end_ofi1_do_I2C_DO_ACK 15E2  
                                      __ptext1 0900                                        __ptext2 08CF  
                                      __ptext3 08B7                                        __ptext4 0AC4  
                                      __ptext5 0A9C                                        __ptext6 0DC2  
                                      __ptext7 0C68                                        __ptext8 0D47  
                                      __ptext9 0F4D                             i2c_readDataBlock@d 0066  
                          __end_of_do_I2C_IDLE 1692                            __end_of_do_I2C_RCEN 16E6  
                                      _initRTC 0F4D                          _OSCILLATOR_Initialize 16F2  
                      ??i1_i2c_driver_sendNACK 0070                    __end_of_do_I2C_SEND_RESTART 16AD  
                     ??_PIN_MANAGER_Initialize 0058                                        _rtcData 0042  
                                    _IOCBFbits 0396                                  bcdHourDecr@hr 0057  
                       i2c_masterOperation@ret 005F                                      _IOCBNbits 0395  
                      ??i1_i2c_driver_resetBus 0070                                      _IOCBPbits 0394  
                           i1_do_I2C_SEND_STOP 15D8                     _do_I2C_SEND_STOP$intlevel0 16B1  
                   __size_ofi1_do_I2C_TX_EMPTY 0034                       _do_I2C_SEND_RESTART_READ 1692  
                   __size_of_SYSTEM_Initialize 0016                                        clrloop0 1628  
                    __end_of_mssp_IRQisEnabled 16DB                              __end_of_secondISR 0C68  
                                bcdHourIncr@hr 0057                           __size_of_returnReset 0006  
                         end_of_initialization 005B                           __size_of_mssp_setIRQ 0003  
                                   ??_intToBCD 0064                      __end_of_mssp_waitForEvent 17A3  
        __end_of_EUSART_SetOverrunErrorHandler 15FD         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 15F7                      __size_of_i2c_restartWrite 0006  
                          ?i1_do_I2C_SEND_STOP 0070                         ?_rd1RegCompleteHandler 005F  
                              _i2c_writeNBytes 07D5                               ?_i2c_masterWrite 0070  
                            _EUSART_Initialize 09E0                         ?_wr1RegCompleteHandler 005F  
                               ?i1_setCallBack 0070                               ?i1_i2c_setBuffer 0070  
                           ?_EUSART_Initialize 0070                              __end_of_updateRTC 091B  
                                    _RCSTAbits 019D                      _do_I2C_SEND_RESTART_WRITE 169B  
                         __size_of_updateMonth 0018                          i1_do_I2C_SEND_RESTART 15D3  
             __end_ofi1_do_I2C_DO_ADDRESS_NACK 0B6D                             _button_press_count 0020  
              __end_ofi1_do_I2C_SEND_ADR_WRITE 1654                                _mssp_disableIRQ 1591  
                          ??_EUSART_Initialize 0058                               ??_WDT_Initialize 0056  
                                    i1_i2c_ISR 0AEC                           ??i1_do_I2C_SEND_STOP 0070  
                                   _returnStop 1603                       _TMR0_SetInterruptHandler 15FD  
                                    _PORTBbits 000D                __end_of_rdBlkRegCompleteHandler 0957  
                     __end_of_do_I2C_SEND_STOP 16B6             __end_ofi1_do_I2C_SEND_RESTART_READ 15CE  
                   i1_do_I2C_SEND_RESTART_READ 15C9                                   _display_mode 003A  
                                  _bcdDateDecr 0A05                                    _bcdDateIncr 0A2A  
                             __CFG_FOSC$INTOSC 0000                           __size_ofi1_do_I2C_RX 004B  
                         __size_ofi1_do_I2C_TX 0055                                     _updateDate 08B7  
         __size_of_i2c_setDataCompleteCallback 000E                                  i1_returnReset 1577  
                                  returnStop@p 005F                __size_of_EUSART_SetErrorHandler 0009  
                                i1_mssp_setIRQ 1588                       __end_of_DATAEE_WriteByte 09E0  
                        updateAlarm1@bcdMinute 0064             __size_ofi1_rdBlkRegCompleteHandler 0019  
                 i2c_setDataCompleteCallback@p 005D                      __end_of_EUSART_Initialize 0A05  
                      i1_rd2RegCompleteHandler 17D9                                  ?_updateAlarm1 0064  
                                ?_updateAlarm2 0064                                    _bcdHourDecr 0957  
                                  _bcdHourIncr 0977                                      _TXSTAbits 019E  
                          updateMonth@bcdMonth 0065                        i1_wr2RegCompleteHandler 17A3  
                            updateDate@bcdDate 0065                  __size_of_do_I2C_SEND_ADR_READ 000D  
                        updateAlarm2@bcdMinute 0064                               ??i1_do_I2C_RESET 0070  
                     _flag_time_display_update 0041                                   ??_i2c_poller 005D  
                                  _do_I2C_IDLE 1689                                    _do_I2C_RCEN 16DB  
                   __end_ofi1_i2c_restartWrite 0004                                  intToBCD@shift 0069  
                   _EUSART_DefaultErrorHandler 0000           __end_of_i2c_driver_clearBusCollision 157C  
        __size_of_i2c_driver_clearBusCollision 0003                   _i2c_driver_clearBusCollision 1579  
                           _mode_timeout_count 003E                              __size_of_TMR0_ISR 0008  
                                   ?i1_i2c_ISR 0070                                 _ADC_Initialize 1654  
                             ?i1_do_I2C_DO_ACK 0070                         ?_OSCILLATOR_Initialize 0070  
                __size_ofi1_i2c_driver_sendACK 0004                              intToBCD@bcdResult 0067  
                 __size_of_do_I2C_DO_NACK_STOP 0009                       __end_of_i2c_driver_start 1597  
                __size_ofi1_i2c_driver_restart 0003                        ?_do_I2C_DO_NACK_RESTART 0070  
                          start_initialization 0046                             updateRTC@bcdMinute 0064  
                                    _i2c_close 091B                  __size_ofi1_i2c_driver_startRX 0003  
                          _i2c_busCollisionISR 15A3                       __size_of_TMR0_Initialize 0016  
              __size_of_PIN_MANAGER_Initialize 002D                                 ?i1_returnReset 0056  
                             FIR_filter@buffer 00BD                        __end_of_i2c_writeNBytes 07FF  
          __end_ofi1_do_I2C_SEND_RESTART_WRITE 15D3                    i1_do_I2C_SEND_RESTART_WRITE 15CE  
                               ?i1_mssp_setIRQ 0070                                 _flag_dot_blink 0040  
                                FIR_filter@sum 00CD                     __size_of_mssp_IRQisEnabled 000A  
                             FIR_filter@oldest 002C                               FIR_filter@sample 005A  
                                 setCallBack@p 0058                             __end_of_i2c_poller 1765  
                            _displayRefreshISR 0708                            _i2c_driver_sendNACK 15BB  
                              i2c_open@address 0059                        i2c_setBuffer@bufferSize 0056  
                   __size_of_mssp_waitForEvent 0011                                 ??_updateAlarm1 0065  
                               ??_updateAlarm2 0065                         rd1RegCompleteHandler@p 005F  
                           ?_displayRefreshISR 0070                            _i2c_driver_resetBus 07FF  
                              ??i1_setCallBack 0073                        _flag_button_press_count 0024  
                          DATAEE_ReadByte@bAdd 0056                                  ?_bcdMonthDecr 0070  
                        __end_of_i2c_setBuffer 085B                              __size_of_i2c_open 0051  
                     __size_of_PIN_MANAGER_IOC 0009                                  ?_bcdMonthIncr 0070  
        __end_ofi1_i2c_setDataCompleteCallback 172F         __size_ofi1_i2c_setDataCompleteCallback 000D  
                i1_i2c_setDataCompleteCallback 1722                 ?_EUSART_SetOverrunErrorHandler 0056  
                         ?_i2c_busCollisionISR 0070                        __end_of_mssp_disableIRQ 1594  
                             i1setCallBack@idx 0074                            ??_displayRefreshISR 0070  
                   _EUSART_FramingErrorHandler 0032                          __end_ofi1_do_I2C_IDLE 15C9  
                        __end_ofi1_do_I2C_RCEN 1634                      i1i2c_setBuffer@bufferSize 0070  
                       ?i1_do_I2C_SEND_RESTART 0070                         _EUSART_SetErrorHandler 166E  
                       wr1RegCompleteHandler@p 005F                         __size_of_TMR0_CallBack 000C  
                       __end_of_ADC_Initialize 165C                           ?_i2c_driver_sendNACK 0070  
                                ?_do_I2C_RESET 0070                      _do_I2C_TX_EMPTY$intlevel0 0D12  
                     __size_ofi1_mssp_clearIRQ 0003                                    ?_returnStop 005F  
                         ?_i2c_driver_resetBus 0070                              _i2c_driver_TXData 1615  
               __end_of_do_I2C_DO_NACK_RESTART 16D1                  ?_i2c_driver_clearBusCollision 0070  
                            _i2c_driver_i2cISR 0036                       i1_do_I2C_DO_ADDRESS_NACK 0B40  
                           ?_i2c_driver_TXData 0070                                    __pbssCOMMON 0079  
                                  ?_updateDate 0070                                     ?_i2c_close 0070  
                                    ___latbits 0003                                  __pcstackBANK0 0056  
            __size_ofi1_do_I2C_DO_NACK_RESTART 0005                       i1rd2RegCompleteHandler@p 0056  
                                    _do_I2C_RX 0EA5                      ?i1_do_I2C_DO_NACK_RESTART 0070  
                                    _do_I2C_TX 0FA6                      __end_of_displayRefreshISR 0778  
                            _i2c_driver_isNACK 1680                          __end_of_bcdMinuteDecr 0CD5  
                      ??i1_do_I2C_DO_NACK_STOP 0070                          __end_of_bcdMinuteIncr 0D0E  
                             updateRTC@bcdHour 0066                      ??i1_rd2RegCompleteHandler 0079  
                __size_of_i2c_driver_getRXData 0003         __end_of_IOCBF4_DefaultInterruptHandler 1573  
      __size_of_IOCBF4_DefaultInterruptHandler 0001                 _IOCBF4_DefaultInterruptHandler 1572  
                           ?_i2c_driver_isNACK 0070                            ??_i2c_driver_TXData 0056  
               __size_of_do_I2C_SEND_ADR_WRITE 000C                      ??i1_wr2RegCompleteHandler 0079  
                __end_of_do_I2C_SEND_ADR_WRITE 1716                ??_i2c_driver_setBusCollisionISR 0058  
                               i1setCallBack@p 0072                               _i2c_restartWrite 160F  
                   __size_of_EUSART_Initialize 0025                     _i2c_restartWrite$intlevel0 1613  
                                     ?_i2c_ISR 0070                _do_I2C_SEND_ADR_WRITE$intlevel0 170E  
             __size_ofi1_do_I2C_SEND_ADR_WRITE 0008                                 ??_bcdMonthDecr 0056  
                              _do_I2C_TX_EMPTY 0D0E                                 ??_bcdMonthIncr 0056  
                        _TMR0_InterruptHandler 0079                              __size_of_intToBCD 0047  
                                ??_setCallBack 0059                                      __pnvBANK1 00D3  
                     i1wr2RegCompleteHandler@p 0056                          _rd2RegCompleteHandler 08A0  
                          ??_i2c_driver_isNACK 0056                          ??_i2c_busCollisionISR 0070  
                        __end_of_fsmStateTable 1020                               ___lwdiv@dividend 0058  
                       _PIN_MANAGER_Initialize 0B6D                          _wr2RegCompleteHandler 085B  
                  __size_of_i2c_driver_sendACK 0004                                 ??_do_I2C_RESET 0056  
                                    __ptext100 1665                                      __ptext101 15D8  
                                    __ptext110 15BF                                      __ptext102 15D3  
                                    __ptext111 1585                                      __ptext103 15CE  
                                    __ptext120 1577                                      __ptext112 15AB  
                                    __ptext104 15C9                                      __ptext121 1575  
                                    __ptext113 1574                                      __ptext105 15C4  
                                    __ptext130 1579                                      __ptext122 17A3  
                                    __ptext114 1582                                      __ptext106 1644  
                                    __ptext131 1634                                      __ptext123 1722  
                                    __ptext115 0002                                      __ptext107 0BCB  
                                    __ptext132 16E6                                      __ptext124 0A4F  
                                    __ptext116 08E7                                      __ptext108 1588  
                        ??_i2c_driver_sendNACK 0056                                      __ptext133 1573  
                                    __ptext125 1782                                      __ptext117 17D9  
                                    __ptext109 163C                                      __ptext134 0708  
                                    __ptext126 157F                                      __ptext118 17C7  
                                    __ptext135 165C                                      __ptext127 157C  
                                    __ptext119 17B5                                      __ptext136 1773  
                                    __ptext128 15A7                                      __ptext137 1572  
                                    __ptext129 15A3                                      __ptext138 0C33  
                  __end_of_i2c_masterOperation 0B40                                       ?___lwdiv 0056  
                     ??_do_I2C_DO_ADDRESS_NACK 0056                                       ?___lwmod 0056  
                              ?_ADC_Initialize 0070                  __size_of_i2c_driver_setI2cISR 0006  
                  __size_of_i2c_driver_restart 0003                           i2c_readDataBlock@len 0062  
                    __end_of_i2c_driver_TXData 161B                           i2c_readDataBlock@reg 0060  
                        __end_of_do_I2C_DO_ACK 16BF                          ??_i2c_driver_resetBus 0056  
                  __size_of_i2c_driver_startRX 0003                                    ??i1_i2c_ISR 0073  
                 ??_INTERRUPT_InterruptManager 0076                     ??_do_I2C_SEND_RESTART_READ 0056  
                     ??i1_do_I2C_SEND_ADR_READ 0070                                       ?_initRTC 0070  
                                  _flag_alarm1 003C                                    _flag_alarm2 003B  
                              ??i1_returnReset 0079                              _i2c_readDataBlock 0D84  
                    __end_of_i2c_driver_isNACK 1689                       ?i1_rd1RegCompleteHandler 0056  
           __size_of_do_I2C_SEND_RESTART_WRITE 0009                                ??i1_mssp_setIRQ 0070  
               __size_ofi1_i2c_driver_sendNACK 0004                  __end_ofi1_i2c_driver_sendNACK 15AF  
                     ?i1_wr1RegCompleteHandler 0056                                     ?_do_I2C_RX 0070  
                                   ?_do_I2C_TX 0070                             ?_i2c_readDataBlock 0060  
                             ___lwdiv@quotient 005C                               ?_i2c_writeNBytes 0060  
               __size_ofi1_i2c_driver_resetBus 0001                                  _TMR0_CallBack 16E6  
                __end_ofi1_i2c_driver_resetBus 1575                       __size_of_DATAEE_ReadByte 000D  
                      ??_rd1RegCompleteHandler 0060                              _i2c_ISR$intlevel0 0B9E  
                      ??_wr1RegCompleteHandler 0060                              ??_TMR0_Initialize 0058  
                          ??_i2c_readDataBlock 0064                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0056                                      _secondISR 0C33  
                                     _LATCbits 010E                                       _LATEbits 0110  
                          __size_of_returnStop 0006                                      clear_ram0 1627  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 007C            __size_of_INTERRUPT_InterruptManager 0040  
                   ??_TMR0_SetInterruptHandler 0058                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0058                                       _PIR2bits 0012  
                             ?_mssp_disableIRQ 0070                            __size_of_updateDate 0018  
                                     _TMR0_ISR 1634              _EUSART_DefaultOverrunErrorHandler 0000  
                 ?_i2c_setDataCompleteCallback 005B                 ?i1_i2c_setDataCompleteCallback 0075  
                                  _displayBuff 0028                            __end_of_setCallBack 0A9C  
                            ??_PIN_MANAGER_IOC 0070                                      _updateRTC 0900  
                         __end_of_updateAlarm1 0AC4                           __end_of_updateAlarm2 0AEC  
                                   _ADCON0bits 009D                      __end_of_i2c_readDataBlock 0DC2  
                 __size_ofi1_i2c_driver_TXData 0005                              i1_i2c_driver_stop 157F  
                 i2c_setAddressNACKCallback@cb 005B                              ?_do_I2C_SEND_STOP 0070  
                  ?i1_do_I2C_SEND_RESTART_READ 0070                        __size_of_FVR_Initialize 0004  
                                 ?_bcdDateDecr 0070                                   ?_bcdDateIncr 0070  
                           ?i1_i2c_driver_stop 0070                                    ??_i2c_close 0056  
                                ??_returnReset 0060                             ??_do_I2C_SEND_STOP 0056  
                       __size_of_mssp_clearIRQ 0003                       __size_of_i2c_driver_open 000C  
                        DATAEE_WriteByte@bData 0056                              ??i1_mssp_clearIRQ 0070  
                 ??_i2c_setAddressNACKCallback 005E                       __size_of_i2c_driver_stop 0003  
                   __size_of_displayRefreshISR 0070              __end_of_do_I2C_SEND_RESTART_WRITE 16A4  
                 __size_ofi1_i2c_driver_isNACK 0008                                  ??_mssp_setIRQ 0056  
               ??_i2c_driver_clearBusCollision 0070                                 ?_TMR0_CallBack 0070  
                      __end_of_do_I2C_TX_EMPTY 0D47                       ?_rdBlkRegCompleteHandler 005F  
                          ??i1_i2c_driver_stop 0070                              ?_DATAEE_WriteByte 0056  
                 __size_of_do_I2C_SEND_RESTART 0009                        _do_I2C_DO_ACK$intlevel0 16BA  
                                     _i2c_open 0E54                                  ?i1_returnStop 0056  
                                 ?_bcdHourDecr 0070                         ?_rd2RegCompleteHandler 005F  
                                   ?_secondISR 0070                                   ?_bcdHourIncr 0070  
                           ??_DATAEE_WriteByte 0057                            _do_I2C_DO_NACK_STOP 16BF  
                                   _EECON1bits 0195                               __size_of_i2c_ISR 0031  
                       ?_wr2RegCompleteHandler 005F                _wr2RegCompleteHandler$intlevel0 085F  
              _rd2RegCompleteHandler$intlevel0 08A4                                  ??_updateMonth 0064  
        __end_of_i2c_driver_setBusCollisionISR 1621         __size_of_i2c_driver_setBusCollisionISR 0006  
                _i2c_driver_setBusCollisionISR 161B                              _ADC_GetConversion 0998  
                          i2c_writeNBytes@data 0060                                   ?_do_I2C_IDLE 0070  
                     ??i1_i2c_driver_getRXData 0070                                   ?_do_I2C_RCEN 0070  
                      ??_OSCILLATOR_Initialize 0056                            _EUSART_ErrorHandler 00D1  
                           ?_ADC_GetConversion 0056                       __size_of_i2c_masterWrite 0005  
                   __size_of_i2c_driver_TXData 0006                __size_of_do_I2C_DO_ADDRESS_NACK 0034  
                    __end_ofi1_i2c_driver_stop 1582                             __end_of_displayNum 180A  
                        i1i2c_setBuffer@buffer 0073                               __size_of___lwdiv 003D  
                                   ?_updateRTC 0064                               __size_of___lwmod 0035  
                ??_i2c_setDataCompleteCallback 005E                __end_ofi1_rd1RegCompleteHandler 17D9  
                     __size_ofi1_i2c_setBuffer 0010                                  ??i1_do_I2C_RX 0070  
                                ??i1_do_I2C_TX 0070             _do_I2C_SEND_RESTART_READ$intlevel0 1696  
                  __size_ofi1_do_I2C_SEND_STOP 0005                                       _bcd_temp 002E  
              __end_ofi1_wr1RegCompleteHandler 17C7                           ?_do_I2C_DO_NACK_STOP 0070  
                 __end_of_do_I2C_SEND_ADR_READ 1749                            ??_ADC_GetConversion 0058  
              __size_ofi1_do_I2C_SEND_ADR_READ 0009                           __end_of_bcdMonthDecr 1800  
                         __end_of_bcdMonthIncr 0818                     __size_of_i2c_driver_isNACK 0009  
                      _IOCBF4_InterruptHandler 00D3                              ?_i2c_driver_start 0070  
                             __size_of_initRTC 0059                             i1_i2c_restartWrite 0002  
                              ___lwdiv@divisor 0056                                    ??_do_I2C_RX 0056  
                                  ??_do_I2C_TX 0057                                ___lwdiv@counter 005B  
                           ??_i2c_driver_start 0056                                       __ptext10 07D5  
                                     __ptext11 0D84                                       __ptext20 1757  
                                     __ptext12 1765                                       __ptext21 1792  
                                     __ptext13 0E54                                       __ptext30 170A  
                                     __ptext22 0B9A                                       __ptext14 1621  
                                     __ptext31 173C                                       __ptext23 0EA5  
                                     __ptext15 161B                                       __ptext40 1680  
                                     __ptext32 16AD                                       __ptext24 0FA6  
                                     __ptext16 1716                                       __ptext41 1615  
                                     __ptext33 16A4                                       __ptext25 0BFF  
                                     __ptext17 15EC                                       __ptext50 160F  
                                     __ptext42 15A0                                       __ptext34 169B  
                                     __ptext26 16C8                                       __ptext18 0B16  
                                     __ptext51 1609                                       __ptext43 15BB  
                                     __ptext35 1692                                       __ptext27 16BF  
                                     __ptext19 16D1                                       __ptext60 1594  
                                     __ptext52 1603                                       __ptext44 07FF  
                                     __ptext36 1689                                       __ptext28 16B6  
                                     __ptext61 091B                                       __ptext53 085B  
                                     __ptext45 159D                                       __ptext37 16FE  
                                     __ptext29 16DB                                       __ptext70 0A2A  
                                     __ptext62 1591                                       __ptext54 1749  
                                     __ptext46 0939                                       __ptext38 0D0E  
                                     __ptext71 0A05                                       __ptext63 158E  
                                     __ptext55 0A75                                       __ptext47 08A0  
                                     __ptext39 0800                                       __ptext80 09E0  
                                     __ptext72 082E                                       __ptext64 0803  
                                     __ptext56 0844                                       __ptext48 0889  
                                     __ptext81 15F7                                       __ptext73 15B3  
                                     __ptext65 17EB                                       __ptext57 159A  
                                     __ptext49 0872                                       __ptext90 0AEC  
                                     __ptext82 15F1                                       __ptext74 0818  
                                     __ptext66 0CD5                                       __ptext58 1597  
                                     __ptext91 158B                                       __ptext83 166E  
                                     __ptext75 15FD                                       __ptext67 0C9D  
                                     __ptext59 15B7                                       __ptext92 0E09  
                                     __ptext84 1654                                       __ptext76 0B6D  
                                     __ptext68 0977                                       __ptext93 0EF8  
                                     __ptext85 0778                                       __ptext77 1677  
                                     __ptext69 0957                                       __ptext94 0B40  
                                     __ptext86 09BC                                       __ptext78 16F2  
                                     __ptext95 15E7                                       __ptext87 172F  
                                     __ptext79 15AF                                       __ptext96 15E2  
                                     __ptext88 0998                                       __ptext97 15DD  
                                     __ptext98 162D                                       __ptext99 164C  
                 ??_IOCBF4_SetInterruptHandler 0058                           __end_of_do_I2C_RESET 170A  
                                   _IOCBF4_ISR 1773                    DATAEE_WriteByte@GIEBitValue 0058  
                               ??i1_returnStop 0079                                       _intToBCD 0DC2  
                      i1_do_I2C_SEND_ADR_WRITE 164C                            ?i1_i2c_restartWrite 0056  
                 __end_ofi1_i2c_driver_sendACK 15AB                            __end_of_returnReset 160F  
                                __size_of_main 06A9                            __end_of_mssp_setIRQ 0803  
                 __end_ofi1_i2c_driver_restart 157F                           i1i2c_driver_TXData@d 0070  
         __end_of_TMR0_DefaultInterruptHandler 1574          __size_of_TMR0_DefaultInterruptHandler 0001  
                 _TMR0_DefaultInterruptHandler 1573                              ??_DATAEE_ReadByte 0056  
                    __end_of_ADC_GetConversion 09BC                   __end_ofi1_i2c_driver_startRX 1585  
                     i2c_readDataBlock@address 0065                                    _setCallBack 0A75  
                      ??i1_do_I2C_SEND_RESTART 0070                        ?_EUSART_SetErrorHandler 0056  
                                _mssp_clearIRQ 158E                        i2c_masterOperation@read 005E  
         __size_ofi1_do_I2C_SEND_RESTART_WRITE 0005  EUSART_SetOverrunErrorHandler@interruptHandler 0056  
                                     int$flags 007E                     ??i1_do_I2C_DO_ADDRESS_NACK 0070  
             __end_ofi1_do_I2C_DO_NACK_RESTART 15EC             __end_of_INTERRUPT_InterruptManager 0044  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 15F7  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 15F1  
                          __end_of_updateMonth 08E7                           ??i1_i2c_restartWrite 0079  
             __end_of_do_I2C_SEND_RESTART_READ 169B                                   ??_returnStop 0060  
                     __end_of_i2c_restartWrite 1615                          ??_do_I2C_DO_NACK_STOP 0056  
                   __size_of_i2c_readDataBlock 003E                       mssp_waitForEvent@timeout 0056  
          __size_of_IOCBF4_SetInterruptHandler 0009           i2c_driver_setBusCollisionISR@handler 0056  
                                   _FIR_filter 0778                                     _INTCONbits 000B  
                                 ??_updateDate 0064                                ??_TMR0_CallBack 0072  
                                   _FVRCONbits 0117                             i2c_writeNBytes@len 0061  
                          __end_ofi1_do_I2C_RX 0E54                            __end_ofi1_do_I2C_TX 0F4D  
                     __size_ofi1_do_I2C_DO_ACK 0005                               ?_do_I2C_TX_EMPTY 0070  
                      __size_of_WDT_Initialize 0004                         _do_I2C_DO_ADDRESS_NACK 0BFF  
               __size_ofi1_do_I2C_DO_NACK_STOP 0005                                       intlevel1 0000  
                __end_ofi1_do_I2C_DO_NACK_STOP 15E7                         _do_I2C_RESET$intlevel0 1702  
                       rd2RegCompleteHandler@p 005F                              ??_i2c_driver_open 0056  
                             ___lwmod@dividend 0058                              ??_i2c_driver_stop 0056  
                      ?_PIN_MANAGER_Initialize 0070                                    ??_secondISR 0070  
                            i2c_restartWrite@p 005F                 __end_of_EUSART_SetErrorHandler 1677  
                       i1_do_I2C_SEND_ADR_READ 1665                              __CFG_CLKOUTEN$OFF 0000  
                   ?i1_rdBlkRegCompleteHandler 0056                             __end_of_returnStop 1609  
                               ?_mssp_clearIRQ 0070                          __end_ofi1_setCallBack 0A75  
                             ??_ADC_Initialize 0056            __size_ofi1_do_I2C_SEND_RESTART_READ 0005  
                ?_TMR0_DefaultInterruptHandler 0070                   __end_of_i2c_driver_getRXData 15A3  
                           __end_of_updateDate 08CF                          __size_of_updateAlarm1 0028  
                        __size_of_updateAlarm2 0028                __size_ofi1_i2c_driver_getRXData 0003  
                       wr2RegCompleteHandler@p 005F  EUSART_SetFramingErrorHandler@interruptHandler 0056  
                              bcdMinuteDecr@mn 0057                     __size_ofi1_i2c_driver_stop 0003  
                                  ??_updateRTC 0065                             displayRefreshISR@i 007B  
                                __pstringtext1 1000                                  __pstringtext2 1800  
                              bcdMinuteIncr@mn 0057                                 _FVR_Initialize 15AF  
                      __size_ofi1_do_I2C_RESET 0008                                     _OPTION_REG 0095  
                              ___lwmod@divisor 0056                                _TMR0_Initialize 0818  
                            ??_i2c_masterWrite 0060             __end_of_i2c_setAddressNACKCallback 1773  
                   _i2c_setAddressNACKCallback 1765                                ___lwmod@counter 005B  
                       __size_of_i2c_setBuffer 0017                              ??i1_i2c_setBuffer 0072  
                                  _returnReset 1609               _do_I2C_DO_NACK_RESTART$intlevel0 16CC  
                         __size_of_bcdDateDecr 0025                                    _SSPCON1bits 0215  
                                  _SSPCON2bits 0216                           __size_of_bcdDateIncr 0025  
                                  _mssp_setIRQ 0800                      ??i1_do_I2C_SEND_ADR_WRITE 0070  
                 __end_of_i2c_driver_setI2cISR 1627                         __size_ofi1_do_I2C_IDLE 0005  
                       __size_ofi1_do_I2C_RCEN 0007                                    ?_IOCBF4_ISR 0070  
               __end_of_PIN_MANAGER_Initialize 0B9A                    __end_of_i2c_busCollisionISR 15A7  
               __size_of_rd1RegCompleteHandler 0017                  __end_of_rd1RegCompleteHandler 08A0  
                          i1_i2c_driver_TXData 15BF                                _PIN_MANAGER_IOC 165C  
                                 _updateAlarm1 0A9C                                   _updateAlarm2 0AC4  
               __size_of_wr1RegCompleteHandler 0017               __size_ofi1_rd1RegCompleteHandler 0012  
                __end_of_wr1RegCompleteHandler 0889                          _do_I2C_SEND_ADR_WRITE 170A  
                  __end_of_i2c_driver_sendNACK 15BF                     __size_of_ADC_GetConversion 0024  
                         _do_I2C_SEND_ADR_READ 173C              __end_ofi1_rdBlkRegCompleteHandler 0900  
             __size_ofi1_wr1RegCompleteHandler 0012                     __end_of_i2c_driver_sendACK 15BB  
                         __size_of_bcdHourDecr 0020                           __size_of_bcdHourIncr 0021  
                                  _updateMonth 08CF                    __end_of_i2c_driver_resetBus 0800  
