

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Sep  7 18:38:09 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1939
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,delta=2
    88                           	psect	text74,local,class=CODE,merge=1,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,delta=2
    90                           	psect	text76,local,class=CODE,merge=1,delta=2
    91                           	psect	text77,local,class=CODE,merge=1,delta=2
    92                           	psect	text78,local,class=CODE,merge=1,delta=2
    93                           	psect	text79,local,class=CODE,merge=1,delta=2
    94                           	psect	text80,local,class=CODE,merge=1,delta=2
    95                           	psect	text81,local,class=CODE,merge=1,delta=2
    96                           	psect	text82,local,class=CODE,merge=1,delta=2
    97                           	psect	text83,local,class=CODE,merge=1,delta=2
    98                           	psect	text84,local,class=CODE,merge=1,delta=2
    99                           	psect	text85,local,class=CODE,merge=1,delta=2
   100                           	psect	text86,local,class=CODE,merge=1,delta=2
   101                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text94,local,class=CODE,merge=1,delta=2
   109                           	psect	text95,local,class=CODE,merge=1,delta=2
   110                           	psect	text96,local,class=CODE,merge=1,delta=2
   111                           	psect	text97,local,class=CODE,merge=1,delta=2
   112                           	psect	text98,local,class=CODE,merge=1,delta=2
   113                           	psect	text99,local,class=CODE,merge=1,delta=2
   114                           	psect	text100,local,class=CODE,merge=1,delta=2
   115                           	psect	text101,local,class=CODE,merge=1,delta=2
   116                           	psect	text102,local,class=CODE,merge=1,delta=2
   117                           	psect	text103,local,class=CODE,merge=1,delta=2
   118                           	psect	text104,local,class=CODE,merge=1,delta=2
   119                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text108,local,class=CODE,merge=1,delta=2
   123                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text110,local,class=CODE,merge=1,delta=2
   125                           	psect	text111,local,class=CODE,merge=1,delta=2
   126                           	psect	text112,local,class=CODE,merge=1,delta=2
   127                           	psect	text113,local,class=CODE,merge=1,delta=2
   128                           	psect	text114,local,class=CODE,merge=1,delta=2
   129                           	psect	text115,local,class=CODE,merge=1,delta=2
   130                           	psect	text116,local,class=CODE,merge=1,delta=2
   131                           	psect	text117,local,class=CODE,merge=1,delta=2
   132                           	dabs	1,0x7E,2
   133  0000                     
   134                           ; Version 2.05
   135                           ; Generated 20/12/2018 GMT
   136                           ; 
   137                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   138                           ; All rights reserved.
   139                           ; 
   140                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   141                           ; 
   142                           ; Redistribution and use in source and binary forms, with or without modification, are
   143                           ; permitted provided that the following conditions are met:
   144                           ; 
   145                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   146                           ;        conditions and the following disclaimer.
   147                           ; 
   148                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   149                           ;        of conditions and the following disclaimer in the documentation and/or other
   150                           ;        materials provided with the distribution.
   151                           ; 
   152                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   153                           ;        software without specific prior written permission.
   154                           ; 
   155                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   156                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   157                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   158                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   159                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   160                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   161                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   162                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   163                           ; 
   164                           ; 
   165                           ; Code-generator required, PIC16F1939 Definitions
   166                           ; 
   167                           ; SFR Addresses
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  0110                     	;# 
   223  0111                     	;# 
   224  0112                     	;# 
   225  0113                     	;# 
   226  0114                     	;# 
   227  0115                     	;# 
   228  0116                     	;# 
   229  0117                     	;# 
   230  0118                     	;# 
   231  0119                     	;# 
   232  011A                     	;# 
   233  011B                     	;# 
   234  011D                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  018F                     	;# 
   238  0190                     	;# 
   239  0191                     	;# 
   240  0191                     	;# 
   241  0192                     	;# 
   242  0193                     	;# 
   243  0193                     	;# 
   244  0193                     	;# 
   245  0194                     	;# 
   246  0195                     	;# 
   247  0196                     	;# 
   248  0199                     	;# 
   249  019A                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019B                     	;# 
   254  019C                     	;# 
   255  019C                     	;# 
   256  019D                     	;# 
   257  019E                     	;# 
   258  019F                     	;# 
   259  020D                     	;# 
   260  0210                     	;# 
   261  0211                     	;# 
   262  0212                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0216                     	;# 
   268  0217                     	;# 
   269  0291                     	;# 
   270  0291                     	;# 
   271  0292                     	;# 
   272  0293                     	;# 
   273  0294                     	;# 
   274  0295                     	;# 
   275  0295                     	;# 
   276  0296                     	;# 
   277  0298                     	;# 
   278  0298                     	;# 
   279  0299                     	;# 
   280  029A                     	;# 
   281  029B                     	;# 
   282  029C                     	;# 
   283  029C                     	;# 
   284  029D                     	;# 
   285  029E                     	;# 
   286  029F                     	;# 
   287  0311                     	;# 
   288  0311                     	;# 
   289  0312                     	;# 
   290  0313                     	;# 
   291  0314                     	;# 
   292  0315                     	;# 
   293  0315                     	;# 
   294  0316                     	;# 
   295  0318                     	;# 
   296  0318                     	;# 
   297  0319                     	;# 
   298  031A                     	;# 
   299  031C                     	;# 
   300  031C                     	;# 
   301  031D                     	;# 
   302  031E                     	;# 
   303  0394                     	;# 
   304  0395                     	;# 
   305  0396                     	;# 
   306  0415                     	;# 
   307  0416                     	;# 
   308  0417                     	;# 
   309  041C                     	;# 
   310  041D                     	;# 
   311  041E                     	;# 
   312  0791                     	;# 
   313  0792                     	;# 
   314  0793                     	;# 
   315  0794                     	;# 
   316  0795                     	;# 
   317  0798                     	;# 
   318  0799                     	;# 
   319  079A                     	;# 
   320  07A0                     	;# 
   321  07A1                     	;# 
   322  07A2                     	;# 
   323  07A3                     	;# 
   324  07A4                     	;# 
   325  07A5                     	;# 
   326  07A6                     	;# 
   327  07A7                     	;# 
   328  07A8                     	;# 
   329  07A9                     	;# 
   330  07AA                     	;# 
   331  07AB                     	;# 
   332  0FE4                     	;# 
   333  0FE5                     	;# 
   334  0FE6                     	;# 
   335  0FE7                     	;# 
   336  0FE8                     	;# 
   337  0FE9                     	;# 
   338  0FEA                     	;# 
   339  0FEB                     	;# 
   340  0FED                     	;# 
   341  0FEE                     	;# 
   342  0FEF                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001E                     	;# 
   373  001F                     	;# 
   374  008C                     	;# 
   375  008D                     	;# 
   376  008E                     	;# 
   377  008F                     	;# 
   378  0090                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  0110                     	;# 
   398  0111                     	;# 
   399  0112                     	;# 
   400  0113                     	;# 
   401  0114                     	;# 
   402  0115                     	;# 
   403  0116                     	;# 
   404  0117                     	;# 
   405  0118                     	;# 
   406  0119                     	;# 
   407  011A                     	;# 
   408  011B                     	;# 
   409  011D                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  018F                     	;# 
   413  0190                     	;# 
   414  0191                     	;# 
   415  0191                     	;# 
   416  0192                     	;# 
   417  0193                     	;# 
   418  0193                     	;# 
   419  0193                     	;# 
   420  0194                     	;# 
   421  0195                     	;# 
   422  0196                     	;# 
   423  0199                     	;# 
   424  019A                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019B                     	;# 
   429  019C                     	;# 
   430  019C                     	;# 
   431  019D                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  020D                     	;# 
   435  0210                     	;# 
   436  0211                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0216                     	;# 
   443  0217                     	;# 
   444  0291                     	;# 
   445  0291                     	;# 
   446  0292                     	;# 
   447  0293                     	;# 
   448  0294                     	;# 
   449  0295                     	;# 
   450  0295                     	;# 
   451  0296                     	;# 
   452  0298                     	;# 
   453  0298                     	;# 
   454  0299                     	;# 
   455  029A                     	;# 
   456  029B                     	;# 
   457  029C                     	;# 
   458  029C                     	;# 
   459  029D                     	;# 
   460  029E                     	;# 
   461  029F                     	;# 
   462  0311                     	;# 
   463  0311                     	;# 
   464  0312                     	;# 
   465  0313                     	;# 
   466  0314                     	;# 
   467  0315                     	;# 
   468  0315                     	;# 
   469  0316                     	;# 
   470  0318                     	;# 
   471  0318                     	;# 
   472  0319                     	;# 
   473  031A                     	;# 
   474  031C                     	;# 
   475  031C                     	;# 
   476  031D                     	;# 
   477  031E                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0415                     	;# 
   482  0416                     	;# 
   483  0417                     	;# 
   484  041C                     	;# 
   485  041D                     	;# 
   486  041E                     	;# 
   487  0791                     	;# 
   488  0792                     	;# 
   489  0793                     	;# 
   490  0794                     	;# 
   491  0795                     	;# 
   492  0798                     	;# 
   493  0799                     	;# 
   494  079A                     	;# 
   495  07A0                     	;# 
   496  07A1                     	;# 
   497  07A2                     	;# 
   498  07A3                     	;# 
   499  07A4                     	;# 
   500  07A5                     	;# 
   501  07A6                     	;# 
   502  07A7                     	;# 
   503  07A8                     	;# 
   504  07A9                     	;# 
   505  07AA                     	;# 
   506  07AB                     	;# 
   507  0FE4                     	;# 
   508  0FE5                     	;# 
   509  0FE6                     	;# 
   510  0FE7                     	;# 
   511  0FE8                     	;# 
   512  0FE9                     	;# 
   513  0FEA                     	;# 
   514  0FEB                     	;# 
   515  0FED                     	;# 
   516  0FEE                     	;# 
   517  0FEF                     	;# 
   518  0000                     	;# 
   519  0001                     	;# 
   520  0002                     	;# 
   521  0003                     	;# 
   522  0004                     	;# 
   523  0005                     	;# 
   524  0006                     	;# 
   525  0007                     	;# 
   526  0008                     	;# 
   527  0009                     	;# 
   528  000A                     	;# 
   529  000B                     	;# 
   530  000C                     	;# 
   531  000D                     	;# 
   532  000E                     	;# 
   533  000F                     	;# 
   534  0010                     	;# 
   535  0011                     	;# 
   536  0012                     	;# 
   537  0013                     	;# 
   538  0015                     	;# 
   539  0016                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001C                     	;# 
   547  001E                     	;# 
   548  001F                     	;# 
   549  008C                     	;# 
   550  008D                     	;# 
   551  008E                     	;# 
   552  008F                     	;# 
   553  0090                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0095                     	;# 
   558  0096                     	;# 
   559  0097                     	;# 
   560  0098                     	;# 
   561  0099                     	;# 
   562  009A                     	;# 
   563  009B                     	;# 
   564  009B                     	;# 
   565  009C                     	;# 
   566  009D                     	;# 
   567  009E                     	;# 
   568  010C                     	;# 
   569  010D                     	;# 
   570  010E                     	;# 
   571  010F                     	;# 
   572  0110                     	;# 
   573  0111                     	;# 
   574  0112                     	;# 
   575  0113                     	;# 
   576  0114                     	;# 
   577  0115                     	;# 
   578  0116                     	;# 
   579  0117                     	;# 
   580  0118                     	;# 
   581  0119                     	;# 
   582  011A                     	;# 
   583  011B                     	;# 
   584  011D                     	;# 
   585  018C                     	;# 
   586  018D                     	;# 
   587  018F                     	;# 
   588  0190                     	;# 
   589  0191                     	;# 
   590  0191                     	;# 
   591  0192                     	;# 
   592  0193                     	;# 
   593  0193                     	;# 
   594  0193                     	;# 
   595  0194                     	;# 
   596  0195                     	;# 
   597  0196                     	;# 
   598  0199                     	;# 
   599  019A                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019C                     	;# 
   605  019C                     	;# 
   606  019D                     	;# 
   607  019E                     	;# 
   608  019F                     	;# 
   609  020D                     	;# 
   610  0210                     	;# 
   611  0211                     	;# 
   612  0212                     	;# 
   613  0213                     	;# 
   614  0214                     	;# 
   615  0215                     	;# 
   616  0215                     	;# 
   617  0216                     	;# 
   618  0217                     	;# 
   619  0291                     	;# 
   620  0291                     	;# 
   621  0292                     	;# 
   622  0293                     	;# 
   623  0294                     	;# 
   624  0295                     	;# 
   625  0295                     	;# 
   626  0296                     	;# 
   627  0298                     	;# 
   628  0298                     	;# 
   629  0299                     	;# 
   630  029A                     	;# 
   631  029B                     	;# 
   632  029C                     	;# 
   633  029C                     	;# 
   634  029D                     	;# 
   635  029E                     	;# 
   636  029F                     	;# 
   637  0311                     	;# 
   638  0311                     	;# 
   639  0312                     	;# 
   640  0313                     	;# 
   641  0314                     	;# 
   642  0315                     	;# 
   643  0315                     	;# 
   644  0316                     	;# 
   645  0318                     	;# 
   646  0318                     	;# 
   647  0319                     	;# 
   648  031A                     	;# 
   649  031C                     	;# 
   650  031C                     	;# 
   651  031D                     	;# 
   652  031E                     	;# 
   653  0394                     	;# 
   654  0395                     	;# 
   655  0396                     	;# 
   656  0415                     	;# 
   657  0416                     	;# 
   658  0417                     	;# 
   659  041C                     	;# 
   660  041D                     	;# 
   661  041E                     	;# 
   662  0791                     	;# 
   663  0792                     	;# 
   664  0793                     	;# 
   665  0794                     	;# 
   666  0795                     	;# 
   667  0798                     	;# 
   668  0799                     	;# 
   669  079A                     	;# 
   670  07A0                     	;# 
   671  07A1                     	;# 
   672  07A2                     	;# 
   673  07A3                     	;# 
   674  07A4                     	;# 
   675  07A5                     	;# 
   676  07A6                     	;# 
   677  07A7                     	;# 
   678  07A8                     	;# 
   679  07A9                     	;# 
   680  07AA                     	;# 
   681  07AB                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEB                     	;# 
   690  0FED                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000D                     	;# 
   707  000E                     	;# 
   708  000F                     	;# 
   709  0010                     	;# 
   710  0011                     	;# 
   711  0012                     	;# 
   712  0013                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0016                     	;# 
   716  0017                     	;# 
   717  0018                     	;# 
   718  0019                     	;# 
   719  001A                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  001E                     	;# 
   723  001F                     	;# 
   724  008C                     	;# 
   725  008D                     	;# 
   726  008E                     	;# 
   727  008F                     	;# 
   728  0090                     	;# 
   729  0091                     	;# 
   730  0092                     	;# 
   731  0093                     	;# 
   732  0095                     	;# 
   733  0096                     	;# 
   734  0097                     	;# 
   735  0098                     	;# 
   736  0099                     	;# 
   737  009A                     	;# 
   738  009B                     	;# 
   739  009B                     	;# 
   740  009C                     	;# 
   741  009D                     	;# 
   742  009E                     	;# 
   743  010C                     	;# 
   744  010D                     	;# 
   745  010E                     	;# 
   746  010F                     	;# 
   747  0110                     	;# 
   748  0111                     	;# 
   749  0112                     	;# 
   750  0113                     	;# 
   751  0114                     	;# 
   752  0115                     	;# 
   753  0116                     	;# 
   754  0117                     	;# 
   755  0118                     	;# 
   756  0119                     	;# 
   757  011A                     	;# 
   758  011B                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018F                     	;# 
   763  0190                     	;# 
   764  0191                     	;# 
   765  0191                     	;# 
   766  0192                     	;# 
   767  0193                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0194                     	;# 
   771  0195                     	;# 
   772  0196                     	;# 
   773  0199                     	;# 
   774  019A                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019C                     	;# 
   780  019C                     	;# 
   781  019D                     	;# 
   782  019E                     	;# 
   783  019F                     	;# 
   784  020D                     	;# 
   785  0210                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0214                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0216                     	;# 
   793  0217                     	;# 
   794  0291                     	;# 
   795  0291                     	;# 
   796  0292                     	;# 
   797  0293                     	;# 
   798  0294                     	;# 
   799  0295                     	;# 
   800  0295                     	;# 
   801  0296                     	;# 
   802  0298                     	;# 
   803  0298                     	;# 
   804  0299                     	;# 
   805  029A                     	;# 
   806  029B                     	;# 
   807  029C                     	;# 
   808  029C                     	;# 
   809  029D                     	;# 
   810  029E                     	;# 
   811  029F                     	;# 
   812  0311                     	;# 
   813  0311                     	;# 
   814  0312                     	;# 
   815  0313                     	;# 
   816  0314                     	;# 
   817  0315                     	;# 
   818  0315                     	;# 
   819  0316                     	;# 
   820  0318                     	;# 
   821  0318                     	;# 
   822  0319                     	;# 
   823  031A                     	;# 
   824  031C                     	;# 
   825  031C                     	;# 
   826  031D                     	;# 
   827  031E                     	;# 
   828  0394                     	;# 
   829  0395                     	;# 
   830  0396                     	;# 
   831  0415                     	;# 
   832  0416                     	;# 
   833  0417                     	;# 
   834  041C                     	;# 
   835  041D                     	;# 
   836  041E                     	;# 
   837  0791                     	;# 
   838  0792                     	;# 
   839  0793                     	;# 
   840  0794                     	;# 
   841  0795                     	;# 
   842  0798                     	;# 
   843  0799                     	;# 
   844  079A                     	;# 
   845  07A0                     	;# 
   846  07A1                     	;# 
   847  07A2                     	;# 
   848  07A3                     	;# 
   849  07A4                     	;# 
   850  07A5                     	;# 
   851  07A6                     	;# 
   852  07A7                     	;# 
   853  07A8                     	;# 
   854  07A9                     	;# 
   855  07AA                     	;# 
   856  07AB                     	;# 
   857  0FE4                     	;# 
   858  0FE5                     	;# 
   859  0FE6                     	;# 
   860  0FE7                     	;# 
   861  0FE8                     	;# 
   862  0FE9                     	;# 
   863  0FEA                     	;# 
   864  0FEB                     	;# 
   865  0FED                     	;# 
   866  0FEE                     	;# 
   867  0FEF                     	;# 
   868  0000                     	;# 
   869  0001                     	;# 
   870  0002                     	;# 
   871  0003                     	;# 
   872  0004                     	;# 
   873  0005                     	;# 
   874  0006                     	;# 
   875  0007                     	;# 
   876  0008                     	;# 
   877  0009                     	;# 
   878  000A                     	;# 
   879  000B                     	;# 
   880  000C                     	;# 
   881  000D                     	;# 
   882  000E                     	;# 
   883  000F                     	;# 
   884  0010                     	;# 
   885  0011                     	;# 
   886  0012                     	;# 
   887  0013                     	;# 
   888  0015                     	;# 
   889  0016                     	;# 
   890  0016                     	;# 
   891  0017                     	;# 
   892  0018                     	;# 
   893  0019                     	;# 
   894  001A                     	;# 
   895  001B                     	;# 
   896  001C                     	;# 
   897  001E                     	;# 
   898  001F                     	;# 
   899  008C                     	;# 
   900  008D                     	;# 
   901  008E                     	;# 
   902  008F                     	;# 
   903  0090                     	;# 
   904  0091                     	;# 
   905  0092                     	;# 
   906  0093                     	;# 
   907  0095                     	;# 
   908  0096                     	;# 
   909  0097                     	;# 
   910  0098                     	;# 
   911  0099                     	;# 
   912  009A                     	;# 
   913  009B                     	;# 
   914  009B                     	;# 
   915  009C                     	;# 
   916  009D                     	;# 
   917  009E                     	;# 
   918  010C                     	;# 
   919  010D                     	;# 
   920  010E                     	;# 
   921  010F                     	;# 
   922  0110                     	;# 
   923  0111                     	;# 
   924  0112                     	;# 
   925  0113                     	;# 
   926  0114                     	;# 
   927  0115                     	;# 
   928  0116                     	;# 
   929  0117                     	;# 
   930  0118                     	;# 
   931  0119                     	;# 
   932  011A                     	;# 
   933  011B                     	;# 
   934  011D                     	;# 
   935  018C                     	;# 
   936  018D                     	;# 
   937  018F                     	;# 
   938  0190                     	;# 
   939  0191                     	;# 
   940  0191                     	;# 
   941  0192                     	;# 
   942  0193                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  019A                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019B                     	;# 
   953  019B                     	;# 
   954  019C                     	;# 
   955  019C                     	;# 
   956  019D                     	;# 
   957  019E                     	;# 
   958  019F                     	;# 
   959  020D                     	;# 
   960  0210                     	;# 
   961  0211                     	;# 
   962  0212                     	;# 
   963  0213                     	;# 
   964  0214                     	;# 
   965  0215                     	;# 
   966  0215                     	;# 
   967  0216                     	;# 
   968  0217                     	;# 
   969  0291                     	;# 
   970  0291                     	;# 
   971  0292                     	;# 
   972  0293                     	;# 
   973  0294                     	;# 
   974  0295                     	;# 
   975  0295                     	;# 
   976  0296                     	;# 
   977  0298                     	;# 
   978  0298                     	;# 
   979  0299                     	;# 
   980  029A                     	;# 
   981  029B                     	;# 
   982  029C                     	;# 
   983  029C                     	;# 
   984  029D                     	;# 
   985  029E                     	;# 
   986  029F                     	;# 
   987  0311                     	;# 
   988  0311                     	;# 
   989  0312                     	;# 
   990  0313                     	;# 
   991  0314                     	;# 
   992  0315                     	;# 
   993  0315                     	;# 
   994  0316                     	;# 
   995  0318                     	;# 
   996  0318                     	;# 
   997  0319                     	;# 
   998  031A                     	;# 
   999  031C                     	;# 
  1000  031C                     	;# 
  1001  031D                     	;# 
  1002  031E                     	;# 
  1003  0394                     	;# 
  1004  0395                     	;# 
  1005  0396                     	;# 
  1006  0415                     	;# 
  1007  0416                     	;# 
  1008  0417                     	;# 
  1009  041C                     	;# 
  1010  041D                     	;# 
  1011  041E                     	;# 
  1012  0791                     	;# 
  1013  0792                     	;# 
  1014  0793                     	;# 
  1015  0794                     	;# 
  1016  0795                     	;# 
  1017  0798                     	;# 
  1018  0799                     	;# 
  1019  079A                     	;# 
  1020  07A0                     	;# 
  1021  07A1                     	;# 
  1022  07A2                     	;# 
  1023  07A3                     	;# 
  1024  07A4                     	;# 
  1025  07A5                     	;# 
  1026  07A6                     	;# 
  1027  07A7                     	;# 
  1028  07A8                     	;# 
  1029  07A9                     	;# 
  1030  07AA                     	;# 
  1031  07AB                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  000F                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0013                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001C                     	;# 
  1072  001E                     	;# 
  1073  001F                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  008F                     	;# 
  1078  0090                     	;# 
  1079  0091                     	;# 
  1080  0092                     	;# 
  1081  0093                     	;# 
  1082  0095                     	;# 
  1083  0096                     	;# 
  1084  0097                     	;# 
  1085  0098                     	;# 
  1086  0099                     	;# 
  1087  009A                     	;# 
  1088  009B                     	;# 
  1089  009B                     	;# 
  1090  009C                     	;# 
  1091  009D                     	;# 
  1092  009E                     	;# 
  1093  010C                     	;# 
  1094  010D                     	;# 
  1095  010E                     	;# 
  1096  010F                     	;# 
  1097  0110                     	;# 
  1098  0111                     	;# 
  1099  0112                     	;# 
  1100  0113                     	;# 
  1101  0114                     	;# 
  1102  0115                     	;# 
  1103  0116                     	;# 
  1104  0117                     	;# 
  1105  0118                     	;# 
  1106  0119                     	;# 
  1107  011A                     	;# 
  1108  011B                     	;# 
  1109  011D                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  018F                     	;# 
  1113  0190                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020D                     	;# 
  1135  0210                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0213                     	;# 
  1139  0214                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0294                     	;# 
  1149  0295                     	;# 
  1150  0295                     	;# 
  1151  0296                     	;# 
  1152  0298                     	;# 
  1153  0298                     	;# 
  1154  0299                     	;# 
  1155  029A                     	;# 
  1156  029B                     	;# 
  1157  029C                     	;# 
  1158  029C                     	;# 
  1159  029D                     	;# 
  1160  029E                     	;# 
  1161  029F                     	;# 
  1162  0311                     	;# 
  1163  0311                     	;# 
  1164  0312                     	;# 
  1165  0313                     	;# 
  1166  0314                     	;# 
  1167  0315                     	;# 
  1168  0315                     	;# 
  1169  0316                     	;# 
  1170  0318                     	;# 
  1171  0318                     	;# 
  1172  0319                     	;# 
  1173  031A                     	;# 
  1174  031C                     	;# 
  1175  031C                     	;# 
  1176  031D                     	;# 
  1177  031E                     	;# 
  1178  0394                     	;# 
  1179  0395                     	;# 
  1180  0396                     	;# 
  1181  0415                     	;# 
  1182  0416                     	;# 
  1183  0417                     	;# 
  1184  041C                     	;# 
  1185  041D                     	;# 
  1186  041E                     	;# 
  1187  0791                     	;# 
  1188  0792                     	;# 
  1189  0793                     	;# 
  1190  0794                     	;# 
  1191  0795                     	;# 
  1192  0798                     	;# 
  1193  0799                     	;# 
  1194  079A                     	;# 
  1195  07A0                     	;# 
  1196  07A1                     	;# 
  1197  07A2                     	;# 
  1198  07A3                     	;# 
  1199  07A4                     	;# 
  1200  07A5                     	;# 
  1201  07A6                     	;# 
  1202  07A7                     	;# 
  1203  07A8                     	;# 
  1204  07A9                     	;# 
  1205  07AA                     	;# 
  1206  07AB                     	;# 
  1207  0FE4                     	;# 
  1208  0FE5                     	;# 
  1209  0FE6                     	;# 
  1210  0FE7                     	;# 
  1211  0FE8                     	;# 
  1212  0FE9                     	;# 
  1213  0FEA                     	;# 
  1214  0FEB                     	;# 
  1215  0FED                     	;# 
  1216  0FEE                     	;# 
  1217  0FEF                     	;# 
  1218  0000                     	;# 
  1219  0001                     	;# 
  1220  0002                     	;# 
  1221  0003                     	;# 
  1222  0004                     	;# 
  1223  0005                     	;# 
  1224  0006                     	;# 
  1225  0007                     	;# 
  1226  0008                     	;# 
  1227  0009                     	;# 
  1228  000A                     	;# 
  1229  000B                     	;# 
  1230  000C                     	;# 
  1231  000D                     	;# 
  1232  000E                     	;# 
  1233  000F                     	;# 
  1234  0010                     	;# 
  1235  0011                     	;# 
  1236  0012                     	;# 
  1237  0013                     	;# 
  1238  0015                     	;# 
  1239  0016                     	;# 
  1240  0016                     	;# 
  1241  0017                     	;# 
  1242  0018                     	;# 
  1243  0019                     	;# 
  1244  001A                     	;# 
  1245  001B                     	;# 
  1246  001C                     	;# 
  1247  001E                     	;# 
  1248  001F                     	;# 
  1249  008C                     	;# 
  1250  008D                     	;# 
  1251  008E                     	;# 
  1252  008F                     	;# 
  1253  0090                     	;# 
  1254  0091                     	;# 
  1255  0092                     	;# 
  1256  0093                     	;# 
  1257  0095                     	;# 
  1258  0096                     	;# 
  1259  0097                     	;# 
  1260  0098                     	;# 
  1261  0099                     	;# 
  1262  009A                     	;# 
  1263  009B                     	;# 
  1264  009B                     	;# 
  1265  009C                     	;# 
  1266  009D                     	;# 
  1267  009E                     	;# 
  1268  010C                     	;# 
  1269  010D                     	;# 
  1270  010E                     	;# 
  1271  010F                     	;# 
  1272  0110                     	;# 
  1273  0111                     	;# 
  1274  0112                     	;# 
  1275  0113                     	;# 
  1276  0114                     	;# 
  1277  0115                     	;# 
  1278  0116                     	;# 
  1279  0117                     	;# 
  1280  0118                     	;# 
  1281  0119                     	;# 
  1282  011A                     	;# 
  1283  011B                     	;# 
  1284  011D                     	;# 
  1285  018C                     	;# 
  1286  018D                     	;# 
  1287  018F                     	;# 
  1288  0190                     	;# 
  1289  0191                     	;# 
  1290  0191                     	;# 
  1291  0192                     	;# 
  1292  0193                     	;# 
  1293  0193                     	;# 
  1294  0193                     	;# 
  1295  0194                     	;# 
  1296  0195                     	;# 
  1297  0196                     	;# 
  1298  0199                     	;# 
  1299  019A                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019B                     	;# 
  1303  019B                     	;# 
  1304  019C                     	;# 
  1305  019C                     	;# 
  1306  019D                     	;# 
  1307  019E                     	;# 
  1308  019F                     	;# 
  1309  020D                     	;# 
  1310  0210                     	;# 
  1311  0211                     	;# 
  1312  0212                     	;# 
  1313  0213                     	;# 
  1314  0214                     	;# 
  1315  0215                     	;# 
  1316  0215                     	;# 
  1317  0216                     	;# 
  1318  0217                     	;# 
  1319  0291                     	;# 
  1320  0291                     	;# 
  1321  0292                     	;# 
  1322  0293                     	;# 
  1323  0294                     	;# 
  1324  0295                     	;# 
  1325  0295                     	;# 
  1326  0296                     	;# 
  1327  0298                     	;# 
  1328  0298                     	;# 
  1329  0299                     	;# 
  1330  029A                     	;# 
  1331  029B                     	;# 
  1332  029C                     	;# 
  1333  029C                     	;# 
  1334  029D                     	;# 
  1335  029E                     	;# 
  1336  029F                     	;# 
  1337  0311                     	;# 
  1338  0311                     	;# 
  1339  0312                     	;# 
  1340  0313                     	;# 
  1341  0314                     	;# 
  1342  0315                     	;# 
  1343  0315                     	;# 
  1344  0316                     	;# 
  1345  0318                     	;# 
  1346  0318                     	;# 
  1347  0319                     	;# 
  1348  031A                     	;# 
  1349  031C                     	;# 
  1350  031C                     	;# 
  1351  031D                     	;# 
  1352  031E                     	;# 
  1353  0394                     	;# 
  1354  0395                     	;# 
  1355  0396                     	;# 
  1356  0415                     	;# 
  1357  0416                     	;# 
  1358  0417                     	;# 
  1359  041C                     	;# 
  1360  041D                     	;# 
  1361  041E                     	;# 
  1362  0791                     	;# 
  1363  0792                     	;# 
  1364  0793                     	;# 
  1365  0794                     	;# 
  1366  0795                     	;# 
  1367  0798                     	;# 
  1368  0799                     	;# 
  1369  079A                     	;# 
  1370  07A0                     	;# 
  1371  07A1                     	;# 
  1372  07A2                     	;# 
  1373  07A3                     	;# 
  1374  07A4                     	;# 
  1375  07A5                     	;# 
  1376  07A6                     	;# 
  1377  07A7                     	;# 
  1378  07A8                     	;# 
  1379  07A9                     	;# 
  1380  07AA                     	;# 
  1381  07AB                     	;# 
  1382  0FE4                     	;# 
  1383  0FE5                     	;# 
  1384  0FE6                     	;# 
  1385  0FE7                     	;# 
  1386  0FE8                     	;# 
  1387  0FE9                     	;# 
  1388  0FEA                     	;# 
  1389  0FEB                     	;# 
  1390  0FED                     	;# 
  1391  0FEE                     	;# 
  1392  0FEF                     	;# 
  1393  0000                     	;# 
  1394  0001                     	;# 
  1395  0002                     	;# 
  1396  0003                     	;# 
  1397  0004                     	;# 
  1398  0005                     	;# 
  1399  0006                     	;# 
  1400  0007                     	;# 
  1401  0008                     	;# 
  1402  0009                     	;# 
  1403  000A                     	;# 
  1404  000B                     	;# 
  1405  000C                     	;# 
  1406  000D                     	;# 
  1407  000E                     	;# 
  1408  000F                     	;# 
  1409  0010                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0013                     	;# 
  1413  0015                     	;# 
  1414  0016                     	;# 
  1415  0016                     	;# 
  1416  0017                     	;# 
  1417  0018                     	;# 
  1418  0019                     	;# 
  1419  001A                     	;# 
  1420  001B                     	;# 
  1421  001C                     	;# 
  1422  001E                     	;# 
  1423  001F                     	;# 
  1424  008C                     	;# 
  1425  008D                     	;# 
  1426  008E                     	;# 
  1427  008F                     	;# 
  1428  0090                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0093                     	;# 
  1432  0095                     	;# 
  1433  0096                     	;# 
  1434  0097                     	;# 
  1435  0098                     	;# 
  1436  0099                     	;# 
  1437  009A                     	;# 
  1438  009B                     	;# 
  1439  009B                     	;# 
  1440  009C                     	;# 
  1441  009D                     	;# 
  1442  009E                     	;# 
  1443  010C                     	;# 
  1444  010D                     	;# 
  1445  010E                     	;# 
  1446  010F                     	;# 
  1447  0110                     	;# 
  1448  0111                     	;# 
  1449  0112                     	;# 
  1450  0113                     	;# 
  1451  0114                     	;# 
  1452  0115                     	;# 
  1453  0116                     	;# 
  1454  0117                     	;# 
  1455  0118                     	;# 
  1456  0119                     	;# 
  1457  011A                     	;# 
  1458  011B                     	;# 
  1459  011D                     	;# 
  1460  018C                     	;# 
  1461  018D                     	;# 
  1462  018F                     	;# 
  1463  0190                     	;# 
  1464  0191                     	;# 
  1465  0191                     	;# 
  1466  0192                     	;# 
  1467  0193                     	;# 
  1468  0193                     	;# 
  1469  0193                     	;# 
  1470  0194                     	;# 
  1471  0195                     	;# 
  1472  0196                     	;# 
  1473  0199                     	;# 
  1474  019A                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019B                     	;# 
  1478  019B                     	;# 
  1479  019C                     	;# 
  1480  019C                     	;# 
  1481  019D                     	;# 
  1482  019E                     	;# 
  1483  019F                     	;# 
  1484  020D                     	;# 
  1485  0210                     	;# 
  1486  0211                     	;# 
  1487  0212                     	;# 
  1488  0213                     	;# 
  1489  0214                     	;# 
  1490  0215                     	;# 
  1491  0215                     	;# 
  1492  0216                     	;# 
  1493  0217                     	;# 
  1494  0291                     	;# 
  1495  0291                     	;# 
  1496  0292                     	;# 
  1497  0293                     	;# 
  1498  0294                     	;# 
  1499  0295                     	;# 
  1500  0295                     	;# 
  1501  0296                     	;# 
  1502  0298                     	;# 
  1503  0298                     	;# 
  1504  0299                     	;# 
  1505  029A                     	;# 
  1506  029B                     	;# 
  1507  029C                     	;# 
  1508  029C                     	;# 
  1509  029D                     	;# 
  1510  029E                     	;# 
  1511  029F                     	;# 
  1512  0311                     	;# 
  1513  0311                     	;# 
  1514  0312                     	;# 
  1515  0313                     	;# 
  1516  0314                     	;# 
  1517  0315                     	;# 
  1518  0315                     	;# 
  1519  0316                     	;# 
  1520  0318                     	;# 
  1521  0318                     	;# 
  1522  0319                     	;# 
  1523  031A                     	;# 
  1524  031C                     	;# 
  1525  031C                     	;# 
  1526  031D                     	;# 
  1527  031E                     	;# 
  1528  0394                     	;# 
  1529  0395                     	;# 
  1530  0396                     	;# 
  1531  0415                     	;# 
  1532  0416                     	;# 
  1533  0417                     	;# 
  1534  041C                     	;# 
  1535  041D                     	;# 
  1536  041E                     	;# 
  1537  0791                     	;# 
  1538  0792                     	;# 
  1539  0793                     	;# 
  1540  0794                     	;# 
  1541  0795                     	;# 
  1542  0798                     	;# 
  1543  0799                     	;# 
  1544  079A                     	;# 
  1545  07A0                     	;# 
  1546  07A1                     	;# 
  1547  07A2                     	;# 
  1548  07A3                     	;# 
  1549  07A4                     	;# 
  1550  07A5                     	;# 
  1551  07A6                     	;# 
  1552  07A7                     	;# 
  1553  07A8                     	;# 
  1554  07A9                     	;# 
  1555  07AA                     	;# 
  1556  07AB                     	;# 
  1557  0FE4                     	;# 
  1558  0FE5                     	;# 
  1559  0FE6                     	;# 
  1560  0FE7                     	;# 
  1561  0FE8                     	;# 
  1562  0FE9                     	;# 
  1563  0FEA                     	;# 
  1564  0FEB                     	;# 
  1565  0FED                     	;# 
  1566  0FEE                     	;# 
  1567  0FEF                     	;# 
  1568  0000                     	;# 
  1569  0001                     	;# 
  1570  0002                     	;# 
  1571  0003                     	;# 
  1572  0004                     	;# 
  1573  0005                     	;# 
  1574  0006                     	;# 
  1575  0007                     	;# 
  1576  0008                     	;# 
  1577  0009                     	;# 
  1578  000A                     	;# 
  1579  000B                     	;# 
  1580  000C                     	;# 
  1581  000D                     	;# 
  1582  000E                     	;# 
  1583  000F                     	;# 
  1584  0010                     	;# 
  1585  0011                     	;# 
  1586  0012                     	;# 
  1587  0013                     	;# 
  1588  0015                     	;# 
  1589  0016                     	;# 
  1590  0016                     	;# 
  1591  0017                     	;# 
  1592  0018                     	;# 
  1593  0019                     	;# 
  1594  001A                     	;# 
  1595  001B                     	;# 
  1596  001C                     	;# 
  1597  001E                     	;# 
  1598  001F                     	;# 
  1599  008C                     	;# 
  1600  008D                     	;# 
  1601  008E                     	;# 
  1602  008F                     	;# 
  1603  0090                     	;# 
  1604  0091                     	;# 
  1605  0092                     	;# 
  1606  0093                     	;# 
  1607  0095                     	;# 
  1608  0096                     	;# 
  1609  0097                     	;# 
  1610  0098                     	;# 
  1611  0099                     	;# 
  1612  009A                     	;# 
  1613  009B                     	;# 
  1614  009B                     	;# 
  1615  009C                     	;# 
  1616  009D                     	;# 
  1617  009E                     	;# 
  1618  010C                     	;# 
  1619  010D                     	;# 
  1620  010E                     	;# 
  1621  010F                     	;# 
  1622  0110                     	;# 
  1623  0111                     	;# 
  1624  0112                     	;# 
  1625  0113                     	;# 
  1626  0114                     	;# 
  1627  0115                     	;# 
  1628  0116                     	;# 
  1629  0117                     	;# 
  1630  0118                     	;# 
  1631  0119                     	;# 
  1632  011A                     	;# 
  1633  011B                     	;# 
  1634  011D                     	;# 
  1635  018C                     	;# 
  1636  018D                     	;# 
  1637  018F                     	;# 
  1638  0190                     	;# 
  1639  0191                     	;# 
  1640  0191                     	;# 
  1641  0192                     	;# 
  1642  0193                     	;# 
  1643  0193                     	;# 
  1644  0193                     	;# 
  1645  0194                     	;# 
  1646  0195                     	;# 
  1647  0196                     	;# 
  1648  0199                     	;# 
  1649  019A                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019B                     	;# 
  1654  019C                     	;# 
  1655  019C                     	;# 
  1656  019D                     	;# 
  1657  019E                     	;# 
  1658  019F                     	;# 
  1659  020D                     	;# 
  1660  0210                     	;# 
  1661  0211                     	;# 
  1662  0212                     	;# 
  1663  0213                     	;# 
  1664  0214                     	;# 
  1665  0215                     	;# 
  1666  0215                     	;# 
  1667  0216                     	;# 
  1668  0217                     	;# 
  1669  0291                     	;# 
  1670  0291                     	;# 
  1671  0292                     	;# 
  1672  0293                     	;# 
  1673  0294                     	;# 
  1674  0295                     	;# 
  1675  0295                     	;# 
  1676  0296                     	;# 
  1677  0298                     	;# 
  1678  0298                     	;# 
  1679  0299                     	;# 
  1680  029A                     	;# 
  1681  029B                     	;# 
  1682  029C                     	;# 
  1683  029C                     	;# 
  1684  029D                     	;# 
  1685  029E                     	;# 
  1686  029F                     	;# 
  1687  0311                     	;# 
  1688  0311                     	;# 
  1689  0312                     	;# 
  1690  0313                     	;# 
  1691  0314                     	;# 
  1692  0315                     	;# 
  1693  0315                     	;# 
  1694  0316                     	;# 
  1695  0318                     	;# 
  1696  0318                     	;# 
  1697  0319                     	;# 
  1698  031A                     	;# 
  1699  031C                     	;# 
  1700  031C                     	;# 
  1701  031D                     	;# 
  1702  031E                     	;# 
  1703  0394                     	;# 
  1704  0395                     	;# 
  1705  0396                     	;# 
  1706  0415                     	;# 
  1707  0416                     	;# 
  1708  0417                     	;# 
  1709  041C                     	;# 
  1710  041D                     	;# 
  1711  041E                     	;# 
  1712  0791                     	;# 
  1713  0792                     	;# 
  1714  0793                     	;# 
  1715  0794                     	;# 
  1716  0795                     	;# 
  1717  0798                     	;# 
  1718  0799                     	;# 
  1719  079A                     	;# 
  1720  07A0                     	;# 
  1721  07A1                     	;# 
  1722  07A2                     	;# 
  1723  07A3                     	;# 
  1724  07A4                     	;# 
  1725  07A5                     	;# 
  1726  07A6                     	;# 
  1727  07A7                     	;# 
  1728  07A8                     	;# 
  1729  07A9                     	;# 
  1730  07AA                     	;# 
  1731  07AB                     	;# 
  1732  0FE4                     	;# 
  1733  0FE5                     	;# 
  1734  0FE6                     	;# 
  1735  0FE7                     	;# 
  1736  0FE8                     	;# 
  1737  0FE9                     	;# 
  1738  0FEA                     	;# 
  1739  0FEB                     	;# 
  1740  0FED                     	;# 
  1741  0FEE                     	;# 
  1742  0FEF                     	;# 
  1743                           
  1744                           	psect	stringtext1
  1745  0632                     __pstringtext1:	
  1746  0632                     _fsmStateTable:	
  1747  0632  34F7               	retlw	low _do_I2C_IDLE
  1748  0633  3407               	retlw	high _do_I2C_IDLE
  1749  0634  34E7               	retlw	low _do_I2C_SEND_ADR_READ
  1750  0635  340F               	retlw	high _do_I2C_SEND_ADR_READ
  1751  0636  34BA               	retlw	low _do_I2C_SEND_ADR_WRITE
  1752  0637  340F               	retlw	high _do_I2C_SEND_ADR_WRITE
  1753  0638  3429               	retlw	low _do_I2C_TX
  1754  0639  3402               	retlw	high _do_I2C_TX
  1755  063A  34C8               	retlw	low _do_I2C_RX
  1756  063B  3402               	retlw	high _do_I2C_RX
  1757  063C  3491               	retlw	low _do_I2C_RCEN
  1758  063D  340F               	retlw	high _do_I2C_RCEN
  1759  063E  3414               	retlw	low _do_I2C_TX_EMPTY
  1760  063F  3404               	retlw	high _do_I2C_TX_EMPTY
  1761  0640  343C               	retlw	low _do_I2C_SEND_RESTART_READ
  1762  0641  340F               	retlw	high _do_I2C_SEND_RESTART_READ
  1763  0642  3444               	retlw	low _do_I2C_SEND_RESTART_WRITE
  1764  0643  340F               	retlw	high _do_I2C_SEND_RESTART_WRITE
  1765  0644  344C               	retlw	low _do_I2C_SEND_RESTART
  1766  0645  340F               	retlw	high _do_I2C_SEND_RESTART
  1767  0646  3454               	retlw	low _do_I2C_SEND_STOP
  1768  0647  340F               	retlw	high _do_I2C_SEND_STOP
  1769  0648  345C               	retlw	low _do_I2C_DO_ACK
  1770  0649  340F               	retlw	high _do_I2C_DO_ACK
  1771  064A  3464               	retlw	low _do_I2C_DO_NACK_STOP
  1772  064B  340F               	retlw	high _do_I2C_DO_NACK_STOP
  1773  064C  346C               	retlw	low _do_I2C_DO_NACK_RESTART
  1774  064D  340F               	retlw	high _do_I2C_DO_NACK_RESTART
  1775  064E  34AF               	retlw	low _do_I2C_RESET
  1776  064F  340F               	retlw	high _do_I2C_RESET
  1777  0650  3479               	retlw	low _do_I2C_DO_ADDRESS_NACK
  1778  0651  3404               	retlw	high _do_I2C_DO_ADDRESS_NACK
  1779  0652                     __end_of_fsmStateTable:	
  1780                           
  1781                           	psect	stringtext2
  1782  1000                     __pstringtext2:	
  1783  1000                     _displayNum:	
  1784  1000  34FC               	retlw	252
  1785  1001  3460               	retlw	96
  1786  1002  34DA               	retlw	218
  1787  1003  34F2               	retlw	242
  1788  1004  3466               	retlw	102
  1789  1005  34B6               	retlw	182
  1790  1006  34BE               	retlw	190
  1791  1007  34E0               	retlw	224
  1792  1008  34FE               	retlw	254
  1793  1009  34F6               	retlw	246
  1794  100A                     __end_of_displayNum:	
  1795                           
  1796                           	psect	nvBANK0
  1797  006D                     __pnvBANK0:	
  1798  006D                     _IOCBF4_InterruptHandler:	
  1799  006D                     	ds	2
  1800  000D                     _PORTBbits	set	13
  1801  0015                     _TMR0	set	21
  1802  0011                     _PIR1bits	set	17
  1803  0012                     _PIR2bits	set	18
  1804  000B                     _INTCONbits	set	11
  1805  0095                     _OPTION_REG	set	149
  1806  0095                     _OPTION_REGbits	set	149
  1807  008F                     _TRISD	set	143
  1808  008E                     _TRISC	set	142
  1809  008D                     _TRISB	set	141
  1810  008C                     _TRISA	set	140
  1811  0090                     _TRISE	set	144
  1812  0097                     _WDTCON	set	151
  1813  0098                     _OSCTUNE	set	152
  1814  0099                     _OSCCON	set	153
  1815  0091                     _PIE1bits	set	145
  1816  0092                     _PIE2bits	set	146
  1817  04D6                     _PLLR	set	1238
  1818  010C                     _LATAbits	set	268
  1819  010E                     _LATCbits	set	270
  1820  0110                     _LATEbits	set	272
  1821  011D                     _APFCON	set	285
  1822  010E                     _LATC	set	270
  1823  010D                     _LATB	set	269
  1824  010C                     _LATA	set	268
  1825  010F                     _LATD	set	271
  1826  0110                     _LATE	set	272
  1827  0116                     _BORCON	set	278
  1828  018C                     _ANSELA	set	396
  1829  0190                     _ANSELE	set	400
  1830  018D                     _ANSELB	set	397
  1831  018F                     _ANSELD	set	399
  1832  0196                     _EECON2	set	406
  1833  0193                     _EEDATL	set	403
  1834  0194                     _EEDATH	set	404
  1835  0195                     _EECON1bits	set	405
  1836  0192                     _EEADRH	set	402
  1837  0191                     _EEADRL	set	401
  1838  0214                     _SSPSTATbits	set	532
  1839  0213                     _SSPMSK	set	531
  1840  0211                     _SSPBUF	set	529
  1841  0216                     _SSPCON2bits	set	534
  1842  0212                     _SSPADD	set	530
  1843  0216                     _SSPCON2	set	534
  1844  0215                     _SSPCON1	set	533
  1845  0214                     _SSPSTAT	set	532
  1846  0215                     _SSPCON1bits	set	533
  1847  020D                     _WPUB	set	525
  1848  0210                     _WPUE	set	528
  1849  0394                     _IOCBPbits	set	916
  1850  0395                     _IOCBNbits	set	917
  1851  0396                     _IOCBFbits	set	918
  1852                           
  1853                           ; #config settings
  1854  0000                     
  1855                           	psect	cinit
  1856  0031                     start_initialization:	
  1857  0031                     __initialization:	
  1858                           
  1859                           ; Clear objects allocated to COMMON
  1860  0031  01F8               	clrf	__pbssCOMMON& (0+127)
  1861  0032  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1862  0033  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1863  0034  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1864  0035  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1865  0036  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  1866                           
  1867                           ; Clear objects allocated to BANK0
  1868  0037  3020               	movlw	low __pbssBANK0
  1869  0038  0084               	movwf	4
  1870  0039  3000               	movlw	high __pbssBANK0
  1871  003A  0085               	movwf	5
  1872  003B  3038               	movlw	56
  1873  003C  318F  2711         	fcall	clear_ram0
  1874  003E                     end_of_initialization:	
  1875                           ;End of C runtime variable initialization code
  1876                           
  1877  003E                     __end_of__initialization:	
  1878  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1879  003F  0020               	movlb	0
  1880  0040  3180  2842         	ljmp	_main	;jump to C main() function
  1881                           
  1882                           	psect	bssCOMMON
  1883  0078                     __pbssCOMMON:	
  1884  0078                     _TMR0_InterruptHandler:	
  1885  0078                     	ds	2
  1886  007A                     _i2c_driver_busCollisionISR:	
  1887  007A                     	ds	2
  1888  007C                     displayRefreshISR@i:	
  1889  007C                     	ds	1
  1890  007D                     _timer0ReloadVal:	
  1891  007D                     	ds	1
  1892                           
  1893                           	psect	bssBANK0
  1894  0020                     __pbssBANK0:	
  1895  0020                     _i2c_status:	
  1896  0020                     	ds	29
  1897  003D                     _button_press_count:	
  1898  003D                     	ds	4
  1899  0041                     _flag_button_press_count:	
  1900  0041                     	ds	4
  1901  0045                     _displayBuff:	
  1902  0045                     	ds	4
  1903  0049                     _i2c_driver_i2cISR:	
  1904  0049                     	ds	2
  1905  004B                     _mode_timeout_count:	
  1906  004B                     	ds	1
  1907  004C                     _mode:	
  1908  004C                     	ds	1
  1909  004D                     _flag_dot_blink:	
  1910  004D                     	ds	1
  1911  004E                     _flag_time_display_update:	
  1912  004E                     	ds	1
  1913  004F                     _rtcData:	
  1914  004F                     	ds	9
  1915                           
  1916                           	psect	clrtext
  1917  0F11                     clear_ram0:	
  1918                           ;	Called with FSR0 containing the base address, and
  1919                           ;	WREG with the size to clear
  1920                           
  1921  0F11  0064               	clrwdt	;clear the watchdog before getting into this loop
  1922  0F12                     clrloop0:	
  1923  0F12  0180               	clrf	0	;clear RAM location pointed to by FSR
  1924  0F13  3101               	addfsr 0,1
  1925  0F14  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1926  0F15  2F12               	goto	clrloop0	;have we reached the end yet?
  1927  0F16  3400               	retlw	0	;all done for this memory range, return
  1928                           
  1929                           	psect	cstackBANK1
  1930  00A0                     __pcstackBANK1:	
  1931  00A0                     ??_main:	
  1932                           
  1933                           ; 1 bytes @ 0x0
  1934  00A0                     	ds	2
  1935                           
  1936                           	psect	cstackCOMMON
  1937  0070                     __pcstackCOMMON:	
  1938  0070                     ?_i2c_driver_open:	
  1939  0070                     ?_mssp_IRQisEnabled:	
  1940                           ; 1 bit 
  1941                           
  1942  0070                     ?_i2c_driver_isNACK:	
  1943                           ; 1 bit 
  1944                           
  1945  0070                     ?i1_i2c_driver_isNACK:	
  1946                           ; 1 bit 
  1947                           
  1948  0070                     ?_mssp_clearIRQ:	
  1949                           ; 1 bit 
  1950                           
  1951  0070                     ?_i2c_busCollisionISR:	
  1952                           ; 1 bytes @ 0x0
  1953                           
  1954  0070                     ??_i2c_busCollisionISR:	
  1955                           ; 1 bytes @ 0x0
  1956                           
  1957  0070                     ?_i2c_ISR:	
  1958                           ; 1 bytes @ 0x0
  1959                           
  1960  0070                     ?_mssp_disableIRQ:	
  1961                           ; 1 bytes @ 0x0
  1962                           
  1963  0070                     ?_i2c_driver_start:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0070                     ?_i2c_poller:	
  1967                           ; 1 bytes @ 0x0
  1968                           
  1969  0070                     ?_mssp_waitForEvent:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0070                     ?_i2c_driver_resetBus:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0070                     ?_i2c_driver_restart:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978  0070                     ?_i2c_driver_stop:	
  1979                           ; 1 bytes @ 0x0
  1980                           
  1981  0070                     ?_i2c_driver_TXData:	
  1982                           ; 1 bytes @ 0x0
  1983                           
  1984  0070                     ?_i2c_driver_startRX:	
  1985                           ; 1 bytes @ 0x0
  1986                           
  1987  0070                     ?_i2c_driver_sendACK:	
  1988                           ; 1 bytes @ 0x0
  1989                           
  1990  0070                     ?_i2c_driver_sendNACK:	
  1991                           ; 1 bytes @ 0x0
  1992                           
  1993  0070                     ?_i2c_driver_getRXData:	
  1994                           ; 1 bytes @ 0x0
  1995                           
  1996  0070                     ?_mssp_setIRQ:	
  1997                           ; 1 bytes @ 0x0
  1998                           
  1999  0070                     ?_i2c_driver_clearBusCollision:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0070                     ??_i2c_driver_clearBusCollision:	
  2003                           ; 1 bytes @ 0x0
  2004                           
  2005  0070                     ?_TMR0_ISR:	
  2006                           ; 1 bytes @ 0x0
  2007                           
  2008  0070                     ?_PIN_MANAGER_IOC:	
  2009                           ; 1 bytes @ 0x0
  2010                           
  2011  0070                     ??_PIN_MANAGER_IOC:	
  2012                           ; 1 bytes @ 0x0
  2013                           
  2014  0070                     ?_PIN_MANAGER_Initialize:	
  2015                           ; 1 bytes @ 0x0
  2016                           
  2017  0070                     ?_OSCILLATOR_Initialize:	
  2018                           ; 1 bytes @ 0x0
  2019                           
  2020  0070                     ?_WDT_Initialize:	
  2021                           ; 1 bytes @ 0x0
  2022                           
  2023  0070                     ?_TMR0_Initialize:	
  2024                           ; 1 bytes @ 0x0
  2025                           
  2026  0070                     ?_IOCBF4_DefaultInterruptHandler:	
  2027                           ; 1 bytes @ 0x0
  2028                           
  2029  0070                     ??_IOCBF4_DefaultInterruptHandler:	
  2030                           ; 1 bytes @ 0x0
  2031                           
  2032  0070                     ?_IOCBF4_ISR:	
  2033                           ; 1 bytes @ 0x0
  2034                           
  2035  0070                     ??_IOCBF4_ISR:	
  2036                           ; 1 bytes @ 0x0
  2037                           
  2038  0070                     ?_TMR0_DefaultInterruptHandler:	
  2039                           ; 1 bytes @ 0x0
  2040                           
  2041  0070                     ??_TMR0_DefaultInterruptHandler:	
  2042                           ; 1 bytes @ 0x0
  2043                           
  2044  0070                     ?_TMR0_CallBack:	
  2045                           ; 1 bytes @ 0x0
  2046                           
  2047  0070                     ?_secondISR:	
  2048                           ; 1 bytes @ 0x0
  2049                           
  2050  0070                     ??_secondISR:	
  2051                           ; 1 bytes @ 0x0
  2052                           
  2053  0070                     ?_displayRefreshISR:	
  2054                           ; 1 bytes @ 0x0
  2055                           
  2056  0070                     ??_displayRefreshISR:	
  2057                           ; 1 bytes @ 0x0
  2058                           
  2059  0070                     ?_i2c_open:	
  2060                           ; 1 bytes @ 0x0
  2061                           
  2062  0070                     ?_i2c_close:	
  2063                           ; 1 bytes @ 0x0
  2064                           
  2065  0070                     ?_i2c_masterOperation:	
  2066                           ; 1 bytes @ 0x0
  2067                           
  2068  0070                     ?_i2c_masterWrite:	
  2069                           ; 1 bytes @ 0x0
  2070                           
  2071  0070                     ?_do_I2C_RESET:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     ?_do_I2C_IDLE:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ?_do_I2C_SEND_RESTART_READ:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  2081                           ; 1 bytes @ 0x0
  2082                           
  2083  0070                     ?_do_I2C_SEND_RESTART:	
  2084                           ; 1 bytes @ 0x0
  2085                           
  2086  0070                     ?_do_I2C_SEND_STOP:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0070                     ?_do_I2C_SEND_ADR_READ:	
  2090                           ; 1 bytes @ 0x0
  2091                           
  2092  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  2093                           ; 1 bytes @ 0x0
  2094                           
  2095  0070                     ?_do_I2C_RCEN:	
  2096                           ; 1 bytes @ 0x0
  2097                           
  2098  0070                     ?_do_I2C_DO_ACK:	
  2099                           ; 1 bytes @ 0x0
  2100                           
  2101  0070                     ?_do_I2C_DO_NACK_STOP:	
  2102                           ; 1 bytes @ 0x0
  2103                           
  2104  0070                     ?_do_I2C_DO_NACK_RESTART:	
  2105                           ; 1 bytes @ 0x0
  2106                           
  2107  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  2108                           ; 1 bytes @ 0x0
  2109                           
  2110  0070                     ?_do_I2C_TX:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0070                     ?_do_I2C_RX:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0070                     ?_do_I2C_TX_EMPTY:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0070                     ?_INTERRUPT_InterruptManager:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0070                     ?_SYSTEM_Initialize:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0070                     ?_initRTC:	
  2126                           ; 1 bytes @ 0x0
  2127                           
  2128  0070                     ?_bcdHourIncr:	
  2129                           ; 1 bytes @ 0x0
  2130                           
  2131  0070                     ?_bcdHourDecr:	
  2132                           ; 1 bytes @ 0x0
  2133                           
  2134  0070                     ?_bcdMinuteIncr:	
  2135                           ; 1 bytes @ 0x0
  2136                           
  2137  0070                     ?_bcdMinuteDecr:	
  2138                           ; 1 bytes @ 0x0
  2139                           
  2140  0070                     ?_main:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0070                     ?i1_i2c_setBuffer:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0070                     ?i1_do_I2C_RESET:	
  2147                           ; 1 bytes @ 0x0
  2148                           
  2149  0070                     ??i1_do_I2C_RESET:	
  2150                           ; 1 bytes @ 0x0
  2151                           
  2152  0070                     ?i1_do_I2C_IDLE:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155  0070                     ??i1_do_I2C_IDLE:	
  2156                           ; 1 bytes @ 0x0
  2157                           
  2158  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  2159                           ; 1 bytes @ 0x0
  2160                           
  2161  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  2162                           ; 1 bytes @ 0x0
  2163                           
  2164  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  2168                           ; 1 bytes @ 0x0
  2169                           
  2170  0070                     ?i1_do_I2C_SEND_RESTART:	
  2171                           ; 1 bytes @ 0x0
  2172                           
  2173  0070                     ??i1_do_I2C_SEND_RESTART:	
  2174                           ; 1 bytes @ 0x0
  2175                           
  2176  0070                     ?i1_do_I2C_SEND_STOP:	
  2177                           ; 1 bytes @ 0x0
  2178                           
  2179  0070                     ??i1_do_I2C_SEND_STOP:	
  2180                           ; 1 bytes @ 0x0
  2181                           
  2182  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  2183                           ; 1 bytes @ 0x0
  2184                           
  2185  0070                     ??i1_do_I2C_SEND_ADR_READ:	
  2186                           ; 1 bytes @ 0x0
  2187                           
  2188  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  2189                           ; 1 bytes @ 0x0
  2190                           
  2191  0070                     ??i1_do_I2C_SEND_ADR_WRITE:	
  2192                           ; 1 bytes @ 0x0
  2193                           
  2194  0070                     ?i1_do_I2C_RCEN:	
  2195                           ; 1 bytes @ 0x0
  2196                           
  2197  0070                     ??i1_do_I2C_RCEN:	
  2198                           ; 1 bytes @ 0x0
  2199                           
  2200  0070                     ?i1_do_I2C_DO_ACK:	
  2201                           ; 1 bytes @ 0x0
  2202                           
  2203  0070                     ??i1_do_I2C_DO_ACK:	
  2204                           ; 1 bytes @ 0x0
  2205                           
  2206  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  2207                           ; 1 bytes @ 0x0
  2208                           
  2209  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  2210                           ; 1 bytes @ 0x0
  2211                           
  2212  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  2213                           ; 1 bytes @ 0x0
  2214                           
  2215  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  2216                           ; 1 bytes @ 0x0
  2217                           
  2218  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  2219                           ; 1 bytes @ 0x0
  2220                           
  2221  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  2222                           ; 1 bytes @ 0x0
  2223                           
  2224  0070                     ?i1_do_I2C_TX:	
  2225                           ; 1 bytes @ 0x0
  2226                           
  2227  0070                     ??i1_do_I2C_TX:	
  2228                           ; 1 bytes @ 0x0
  2229                           
  2230  0070                     ?i1_do_I2C_RX:	
  2231                           ; 1 bytes @ 0x0
  2232                           
  2233  0070                     ??i1_do_I2C_RX:	
  2234                           ; 1 bytes @ 0x0
  2235                           
  2236  0070                     ?i1_do_I2C_TX_EMPTY:	
  2237                           ; 1 bytes @ 0x0
  2238                           
  2239  0070                     ??i1_do_I2C_TX_EMPTY:	
  2240                           ; 1 bytes @ 0x0
  2241                           
  2242  0070                     ?i1_i2c_ISR:	
  2243                           ; 1 bytes @ 0x0
  2244                           
  2245  0070                     ?i1_setCallBack:	
  2246                           ; 1 bytes @ 0x0
  2247                           
  2248  0070                     ?i1_mssp_clearIRQ:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ??i1_mssp_clearIRQ:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?i1_mssp_setIRQ:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ??i1_mssp_setIRQ:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ?i1_i2c_driver_resetBus:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ??i1_i2c_driver_resetBus:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?i1_i2c_driver_restart:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ??i1_i2c_driver_restart:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?i1_i2c_driver_stop:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ??i1_i2c_driver_stop:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ??i1_i2c_driver_isNACK:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?i1_i2c_driver_startRX:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ??i1_i2c_driver_startRX:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?i1_i2c_driver_getRXData:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ??i1_i2c_driver_getRXData:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?i1_i2c_driver_TXData:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ??i1_i2c_driver_TXData:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?i1_i2c_driver_sendACK:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ??i1_i2c_driver_sendACK:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?i1_i2c_driver_sendNACK:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ??i1_i2c_driver_sendNACK:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     i1i2c_driver_TXData@d:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     i1i2c_setBuffer@bufferSize:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     i1setCallBack@cb:	
  2318                           ; 2 bytes @ 0x0
  2319                           
  2320                           
  2321                           ; 2 bytes @ 0x0
  2322  0070                     	ds	2
  2323  0072                     ??_TMR0_ISR:	
  2324  0072                     ??_TMR0_CallBack:	
  2325                           ; 1 bytes @ 0x2
  2326                           
  2327  0072                     ??i1_i2c_setBuffer:	
  2328                           ; 1 bytes @ 0x2
  2329                           
  2330  0072                     i1setCallBack@p:	
  2331                           ; 1 bytes @ 0x2
  2332                           
  2333                           
  2334                           ; 1 bytes @ 0x2
  2335  0072                     	ds	1
  2336  0073                     ??i1_i2c_ISR:	
  2337  0073                     ??i1_setCallBack:	
  2338                           ; 1 bytes @ 0x3
  2339                           
  2340  0073                     i1i2c_setBuffer@buffer:	
  2341                           ; 1 bytes @ 0x3
  2342                           
  2343                           
  2344                           ; 1 bytes @ 0x3
  2345  0073                     	ds	1
  2346  0074                     i1setCallBack@idx:	
  2347                           
  2348                           ; 1 bytes @ 0x4
  2349  0074                     	ds	1
  2350  0075                     ?i1_i2c_setDataCompleteCallback:	
  2351  0075                     i1i2c_setDataCompleteCallback@cb:	
  2352                           ; 1 bytes @ 0x5
  2353                           
  2354                           
  2355                           ; 2 bytes @ 0x5
  2356  0075                     	ds	1
  2357  0076                     ??_INTERRUPT_InterruptManager:	
  2358                           
  2359                           ; 1 bytes @ 0x6
  2360  0076                     	ds	1
  2361  0077                     i1i2c_setDataCompleteCallback@p:	
  2362                           
  2363                           ; 1 bytes @ 0x7
  2364  0077                     	ds	1
  2365  0078                     ??i1_returnStop:	
  2366  0078                     ??i1_returnReset:	
  2367                           ; 1 bytes @ 0x8
  2368                           
  2369  0078                     ??i1_wr1RegCompleteHandler:	
  2370                           ; 1 bytes @ 0x8
  2371                           
  2372  0078                     ??i1_rd1RegCompleteHandler:	
  2373                           ; 1 bytes @ 0x8
  2374                           
  2375  0078                     ??i1_rd2RegCompleteHandler:	
  2376                           ; 1 bytes @ 0x8
  2377                           
  2378  0078                     ??i1_wr2RegCompleteHandler:	
  2379                           ; 1 bytes @ 0x8
  2380                           
  2381  0078                     ??i1_rdBlkRegCompleteHandler:	
  2382                           ; 1 bytes @ 0x8
  2383                           
  2384  0078                     ??i1_i2c_restartWrite:	
  2385                           ; 1 bytes @ 0x8
  2386                           
  2387                           
  2388                           	psect	cstackBANK0
  2389  0058                     __pcstackBANK0:	
  2390                           ; 1 bytes @ 0x8
  2391                           
  2392  0058                     ?_setCallBack:	
  2393  0058                     ??_i2c_driver_open:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396  0058                     ??_mssp_clearIRQ:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0058                     ?_i2c_driver_setBusCollisionISR:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0058                     ?_i2c_driver_setI2cISR:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0058                     ??_mssp_disableIRQ:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0058                     ??_i2c_driver_start:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0058                     ??_mssp_IRQisEnabled:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0058                     ??_mssp_waitForEvent:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0058                     ??_i2c_driver_resetBus:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0058                     ??_i2c_driver_restart:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0058                     ??_i2c_driver_stop:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0058                     ??_i2c_driver_TXData:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0058                     ??_i2c_driver_startRX:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0058                     ??_i2c_driver_sendACK:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0058                     ??_i2c_driver_sendNACK:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0058                     ??_i2c_driver_isNACK:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0058                     ??_i2c_driver_getRXData:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0058                     ??_mssp_setIRQ:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0058                     ??_OSCILLATOR_Initialize:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0058                     ??_WDT_Initialize:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0058                     ?_IOCBF4_SetInterruptHandler:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0058                     ?_TMR0_SetInterruptHandler:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0058                     ??_i2c_close:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0058                     ?_i2c_setBuffer:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0058                     ??_do_I2C_RESET:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0058                     ??_do_I2C_IDLE:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0058                     ??_do_I2C_SEND_RESTART_READ:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0058                     ??_do_I2C_SEND_RESTART_WRITE:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0058                     ??_do_I2C_SEND_RESTART:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0058                     ??_do_I2C_SEND_STOP:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0058                     ??_do_I2C_SEND_ADR_READ:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0058                     ??_do_I2C_RCEN:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0058                     ??_do_I2C_DO_ACK:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0058                     ??_do_I2C_DO_NACK_STOP:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0058                     ??_do_I2C_DO_NACK_RESTART:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0058                     ??_do_I2C_DO_ADDRESS_NACK:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0058                     ??_do_I2C_RX:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0058                     ??_do_I2C_TX_EMPTY:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0058                     ??_bcdHourIncr:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0058                     ??_bcdHourDecr:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0058                     ??_bcdMinuteIncr:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0058                     ??_bcdMinuteDecr:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0058                     ??i1_i2c_setDataCompleteCallback:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0058                     mssp_waitForEvent@timeout:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0058                     i2c_driver_TXData@d:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0058                     bcdHourIncr@hr:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0058                     bcdHourDecr@hr:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0058                     bcdMinuteIncr@mn:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0058                     bcdMinuteDecr@mn:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0058                     i2c_setBuffer@bufferSize:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0058                     setCallBack@cb:	
  2544                           ; 2 bytes @ 0x0
  2545                           
  2546  0058                     IOCBF4_SetInterruptHandler@InterruptHandler:	
  2547                           ; 2 bytes @ 0x0
  2548                           
  2549  0058                     TMR0_SetInterruptHandler@InterruptHandler:	
  2550                           ; 2 bytes @ 0x0
  2551                           
  2552  0058                     i2c_driver_setBusCollisionISR@handler:	
  2553                           ; 2 bytes @ 0x0
  2554                           
  2555  0058                     i2c_driver_setI2cISR@handler:	
  2556                           ; 2 bytes @ 0x0
  2557                           
  2558                           
  2559                           ; 2 bytes @ 0x0
  2560  0058                     	ds	1
  2561  0059                     ??_do_I2C_SEND_ADR_WRITE:	
  2562  0059                     ??_do_I2C_TX:	
  2563                           ; 1 bytes @ 0x1
  2564                           
  2565  0059                     ?i1_returnStop:	
  2566                           ; 1 bytes @ 0x1
  2567                           
  2568  0059                     ?i1_returnReset:	
  2569                           ; 1 bytes @ 0x1
  2570                           
  2571  0059                     ?i1_wr1RegCompleteHandler:	
  2572                           ; 1 bytes @ 0x1
  2573                           
  2574  0059                     ?i1_rd1RegCompleteHandler:	
  2575                           ; 1 bytes @ 0x1
  2576                           
  2577  0059                     ?i1_rd2RegCompleteHandler:	
  2578                           ; 1 bytes @ 0x1
  2579                           
  2580  0059                     ?i1_wr2RegCompleteHandler:	
  2581                           ; 1 bytes @ 0x1
  2582                           
  2583  0059                     ?i1_rdBlkRegCompleteHandler:	
  2584                           ; 1 bytes @ 0x1
  2585                           
  2586  0059                     ?i1_i2c_restartWrite:	
  2587                           ; 1 bytes @ 0x1
  2588                           
  2589  0059                     i2c_close@ret:	
  2590                           ; 1 bytes @ 0x1
  2591                           
  2592  0059                     i1returnStop@p:	
  2593                           ; 1 bytes @ 0x1
  2594                           
  2595  0059                     i1returnReset@p:	
  2596                           ; 1 bytes @ 0x1
  2597                           
  2598  0059                     i1wr1RegCompleteHandler@p:	
  2599                           ; 1 bytes @ 0x1
  2600                           
  2601  0059                     i1rd1RegCompleteHandler@p:	
  2602                           ; 1 bytes @ 0x1
  2603                           
  2604  0059                     i1rd2RegCompleteHandler@p:	
  2605                           ; 1 bytes @ 0x1
  2606                           
  2607  0059                     i1wr2RegCompleteHandler@p:	
  2608                           ; 1 bytes @ 0x1
  2609                           
  2610  0059                     i1rdBlkRegCompleteHandler@p:	
  2611                           ; 1 bytes @ 0x1
  2612                           
  2613  0059                     i1i2c_restartWrite@p:	
  2614                           ; 1 bytes @ 0x1
  2615                           
  2616                           
  2617                           ; 1 bytes @ 0x1
  2618  0059                     	ds	1
  2619  005A                     ??_i2c_driver_setBusCollisionISR:	
  2620  005A                     ??_i2c_driver_setI2cISR:	
  2621                           ; 1 bytes @ 0x2
  2622                           
  2623  005A                     ??_PIN_MANAGER_Initialize:	
  2624                           ; 1 bytes @ 0x2
  2625                           
  2626  005A                     ??_TMR0_Initialize:	
  2627                           ; 1 bytes @ 0x2
  2628                           
  2629  005A                     ??_IOCBF4_SetInterruptHandler:	
  2630                           ; 1 bytes @ 0x2
  2631                           
  2632  005A                     ??_TMR0_SetInterruptHandler:	
  2633                           ; 1 bytes @ 0x2
  2634                           
  2635  005A                     ??_i2c_open:	
  2636                           ; 1 bytes @ 0x2
  2637                           
  2638  005A                     ??_i2c_setBuffer:	
  2639                           ; 1 bytes @ 0x2
  2640                           
  2641  005A                     setCallBack@p:	
  2642                           ; 1 bytes @ 0x2
  2643                           
  2644                           
  2645                           ; 1 bytes @ 0x2
  2646  005A                     	ds	1
  2647  005B                     ??_setCallBack:	
  2648  005B                     ??_SYSTEM_Initialize:	
  2649                           ; 1 bytes @ 0x3
  2650                           
  2651  005B                     i2c_open@address:	
  2652                           ; 1 bytes @ 0x3
  2653                           
  2654  005B                     i2c_setBuffer@buffer:	
  2655                           ; 1 bytes @ 0x3
  2656                           
  2657                           
  2658                           ; 1 bytes @ 0x3
  2659  005B                     	ds	1
  2660  005C                     ??_i2c_ISR:	
  2661  005C                     i2c_open@ret:	
  2662                           ; 1 bytes @ 0x4
  2663                           
  2664  005C                     setCallBack@idx:	
  2665                           ; 1 bytes @ 0x4
  2666                           
  2667                           
  2668                           ; 1 bytes @ 0x4
  2669  005C                     	ds	1
  2670  005D                     ?_i2c_setDataCompleteCallback:	
  2671  005D                     ?_i2c_setAddressNACKCallback:	
  2672                           ; 1 bytes @ 0x5
  2673                           
  2674  005D                     i2c_setDataCompleteCallback@cb:	
  2675                           ; 1 bytes @ 0x5
  2676                           
  2677  005D                     i2c_setAddressNACKCallback@cb:	
  2678                           ; 2 bytes @ 0x5
  2679                           
  2680                           
  2681                           ; 2 bytes @ 0x5
  2682  005D                     	ds	2
  2683  005F                     ??_i2c_poller:	
  2684  005F                     ??_i2c_masterOperation:	
  2685                           ; 1 bytes @ 0x7
  2686                           
  2687  005F                     i2c_setDataCompleteCallback@p:	
  2688                           ; 1 bytes @ 0x7
  2689                           
  2690  005F                     i2c_setAddressNACKCallback@p:	
  2691                           ; 1 bytes @ 0x7
  2692                           
  2693                           
  2694                           ; 1 bytes @ 0x7
  2695  005F                     	ds	1
  2696  0060                     ??_i2c_setDataCompleteCallback:	
  2697  0060                     ??_i2c_setAddressNACKCallback:	
  2698                           ; 1 bytes @ 0x8
  2699                           
  2700  0060                     i2c_masterOperation@read:	
  2701                           ; 1 bytes @ 0x8
  2702                           
  2703                           
  2704                           ; 1 bytes @ 0x8
  2705  0060                     	ds	1
  2706  0061                     ?_returnStop:	
  2707  0061                     ?_returnReset:	
  2708                           ; 1 bytes @ 0x9
  2709                           
  2710  0061                     ?_i2c_restartWrite:	
  2711                           ; 1 bytes @ 0x9
  2712                           
  2713  0061                     ?_wr1RegCompleteHandler:	
  2714                           ; 1 bytes @ 0x9
  2715                           
  2716  0061                     ?_rd1RegCompleteHandler:	
  2717                           ; 1 bytes @ 0x9
  2718                           
  2719  0061                     ?_rd2RegCompleteHandler:	
  2720                           ; 1 bytes @ 0x9
  2721                           
  2722  0061                     ?_wr2RegCompleteHandler:	
  2723                           ; 1 bytes @ 0x9
  2724                           
  2725  0061                     ?_rdBlkRegCompleteHandler:	
  2726                           ; 1 bytes @ 0x9
  2727                           
  2728  0061                     i2c_masterOperation@ret:	
  2729                           ; 1 bytes @ 0x9
  2730                           
  2731  0061                     returnStop@p:	
  2732                           ; 1 bytes @ 0x9
  2733                           
  2734  0061                     returnReset@p:	
  2735                           ; 1 bytes @ 0x9
  2736                           
  2737  0061                     wr1RegCompleteHandler@p:	
  2738                           ; 1 bytes @ 0x9
  2739                           
  2740  0061                     rd1RegCompleteHandler@p:	
  2741                           ; 1 bytes @ 0x9
  2742                           
  2743  0061                     rd2RegCompleteHandler@p:	
  2744                           ; 1 bytes @ 0x9
  2745                           
  2746  0061                     wr2RegCompleteHandler@p:	
  2747                           ; 1 bytes @ 0x9
  2748                           
  2749  0061                     rdBlkRegCompleteHandler@p:	
  2750                           ; 1 bytes @ 0x9
  2751                           
  2752  0061                     i2c_restartWrite@p:	
  2753                           ; 1 bytes @ 0x9
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0x9
  2757  0061                     	ds	1
  2758  0062                     ??_returnStop:	
  2759  0062                     ??_returnReset:	
  2760                           ; 1 bytes @ 0xA
  2761                           
  2762  0062                     ??_i2c_restartWrite:	
  2763                           ; 1 bytes @ 0xA
  2764                           
  2765  0062                     ??_i2c_masterWrite:	
  2766                           ; 1 bytes @ 0xA
  2767                           
  2768  0062                     ??_wr1RegCompleteHandler:	
  2769                           ; 1 bytes @ 0xA
  2770                           
  2771  0062                     ?_i2c_writeNBytes:	
  2772                           ; 1 bytes @ 0xA
  2773                           
  2774  0062                     ??_rd1RegCompleteHandler:	
  2775                           ; 1 bytes @ 0xA
  2776                           
  2777  0062                     ??_rd2RegCompleteHandler:	
  2778                           ; 1 bytes @ 0xA
  2779                           
  2780  0062                     ??_wr2RegCompleteHandler:	
  2781                           ; 1 bytes @ 0xA
  2782                           
  2783  0062                     ??_rdBlkRegCompleteHandler:	
  2784                           ; 1 bytes @ 0xA
  2785                           
  2786  0062                     ?_i2c_readDataBlock:	
  2787                           ; 1 bytes @ 0xA
  2788                           
  2789  0062                     i2c_writeNBytes@data:	
  2790                           ; 1 bytes @ 0xA
  2791                           
  2792  0062                     i2c_readDataBlock@reg:	
  2793                           ; 1 bytes @ 0xA
  2794                           
  2795                           
  2796                           ; 1 bytes @ 0xA
  2797  0062                     	ds	1
  2798  0063                     i2c_readDataBlock@data:	
  2799  0063                     i2c_writeNBytes@len:	
  2800                           ; 1 bytes @ 0xB
  2801                           
  2802                           
  2803                           ; 2 bytes @ 0xB
  2804  0063                     	ds	1
  2805  0064                     i2c_readDataBlock@len:	
  2806                           
  2807                           ; 2 bytes @ 0xC
  2808  0064                     	ds	1
  2809  0065                     ??_i2c_writeNBytes:	
  2810  0065                     i2c_writeNBytes@address:	
  2811                           ; 1 bytes @ 0xD
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0xD
  2815  0065                     	ds	1
  2816  0066                     ??_i2c_readDataBlock:	
  2817  0066                     ?_updateRTC:	
  2818                           ; 1 bytes @ 0xE
  2819                           
  2820  0066                     updateRTC@bcdMinute:	
  2821                           ; 1 bytes @ 0xE
  2822                           
  2823                           
  2824                           ; 1 bytes @ 0xE
  2825  0066                     	ds	1
  2826  0067                     ??_updateRTC:	
  2827  0067                     i2c_readDataBlock@address:	
  2828                           ; 1 bytes @ 0xF
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0xF
  2832  0067                     	ds	1
  2833  0068                     updateRTC@bcdHour:	
  2834  0068                     i2c_readDataBlock@d:	
  2835                           ; 1 bytes @ 0x10
  2836                           
  2837                           
  2838                           ; 3 bytes @ 0x10
  2839  0068                     	ds	3
  2840  006B                     ??_initRTC:	
  2841                           
  2842                           ; 1 bytes @ 0x13
  2843  006B                     	ds	2
  2844                           
  2845                           	psect	maintext
  2846  0042                     __pmaintext:	
  2847 ;;
  2848 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2849 ;;
  2850 ;; *************** function _main *****************
  2851 ;; Defined at:
  2852 ;;		line 146 in file "main.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;		None
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;		None
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : B1F/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2868 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2869 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2870 ;;Total ram usage:        2 bytes
  2871 ;; Hardware stack levels required when called:   16
  2872 ;; This function calls:
  2873 ;;		_IOCBF4_SetInterruptHandler
  2874 ;;		_SYSTEM_Initialize
  2875 ;;		_TMR0_SetInterruptHandler
  2876 ;;		_bcdHourDecr
  2877 ;;		_bcdHourIncr
  2878 ;;		_bcdMinuteDecr
  2879 ;;		_bcdMinuteIncr
  2880 ;;		_i2c_readDataBlock
  2881 ;;		_initRTC
  2882 ;;		_updateRTC
  2883 ;; This function is called by:
  2884 ;;		Startup code after reset
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function _main
  2890  0042                     _main:	
  2891                           
  2892                           ;main.c: 149:     SYSTEM_Initialize();
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2896  0042  318F  27DB  3180   	fcall	_SYSTEM_Initialize
  2897  0045  0022               	movlb	2	; select bank2
  2898  0046  1090               	bcf	16,1	;volatile
  2899  0047  108E               	bcf	14,1	;volatile
  2900  0048  120C               	bcf	12,4	;volatile
  2901  0049  118C               	bcf	12,3	;volatile
  2902                           
  2903                           ;main.c: 157:     mode = MODE_NORMAL;
  2904  004A  0020               	movlb	0	; select bank0
  2905  004B  01CC               	clrf	_mode
  2906                           
  2907                           ;main.c: 159:     IOCBF4_SetInterruptHandler(&secondISR);
  2908  004C  300E               	movlw	low _secondISR
  2909  004D  00D8               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
  2910  004E  3006               	movlw	high _secondISR
  2911  004F  00D9               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
  2912  0050  318E  26E1  3180   	fcall	_IOCBF4_SetInterruptHandler
  2913                           
  2914                           ;main.c: 160:     TMR0_SetInterruptHandler(&displayRefreshISR);
  2915  0053  30C9               	movlw	low _displayRefreshISR
  2916  0054  0020               	movlb	0	; select bank0
  2917  0055  00D8               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2918  0056  3001               	movlw	high _displayRefreshISR
  2919  0057  00D9               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2920  0058  318E  26E7  3180   	fcall	_TMR0_SetInterruptHandler
  2921                           
  2922                           ;main.c: 165:     (INTCONbits.GIE = 1);
  2923  005B  178B               	bsf	11,7	;volatile
  2924                           
  2925                           ;main.c: 168:     (INTCONbits.PEIE = 1);
  2926  005C  170B               	bsf	11,6	;volatile
  2927                           
  2928                           ;main.c: 176:     initRTC();
  2929  005D  3183  239F  3180   	fcall	_initRTC
  2930  0060                     l795:	
  2931                           ;main.c: 178:     while (1)
  2932                           
  2933  0060  0064               	clrwdt	;# 
  2934                           
  2935                           ;main.c: 184:         if(PORTBbits.RB0 == 0){
  2936  0061  0020               	movlb	0	; select bank0
  2937  0062  180D               	btfsc	13,0	;volatile
  2938  0063  2867               	goto	l796
  2939                           
  2940                           ;main.c: 185:             flag_button_press_count[0] = 1;
  2941  0064  01C1               	clrf	_flag_button_press_count
  2942  0065  0AC1               	incf	_flag_button_press_count,f
  2943                           
  2944                           ;main.c: 186:         } else if(PORTBbits.RB1 == 0){
  2945  0066  2915               	goto	l5678
  2946  0067                     l796:	
  2947  0067  188D               	btfsc	13,1	;volatile
  2948  0068  286C               	goto	l798
  2949                           
  2950                           ;main.c: 187:             flag_button_press_count[1] = 1;
  2951  0069  01C2               	clrf	_flag_button_press_count+1
  2952  006A  0AC2               	incf	_flag_button_press_count+1,f
  2953                           
  2954                           ;main.c: 188:         } else if(PORTBbits.RB2 == 0){
  2955  006B  2915               	goto	l5678
  2956  006C                     l798:	
  2957  006C  190D               	btfsc	13,2	;volatile
  2958  006D  2871               	goto	l800
  2959                           
  2960                           ;main.c: 189:             flag_button_press_count[2] = 1;
  2961  006E  01C3               	clrf	_flag_button_press_count+2
  2962  006F  0AC3               	incf	_flag_button_press_count+2,f
  2963                           
  2964                           ;main.c: 190:         } else if(PORTBbits.RB3 == 0){
  2965  0070  2915               	goto	l5678
  2966  0071                     l800:	
  2967  0071  198D               	btfsc	13,3	;volatile
  2968  0072  2876               	goto	l5588
  2969                           
  2970                           ;main.c: 191:             flag_button_press_count[3] = 1;
  2971  0073  01C4               	clrf	_flag_button_press_count+3
  2972  0074  0AC4               	incf	_flag_button_press_count+3,f
  2973                           
  2974                           ;main.c: 192:         } else {
  2975  0075  2915               	goto	l5678
  2976  0076                     l5588:	
  2977                           
  2978                           ;main.c: 193:             if(flag_button_press_count[0] == 1){
  2979  0076  0341               	decf	_flag_button_press_count,w
  2980  0077  1D03               	btfss	3,2
  2981  0078  289C               	goto	l5610
  2982                           
  2983                           ;main.c: 194:                 if(button_press_count[0] > 5 && button_press_count[0] < 10
      +                          0){
  2984  0079  3006               	movlw	6
  2985  007A  023D               	subwf	_button_press_count,w
  2986  007B  1C03               	skipc
  2987  007C  289A               	goto	l805
  2988  007D  3064               	movlw	100
  2989  007E  023D               	subwf	_button_press_count,w
  2990  007F  1803               	skipnc
  2991  0080  289A               	goto	l805
  2992                           
  2993                           ;main.c: 195:                     if(mode == MODE_NORMAL){
  2994  0081  084C               	movf	_mode,w
  2995  0082  1D03               	btfss	3,2
  2996  0083  288F               	goto	l5602
  2997                           
  2998                           ;main.c: 196:                         mode = MODE_SET_HOUR;
  2999  0084  01CC               	clrf	_mode
  3000  0085  0ACC               	incf	_mode,f
  3001  0086                     L1:	
  3002                           
  3003                           ;main.c: 197:                         mode_timeout_count = 8;
  3004  0086  3008               	movlw	8
  3005  0087  0021               	movlb	1	; select bank1
  3006  0088  00A0               	movwf	??_main^(0+128)
  3007  0089  0820               	movf	??_main^(0+128),w
  3008  008A  0020               	movlb	0	; select bank0
  3009  008B  00CB               	movwf	_mode_timeout_count
  3010                           
  3011                           ;main.c: 198:                         flag_time_display_update = 1;
  3012  008C  01CE               	clrf	_flag_time_display_update
  3013  008D  0ACE               	incf	_flag_time_display_update,f
  3014                           
  3015                           ;main.c: 199:                     } else if(mode == MODE_SET_HOUR){
  3016  008E  289A               	goto	l805
  3017  008F                     l5602:	
  3018  008F  034C               	decf	_mode,w
  3019  0090  1D03               	btfss	3,2
  3020  0091  2899               	goto	l5608
  3021                           
  3022                           ;main.c: 200:                         mode = MODE_SET_MINUTE;
  3023  0092  3002               	movlw	2
  3024  0093  0021               	movlb	1	; select bank1
  3025  0094  00A0               	movwf	??_main^(0+128)
  3026  0095  0820               	movf	??_main^(0+128),w
  3027  0096  0020               	movlb	0	; select bank0
  3028  0097  00CC               	movwf	_mode
  3029  0098  2886               	goto	L1
  3030  0099                     l5608:	
  3031                           ;main.c: 201:                         mode_timeout_count = 8;
  3032                           
  3033                           
  3034                           ;main.c: 204:                         mode = MODE_NORMAL;
  3035  0099  01CC               	clrf	_mode
  3036  009A                     l805:	
  3037                           ;main.c: 207:                 }
  3038                           
  3039                           
  3040                           ;main.c: 208:                 button_press_count[0] = 0;
  3041  009A  01BD               	clrf	_button_press_count
  3042                           
  3043                           ;main.c: 209:                 flag_button_press_count[0] = 0;
  3044  009B  01C1               	clrf	_flag_button_press_count
  3045  009C                     l5610:	
  3046                           
  3047                           ;main.c: 212:             if(flag_button_press_count[1] == 1){
  3048  009C  0342               	decf	_flag_button_press_count+1,w
  3049  009D  1D03               	btfss	3,2
  3050  009E  28CB               	goto	l5636
  3051                           
  3052                           ;main.c: 213:                 if(button_press_count[1] > 5 && button_press_count[1] < 10
      +                          0){
  3053  009F  3006               	movlw	6
  3054  00A0  023E               	subwf	_button_press_count+1,w
  3055  00A1  1C03               	skipc
  3056  00A2  28C9               	goto	l5632
  3057  00A3  3064               	movlw	100
  3058  00A4  023E               	subwf	_button_press_count+1,w
  3059  00A5  1803               	skipnc
  3060  00A6  28C9               	goto	l5632
  3061                           
  3062                           ;main.c: 215:                     if(mode == MODE_SET_HOUR){
  3063  00A7  034C               	decf	_mode,w
  3064  00A8  1D03               	btfss	3,2
  3065  00A9  28B4               	goto	l5624
  3066                           
  3067                           ;main.c: 216:                         rtcData[2] = bcdHourIncr(rtcData[2]);
  3068  00AA  0851               	movf	_rtcData+2,w
  3069  00AB  3186  26C0  3180   	fcall	_bcdHourIncr
  3070  00AE  0021               	movlb	1	; select bank1
  3071  00AF  00A0               	movwf	??_main^(0+128)
  3072  00B0  0820               	movf	??_main^(0+128),w
  3073  00B1  0020               	movlb	0	; select bank0
  3074  00B2  00D1               	movwf	_rtcData+2
  3075                           
  3076                           ;main.c: 219:                     } else if(mode == MODE_SET_MINUTE){
  3077  00B3  28C1               	goto	l5620
  3078  00B4                     l5624:	
  3079  00B4  3002               	movlw	2
  3080  00B5  064C               	xorwf	_mode,w
  3081  00B6  1D03               	btfss	3,2
  3082  00B7  28C9               	goto	l5632
  3083                           
  3084                           ;main.c: 220:                         rtcData[1] = bcdMinuteIncr(rtcData[1]);
  3085  00B8  0850               	movf	_rtcData+1,w
  3086  00B9  3185  2528  3180   	fcall	_bcdMinuteIncr
  3087  00BC  0021               	movlb	1	; select bank1
  3088  00BD  00A0               	movwf	??_main^(0+128)
  3089  00BE  0820               	movf	??_main^(0+128),w
  3090  00BF  0020               	movlb	0	; select bank0
  3091  00C0  00D0               	movwf	_rtcData+1
  3092  00C1                     l5620:	
  3093                           
  3094                           ;main.c: 217:                         mode_timeout_count = 8;
  3095  00C1  3008               	movlw	8
  3096  00C2  0021               	movlb	1	; select bank1
  3097  00C3  00A0               	movwf	??_main^(0+128)
  3098  00C4  0820               	movf	??_main^(0+128),w
  3099  00C5  0020               	movlb	0	; select bank0
  3100  00C6  00CB               	movwf	_mode_timeout_count
  3101                           
  3102                           ;main.c: 218:                         flag_time_display_update = 1;
  3103  00C7  01CE               	clrf	_flag_time_display_update
  3104  00C8  0ACE               	incf	_flag_time_display_update,f
  3105  00C9                     l5632:	
  3106                           
  3107                           ;main.c: 226:                 button_press_count[1] = 0;
  3108  00C9  01BE               	clrf	_button_press_count+1
  3109                           
  3110                           ;main.c: 227:                 flag_button_press_count[1] = 0;
  3111  00CA  01C2               	clrf	_flag_button_press_count+1
  3112  00CB                     l5636:	
  3113                           
  3114                           ;main.c: 230:             if(flag_button_press_count[2] == 1){
  3115  00CB  0343               	decf	_flag_button_press_count+2,w
  3116  00CC  1D03               	btfss	3,2
  3117  00CD  28FA               	goto	l5662
  3118                           
  3119                           ;main.c: 231:                 if(button_press_count[2] > 5 && button_press_count[2] < 10
      +                          0){
  3120  00CE  3006               	movlw	6
  3121  00CF  023F               	subwf	_button_press_count+2,w
  3122  00D0  1C03               	skipc
  3123  00D1  28F8               	goto	l5658
  3124  00D2  3064               	movlw	100
  3125  00D3  023F               	subwf	_button_press_count+2,w
  3126  00D4  1803               	skipnc
  3127  00D5  28F8               	goto	l5658
  3128                           
  3129                           ;main.c: 233:                     if(mode == MODE_SET_HOUR){
  3130  00D6  034C               	decf	_mode,w
  3131  00D7  1D03               	btfss	3,2
  3132  00D8  28E3               	goto	l5650
  3133                           
  3134                           ;main.c: 234:                         rtcData[2] = bcdHourDecr(rtcData[2]);
  3135  00D9  0851               	movf	_rtcData+2,w
  3136  00DA  3187  2745  3180   	fcall	_bcdHourDecr
  3137  00DD  0021               	movlb	1	; select bank1
  3138  00DE  00A0               	movwf	??_main^(0+128)
  3139  00DF  0820               	movf	??_main^(0+128),w
  3140  00E0  0020               	movlb	0	; select bank0
  3141  00E1  00D1               	movwf	_rtcData+2
  3142                           
  3143                           ;main.c: 237:                     } else if(mode == MODE_SET_MINUTE){
  3144  00E2  28F0               	goto	l5646
  3145  00E3                     l5650:	
  3146  00E3  3002               	movlw	2
  3147  00E4  064C               	xorwf	_mode,w
  3148  00E5  1D03               	btfss	3,2
  3149  00E6  28F8               	goto	l5658
  3150                           
  3151                           ;main.c: 238:                         rtcData[1] = bcdMinuteDecr(rtcData[1]);
  3152  00E7  0850               	movf	_rtcData+1,w
  3153  00E8  3185  2551  3180   	fcall	_bcdMinuteDecr
  3154  00EB  0021               	movlb	1	; select bank1
  3155  00EC  00A0               	movwf	??_main^(0+128)
  3156  00ED  0820               	movf	??_main^(0+128),w
  3157  00EE  0020               	movlb	0	; select bank0
  3158  00EF  00D0               	movwf	_rtcData+1
  3159  00F0                     l5646:	
  3160                           
  3161                           ;main.c: 235:                         mode_timeout_count = 8;
  3162  00F0  3008               	movlw	8
  3163  00F1  0021               	movlb	1	; select bank1
  3164  00F2  00A0               	movwf	??_main^(0+128)
  3165  00F3  0820               	movf	??_main^(0+128),w
  3166  00F4  0020               	movlb	0	; select bank0
  3167  00F5  00CB               	movwf	_mode_timeout_count
  3168                           
  3169                           ;main.c: 236:                         flag_time_display_update = 1;
  3170  00F6  01CE               	clrf	_flag_time_display_update
  3171  00F7  0ACE               	incf	_flag_time_display_update,f
  3172  00F8                     l5658:	
  3173                           
  3174                           ;main.c: 243:                 button_press_count[2] = 0;
  3175  00F8  01BF               	clrf	_button_press_count+2
  3176                           
  3177                           ;main.c: 244:                 flag_button_press_count[2] = 0;
  3178  00F9  01C3               	clrf	_flag_button_press_count+2
  3179  00FA                     l5662:	
  3180                           
  3181                           ;main.c: 247:             if(flag_button_press_count[3] == 1){
  3182  00FA  0344               	decf	_flag_button_press_count+3,w
  3183  00FB  1D03               	btfss	3,2
  3184  00FC  2915               	goto	l5678
  3185                           
  3186                           ;main.c: 248:                 if(button_press_count[3] > 5 && button_press_count[3] < 10
      +                          0){
  3187  00FD  3006               	movlw	6
  3188  00FE  0240               	subwf	_button_press_count+3,w
  3189  00FF  1C03               	skipc
  3190  0100  2913               	goto	l5674
  3191  0101  3064               	movlw	100
  3192  0102  0240               	subwf	_button_press_count+3,w
  3193  0103  1803               	skipnc
  3194  0104  2913               	goto	l5674
  3195                           
  3196                           ;main.c: 249:                     updateRTC(rtcData[2],rtcData[1]);
  3197  0105  0850               	movf	_rtcData+1,w
  3198  0106  0021               	movlb	1	; select bank1
  3199  0107  00A0               	movwf	??_main^(0+128)
  3200  0108  0820               	movf	??_main^(0+128),w
  3201  0109  0020               	movlb	0	; select bank0
  3202  010A  00E6               	movwf	updateRTC@bcdMinute
  3203  010B  0851               	movf	_rtcData+2,w
  3204  010C  3186  268E  3180   	fcall	_updateRTC
  3205                           
  3206                           ;main.c: 251:                     mode = MODE_NORMAL;
  3207  010F  0020               	movlb	0	; select bank0
  3208  0110  01CC               	clrf	_mode
  3209                           
  3210                           ;main.c: 252:                     flag_time_display_update = 1;
  3211  0111  01CE               	clrf	_flag_time_display_update
  3212  0112  0ACE               	incf	_flag_time_display_update,f
  3213  0113                     l5674:	
  3214                           
  3215                           ;main.c: 254:                 button_press_count[3] = 0;
  3216  0113  01C0               	clrf	_button_press_count+3
  3217                           
  3218                           ;main.c: 255:                 flag_button_press_count[3] = 0;
  3219  0114  01C4               	clrf	_flag_button_press_count+3
  3220  0115                     l5678:	
  3221                           
  3222                           ;main.c: 259:         if(mode == MODE_NORMAL){
  3223  0115  084C               	movf	_mode,w
  3224  0116  1D03               	btfss	3,2
  3225  0117  2971               	goto	l5694
  3226                           
  3227                           ;main.c: 260:             if(flag_time_display_update == 1){
  3228  0118  034E               	decf	_flag_time_display_update,w
  3229  0119  1D03               	btfss	3,2
  3230  011A  2860               	goto	l795
  3231                           
  3232                           ;main.c: 261:                 i2c_readDataBlock(0x68,0x00,rtcData,sizeof(rtcData));
  3233  011B  01E2               	clrf	i2c_readDataBlock@reg
  3234  011C  304F               	movlw	(low (_rtcData| 0))& (0+255)
  3235  011D  0021               	movlb	1	; select bank1
  3236  011E  00A0               	movwf	??_main^(0+128)
  3237  011F  0820               	movf	??_main^(0+128),w
  3238  0120  0020               	movlb	0	; select bank0
  3239  0121  00E3               	movwf	i2c_readDataBlock@data
  3240  0122  3009               	movlw	9
  3241  0123  00E4               	movwf	i2c_readDataBlock@len
  3242  0124  3000               	movlw	0
  3243  0125  00E5               	movwf	i2c_readDataBlock@len+1
  3244  0126  3068               	movlw	104
  3245  0127  3183  23DA  3180   	fcall	_i2c_readDataBlock
  3246                           
  3247                           ;main.c: 263:                 displayBuff[0] = displayNum[((rtcData[2] >> 4) & 0x03)];
  3248  012A  0020               	movlb	0	; select bank0
  3249  012B  0851               	movf	_rtcData+2,w
  3250  012C  0021               	movlb	1	; select bank1
  3251  012D  00A0               	movwf	??_main^(0+128)
  3252  012E  3004               	movlw	4
  3253  012F                     u3335:	
  3254  012F  36A0               	lsrf	??_main^(0+128),f
  3255  0130  0B89               	decfsz	9,f
  3256  0131  292F               	goto	u3335
  3257  0132  0820               	movf	??_main^(0+128),w
  3258  0133  3903               	andlw	3
  3259  0134  3E00               	addlw	low (_displayNum| (0+32768))
  3260  0135  0084               	movwf	4
  3261  0136  3090               	movlw	high (_displayNum| (0+32768))
  3262  0137  1803               	skipnc
  3263  0138  3E01               	addlw	1
  3264  0139  0085               	movwf	5
  3265  013A  0800               	movf	0,w	;code access
  3266  013B  00A1               	movwf	(??_main+1)^(0+128)
  3267  013C  0821               	movf	(??_main+1)^(0+128),w
  3268  013D  0020               	movlb	0	; select bank0
  3269  013E  00C5               	movwf	_displayBuff
  3270                           
  3271                           ;main.c: 264:                 displayBuff[1] = displayNum[(rtcData[2]& 0x0F)];
  3272  013F  0851               	movf	_rtcData+2,w
  3273  0140  390F               	andlw	15
  3274  0141  3E00               	addlw	low (_displayNum| (0+32768))
  3275  0142  0084               	movwf	4
  3276  0143  3090               	movlw	high (_displayNum| (0+32768))
  3277  0144  1803               	skipnc
  3278  0145  3E01               	addlw	1
  3279  0146  0085               	movwf	5
  3280  0147  0800               	movf	0,w	;code access
  3281  0148  0021               	movlb	1	; select bank1
  3282  0149  00A0               	movwf	??_main^(0+128)
  3283  014A  0820               	movf	??_main^(0+128),w
  3284  014B  0020               	movlb	0	; select bank0
  3285  014C  00C6               	movwf	_displayBuff+1
  3286                           
  3287                           ;main.c: 265:                 displayBuff[2] = displayNum[((rtcData[1] >> 4) & 0x0F)];
  3288  014D  0850               	movf	_rtcData+1,w
  3289  014E  0021               	movlb	1	; select bank1
  3290  014F  00A0               	movwf	??_main^(0+128)
  3291  0150  3004               	movlw	4
  3292  0151                     u3345:	
  3293  0151  36A0               	lsrf	??_main^(0+128),f
  3294  0152  0B89               	decfsz	9,f
  3295  0153  2951               	goto	u3345
  3296  0154  0820               	movf	??_main^(0+128),w
  3297  0155  390F               	andlw	15
  3298  0156  3E00               	addlw	low (_displayNum| (0+32768))
  3299  0157  0084               	movwf	4
  3300  0158  3090               	movlw	high (_displayNum| (0+32768))
  3301  0159  1803               	skipnc
  3302  015A  3E01               	addlw	1
  3303  015B  0085               	movwf	5
  3304  015C  0800               	movf	0,w	;code access
  3305  015D  00A1               	movwf	(??_main+1)^(0+128)
  3306  015E  0821               	movf	(??_main+1)^(0+128),w
  3307  015F  0020               	movlb	0	; select bank0
  3308  0160  00C7               	movwf	_displayBuff+2
  3309                           
  3310                           ;main.c: 266:                 displayBuff[3] = displayNum[(rtcData[1]& 0x0F)];
  3311  0161  0850               	movf	_rtcData+1,w
  3312  0162  390F               	andlw	15
  3313  0163  3E00               	addlw	low (_displayNum| (0+32768))
  3314  0164  0084               	movwf	4
  3315  0165  3090               	movlw	high (_displayNum| (0+32768))
  3316  0166  1803               	skipnc
  3317  0167  3E01               	addlw	1
  3318  0168  0085               	movwf	5
  3319  0169  0800               	movf	0,w	;code access
  3320  016A  0021               	movlb	1	; select bank1
  3321  016B  00A0               	movwf	??_main^(0+128)
  3322  016C  0820               	movf	??_main^(0+128),w
  3323  016D  0020               	movlb	0	; select bank0
  3324  016E  00C8               	movwf	_displayBuff+3
  3325  016F                     l5692:	
  3326                           
  3327                           ;main.c: 268:                 flag_time_display_update = 0;
  3328  016F  01CE               	clrf	_flag_time_display_update
  3329  0170  2860               	goto	l795
  3330  0171                     l5694:	
  3331                           
  3332                           ;main.c: 271:             if(flag_time_display_update == 1){
  3333  0171  034E               	decf	_flag_time_display_update,w
  3334  0172  1D03               	btfss	3,2
  3335  0173  2860               	goto	l795
  3336                           
  3337                           ;main.c: 272:                 do { LATAbits.LATA7 = 1; } while(0);
  3338  0174  0022               	movlb	2	; select bank2
  3339  0175  178C               	bsf	12,7	;volatile
  3340                           
  3341                           ;main.c: 273:                 displayBuff[0] = displayNum[((rtcData[2] >> 4) & 0x03)];
  3342  0176  0020               	movlb	0	; select bank0
  3343  0177  0851               	movf	_rtcData+2,w
  3344  0178  0021               	movlb	1	; select bank1
  3345  0179  00A0               	movwf	??_main^(0+128)
  3346  017A  3004               	movlw	4
  3347  017B                     u3365:	
  3348  017B  36A0               	lsrf	??_main^(0+128),f
  3349  017C  0B89               	decfsz	9,f
  3350  017D  297B               	goto	u3365
  3351  017E  0820               	movf	??_main^(0+128),w
  3352  017F  3903               	andlw	3
  3353  0180  3E00               	addlw	low (_displayNum| (0+32768))
  3354  0181  0084               	movwf	4
  3355  0182  3090               	movlw	high (_displayNum| (0+32768))
  3356  0183  1803               	skipnc
  3357  0184  3E01               	addlw	1
  3358  0185  0085               	movwf	5
  3359  0186  0800               	movf	0,w	;code access
  3360  0187  00A1               	movwf	(??_main+1)^(0+128)
  3361  0188  0821               	movf	(??_main+1)^(0+128),w
  3362  0189  0020               	movlb	0	; select bank0
  3363  018A  00C5               	movwf	_displayBuff
  3364                           
  3365                           ;main.c: 274:                 displayBuff[1] = displayNum[(rtcData[2]& 0x0F)];
  3366  018B  0851               	movf	_rtcData+2,w
  3367  018C  390F               	andlw	15
  3368  018D  3E00               	addlw	low (_displayNum| (0+32768))
  3369  018E  0084               	movwf	4
  3370  018F  3090               	movlw	high (_displayNum| (0+32768))
  3371  0190  1803               	skipnc
  3372  0191  3E01               	addlw	1
  3373  0192  0085               	movwf	5
  3374  0193  0800               	movf	0,w	;code access
  3375  0194  0021               	movlb	1	; select bank1
  3376  0195  00A0               	movwf	??_main^(0+128)
  3377  0196  0820               	movf	??_main^(0+128),w
  3378  0197  0020               	movlb	0	; select bank0
  3379  0198  00C6               	movwf	_displayBuff+1
  3380                           
  3381                           ;main.c: 275:                 displayBuff[2] = displayNum[((rtcData[1] >> 4) & 0x0F)];
  3382  0199  0850               	movf	_rtcData+1,w
  3383  019A  0021               	movlb	1	; select bank1
  3384  019B  00A0               	movwf	??_main^(0+128)
  3385  019C  3004               	movlw	4
  3386  019D                     u3375:	
  3387  019D  36A0               	lsrf	??_main^(0+128),f
  3388  019E  0B89               	decfsz	9,f
  3389  019F  299D               	goto	u3375
  3390  01A0  0820               	movf	??_main^(0+128),w
  3391  01A1  390F               	andlw	15
  3392  01A2  3E00               	addlw	low (_displayNum| (0+32768))
  3393  01A3  0084               	movwf	4
  3394  01A4  3090               	movlw	high (_displayNum| (0+32768))
  3395  01A5  1803               	skipnc
  3396  01A6  3E01               	addlw	1
  3397  01A7  0085               	movwf	5
  3398  01A8  0800               	movf	0,w	;code access
  3399  01A9  00A1               	movwf	(??_main+1)^(0+128)
  3400  01AA  0821               	movf	(??_main+1)^(0+128),w
  3401  01AB  0020               	movlb	0	; select bank0
  3402  01AC  00C7               	movwf	_displayBuff+2
  3403                           
  3404                           ;main.c: 276:                 displayBuff[3] = displayNum[(rtcData[1]& 0x0F)];
  3405  01AD  0850               	movf	_rtcData+1,w
  3406  01AE  390F               	andlw	15
  3407  01AF  3E00               	addlw	low (_displayNum| (0+32768))
  3408  01B0  0084               	movwf	4
  3409  01B1  3090               	movlw	high (_displayNum| (0+32768))
  3410  01B2  1803               	skipnc
  3411  01B3  3E01               	addlw	1
  3412  01B4  0085               	movwf	5
  3413  01B5  0800               	movf	0,w	;code access
  3414  01B6  0021               	movlb	1	; select bank1
  3415  01B7  00A0               	movwf	??_main^(0+128)
  3416  01B8  0820               	movf	??_main^(0+128),w
  3417  01B9  0020               	movlb	0	; select bank0
  3418  01BA  00C8               	movwf	_displayBuff+3
  3419                           
  3420                           ;main.c: 277:                 if(flag_dot_blink){
  3421  01BB  084D               	movf	_flag_dot_blink,w
  3422  01BC  1903               	btfsc	3,2
  3423  01BD  296F               	goto	l5692
  3424                           
  3425                           ;main.c: 278:                     if(mode == MODE_SET_HOUR){
  3426  01BE  034C               	decf	_mode,w
  3427  01BF  1D03               	btfss	3,2
  3428  01C0  29C3               	goto	l5708
  3429                           
  3430                           ;main.c: 279:                         displayBuff[1] |= (1 << 0);
  3431  01C1  1446               	bsf	_displayBuff+1,0
  3432                           
  3433                           ;main.c: 280:                     } else if(mode == MODE_SET_MINUTE){
  3434  01C2  296F               	goto	l5692
  3435  01C3                     l5708:	
  3436  01C3  3002               	movlw	2
  3437  01C4  064C               	xorwf	_mode,w
  3438  01C5  1D03               	btfss	3,2
  3439  01C6  296F               	goto	l5692
  3440                           
  3441                           ;main.c: 281:                         displayBuff[3] |= (1 << 0);
  3442  01C7  1448               	bsf	_displayBuff+3,0
  3443  01C8  296F               	goto	l5692
  3444  01C9                     __end_of_main:	
  3445                           
  3446                           	psect	text1
  3447  068E                     __ptext1:	
  3448 ;; *************** function _updateRTC *****************
  3449 ;; Defined at:
  3450 ;;		line 102 in file "main.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  bcdHour         1    wreg     unsigned char 
  3453 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3465 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3468 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;Total ram usage:        3 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:   15
  3472 ;; This function calls:
  3473 ;;		_i2c_writeNBytes
  3474 ;; This function is called by:
  3475 ;;		_main
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _updateRTC
  3481  068E                     _updateRTC:	
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _updateRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3485                           ;updateRTC@bcdHour stored from wreg
  3486  068E  0020               	movlb	0	; select bank0
  3487  068F  00E8               	movwf	updateRTC@bcdHour
  3488                           
  3489                           ;main.c: 103:     rtcData[0] = 0x00;
  3490  0690  01CF               	clrf	_rtcData
  3491                           
  3492                           ;main.c: 104:     rtcData[1] = 0x00;
  3493  0691  01D0               	clrf	_rtcData+1
  3494                           
  3495                           ;main.c: 105:     rtcData[2] = bcdMinute & 0x7F;
  3496  0692  0866               	movf	updateRTC@bcdMinute,w
  3497  0693  397F               	andlw	127
  3498  0694  00E7               	movwf	??_updateRTC
  3499  0695  0867               	movf	??_updateRTC,w
  3500  0696  00D1               	movwf	_rtcData+2
  3501                           
  3502                           ;main.c: 106:     rtcData[3] = bcdHour & 0x3F;
  3503  0697  0868               	movf	updateRTC@bcdHour,w
  3504  0698  393F               	andlw	63
  3505  0699  00E7               	movwf	??_updateRTC
  3506  069A  0867               	movf	??_updateRTC,w
  3507  069B  00D2               	movwf	_rtcData+3
  3508                           
  3509                           ;main.c: 107:     i2c_writeNBytes(0x68,rtcData,4);
  3510  069C  304F               	movlw	(low (_rtcData| 0))& (0+255)
  3511  069D  00E7               	movwf	??_updateRTC
  3512  069E  0867               	movf	??_updateRTC,w
  3513  069F  00E2               	movwf	i2c_writeNBytes@data
  3514  06A0  3004               	movlw	4
  3515  06A1  00E3               	movwf	i2c_writeNBytes@len
  3516  06A2  3000               	movlw	0
  3517  06A3  00E4               	movwf	i2c_writeNBytes@len+1
  3518  06A4  3068               	movlw	104
  3519  06A5  3185  2579         	fcall	_i2c_writeNBytes
  3520  06A7  0008               	return
  3521  06A8                     __end_of_updateRTC:	
  3522                           
  3523                           	psect	text2
  3524  039F                     __ptext2:	
  3525 ;; *************** function _initRTC *****************
  3526 ;; Defined at:
  3527 ;;		line 80 in file "main.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3543 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3545 ;;Total ram usage:        2 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:   15
  3548 ;; This function calls:
  3549 ;;		_i2c_readDataBlock
  3550 ;;		_i2c_writeNBytes
  3551 ;; This function is called by:
  3552 ;;		_main
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           
  3557                           ;psect for function _initRTC
  3558  039F                     _initRTC:	
  3559                           
  3560                           ;main.c: 81:     _delay((unsigned long)((30)*(32000000/4000.0)));
  3561                           
  3562                           ;incstack = 0
  3563                           ; Regs used in _initRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3564  039F  3002               	movlw	2
  3565  03A0  0020               	movlb	0	; select bank0
  3566  03A1  00EC               	movwf	??_initRTC+1
  3567  03A2  3038               	movlw	56
  3568  03A3  00EB               	movwf	??_initRTC
  3569  03A4  30AD               	movlw	173
  3570  03A5                     u3417:	
  3571  03A5  0B89               	decfsz	9,f
  3572  03A6  2BA5               	goto	u3417
  3573  03A7  0BEB               	decfsz	??_initRTC,f
  3574  03A8  2BA5               	goto	u3417
  3575  03A9  0BEC               	decfsz	??_initRTC+1,f
  3576  03AA  2BA5               	goto	u3417
  3577                           
  3578                           ;main.c: 85:     i2c_readDataBlock(0x68,0x00,rtcData,sizeof(rtcData));
  3579  03AB  0020               	movlb	0	; select bank0
  3580  03AC  01E2               	clrf	i2c_readDataBlock@reg
  3581  03AD  304F               	movlw	(low (_rtcData| 0))& (0+255)
  3582  03AE  00EB               	movwf	??_initRTC
  3583  03AF  086B               	movf	??_initRTC,w
  3584  03B0  00E3               	movwf	i2c_readDataBlock@data
  3585  03B1  3009               	movlw	9
  3586  03B2  00E4               	movwf	i2c_readDataBlock@len
  3587  03B3  3000               	movlw	0
  3588  03B4  00E5               	movwf	i2c_readDataBlock@len+1
  3589  03B5  3068               	movlw	104
  3590  03B6  3183  23DA  3183   	fcall	_i2c_readDataBlock
  3591                           
  3592                           ;main.c: 86:     if((rtcData[0] & 0x80) == 0x80){
  3593  03B9  0020               	movlb	0	; select bank0
  3594  03BA  1FCF               	btfss	_rtcData,7
  3595  03BB  0008               	return
  3596                           
  3597                           ;main.c: 88:         rtcData[0] = 0x00;
  3598  03BC  01CF               	clrf	_rtcData
  3599                           
  3600                           ;main.c: 89:         rtcData[1] = 0x00;
  3601  03BD  01D0               	clrf	_rtcData+1
  3602                           
  3603                           ;main.c: 90:         rtcData[2] = 0x00;
  3604  03BE  01D1               	clrf	_rtcData+2
  3605                           
  3606                           ;main.c: 91:         rtcData[3] = 0x00;
  3607  03BF  01D2               	clrf	_rtcData+3
  3608                           
  3609                           ;main.c: 92:         rtcData[4] = 0x01;
  3610  03C0  01D3               	clrf	_rtcData+4
  3611  03C1  0AD3               	incf	_rtcData+4,f
  3612                           
  3613                           ;main.c: 93:         rtcData[5] = 0x01;
  3614  03C2  01D4               	clrf	_rtcData+5
  3615  03C3  0AD4               	incf	_rtcData+5,f
  3616                           
  3617                           ;main.c: 94:         rtcData[6] = 0x01;
  3618  03C4  01D5               	clrf	_rtcData+6
  3619  03C5  0AD5               	incf	_rtcData+6,f
  3620                           
  3621                           ;main.c: 95:         rtcData[7] = 0x19;
  3622  03C6  3019               	movlw	25
  3623  03C7  00EB               	movwf	??_initRTC
  3624  03C8  086B               	movf	??_initRTC,w
  3625  03C9  00D6               	movwf	_rtcData+7
  3626                           
  3627                           ;main.c: 96:         rtcData[8] = 0x10;
  3628  03CA  3010               	movlw	16
  3629  03CB  00EB               	movwf	??_initRTC
  3630  03CC  086B               	movf	??_initRTC,w
  3631  03CD  00D7               	movwf	_rtcData+8
  3632                           
  3633                           ;main.c: 98:         i2c_writeNBytes(0x68,rtcData,sizeof(rtcData));
  3634  03CE  304F               	movlw	(low (_rtcData| 0))& (0+255)
  3635  03CF  00EB               	movwf	??_initRTC
  3636  03D0  086B               	movf	??_initRTC,w
  3637  03D1  00E2               	movwf	i2c_writeNBytes@data
  3638  03D2  3009               	movlw	9
  3639  03D3  00E3               	movwf	i2c_writeNBytes@len
  3640  03D4  3000               	movlw	0
  3641  03D5  00E4               	movwf	i2c_writeNBytes@len+1
  3642  03D6  3068               	movlw	104
  3643  03D7  3185  2579         	fcall	_i2c_writeNBytes
  3644  03D9  0008               	return
  3645  03DA                     __end_of_initRTC:	
  3646                           
  3647                           	psect	text3
  3648  0579                     __ptext3:	
  3649 ;; *************** function _i2c_writeNBytes *****************
  3650 ;; Defined at:
  3651 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  address         1    wreg     unsigned char 
  3654 ;;  data            1   10[BANK0 ] PTR void 
  3655 ;;		 -> rtcData(9), 
  3656 ;;  len             2   11[BANK0 ] unsigned int 
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  address         1   13[BANK0 ] unsigned char 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3668 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3671 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3672 ;;Total ram usage:        4 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:   14
  3675 ;; This function calls:
  3676 ;;		_i2c_close
  3677 ;;		_i2c_masterWrite
  3678 ;;		_i2c_open
  3679 ;;		_i2c_setAddressNACKCallback
  3680 ;;		_i2c_setBuffer
  3681 ;; This function is called by:
  3682 ;;		_initRTC
  3683 ;;		_updateRTC
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           
  3688                           ;psect for function _i2c_writeNBytes
  3689  0579                     _i2c_writeNBytes:	
  3690                           
  3691                           ;incstack = 0
  3692                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3693                           ;i2c_writeNBytes@address stored from wreg
  3694  0579  0020               	movlb	0	; select bank0
  3695  057A  00E5               	movwf	i2c_writeNBytes@address
  3696  057B                     l5092:	
  3697                           ;mcc_generated_files/drivers/i2c_simple_master.c: 48: void i2c_writeNBytes(i2c_address_t
      +                           address, void* data, size_t len);mcc_generated_files/drivers/i2c_simple_master.c: 49: {
      +                          ;mcc_generated_files/drivers/i2c_simple_master.c: 50:     while(!i2c_open(address));
  3698                           
  3699  057B  0020               	movlb	0	; select bank0
  3700  057C  0865               	movf	i2c_writeNBytes@address,w
  3701  057D  3183  2312  3185   	fcall	_i2c_open
  3702  0580  3A00               	xorlw	0
  3703  0581  1903               	skipnz
  3704  0582  2D7B               	goto	l5092
  3705                           
  3706                           ;mcc_generated_files/drivers/i2c_simple_master.c: 51:     i2c_setBuffer(data,len);
  3707  0583  0020               	movlb	0	; select bank0
  3708  0584  0864               	movf	i2c_writeNBytes@len+1,w
  3709  0585  00D9               	movwf	i2c_setBuffer@bufferSize+1
  3710  0586  0863               	movf	i2c_writeNBytes@len,w
  3711  0587  00D8               	movwf	i2c_setBuffer@bufferSize
  3712  0588  0862               	movf	i2c_writeNBytes@data,w
  3713  0589  3187  27B4  3185   	fcall	_i2c_setBuffer
  3714                           
  3715                           ;mcc_generated_files/drivers/i2c_simple_master.c: 52:     i2c_setAddressNACKCallback(i2c
      +                          _restartWrite,((void*)0));
  3716  058C  30F9               	movlw	low _i2c_restartWrite
  3717  058D  0020               	movlb	0	; select bank0
  3718  058E  00DD               	movwf	i2c_setAddressNACKCallback@cb
  3719  058F  300E               	movlw	high _i2c_restartWrite
  3720  0590  00DE               	movwf	i2c_setAddressNACKCallback@cb+1
  3721  0591  01DF               	clrf	i2c_setAddressNACKCallback@p
  3722  0592  3187  27D0  3185   	fcall	_i2c_setAddressNACKCallback
  3723                           
  3724                           ;mcc_generated_files/drivers/i2c_simple_master.c: 53:     i2c_masterWrite();
  3725  0595  318E  26C7  3185   	fcall	_i2c_masterWrite
  3726  0598                     l5100:	
  3727                           ;mcc_generated_files/drivers/i2c_simple_master.c: 54:     while(I2C_BUSY == i2c_close())
      +                          ;
  3728                           
  3729  0598  3187  272F  3185   	fcall	_i2c_close
  3730  059B  3A01               	xorlw	1
  3731  059C  1D03               	btfss	3,2
  3732  059D  0008               	return
  3733  059E  2D98               	goto	l5100
  3734  059F                     __end_of_i2c_writeNBytes:	
  3735                           
  3736                           	psect	text4
  3737  03DA                     __ptext4:	
  3738 ;; *************** function _i2c_readDataBlock *****************
  3739 ;; Defined at:
  3740 ;;		line 141 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  address         1    wreg     unsigned char 
  3743 ;;  reg             1   10[BANK0 ] unsigned char 
  3744 ;;  data            1   11[BANK0 ] PTR void 
  3745 ;;		 -> rtcData(9), 
  3746 ;;  len             2   12[BANK0 ] unsigned int 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;  address         1   15[BANK0 ] unsigned char 
  3749 ;;  d               3   16[BANK0 ] struct .
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3759 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3760 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3762 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;Total ram usage:        9 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:   14
  3766 ;; This function calls:
  3767 ;;		_i2c_close
  3768 ;;		_i2c_masterWrite
  3769 ;;		_i2c_open
  3770 ;;		_i2c_setAddressNACKCallback
  3771 ;;		_i2c_setBuffer
  3772 ;;		_i2c_setDataCompleteCallback
  3773 ;; This function is called by:
  3774 ;;		_initRTC
  3775 ;;		_main
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           
  3780                           ;psect for function _i2c_readDataBlock
  3781  03DA                     _i2c_readDataBlock:	
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _i2c_readDataBlock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3785                           ;i2c_readDataBlock@address stored from wreg
  3786  03DA  0020               	movlb	0	; select bank0
  3787  03DB  00E7               	movwf	i2c_readDataBlock@address
  3788                           
  3789                           ;mcc_generated_files/drivers/i2c_simple_master.c: 141: void i2c_readDataBlock(i2c_addres
      +                          s_t address, uint8_t reg, void *data, size_t len);mcc_generated_files/drivers/i2c_simple
      +                          _master.c: 142: {;mcc_generated_files/drivers/i2c_simple_master.c: 144:     buf_t d;;mcc
      +                          _generated_files/drivers/i2c_simple_master.c: 145:     d.data = data;
  3790  03DC  0863               	movf	i2c_readDataBlock@data,w
  3791  03DD  00E6               	movwf	??_i2c_readDataBlock
  3792  03DE  0866               	movf	??_i2c_readDataBlock,w
  3793  03DF  00EA               	movwf	low ((i2c_readDataBlock@d| 0+2))
  3794                           
  3795                           ;mcc_generated_files/drivers/i2c_simple_master.c: 146:     d.len = len;
  3796  03E0  0865               	movf	i2c_readDataBlock@len+1,w
  3797  03E1  00E9               	movwf	i2c_readDataBlock@d+1
  3798  03E2  0864               	movf	i2c_readDataBlock@len,w
  3799  03E3  00E8               	movwf	i2c_readDataBlock@d
  3800  03E4                     l5104:	
  3801                           ;mcc_generated_files/drivers/i2c_simple_master.c: 148:     while(!i2c_open(address));
  3802                           
  3803  03E4  0020               	movlb	0	; select bank0
  3804  03E5  0867               	movf	i2c_readDataBlock@address,w
  3805  03E6  3183  2312  3183   	fcall	_i2c_open
  3806  03E9  3A00               	xorlw	0
  3807  03EA  1903               	skipnz
  3808  03EB  2BE4               	goto	l5104
  3809                           
  3810                           ;mcc_generated_files/drivers/i2c_simple_master.c: 149:     i2c_setDataCompleteCallback(r
      +                          dBlkRegCompleteHandler,&d);
  3811  03EC  3071               	movlw	low _rdBlkRegCompleteHandler
  3812  03ED  0020               	movlb	0	; select bank0
  3813  03EE  00DD               	movwf	i2c_setDataCompleteCallback@cb
  3814  03EF  3006               	movlw	high _rdBlkRegCompleteHandler
  3815  03F0  00DE               	movwf	i2c_setDataCompleteCallback@cb+1
  3816  03F1  3068               	movlw	(low (i2c_readDataBlock@d| 0))& (0+255)
  3817  03F2  00E6               	movwf	??_i2c_readDataBlock
  3818  03F3  0866               	movf	??_i2c_readDataBlock,w
  3819  03F4  00DF               	movwf	i2c_setDataCompleteCallback@p
  3820  03F5  3187  27DD  3183   	fcall	_i2c_setDataCompleteCallback
  3821                           
  3822                           ;mcc_generated_files/drivers/i2c_simple_master.c: 150:     i2c_setBuffer(&reg,1);
  3823  03F8  3001               	movlw	1
  3824  03F9  0020               	movlb	0	; select bank0
  3825  03FA  00D8               	movwf	i2c_setBuffer@bufferSize
  3826  03FB  3000               	movlw	0
  3827  03FC  00D9               	movwf	i2c_setBuffer@bufferSize+1
  3828  03FD  3062               	movlw	(low (i2c_readDataBlock@reg| 0))& (0+255)
  3829  03FE  3187  27B4  3183   	fcall	_i2c_setBuffer
  3830                           
  3831                           ;mcc_generated_files/drivers/i2c_simple_master.c: 151:     i2c_setAddressNACKCallback(i2
      +                          c_restartWrite,((void*)0));
  3832  0401  30F9               	movlw	low _i2c_restartWrite
  3833  0402  0020               	movlb	0	; select bank0
  3834  0403  00DD               	movwf	i2c_setAddressNACKCallback@cb
  3835  0404  300E               	movlw	high _i2c_restartWrite
  3836  0405  00DE               	movwf	i2c_setAddressNACKCallback@cb+1
  3837  0406  01DF               	clrf	i2c_setAddressNACKCallback@p
  3838  0407  3187  27D0  3183   	fcall	_i2c_setAddressNACKCallback
  3839                           
  3840                           ;mcc_generated_files/drivers/i2c_simple_master.c: 152:     i2c_masterWrite();
  3841  040A  318E  26C7  3183   	fcall	_i2c_masterWrite
  3842  040D                     l5114:	
  3843                           ;mcc_generated_files/drivers/i2c_simple_master.c: 153:     while(I2C_BUSY == i2c_close()
      +                          );
  3844                           
  3845  040D  3187  272F  3183   	fcall	_i2c_close
  3846  0410  3A01               	xorlw	1
  3847  0411  1D03               	btfss	3,2
  3848  0412  0008               	return
  3849  0413  2C0D               	goto	l5114
  3850  0414                     __end_of_i2c_readDataBlock:	
  3851                           
  3852                           	psect	text5
  3853  07D0                     __ptext5:	
  3854 ;; *************** function _i2c_setAddressNACKCallback *****************
  3855 ;; Defined at:
  3856 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  3859 ;;		 -> i2c_restartWrite(1), 
  3860 ;;  p               1    7[BANK0 ] PTR void 
  3861 ;;		 -> NULL(0), 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;		None
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3873 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;Total ram usage:        4 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    7
  3880 ;; This function calls:
  3881 ;;		_setCallBack
  3882 ;; This function is called by:
  3883 ;;		_i2c_writeNBytes
  3884 ;;		_i2c_readDataBlock
  3885 ;;		_i2c_write1ByteRegister
  3886 ;;		_i2c_read1ByteRegister
  3887 ;;		_i2c_read2ByteRegister
  3888 ;;		_i2c_write2ByteRegister
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _i2c_setAddressNACKCallback
  3894  07D0                     _i2c_setAddressNACKCallback:	
  3895                           
  3896                           ;mcc_generated_files/drivers/i2c_master.c: 99: void i2c_setAddressNACKCallback(i2c_callb
      +                          ack cb, void *p);mcc_generated_files/drivers/i2c_master.c: 100: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 101:     setCallBack(i2c_addressNACK,cb,p);
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3900  07D0  0020               	movlb	0	; select bank0
  3901  07D1  085E               	movf	i2c_setAddressNACKCallback@cb+1,w
  3902  07D2  00D9               	movwf	setCallBack@cb+1
  3903  07D3  085D               	movf	i2c_setAddressNACKCallback@cb,w
  3904  07D4  00D8               	movwf	setCallBack@cb
  3905  07D5  085F               	movf	i2c_setAddressNACKCallback@p,w
  3906  07D6  00E0               	movwf	??_i2c_setAddressNACKCallback
  3907  07D7  0860               	movf	??_i2c_setAddressNACKCallback,w
  3908  07D8  00DA               	movwf	setCallBack@p
  3909  07D9  3002               	movlw	2
  3910  07DA  3185  25C5         	fcall	_setCallBack
  3911  07DC  0008               	return
  3912  07DD                     __end_of_i2c_setAddressNACKCallback:	
  3913                           
  3914                           	psect	text6
  3915  0312                     __ptext6:	
  3916 ;; *************** function _i2c_open *****************
  3917 ;; Defined at:
  3918 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  address         1    wreg     unsigned char 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  address         1    3[BANK0 ] unsigned char 
  3923 ;;  ret             1    4[BANK0 ] enum E3252
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      enum E3252
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0, pclath, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3936 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3937 ;;Total ram usage:        3 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    7
  3940 ;; This function calls:
  3941 ;;		_i2c_driver_open
  3942 ;;		_i2c_driver_setBusCollisionISR
  3943 ;;		_i2c_driver_setI2cISR
  3944 ;;		_mssp_clearIRQ
  3945 ;; This function is called by:
  3946 ;;		_i2c_writeNBytes
  3947 ;;		_i2c_readDataBlock
  3948 ;;		_i2c_write1ByteRegister
  3949 ;;		_i2c_read1ByteRegister
  3950 ;;		_i2c_read2ByteRegister
  3951 ;;		_i2c_write2ByteRegister
  3952 ;;		_i2c_readNBytes
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function _i2c_open
  3958  0312                     _i2c_open:	
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  3962                           ;i2c_open@address stored from wreg
  3963  0312  0020               	movlb	0	; select bank0
  3964  0313  00DB               	movwf	i2c_open@address
  3965                           
  3966                           ;mcc_generated_files/drivers/i2c_master.c: 116: i2c_error_t i2c_open(i2c_address_t addre
      +                          ss);mcc_generated_files/drivers/i2c_master.c: 117: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 118:     i2c_error_t ret = I2C_BUSY;
  3967  0314  01DC               	clrf	i2c_open@ret
  3968  0315  0ADC               	incf	i2c_open@ret,f
  3969                           
  3970                           ;mcc_generated_files/drivers/i2c_master.c: 120:     if(!i2c_status.inUse)
  3971  0316  18A0               	btfsc	_i2c_status,1
  3972  0317  2B58               	goto	l76
  3973                           
  3974                           ;mcc_generated_files/drivers/i2c_master.c: 121:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 122:         i2c_status.address = address;
  3975  0318  085B               	movf	i2c_open@address,w
  3976  0319  00DA               	movwf	??_i2c_open
  3977  031A  085A               	movf	??_i2c_open,w
  3978  031B  00A1               	movwf	_i2c_status+1
  3979                           
  3980                           ;mcc_generated_files/drivers/i2c_master.c: 123:         i2c_status.busy = 0;
  3981  031C  1020               	bcf	_i2c_status,0
  3982                           
  3983                           ;mcc_generated_files/drivers/i2c_master.c: 124:         i2c_status.inUse = 1;
  3984  031D  14A0               	bsf	_i2c_status,1
  3985                           
  3986                           ;mcc_generated_files/drivers/i2c_master.c: 125:         i2c_status.addressNACKCheck = 0;
  3987  031E  11A0               	bcf	_i2c_status,3
  3988                           
  3989                           ;mcc_generated_files/drivers/i2c_master.c: 126:         i2c_status.state = I2C_RESET;
  3990  031F  300E               	movlw	14
  3991  0320  00DA               	movwf	??_i2c_open
  3992  0321  085A               	movf	??_i2c_open,w
  3993  0322  00A9               	movwf	_i2c_status+9
  3994                           
  3995                           ;mcc_generated_files/drivers/i2c_master.c: 127:         i2c_status.time_out_value = 500;
  3996  0323  30F4               	movlw	244
  3997  0324  00A7               	movwf	_i2c_status+7
  3998  0325  3001               	movlw	1
  3999  0326  00A8               	movwf	_i2c_status+8
  4000                           
  4001                           ;mcc_generated_files/drivers/i2c_master.c: 128:         i2c_status.bufferFree = 1;
  4002  0327  1520               	bsf	_i2c_status,2
  4003                           
  4004                           ;mcc_generated_files/drivers/i2c_master.c: 131:         i2c_status.callbackTable[i2c_dat
      +                          aComplete]=returnStop;
  4005  0328  30ED               	movlw	low _returnStop
  4006  0329  00AB               	movwf	low ((_i2c_status| 0+11))
  4007  032A  300E               	movlw	high _returnStop
  4008  032B  00AC               	movwf	(low ((_i2c_status| 0+11))+1)
  4009                           
  4010                           ;mcc_generated_files/drivers/i2c_master.c: 132:         i2c_status.callbackPayload[i2c_d
      +                          ataComplete] = ((void*)0);
  4011  032C  01B7               	clrf	low ((_i2c_status| 0+23))
  4012                           
  4013                           ;mcc_generated_files/drivers/i2c_master.c: 133:         i2c_status.callbackTable[i2c_wri
      +                          teCollision]=returnStop;
  4014  032D  30ED               	movlw	low _returnStop
  4015  032E  00AD               	movwf	low ((_i2c_status| 0+13))
  4016  032F  300E               	movlw	high _returnStop
  4017  0330  00AE               	movwf	(low ((_i2c_status| 0+13))+1)
  4018                           
  4019                           ;mcc_generated_files/drivers/i2c_master.c: 134:         i2c_status.callbackPayload[i2c_w
      +                          riteCollision] = ((void*)0);
  4020  0331  01B8               	clrf	low ((_i2c_status| 0+24))
  4021                           
  4022                           ;mcc_generated_files/drivers/i2c_master.c: 135:         i2c_status.callbackTable[i2c_add
      +                          ressNACK]=returnStop;
  4023  0332  30ED               	movlw	low _returnStop
  4024  0333  00AF               	movwf	low ((_i2c_status| 0+15))
  4025  0334  300E               	movlw	high _returnStop
  4026  0335  00B0               	movwf	(low ((_i2c_status| 0+15))+1)
  4027                           
  4028                           ;mcc_generated_files/drivers/i2c_master.c: 136:         i2c_status.callbackPayload[i2c_a
      +                          ddressNACK] = ((void*)0);
  4029  0336  01B9               	clrf	low ((_i2c_status| 0+25))
  4030                           
  4031                           ;mcc_generated_files/drivers/i2c_master.c: 137:         i2c_status.callbackTable[i2c_dat
      +                          aNACK]=returnStop;
  4032  0337  30ED               	movlw	low _returnStop
  4033  0338  00B1               	movwf	low ((_i2c_status| 0+17))
  4034  0339  300E               	movlw	high _returnStop
  4035  033A  00B2               	movwf	(low ((_i2c_status| 0+17))+1)
  4036                           
  4037                           ;mcc_generated_files/drivers/i2c_master.c: 138:         i2c_status.callbackPayload[i2c_d
      +                          ataNACK] = ((void*)0);
  4038  033B  01BA               	clrf	low ((_i2c_status| 0+26))
  4039                           
  4040                           ;mcc_generated_files/drivers/i2c_master.c: 139:         i2c_status.callbackTable[i2c_tim
      +                          eOut]=returnReset;
  4041  033C  30F3               	movlw	low _returnReset
  4042  033D  00B3               	movwf	low ((_i2c_status| 0+19))
  4043  033E  300E               	movlw	high _returnReset
  4044  033F  00B4               	movwf	(low ((_i2c_status| 0+19))+1)
  4045                           
  4046                           ;mcc_generated_files/drivers/i2c_master.c: 140:         i2c_status.callbackPayload[i2c_t
      +                          imeOut] = ((void*)0);
  4047  0340  01BB               	clrf	low ((_i2c_status| 0+27))
  4048                           
  4049                           ;mcc_generated_files/drivers/i2c_master.c: 142:         i2c_driver_open();
  4050  0341  318F  27A5  3183   	fcall	_i2c_driver_open
  4051                           
  4052                           ;mcc_generated_files/drivers/i2c_master.c: 143:         mssp_clearIRQ();
  4053  0344  318E  267F  3183   	fcall	_mssp_clearIRQ
  4054                           
  4055                           ;mcc_generated_files/drivers/i2c_master.c: 145:         i2c_driver_setBusCollisionISR(i2
      +                          c_busCollisionISR);
  4056  0347  306A               	movlw	low _i2c_busCollisionISR
  4057  0348  0020               	movlb	0	; select bank0
  4058  0349  00D8               	movwf	i2c_driver_setBusCollisionISR@handler
  4059  034A  300E               	movlw	high _i2c_busCollisionISR
  4060  034B  00D9               	movwf	i2c_driver_setBusCollisionISR@handler+1
  4061  034C  318F  2705  3183   	fcall	_i2c_driver_setBusCollisionISR
  4062                           
  4063                           ;mcc_generated_files/drivers/i2c_master.c: 146:         i2c_driver_setI2cISR(i2c_ISR);
  4064  034F  30D4               	movlw	low _i2c_ISR
  4065  0350  0020               	movlb	0	; select bank0
  4066  0351  00D8               	movwf	i2c_driver_setI2cISR@handler
  4067  0352  3004               	movlw	high _i2c_ISR
  4068  0353  00D9               	movwf	i2c_driver_setI2cISR@handler+1
  4069  0354  318F  270B         	fcall	_i2c_driver_setI2cISR
  4070                           
  4071                           ;mcc_generated_files/drivers/i2c_master.c: 151:         ret = I2C_NOERR;
  4072  0356  0020               	movlb	0	; select bank0
  4073  0357  01DC               	clrf	i2c_open@ret
  4074  0358                     l76:	
  4075                           ;mcc_generated_files/drivers/i2c_master.c: 152:     }
  4076                           
  4077                           
  4078                           ;mcc_generated_files/drivers/i2c_master.c: 153:     return ret;
  4079  0358  085C               	movf	i2c_open@ret,w
  4080  0359  0008               	return
  4081  035A                     __end_of_i2c_open:	
  4082                           
  4083                           	psect	text7
  4084  0F0B                     __ptext7:	
  4085 ;; *************** function _i2c_driver_setI2cISR *****************
  4086 ;; Defined at:
  4087 ;;		line 263 in file "mcc_generated_files/i2c_driver.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  4090 ;;		 -> i2c_ISR(1), 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4102 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;Total ram usage:        2 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    6
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_i2c_open
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _i2c_driver_setI2cISR
  4118  0F0B                     _i2c_driver_setI2cISR:	
  4119                           
  4120                           ;mcc_generated_files/i2c_driver.c: 264:     i2c_driver_i2cISR = handler;
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  4124  0F0B  0020               	movlb	0	; select bank0
  4125  0F0C  0859               	movf	i2c_driver_setI2cISR@handler+1,w
  4126  0F0D  00CA               	movwf	_i2c_driver_i2cISR+1
  4127  0F0E  0858               	movf	i2c_driver_setI2cISR@handler,w
  4128  0F0F  00C9               	movwf	_i2c_driver_i2cISR
  4129  0F10  0008               	return
  4130  0F11                     __end_of_i2c_driver_setI2cISR:	
  4131                           
  4132                           	psect	text8
  4133  0F05                     __ptext8:	
  4134 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  4135 ;; Defined at:
  4136 ;;		line 259 in file "mcc_generated_files/i2c_driver.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  4139 ;;		 -> i2c_busCollisionISR(1), 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4151 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;Total ram usage:        2 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    6
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_i2c_open
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           
  4166                           ;psect for function _i2c_driver_setBusCollisionISR
  4167  0F05                     _i2c_driver_setBusCollisionISR:	
  4168                           
  4169                           ;mcc_generated_files/i2c_driver.c: 260:     i2c_driver_busCollisionISR = handler;
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  4173  0F05  0020               	movlb	0	; select bank0
  4174  0F06  0859               	movf	i2c_driver_setBusCollisionISR@handler+1,w
  4175  0F07  00FB               	movwf	_i2c_driver_busCollisionISR+1
  4176  0F08  0858               	movf	i2c_driver_setBusCollisionISR@handler,w
  4177  0F09  00FA               	movwf	_i2c_driver_busCollisionISR
  4178  0F0A  0008               	return
  4179  0F0B                     __end_of_i2c_driver_setBusCollisionISR:	
  4180                           
  4181                           	psect	text9
  4182  0FA5                     __ptext9:	
  4183 ;; *************** function _i2c_driver_open *****************
  4184 ;; Defined at:
  4185 ;;		line 84 in file "mcc_generated_files/i2c_driver.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, status,2
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;Total ram usage:        0 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    6
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_i2c_open
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _i2c_driver_open
  4215  0FA5                     _i2c_driver_open:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  4219  0FA5  0024               	movlb	4	; select bank4
  4220  0FA6  1A95               	btfsc	21,5	;volatile
  4221  0FA7  0008               	return
  4222  0FA8  0194               	clrf	20	;volatile
  4223  0FA9  3028               	movlw	40
  4224  0FAA  0095               	movwf	21	;volatile
  4225  0FAB  0196               	clrf	22	;volatile
  4226  0FAC  304F               	movlw	79
  4227  0FAD  0092               	movwf	18	;volatile
  4228  0FAE  0008               	return
  4229  0FAF                     __end_of_i2c_driver_open:	
  4230                           
  4231                           	psect	text10
  4232  0EC7                     __ptext10:	
  4233 ;; *************** function _i2c_masterWrite *****************
  4234 ;; Defined at:
  4235 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      enum E3252
  4242 ;; Registers used:
  4243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:   13
  4256 ;; This function calls:
  4257 ;;		_i2c_masterOperation
  4258 ;; This function is called by:
  4259 ;;		_i2c_writeNBytes
  4260 ;;		_i2c_readDataBlock
  4261 ;;		_i2c_write1ByteRegister
  4262 ;;		_i2c_read1ByteRegister
  4263 ;;		_i2c_read2ByteRegister
  4264 ;;		_i2c_write2ByteRegister
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function _i2c_masterWrite
  4270  0EC7                     _i2c_masterWrite:	
  4271                           
  4272                           ;mcc_generated_files/drivers/i2c_master.c: 224:     return i2c_masterOperation(0);;	Retu
      +                          rn value of _i2c_masterWrite is never used
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4276  0EC7  3000               	movlw	0
  4277  0EC8  3186  2652         	fcall	_i2c_masterOperation
  4278  0ECA  0008               	return
  4279  0ECB                     __end_of_i2c_masterWrite:	
  4280                           
  4281                           	psect	text11
  4282  0652                     __ptext11:	
  4283 ;; *************** function _i2c_masterOperation *****************
  4284 ;; Defined at:
  4285 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  read            1    wreg     _Bool 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  read            1    8[BANK0 ] _Bool 
  4290 ;;  ret             1    9[BANK0 ] enum E3252
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      enum E3252
  4293 ;; Registers used:
  4294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;Total ram usage:        3 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:   12
  4307 ;; This function calls:
  4308 ;;		_i2c_driver_start
  4309 ;;		_i2c_poller
  4310 ;;		_mssp_IRQisEnabled
  4311 ;; This function is called by:
  4312 ;;		_i2c_masterWrite
  4313 ;;		_i2c_masterRead
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _i2c_masterOperation
  4319  0652                     _i2c_masterOperation:	
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4323                           ;i2c_masterOperation@read stored from wreg
  4324  0652  0020               	movlb	0	; select bank0
  4325  0653  00E0               	movwf	i2c_masterOperation@read
  4326                           
  4327                           ;mcc_generated_files/drivers/i2c_master.c: 193: i2c_error_t i2c_masterOperation(_Bool re
      +                          ad);mcc_generated_files/drivers/i2c_master.c: 194: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 195:     i2c_error_t ret = I2C_BUSY;
  4328  0654  01E1               	clrf	i2c_masterOperation@ret
  4329  0655  0AE1               	incf	i2c_masterOperation@ret,f
  4330                           
  4331                           ;mcc_generated_files/drivers/i2c_master.c: 196:     if(!i2c_status.busy)
  4332  0656  1820               	btfsc	_i2c_status,0
  4333  0657  2E6E               	goto	l4976
  4334                           
  4335                           ;mcc_generated_files/drivers/i2c_master.c: 197:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 198:         i2c_status.busy = 1;
  4336  0658  1420               	bsf	_i2c_status,0
  4337                           
  4338                           ;mcc_generated_files/drivers/i2c_master.c: 199:         ret = I2C_NOERR;
  4339  0659  01E1               	clrf	i2c_masterOperation@ret
  4340                           
  4341                           ;mcc_generated_files/drivers/i2c_master.c: 201:         if(read)
  4342  065A  0860               	movf	i2c_masterOperation@read,w
  4343  065B  1903               	btfsc	3,2
  4344  065C  2E60               	goto	l4970
  4345                           
  4346                           ;mcc_generated_files/drivers/i2c_master.c: 202:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 203:             i2c_status.state = I2C_SEND_ADR_READ;
  4347  065D  01A9               	clrf	_i2c_status+9
  4348  065E  0AA9               	incf	_i2c_status+9,f
  4349                           
  4350                           ;mcc_generated_files/drivers/i2c_master.c: 204:         }
  4351  065F  2E64               	goto	l4972
  4352  0660                     l4970:	
  4353                           
  4354                           ;mcc_generated_files/drivers/i2c_master.c: 206:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 207:             i2c_status.state = I2C_SEND_ADR_WRITE;
  4355  0660  3002               	movlw	2
  4356  0661  00DF               	movwf	??_i2c_masterOperation
  4357  0662  085F               	movf	??_i2c_masterOperation,w
  4358  0663  00A9               	movwf	_i2c_status+9
  4359  0664                     l4972:	
  4360                           
  4361                           ;mcc_generated_files/drivers/i2c_master.c: 209:         i2c_driver_start();
  4362  0664  318E  2685  3186   	fcall	_i2c_driver_start
  4363                           
  4364                           ;mcc_generated_files/drivers/i2c_master.c: 211:         if(! mssp_IRQisEnabled())
  4365  0667  318F  279B  3186   	fcall	_mssp_IRQisEnabled
  4366  066A  1803               	btfsc	3,0
  4367  066B  2E6E               	goto	l4976
  4368                           
  4369                           ;mcc_generated_files/drivers/i2c_master.c: 212:             i2c_poller();
  4370  066C  318F  27D0         	fcall	_i2c_poller
  4371  066E                     l4976:	
  4372                           
  4373                           ;mcc_generated_files/drivers/i2c_master.c: 214:     return ret;
  4374  066E  0020               	movlb	0	; select bank0
  4375  066F  0861               	movf	i2c_masterOperation@ret,w
  4376  0670  0008               	return
  4377  0671                     __end_of_i2c_masterOperation:	
  4378                           
  4379                           	psect	text12
  4380  0F9B                     __ptext12:	
  4381 ;; *************** function _mssp_IRQisEnabled *****************
  4382 ;; Defined at:
  4383 ;;		line 44 in file "mcc_generated_files/i2c_driver.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;		None               void
  4390 ;; Registers used:
  4391 ;;		wreg, status,2, status,0
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;Total ram usage:        2 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    6
  4404 ;; This function calls:
  4405 ;;		Nothing
  4406 ;; This function is called by:
  4407 ;;		_i2c_masterOperation
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _mssp_IRQisEnabled
  4413  0F9B                     _mssp_IRQisEnabled:	
  4414                           
  4415                           ;mcc_generated_files/i2c_driver.c: 46:             _delay((unsigned long)((100)*(3200000
      +                          0/4000000.0)));
  4416                           
  4417                           ;incstack = 0
  4418                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  4419  0F9B  0021               	movlb	1	; select bank1
  4420  0F9C  0C11               	rrf	17,w	;volatile
  4421  0F9D  0020               	movlb	0	; select bank0
  4422  0F9E  00D8               	movwf	??_mssp_IRQisEnabled
  4423  0F9F  0CD8               	rrf	??_mssp_IRQisEnabled,f
  4424  0FA0  0C58               	rrf	??_mssp_IRQisEnabled,w
  4425  0FA1  3901               	andlw	1
  4426  0FA2  00D9               	movwf	??_mssp_IRQisEnabled+1
  4427  0FA3  0C59               	rrf	??_mssp_IRQisEnabled+1,w
  4428  0FA4  0008               	return
  4429  0FA5                     __end_of_mssp_IRQisEnabled:	
  4430                           
  4431                           	psect	text13
  4432  0FD0                     __ptext13:	
  4433 ;; *************** function _i2c_poller *****************
  4434 ;; Defined at:
  4435 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;		None
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;		None
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      void 
  4442 ;; Registers used:
  4443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;Total ram usage:        0 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:   11
  4456 ;; This function calls:
  4457 ;;		_i2c_ISR
  4458 ;;		_mssp_waitForEvent
  4459 ;; This function is called by:
  4460 ;;		_i2c_masterOperation
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _i2c_poller
  4466  0FD0                     _i2c_poller:	
  4467  0FD0                     l4934:	
  4468                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  4469                           
  4470                           ;incstack = 0
  4471                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4472                           
  4473                           
  4474                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  4475  0FD0  0020               	movlb	0	; select bank0
  4476  0FD1  1C20               	btfss	_i2c_status,0
  4477  0FD2  0008               	return
  4478                           
  4479                           ;mcc_generated_files/drivers/i2c_master.c: 233:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 234:         mssp_waitForEvent(((void*)0));
  4480  0FD3  3000               	movlw	0
  4481  0FD4  318F  27C5  318F   	fcall	_mssp_waitForEvent
  4482                           
  4483                           ;mcc_generated_files/drivers/i2c_master.c: 235:         i2c_ISR();
  4484  0FD7  3184  24D4  318F   	fcall	_i2c_ISR
  4485  0FDA  2FD0               	goto	l4934
  4486  0FDB                     __end_of_i2c_poller:	
  4487                           
  4488                           	psect	text14
  4489  0FC5                     __ptext14:	
  4490 ;; *************** function _mssp_waitForEvent *****************
  4491 ;; Defined at:
  4492 ;;		line 69 in file "mcc_generated_files/i2c_driver.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  timeout         1    wreg     PTR unsigned short 
  4495 ;;		 -> NULL(0), 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  timeout         1    0[BANK0 ] PTR unsigned short 
  4498 ;;		 -> NULL(0), 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      void 
  4501 ;; Registers used:
  4502 ;;		wreg
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;Total ram usage:        1 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    6
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_i2c_poller
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _mssp_waitForEvent
  4524  0FC5                     _mssp_waitForEvent:	
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in _mssp_waitForEvent: [wreg]
  4528  0FC5  0020               	movlb	0	; select bank0
  4529  0FC6  1991               	btfsc	17,3	;volatile
  4530  0FC7  0008               	return
  4531  0FC8                     l603:	
  4532  0FC8  0020               	movlb	0	; select bank0
  4533  0FC9  1991               	btfsc	17,3	;volatile
  4534  0FCA  0008               	return
  4535  0FCB  30A0               	movlw	160
  4536  0FCC                     u3427:	
  4537  0FCC  3200               	nop2
  4538  0FCD  0B89               	decfsz	9,f
  4539  0FCE  2FCC               	goto	u3427
  4540  0FCF  2FC8               	goto	l603
  4541  0FD0                     __end_of_mssp_waitForEvent:	
  4542                           
  4543                           	psect	text15
  4544  04D4                     __ptext15:	
  4545 ;; *************** function _i2c_ISR *****************
  4546 ;; Defined at:
  4547 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;		None
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;Total ram usage:        3 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:   10
  4568 ;; This function calls:
  4569 ;;		_do_I2C_DO_ACK
  4570 ;;		_do_I2C_DO_ADDRESS_NACK
  4571 ;;		_do_I2C_DO_NACK_RESTART
  4572 ;;		_do_I2C_DO_NACK_STOP
  4573 ;;		_do_I2C_IDLE
  4574 ;;		_do_I2C_RCEN
  4575 ;;		_do_I2C_RESET
  4576 ;;		_do_I2C_RX
  4577 ;;		_do_I2C_SEND_ADR_READ
  4578 ;;		_do_I2C_SEND_ADR_WRITE
  4579 ;;		_do_I2C_SEND_RESTART
  4580 ;;		_do_I2C_SEND_RESTART_READ
  4581 ;;		_do_I2C_SEND_RESTART_WRITE
  4582 ;;		_do_I2C_SEND_STOP
  4583 ;;		_do_I2C_TX
  4584 ;;		_do_I2C_TX_EMPTY
  4585 ;;		_i2c_driver_isNACK
  4586 ;;		_mssp_clearIRQ
  4587 ;; This function is called by:
  4588 ;;		_i2c_open
  4589 ;;		_i2c_poller
  4590 ;;		_INTERRUPT_InterruptManager
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           
  4595                           ;psect for function _i2c_ISR
  4596  04D4                     _i2c_ISR:	
  4597                           
  4598                           ;Skip over the trampoline to the duplicate function for level 1
  4599  04D4  1C7E               	btfss	126,0
  4600  04D5  2CD8               	goto	l4912
  4601  04D6  3185  2D9F         	ljmp	i1l5436
  4602  04D8                     _i2c_ISR$intlevel0:	
  4603  04D8                     l4912:	
  4604                           ;incstack = 0
  4605                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4606                           
  4607                           
  4608                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
  4609  04D8  318E  267F  3184   	fcall	_mssp_clearIRQ
  4610                           
  4611                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
  4612  04DB  0020               	movlb	0	; select bank0
  4613  04DC  1DA0               	btfss	_i2c_status,3
  4614  04DD  2CE8               	goto	l4920
  4615  04DE  318F  2774  3184   	fcall	_i2c_driver_isNACK
  4616  04E1  1C03               	btfss	3,0
  4617  04E2  2CE8               	goto	l4920
  4618                           
  4619                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
  4620  04E3  300F               	movlw	15
  4621  04E4  0020               	movlb	0	; select bank0
  4622  04E5  00DC               	movwf	??_i2c_ISR
  4623  04E6  085C               	movf	??_i2c_ISR,w
  4624  04E7  00A9               	movwf	_i2c_status+9
  4625  04E8                     l4920:	
  4626                           
  4627                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
  4628  04E8  0020               	movlb	0	; select bank0
  4629  04E9  0829               	movf	_i2c_status+9,w
  4630  04EA  00DC               	movwf	??_i2c_ISR
  4631  04EB  01DD               	clrf	??_i2c_ISR+1
  4632  04EC  35DC               	lslf	??_i2c_ISR,f
  4633  04ED  0DDD               	rlf	??_i2c_ISR+1,f
  4634  04EE  3032               	movlw	low (_fsmStateTable| (0+32768))
  4635  04EF  075C               	addwf	??_i2c_ISR,w
  4636  04F0  0084               	movwf	4
  4637  04F1  3086               	movlw	high (_fsmStateTable| (0+32768))
  4638  04F2  3D5D               	addwfc	??_i2c_ISR+1,w
  4639  04F3  0085               	movwf	5
  4640  04F4  3F01               	moviw [1]fsr0
  4641  04F5  008A               	movwf	10
  4642  04F6  3F00               	moviw [0]fsr0
  4643  04F7  000A               	callw
  4644  04F8  3184               	pagesel	$
  4645  04F9  0020               	movlb	0	; select bank0
  4646  04FA  00DE               	movwf	??_i2c_ISR+2
  4647  04FB  085E               	movf	??_i2c_ISR+2,w
  4648  04FC  00A9               	movwf	_i2c_status+9
  4649  04FD  0008               	return
  4650  04FE                     __end_of_i2c_ISR:	
  4651                           
  4652                           	psect	text16
  4653  02C8                     __ptext16:	
  4654 ;; *************** function _do_I2C_RX *****************
  4655 ;; Defined at:
  4656 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      enum E3411
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;Total ram usage:        3 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    9
  4677 ;; This function calls:
  4678 ;;		Absolute function
  4679 ;;		_do_I2C_DO_NACK_RESTART
  4680 ;;		_do_I2C_DO_NACK_STOP
  4681 ;;		_i2c_driver_getRXData
  4682 ;;		_i2c_driver_sendACK
  4683 ;;		_i2c_restartWrite
  4684 ;;		_rd1RegCompleteHandler
  4685 ;;		_rd2RegCompleteHandler
  4686 ;;		_rdBlkRegCompleteHandler
  4687 ;;		_returnReset
  4688 ;;		_returnStop
  4689 ;;		_wr1RegCompleteHandler
  4690 ;;		_wr2RegCompleteHandler
  4691 ;; This function is called by:
  4692 ;;		_i2c_ISR
  4693 ;;		i1_i2c_ISR
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           
  4698                           ;psect for function _do_I2C_RX
  4699  02C8                     _do_I2C_RX:	
  4700                           
  4701                           ;Skip over the trampoline to the duplicate function for level 1
  4702  02C8  1C7E               	btfss	126,0
  4703  02C9  2ACC               	goto	l4852
  4704  02CA  3183  2B5A         	ljmp	i1l5224
  4705  02CC                     _do_I2C_RX$intlevel0:	
  4706  02CC                     l4852:	
  4707                           ;incstack = 0
  4708                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4709                           
  4710                           
  4711                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
  4712  02CC  318E  2691  3182   	fcall	_i2c_driver_getRXData
  4713  02CF  0020               	movlb	0	; select bank0
  4714  02D0  00D8               	movwf	??_do_I2C_RX
  4715  02D1  0822               	movf	low ((_i2c_status| 0+2)),w
  4716  02D2  0086               	movwf	6
  4717  02D3  0187               	clrf	7
  4718  02D4  0858               	movf	??_do_I2C_RX,w
  4719  02D5  0081               	movwf	1
  4720  02D6  3001               	movlw	1
  4721  02D7  00D8               	movwf	??_do_I2C_RX
  4722  02D8  0858               	movf	??_do_I2C_RX,w
  4723  02D9  07A2               	addwf	low ((_i2c_status| 0+2)),f
  4724                           
  4725                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
  4726  02DA  3001               	movlw	1
  4727  02DB  02A3               	subwf	_i2c_status+3,f
  4728  02DC  3000               	movlw	0
  4729  02DD  3BA4               	subwfb	_i2c_status+4,f
  4730  02DE  0823               	movf	_i2c_status+3,w
  4731  02DF  0424               	iorwf	_i2c_status+4,w
  4732  02E0  1903               	btfsc	3,2
  4733  02E1  2AE6               	goto	l173
  4734                           
  4735                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
  4736  02E2  318E  26BF         	fcall	_i2c_driver_sendACK
  4737                           
  4738                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
  4739  02E4  3005               	movlw	5
  4740  02E5  0008               	return
  4741  02E6                     l173:	
  4742                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
  4743                           
  4744                           
  4745                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
  4746  02E6  1520               	bsf	_i2c_status,2
  4747                           
  4748                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  4749  02E7  2AEE               	goto	l4876
  4750  02E8                     l4866:	
  4751                           
  4752                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
  4753  02E8  318F  276C         	fcall	_do_I2C_DO_NACK_RESTART
  4754  02EA  0008               	return
  4755  02EB                     l4870:	
  4756                           
  4757                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
  4758  02EB  318F  2764         	fcall	_do_I2C_DO_NACK_STOP
  4759  02ED  0008               	return
  4760  02EE                     l4876:	
  4761  02EE  0837               	movf	low ((_i2c_status| 0+23)),w
  4762  02EF  00D8               	movwf	??_do_I2C_RX
  4763  02F0  0858               	movf	??_do_I2C_RX,w
  4764  02F1  00E1               	movwf	wr1RegCompleteHandler@p
  4765  02F2  300B               	movlw	11
  4766  02F3  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  4767  02F4  0086               	movwf	6
  4768  02F5  0187               	clrf	7
  4769  02F6  3F41               	moviw [1]fsr1
  4770  02F7  008A               	movwf	10
  4771  02F8  3F40               	moviw [0]fsr1
  4772  02F9  000A               	callw
  4773  02FA  3182               	pagesel	$
  4774  02FB  0020               	movlb	0	; select bank0
  4775  02FC  00D9               	movwf	??_do_I2C_RX+1
  4776  02FD  01DA               	clrf	??_do_I2C_RX+2
  4777                           
  4778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4779                           ; Switch size 1, requested type "simple"
  4780                           ; Number of cases is 1, Range of values is 0 to 0
  4781                           ; switch strategies available:
  4782                           ; Name         Instructions Cycles
  4783                           ; simple_byte            4     3 (average)
  4784                           ; direct_byte            8     6 (fixed)
  4785                           ; jumptable            260     6 (fixed)
  4786                           ;	Chosen strategy is simple_byte
  4787  02FE  085A               	movf	??_do_I2C_RX+2,w
  4788  02FF  3A00               	xorlw	0	; case 0
  4789  0300  1903               	skipnz
  4790  0301  2B03               	goto	l5894
  4791  0302  2AEB               	goto	l4870
  4792  0303                     l5894:	
  4793                           
  4794                           ; Switch size 1, requested type "simple"
  4795                           ; Number of cases is 4, Range of values is 1 to 4
  4796                           ; switch strategies available:
  4797                           ; Name         Instructions Cycles
  4798                           ; simple_byte           13     7 (average)
  4799                           ; direct_byte           17     9 (fixed)
  4800                           ; jumptable            263     9 (fixed)
  4801                           ;	Chosen strategy is simple_byte
  4802  0303  0859               	movf	??_do_I2C_RX+1,w
  4803  0304  3A01               	xorlw	1	; case 1
  4804  0305  1903               	skipnz
  4805  0306  2AEB               	goto	l4870
  4806  0307  3A03               	xorlw	3	; case 2
  4807  0308  1903               	skipnz
  4808  0309  2AE8               	goto	l4866
  4809  030A  3A01               	xorlw	1	; case 3
  4810  030B  1903               	skipnz
  4811  030C  2AE8               	goto	l4866
  4812  030D  3A07               	xorlw	7	; case 4
  4813  030E  1903               	skipnz
  4814  030F  2AEB               	goto	l4870
  4815  0310  2AEB               	goto	l4870
  4816  0311  0008               	return
  4817  0312                     __end_of_do_I2C_RX:	
  4818                           
  4819                           	psect	text17
  4820  0229                     __ptext17:	
  4821 ;; *************** function _do_I2C_TX *****************
  4822 ;; Defined at:
  4823 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      enum E3411
  4830 ;; Registers used:
  4831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;Total ram usage:        3 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    9
  4844 ;; This function calls:
  4845 ;;		Absolute function
  4846 ;;		_do_I2C_SEND_RESTART_READ
  4847 ;;		_do_I2C_SEND_RESTART_WRITE
  4848 ;;		_do_I2C_SEND_STOP
  4849 ;;		_i2c_driver_TXData
  4850 ;;		_i2c_driver_isNACK
  4851 ;;		_i2c_restartWrite
  4852 ;;		_rd1RegCompleteHandler
  4853 ;;		_rd2RegCompleteHandler
  4854 ;;		_rdBlkRegCompleteHandler
  4855 ;;		_returnReset
  4856 ;;		_returnStop
  4857 ;;		_wr1RegCompleteHandler
  4858 ;;		_wr2RegCompleteHandler
  4859 ;; This function is called by:
  4860 ;;		_i2c_ISR
  4861 ;;		i1_i2c_ISR
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _do_I2C_TX
  4867  0229                     _do_I2C_TX:	
  4868                           
  4869                           ;Skip over the trampoline to the duplicate function for level 1
  4870  0229  1C7E               	btfss	126,0
  4871  022A  2A2D               	goto	l4818
  4872  022B  3182  2A7B         	ljmp	i1l5190
  4873  022D                     _do_I2C_TX$intlevel0:	
  4874  022D                     l4818:	
  4875                           ;incstack = 0
  4876                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4877                           
  4878                           
  4879                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
  4880  022D  318F  2774  3182   	fcall	_i2c_driver_isNACK
  4881  0230  1803               	btfsc	3,0
  4882  0231  2A3C               	goto	l4836
  4883  0232  2A60               	goto	l157
  4884  0233                     l4822:	
  4885                           
  4886                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
  4887  0233  318F  273C         	fcall	_do_I2C_SEND_RESTART_READ
  4888  0235  0008               	return
  4889  0236                     l4826:	
  4890                           
  4891                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
  4892  0236  318F  2744         	fcall	_do_I2C_SEND_RESTART_WRITE
  4893  0238  0008               	return
  4894  0239                     l4830:	
  4895                           
  4896                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
  4897  0239  318F  2754         	fcall	_do_I2C_SEND_STOP
  4898  023B  0008               	return
  4899  023C                     l4836:	
  4900  023C  0020               	movlb	0	; select bank0
  4901  023D  083A               	movf	low ((_i2c_status| 0+26)),w
  4902  023E  00D9               	movwf	??_do_I2C_TX
  4903  023F  0859               	movf	??_do_I2C_TX,w
  4904  0240  00E1               	movwf	wr1RegCompleteHandler@p
  4905  0241  3011               	movlw	17
  4906  0242  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  4907  0243  0086               	movwf	6
  4908  0244  0187               	clrf	7
  4909  0245  3F41               	moviw [1]fsr1
  4910  0246  008A               	movwf	10
  4911  0247  3F40               	moviw [0]fsr1
  4912  0248  000A               	callw
  4913  0249  3182               	pagesel	$
  4914  024A  0020               	movlb	0	; select bank0
  4915  024B  00DA               	movwf	??_do_I2C_TX+1
  4916  024C  01DB               	clrf	??_do_I2C_TX+2
  4917                           
  4918                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4919                           ; Switch size 1, requested type "simple"
  4920                           ; Number of cases is 1, Range of values is 0 to 0
  4921                           ; switch strategies available:
  4922                           ; Name         Instructions Cycles
  4923                           ; simple_byte            4     3 (average)
  4924                           ; direct_byte            8     6 (fixed)
  4925                           ; jumptable            260     6 (fixed)
  4926                           ;	Chosen strategy is simple_byte
  4927  024D  085B               	movf	??_do_I2C_TX+2,w
  4928  024E  3A00               	xorlw	0	; case 0
  4929  024F  1903               	skipnz
  4930  0250  2A52               	goto	l5896
  4931  0251  2A39               	goto	l4830
  4932  0252                     l5896:	
  4933                           
  4934                           ; Switch size 1, requested type "simple"
  4935                           ; Number of cases is 4, Range of values is 1 to 4
  4936                           ; switch strategies available:
  4937                           ; Name         Instructions Cycles
  4938                           ; simple_byte           13     7 (average)
  4939                           ; direct_byte           17     9 (fixed)
  4940                           ; jumptable            263     9 (fixed)
  4941                           ;	Chosen strategy is simple_byte
  4942  0252  085A               	movf	??_do_I2C_TX+1,w
  4943  0253  3A01               	xorlw	1	; case 1
  4944  0254  1903               	skipnz
  4945  0255  2A39               	goto	l4830
  4946  0256  3A03               	xorlw	3	; case 2
  4947  0257  1903               	skipnz
  4948  0258  2A33               	goto	l4822
  4949  0259  3A01               	xorlw	1	; case 3
  4950  025A  1903               	skipnz
  4951  025B  2A36               	goto	l4826
  4952  025C  3A07               	xorlw	7	; case 4
  4953  025D  1903               	skipnz
  4954  025E  2A39               	goto	l4830
  4955  025F  2A39               	goto	l4830
  4956  0260                     l157:	
  4957                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
  4958                           
  4959                           
  4960                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
  4961  0260  0020               	movlb	0	; select bank0
  4962  0261  11A0               	bcf	_i2c_status,3
  4963                           
  4964                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
  4965  0262  3002               	movlw	2
  4966  0263  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  4967  0264  0086               	movwf	6
  4968  0265  0187               	clrf	7
  4969  0266  3F40               	moviw [0]fsr1
  4970  0267  0084               	movwf	4
  4971  0268  0185               	clrf	5
  4972  0269  0A81               	incf	1,f
  4973  026A  0800               	movf	0,w
  4974  026B  318E  26FF  3182   	fcall	_i2c_driver_TXData
  4975                           
  4976                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
  4977  026E  3001               	movlw	1
  4978  026F  0020               	movlb	0	; select bank0
  4979  0270  02A3               	subwf	_i2c_status+3,f
  4980  0271  3000               	movlw	0
  4981  0272  3BA4               	subwfb	_i2c_status+4,f
  4982  0273  0823               	movf	_i2c_status+3,w
  4983  0274  0424               	iorwf	_i2c_status+4,w
  4984  0275  1D03               	btfss	3,2
  4985  0276  2A79               	goto	l4844
  4986  0277  3006               	movlw	6
  4987  0278  0008               	return
  4988  0279                     l4844:	
  4989  0279  3003               	movlw	3
  4990  027A  0008               	return
  4991  027B                     __end_of_do_I2C_TX:	
  4992                           
  4993                           	psect	text18
  4994  0479                     __ptext18:	
  4995 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  4996 ;; Defined at:
  4997 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      enum E3411
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        3 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    9
  5018 ;; This function calls:
  5019 ;;		Absolute function
  5020 ;;		_do_I2C_SEND_RESTART
  5021 ;;		_do_I2C_SEND_STOP
  5022 ;;		_i2c_restartWrite
  5023 ;;		_rd1RegCompleteHandler
  5024 ;;		_rd2RegCompleteHandler
  5025 ;;		_rdBlkRegCompleteHandler
  5026 ;;		_returnReset
  5027 ;;		_returnStop
  5028 ;;		_wr1RegCompleteHandler
  5029 ;;		_wr2RegCompleteHandler
  5030 ;; This function is called by:
  5031 ;;		_i2c_ISR
  5032 ;;		i1_i2c_ISR
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  5038  0479                     _do_I2C_DO_ADDRESS_NACK:	
  5039                           
  5040                           ;Skip over the trampoline to the duplicate function for level 1
  5041  0479  1C7E               	btfss	126,0
  5042  047A  2C7D               	goto	l4798
  5043  047B  3184  2CFE         	ljmp	i1l5170
  5044  047D                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  5045  047D                     l4798:	
  5046                           ;incstack = 0
  5047                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5048                           
  5049                           
  5050                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
  5051  047D  0020               	movlb	0	; select bank0
  5052  047E  11A0               	bcf	_i2c_status,3
  5053                           
  5054                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
  5055  047F  3002               	movlw	2
  5056  0480  00D8               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5057  0481  0858               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5058  0482  00AA               	movwf	_i2c_status+10
  5059                           
  5060                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
  5061  0483  2C8A               	goto	l4812
  5062  0484                     l4802:	
  5063                           
  5064                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
  5065  0484  318F  274C         	fcall	_do_I2C_SEND_RESTART
  5066  0486  0008               	return
  5067  0487                     l4806:	
  5068                           
  5069                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
  5070  0487  318F  2754         	fcall	_do_I2C_SEND_STOP
  5071  0489  0008               	return
  5072  048A                     l4812:	
  5073  048A  0839               	movf	low ((_i2c_status| 0+25)),w
  5074  048B  00D8               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5075  048C  0858               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5076  048D  00E1               	movwf	wr1RegCompleteHandler@p
  5077  048E  300F               	movlw	15
  5078  048F  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5079  0490  0086               	movwf	6
  5080  0491  0187               	clrf	7
  5081  0492  3F41               	moviw [1]fsr1
  5082  0493  008A               	movwf	10
  5083  0494  3F40               	moviw [0]fsr1
  5084  0495  000A               	callw
  5085  0496  3184               	pagesel	$
  5086  0497  0020               	movlb	0	; select bank0
  5087  0498  00D9               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
  5088  0499  01DA               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
  5089                           
  5090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5091                           ; Switch size 1, requested type "simple"
  5092                           ; Number of cases is 1, Range of values is 0 to 0
  5093                           ; switch strategies available:
  5094                           ; Name         Instructions Cycles
  5095                           ; simple_byte            4     3 (average)
  5096                           ; direct_byte            8     6 (fixed)
  5097                           ; jumptable            260     6 (fixed)
  5098                           ;	Chosen strategy is simple_byte
  5099  049A  085A               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
  5100  049B  3A00               	xorlw	0	; case 0
  5101  049C  1903               	skipnz
  5102  049D  2C9F               	goto	l5898
  5103  049E  2C87               	goto	l4806
  5104  049F                     l5898:	
  5105                           
  5106                           ; Switch size 1, requested type "simple"
  5107                           ; Number of cases is 2, Range of values is 2 to 3
  5108                           ; switch strategies available:
  5109                           ; Name         Instructions Cycles
  5110                           ; simple_byte            7     4 (average)
  5111                           ; direct_byte           13     9 (fixed)
  5112                           ; jumptable            263     9 (fixed)
  5113                           ;	Chosen strategy is simple_byte
  5114  049F  0859               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
  5115  04A0  3A02               	xorlw	2	; case 2
  5116  04A1  1903               	skipnz
  5117  04A2  2C84               	goto	l4802
  5118  04A3  3A01               	xorlw	1	; case 3
  5119  04A4  1903               	skipnz
  5120  04A5  2C84               	goto	l4802
  5121  04A6  2C87               	goto	l4806
  5122  04A7  0008               	return
  5123  04A8                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  5124                           
  5125                           	psect	text19
  5126  0F6C                     __ptext19:	
  5127 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  5128 ;; Defined at:
  5129 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      enum E3411
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    7
  5150 ;; This function calls:
  5151 ;;		_i2c_driver_sendNACK
  5152 ;; This function is called by:
  5153 ;;		_do_I2C_RX
  5154 ;;		_i2c_ISR
  5155 ;;		i1_i2c_ISR
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _do_I2C_DO_NACK_RESTART
  5161  0F6C                     _do_I2C_DO_NACK_RESTART:	
  5162                           
  5163                           ;Skip over the trampoline to the duplicate function for level 1
  5164  0F6C  1C7E               	btfss	126,0
  5165  0F6D  2F70               	goto	l4682
  5166  0F6E  318E  2EB7         	ljmp	i1l3676
  5167  0F70                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  5168  0F70                     l4682:	
  5169                           ;incstack = 0
  5170                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5171                           
  5172                           
  5173                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
  5174  0F70  318E  26C3         	fcall	_i2c_driver_sendNACK
  5175                           
  5176                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
  5177  0F72  3009               	movlw	9
  5178  0F73  0008               	return
  5179  0F74                     __end_of_do_I2C_DO_NACK_RESTART:	
  5180                           
  5181                           	psect	text20
  5182  0F64                     __ptext20:	
  5183 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  5184 ;; Defined at:
  5185 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;		None
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;		None
  5190 ;; Return value:  Size  Location     Type
  5191 ;;                  1    wreg      enum E3411
  5192 ;; Registers used:
  5193 ;;		wreg, status,2, status,0, pclath, cstack
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;Total ram usage:        0 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; Hardware stack levels required when called:    7
  5206 ;; This function calls:
  5207 ;;		_i2c_driver_sendNACK
  5208 ;; This function is called by:
  5209 ;;		_do_I2C_RX
  5210 ;;		_i2c_ISR
  5211 ;;		i1_i2c_ISR
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _do_I2C_DO_NACK_STOP
  5217  0F64                     _do_I2C_DO_NACK_STOP:	
  5218                           
  5219                           ;Skip over the trampoline to the duplicate function for level 1
  5220  0F64  1C7E               	btfss	126,0
  5221  0F65  2F68               	goto	l4676
  5222  0F66  318E  2EB3         	ljmp	i1l3670
  5223  0F68                     _do_I2C_DO_NACK_STOP$intlevel0:	
  5224  0F68                     l4676:	
  5225                           ;incstack = 0
  5226                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  5227                           
  5228                           
  5229                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
  5230  0F68  318E  26C3         	fcall	_i2c_driver_sendNACK
  5231                           
  5232                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
  5233  0F6A  300A               	movlw	10
  5234  0F6B  0008               	return
  5235  0F6C                     __end_of_do_I2C_DO_NACK_STOP:	
  5236                           
  5237                           	psect	text21
  5238  0F5C                     __ptext21:	
  5239 ;; *************** function _do_I2C_DO_ACK *****************
  5240 ;; Defined at:
  5241 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      enum E3411
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0, pclath, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;Total ram usage:        0 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    7
  5262 ;; This function calls:
  5263 ;;		_i2c_driver_sendACK
  5264 ;; This function is called by:
  5265 ;;		_i2c_ISR
  5266 ;;		i1_i2c_ISR
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _do_I2C_DO_ACK
  5272  0F5C                     _do_I2C_DO_ACK:	
  5273                           
  5274                           ;Skip over the trampoline to the duplicate function for level 1
  5275  0F5C  1C7E               	btfss	126,0
  5276  0F5D  2F60               	goto	l4792
  5277  0F5E  318E  2EAF         	ljmp	i1l3882
  5278  0F60                     _do_I2C_DO_ACK$intlevel0:	
  5279  0F60                     l4792:	
  5280                           ;incstack = 0
  5281                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  5282                           
  5283                           
  5284                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
  5285  0F60  318E  26BF         	fcall	_i2c_driver_sendACK
  5286                           
  5287                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
  5288  0F62  3005               	movlw	5
  5289  0F63  0008               	return
  5290  0F64                     __end_of_do_I2C_DO_ACK:	
  5291                           
  5292                           	psect	text22
  5293  0F91                     __ptext22:	
  5294 ;; *************** function _do_I2C_RCEN *****************
  5295 ;; Defined at:
  5296 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  1    wreg      enum E3411
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, status,0, pclath, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;Total ram usage:        0 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    7
  5317 ;; This function calls:
  5318 ;;		_i2c_driver_startRX
  5319 ;; This function is called by:
  5320 ;;		_i2c_ISR
  5321 ;;		i1_i2c_ISR
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           
  5326                           ;psect for function _do_I2C_RCEN
  5327  0F91                     _do_I2C_RCEN:	
  5328                           
  5329                           ;Skip over the trampoline to the duplicate function for level 1
  5330  0F91  1C7E               	btfss	126,0
  5331  0F92  2F95               	goto	l4784
  5332  0F93  318E  2EDB         	ljmp	i1l3874
  5333  0F95                     _do_I2C_RCEN$intlevel0:	
  5334  0F95                     l4784:	
  5335                           ;incstack = 0
  5336                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  5337                           
  5338                           
  5339                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
  5340  0F95  0020               	movlb	0	; select bank0
  5341  0F96  11A0               	bcf	_i2c_status,3
  5342                           
  5343                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
  5344  0F97  318E  268E         	fcall	_i2c_driver_startRX
  5345                           
  5346                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
  5347  0F99  3004               	movlw	4
  5348  0F9A  0008               	return
  5349  0F9B                     __end_of_do_I2C_RCEN:	
  5350                           
  5351                           	psect	text23
  5352  0FBA                     __ptext23:	
  5353 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  5354 ;; Defined at:
  5355 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      enum E3411
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    7
  5376 ;; This function calls:
  5377 ;;		_i2c_driver_TXData
  5378 ;; This function is called by:
  5379 ;;		_i2c_ISR
  5380 ;;		i1_i2c_ISR
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _do_I2C_SEND_ADR_WRITE
  5386  0FBA                     _do_I2C_SEND_ADR_WRITE:	
  5387                           
  5388                           ;Skip over the trampoline to the duplicate function for level 1
  5389  0FBA  1C7E               	btfss	126,0
  5390  0FBB  2FBE               	goto	l4776
  5391  0FBC  318F  2F25         	ljmp	i1l3866
  5392  0FBE                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  5393  0FBE                     l4776:	
  5394                           ;incstack = 0
  5395                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  5396                           
  5397                           
  5398                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
  5399  0FBE  0020               	movlb	0	; select bank0
  5400  0FBF  15A0               	bsf	_i2c_status,3
  5401                           
  5402                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
  5403  0FC0  3521               	lslf	_i2c_status+1,w
  5404  0FC1  318E  26FF         	fcall	_i2c_driver_TXData
  5405                           
  5406                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
  5407  0FC3  3003               	movlw	3
  5408  0FC4  0008               	return
  5409  0FC5                     __end_of_do_I2C_SEND_ADR_WRITE:	
  5410                           
  5411                           	psect	text24
  5412  0FE7                     __ptext24:	
  5413 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  5414 ;; Defined at:
  5415 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;		None
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;		None
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  1    wreg      enum E3411
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, pclath, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5433 ;;Total ram usage:        0 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    7
  5436 ;; This function calls:
  5437 ;;		_i2c_driver_TXData
  5438 ;; This function is called by:
  5439 ;;		_i2c_ISR
  5440 ;;		i1_i2c_ISR
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           
  5445                           ;psect for function _do_I2C_SEND_ADR_READ
  5446  0FE7                     _do_I2C_SEND_ADR_READ:	
  5447                           
  5448                           ;Skip over the trampoline to the duplicate function for level 1
  5449  0FE7  1C7E               	btfss	126,0
  5450  0FE8  2FEB               	goto	l4768
  5451  0FE9  318F  2F34         	ljmp	i1l3858
  5452  0FEB                     _do_I2C_SEND_ADR_READ$intlevel0:	
  5453  0FEB                     l4768:	
  5454                           ;incstack = 0
  5455                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  5456                           
  5457                           
  5458                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
  5459  0FEB  0020               	movlb	0	; select bank0
  5460  0FEC  15A0               	bsf	_i2c_status,3
  5461                           
  5462                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
  5463  0FED  1403               	setc
  5464  0FEE  0D21               	rlf	_i2c_status+1,w
  5465  0FEF  318E  26FF         	fcall	_i2c_driver_TXData
  5466                           
  5467                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
  5468  0FF1  3005               	movlw	5
  5469  0FF2  0008               	return
  5470  0FF3                     __end_of_do_I2C_SEND_ADR_READ:	
  5471                           
  5472                           	psect	text25
  5473  0F54                     __ptext25:	
  5474 ;; *************** function _do_I2C_SEND_STOP *****************
  5475 ;; Defined at:
  5476 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      enum E3411
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, status,0, pclath, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;Total ram usage:        0 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    7
  5497 ;; This function calls:
  5498 ;;		_i2c_driver_stop
  5499 ;; This function is called by:
  5500 ;;		_do_I2C_DO_ADDRESS_NACK
  5501 ;;		_do_I2C_TX
  5502 ;;		_do_I2C_TX_EMPTY
  5503 ;;		_i2c_ISR
  5504 ;;		i1_i2c_ISR
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function _do_I2C_SEND_STOP
  5510  0F54                     _do_I2C_SEND_STOP:	
  5511                           
  5512                           ;Skip over the trampoline to the duplicate function for level 1
  5513  0F54  1C7E               	btfss	126,0
  5514  0F55  2F58               	goto	l4664
  5515  0F56  318E  2EAB         	ljmp	i1l3664
  5516  0F58                     _do_I2C_SEND_STOP$intlevel0:	
  5517  0F58                     l4664:	
  5518                           ;incstack = 0
  5519                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  5520                           
  5521                           
  5522                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
  5523  0F58  318E  268B         	fcall	_i2c_driver_stop
  5524                           
  5525                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
  5526  0F5A  3000               	movlw	0
  5527  0F5B  0008               	return
  5528  0F5C                     __end_of_do_I2C_SEND_STOP:	
  5529                           
  5530                           	psect	text26
  5531  0F4C                     __ptext26:	
  5532 ;; *************** function _do_I2C_SEND_RESTART *****************
  5533 ;; Defined at:
  5534 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;		None
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;		None
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      enum E3411
  5541 ;; Registers used:
  5542 ;;		wreg, status,2, status,0, pclath, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;Total ram usage:        0 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    7
  5555 ;; This function calls:
  5556 ;;		_i2c_driver_restart
  5557 ;; This function is called by:
  5558 ;;		_do_I2C_DO_ADDRESS_NACK
  5559 ;;		_do_I2C_TX_EMPTY
  5560 ;;		_i2c_ISR
  5561 ;;		i1_i2c_ISR
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _do_I2C_SEND_RESTART
  5567  0F4C                     _do_I2C_SEND_RESTART:	
  5568                           
  5569                           ;Skip over the trampoline to the duplicate function for level 1
  5570  0F4C  1C7E               	btfss	126,0
  5571  0F4D  2F50               	goto	l4658
  5572  0F4E  318E  2EA7         	ljmp	i1l3658
  5573  0F50                     _do_I2C_SEND_RESTART$intlevel0:	
  5574  0F50                     l4658:	
  5575                           ;incstack = 0
  5576                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5577                           
  5578                           
  5579                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
  5580  0F50  318E  2688         	fcall	_i2c_driver_restart
  5581                           
  5582                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
  5583  0F52  3001               	movlw	1
  5584  0F53  0008               	return
  5585  0F54                     __end_of_do_I2C_SEND_RESTART:	
  5586                           
  5587                           	psect	text27
  5588  0F44                     __ptext27:	
  5589 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  5590 ;; Defined at:
  5591 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;		None
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;		None
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  1    wreg      enum E3411
  5598 ;; Registers used:
  5599 ;;		wreg, status,2, status,0, pclath, cstack
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5609 ;;Total ram usage:        0 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    7
  5612 ;; This function calls:
  5613 ;;		_i2c_driver_restart
  5614 ;; This function is called by:
  5615 ;;		_do_I2C_TX
  5616 ;;		_i2c_ISR
  5617 ;;		i1_i2c_ISR
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  5623  0F44                     _do_I2C_SEND_RESTART_WRITE:	
  5624                           
  5625                           ;Skip over the trampoline to the duplicate function for level 1
  5626  0F44  1C7E               	btfss	126,0
  5627  0F45  2F48               	goto	l4652
  5628  0F46  318E  2EA3         	ljmp	i1l3652
  5629  0F48                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  5630  0F48                     l4652:	
  5631                           ;incstack = 0
  5632                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  5633                           
  5634                           
  5635                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
  5636  0F48  318E  2688         	fcall	_i2c_driver_restart
  5637                           
  5638                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
  5639  0F4A  3002               	movlw	2
  5640  0F4B  0008               	return
  5641  0F4C                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  5642                           
  5643                           	psect	text28
  5644  0F3C                     __ptext28:	
  5645 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  5646 ;; Defined at:
  5647 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;		None
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;		None
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      enum E3411
  5654 ;; Registers used:
  5655 ;;		wreg, status,2, status,0, pclath, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5665 ;;Total ram usage:        0 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    7
  5668 ;; This function calls:
  5669 ;;		_i2c_driver_restart
  5670 ;; This function is called by:
  5671 ;;		_do_I2C_TX
  5672 ;;		_i2c_ISR
  5673 ;;		i1_i2c_ISR
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           
  5678                           ;psect for function _do_I2C_SEND_RESTART_READ
  5679  0F3C                     _do_I2C_SEND_RESTART_READ:	
  5680                           
  5681                           ;Skip over the trampoline to the duplicate function for level 1
  5682  0F3C  1C7E               	btfss	126,0
  5683  0F3D  2F40               	goto	l4646
  5684  0F3E  318E  2E9F         	ljmp	i1l3646
  5685  0F40                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  5686  0F40                     l4646:	
  5687                           ;incstack = 0
  5688                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  5689                           
  5690                           
  5691                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
  5692  0F40  318E  2688         	fcall	_i2c_driver_restart
  5693                           
  5694                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
  5695  0F42  3001               	movlw	1
  5696  0F43  0008               	return
  5697  0F44                     __end_of_do_I2C_SEND_RESTART_READ:	
  5698                           
  5699                           	psect	text29
  5700  07F7                     __ptext29:	
  5701 ;; *************** function _do_I2C_IDLE *****************
  5702 ;; Defined at:
  5703 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;		None
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  1    wreg      enum E3411
  5710 ;; Registers used:
  5711 ;;		wreg, status,2
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;Total ram usage:        0 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    6
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_i2c_ISR
  5728 ;;		i1_i2c_ISR
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function _do_I2C_IDLE
  5734  07F7                     _do_I2C_IDLE:	
  5735                           
  5736                           ;Skip over the trampoline to the duplicate function for level 1
  5737  07F7  1C7E               	btfss	126,0
  5738  07F8  2FFB               	goto	l4760
  5739  07F9  318E  2ED0         	ljmp	i1l3850
  5740  07FB                     _do_I2C_IDLE$intlevel0:	
  5741  07FB                     l4760:	
  5742                           ;incstack = 0
  5743                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  5744                           
  5745                           
  5746                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
  5747  07FB  0020               	movlb	0	; select bank0
  5748  07FC  1020               	bcf	_i2c_status,0
  5749                           
  5750                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
  5751  07FD  01AA               	clrf	_i2c_status+10
  5752                           
  5753                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
  5754  07FE  300E               	movlw	14
  5755  07FF  0008               	return
  5756  0800                     __end_of_do_I2C_IDLE:	
  5757                           
  5758                           	psect	text30
  5759  0FAF                     __ptext30:	
  5760 ;; *************** function _do_I2C_RESET *****************
  5761 ;; Defined at:
  5762 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;		None
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;		None
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      enum E3411
  5769 ;; Registers used:
  5770 ;;		wreg, status,2, status,0, pclath, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;Total ram usage:        0 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    7
  5783 ;; This function calls:
  5784 ;;		_i2c_driver_resetBus
  5785 ;; This function is called by:
  5786 ;;		_i2c_ISR
  5787 ;;		i1_i2c_ISR
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function _do_I2C_RESET
  5793  0FAF                     _do_I2C_RESET:	
  5794                           
  5795                           ;Skip over the trampoline to the duplicate function for level 1
  5796  0FAF  1C7E               	btfss	126,0
  5797  0FB0  2FB3               	goto	l4750
  5798  0FB1  318F  2F1E         	ljmp	i1l3840
  5799  0FB3                     _do_I2C_RESET$intlevel0:	
  5800  0FB3                     l4750:	
  5801                           ;incstack = 0
  5802                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  5803                           
  5804                           
  5805                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
  5806  0FB3  318E  2662         	fcall	_i2c_driver_resetBus
  5807                           
  5808                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
  5809  0FB5  0020               	movlb	0	; select bank0
  5810  0FB6  1020               	bcf	_i2c_status,0
  5811                           
  5812                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
  5813  0FB7  01AA               	clrf	_i2c_status+10
  5814                           
  5815                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
  5816  0FB8  300E               	movlw	14
  5817  0FB9  0008               	return
  5818  0FBA                     __end_of_do_I2C_RESET:	
  5819                           
  5820                           	psect	text31
  5821  0414                     __ptext31:	
  5822 ;; *************** function _do_I2C_TX_EMPTY *****************
  5823 ;; Defined at:
  5824 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;		None
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;		None
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      enum E3411
  5831 ;; Registers used:
  5832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;Total ram usage:        3 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    9
  5845 ;; This function calls:
  5846 ;;		Absolute function
  5847 ;;		_do_I2C_SEND_RESTART
  5848 ;;		_do_I2C_SEND_STOP
  5849 ;;		_i2c_restartWrite
  5850 ;;		_mssp_setIRQ
  5851 ;;		_rd1RegCompleteHandler
  5852 ;;		_rd2RegCompleteHandler
  5853 ;;		_rdBlkRegCompleteHandler
  5854 ;;		_returnReset
  5855 ;;		_returnStop
  5856 ;;		_wr1RegCompleteHandler
  5857 ;;		_wr2RegCompleteHandler
  5858 ;; This function is called by:
  5859 ;;		_i2c_ISR
  5860 ;;		i1_i2c_ISR
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           
  5865                           ;psect for function _do_I2C_TX_EMPTY
  5866  0414                     _do_I2C_TX_EMPTY:	
  5867                           
  5868                           ;Skip over the trampoline to the duplicate function for level 1
  5869  0414  1C7E               	btfss	126,0
  5870  0415  2C18               	goto	l4882
  5871  0416  3184  2C49         	ljmp	i1l5254
  5872  0418                     _do_I2C_TX_EMPTY$intlevel0:	
  5873  0418                     l4882:	
  5874                           ;incstack = 0
  5875                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5876                           
  5877                           
  5878                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
  5879  0418  0020               	movlb	0	; select bank0
  5880  0419  1520               	bsf	_i2c_status,2
  5881                           
  5882                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  5883  041A  2C25               	goto	l4900
  5884  041B                     l4884:	
  5885                           
  5886                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
  5887  041B  318F  274C         	fcall	_do_I2C_SEND_RESTART
  5888  041D  0008               	return
  5889  041E                     l4888:	
  5890                           
  5891                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
  5892  041E  318E  2694         	fcall	_mssp_setIRQ
  5893                           
  5894                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
  5895  0420  3003               	movlw	3
  5896  0421  0008               	return
  5897  0422                     l4894:	
  5898                           
  5899                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
  5900  0422  318F  2754         	fcall	_do_I2C_SEND_STOP
  5901  0424  0008               	return
  5902  0425                     l4900:	
  5903  0425  0837               	movf	low ((_i2c_status| 0+23)),w
  5904  0426  00D8               	movwf	??_do_I2C_TX_EMPTY
  5905  0427  0858               	movf	??_do_I2C_TX_EMPTY,w
  5906  0428  00E1               	movwf	wr1RegCompleteHandler@p
  5907  0429  300B               	movlw	11
  5908  042A  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5909  042B  0086               	movwf	6
  5910  042C  0187               	clrf	7
  5911  042D  3F41               	moviw [1]fsr1
  5912  042E  008A               	movwf	10
  5913  042F  3F40               	moviw [0]fsr1
  5914  0430  000A               	callw
  5915  0431  3184               	pagesel	$
  5916  0432  0020               	movlb	0	; select bank0
  5917  0433  00D9               	movwf	??_do_I2C_TX_EMPTY+1
  5918  0434  01DA               	clrf	??_do_I2C_TX_EMPTY+2
  5919                           
  5920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5921                           ; Switch size 1, requested type "simple"
  5922                           ; Number of cases is 1, Range of values is 0 to 0
  5923                           ; switch strategies available:
  5924                           ; Name         Instructions Cycles
  5925                           ; simple_byte            4     3 (average)
  5926                           ; direct_byte            8     6 (fixed)
  5927                           ; jumptable            260     6 (fixed)
  5928                           ;	Chosen strategy is simple_byte
  5929  0435  085A               	movf	??_do_I2C_TX_EMPTY+2,w
  5930  0436  3A00               	xorlw	0	; case 0
  5931  0437  1903               	skipnz
  5932  0438  2C3A               	goto	l5900
  5933  0439  2C22               	goto	l4894
  5934  043A                     l5900:	
  5935                           
  5936                           ; Switch size 1, requested type "simple"
  5937                           ; Number of cases is 4, Range of values is 1 to 4
  5938                           ; switch strategies available:
  5939                           ; Name         Instructions Cycles
  5940                           ; simple_byte           13     7 (average)
  5941                           ; direct_byte           17     9 (fixed)
  5942                           ; jumptable            263     9 (fixed)
  5943                           ;	Chosen strategy is simple_byte
  5944  043A  0859               	movf	??_do_I2C_TX_EMPTY+1,w
  5945  043B  3A01               	xorlw	1	; case 1
  5946  043C  1903               	skipnz
  5947  043D  2C22               	goto	l4894
  5948  043E  3A03               	xorlw	3	; case 2
  5949  043F  1903               	skipnz
  5950  0440  2C1B               	goto	l4884
  5951  0441  3A01               	xorlw	1	; case 3
  5952  0442  1903               	skipnz
  5953  0443  2C1B               	goto	l4884
  5954  0444  3A07               	xorlw	7	; case 4
  5955  0445  1903               	skipnz
  5956  0446  2C1E               	goto	l4888
  5957  0447  2C22               	goto	l4894
  5958  0448  0008               	return
  5959  0449                     __end_of_do_I2C_TX_EMPTY:	
  5960                           
  5961                           	psect	text32
  5962  0E94                     __ptext32:	
  5963 ;; *************** function _mssp_setIRQ *****************
  5964 ;; Defined at:
  5965 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;		None
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;		None
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  1    wreg      void 
  5972 ;; Registers used:
  5973 ;;		None
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;Total ram usage:        0 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    6
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_do_I2C_TX_EMPTY
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _mssp_setIRQ
  5995  0E94                     _mssp_setIRQ:	
  5996                           
  5997                           ;mcc_generated_files/i2c_driver.c: 61:     else
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _mssp_setIRQ: []
  6001  0E94  0020               	movlb	0	; select bank0
  6002  0E95  1591               	bsf	17,3	;volatile
  6003  0E96  0008               	return
  6004  0E97                     __end_of_mssp_setIRQ:	
  6005                           
  6006                           	psect	text33
  6007  0F74                     __ptext33:	
  6008 ;; *************** function _i2c_driver_isNACK *****************
  6009 ;; Defined at:
  6010 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;		None
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;		None
  6015 ;; Return value:  Size  Location     Type
  6016 ;;		None               void
  6017 ;; Registers used:
  6018 ;;		wreg, status,2, status,0
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;Total ram usage:        1 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; Hardware stack levels required when called:    6
  6031 ;; This function calls:
  6032 ;;		Nothing
  6033 ;; This function is called by:
  6034 ;;		_do_I2C_TX
  6035 ;;		_i2c_ISR
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function _i2c_driver_isNACK
  6041  0F74                     _i2c_driver_isNACK:	
  6042                           
  6043                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
  6044                           
  6045                           ;incstack = 0
  6046                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  6047  0F74  0024               	movlb	4	; select bank4
  6048  0F75  0E16               	swapf	22,w	;volatile
  6049  0F76  0C89               	rrf	9,f
  6050  0F77  0C89               	rrf	9,f
  6051  0F78  3901               	andlw	1
  6052  0F79  0020               	movlb	0	; select bank0
  6053  0F7A  00D8               	movwf	??_i2c_driver_isNACK
  6054  0F7B  0C58               	rrf	??_i2c_driver_isNACK,w
  6055  0F7C  0008               	return
  6056  0F7D                     __end_of_i2c_driver_isNACK:	
  6057                           
  6058                           	psect	text34
  6059  0EFF                     __ptext34:	
  6060 ;; *************** function _i2c_driver_TXData *****************
  6061 ;; Defined at:
  6062 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  d               1    wreg     unsigned char 
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  d               1    0[BANK0 ] unsigned char 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		wreg
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;Total ram usage:        1 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    6
  6083 ;; This function calls:
  6084 ;;		Nothing
  6085 ;; This function is called by:
  6086 ;;		_do_I2C_SEND_ADR_READ
  6087 ;;		_do_I2C_SEND_ADR_WRITE
  6088 ;;		_do_I2C_TX
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           
  6093                           ;psect for function _i2c_driver_TXData
  6094  0EFF                     _i2c_driver_TXData:	
  6095                           
  6096                           ;incstack = 0
  6097                           ; Regs used in _i2c_driver_TXData: [wreg]
  6098                           ;i2c_driver_TXData@d stored from wreg
  6099  0EFF  0020               	movlb	0	; select bank0
  6100  0F00  00D8               	movwf	i2c_driver_TXData@d
  6101                           
  6102                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
  6103  0F01  0858               	movf	i2c_driver_TXData@d,w
  6104  0F02  0024               	movlb	4	; select bank4
  6105  0F03  0091               	movwf	17	;volatile
  6106  0F04  0008               	return
  6107  0F05                     __end_of_i2c_driver_TXData:	
  6108                           
  6109                           	psect	text35
  6110  0E91                     __ptext35:	
  6111 ;; *************** function _i2c_driver_getRXData *****************
  6112 ;; Defined at:
  6113 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      unsigned char 
  6120 ;; Registers used:
  6121 ;;		wreg
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;Total ram usage:        0 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    6
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_do_I2C_RX
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _i2c_driver_getRXData
  6143  0E91                     _i2c_driver_getRXData:	
  6144                           
  6145                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in _i2c_driver_getRXData: [wreg]
  6149  0E91  0024               	movlb	4	; select bank4
  6150  0E92  0811               	movf	17,w	;volatile
  6151  0E93  0008               	return
  6152  0E94                     __end_of_i2c_driver_getRXData:	
  6153                           
  6154                           	psect	text36
  6155  0EC3                     __ptext36:	
  6156 ;; *************** function _i2c_driver_sendNACK *****************
  6157 ;; Defined at:
  6158 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;		None
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;		None
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      void 
  6165 ;; Registers used:
  6166 ;;		None
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;Total ram usage:        0 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:    6
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_do_I2C_DO_NACK_STOP
  6183 ;;		_do_I2C_DO_NACK_RESTART
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           
  6188                           ;psect for function _i2c_driver_sendNACK
  6189  0EC3                     _i2c_driver_sendNACK:	
  6190                           
  6191                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
  6192                           
  6193                           ;incstack = 0
  6194                           ; Regs used in _i2c_driver_sendNACK: []
  6195  0EC3  0024               	movlb	4	; select bank4
  6196  0EC4  1696               	bsf	22,5	;volatile
  6197                           
  6198                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
  6199  0EC5  1616               	bsf	22,4	;volatile
  6200  0EC6  0008               	return
  6201  0EC7                     __end_of_i2c_driver_sendNACK:	
  6202                           
  6203                           	psect	text37
  6204  0E62                     __ptext37:	
  6205 ;; *************** function _i2c_driver_resetBus *****************
  6206 ;; Defined at:
  6207 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		None
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;Total ram usage:        0 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    6
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_do_I2C_RESET
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           
  6236                           ;psect for function _i2c_driver_resetBus
  6237  0E62                     _i2c_driver_resetBus:	
  6238                           
  6239                           ;incstack = 0
  6240                           ; Regs used in _i2c_driver_resetBus: []
  6241  0E62  0008               	return
  6242  0E63                     __end_of_i2c_driver_resetBus:	
  6243                           
  6244                           	psect	text38
  6245  0E8E                     __ptext38:	
  6246 ;; *************** function _i2c_driver_startRX *****************
  6247 ;; Defined at:
  6248 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;		None
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      void 
  6255 ;; Registers used:
  6256 ;;		None
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;Total ram usage:        0 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    6
  6269 ;; This function calls:
  6270 ;;		Nothing
  6271 ;; This function is called by:
  6272 ;;		_do_I2C_RCEN
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           
  6277                           ;psect for function _i2c_driver_startRX
  6278  0E8E                     _i2c_driver_startRX:	
  6279                           
  6280                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
  6281                           
  6282                           ;incstack = 0
  6283                           ; Regs used in _i2c_driver_startRX: []
  6284  0E8E  0024               	movlb	4	; select bank4
  6285  0E8F  1596               	bsf	22,3	;volatile
  6286  0E90  0008               	return
  6287  0E91                     __end_of_i2c_driver_startRX:	
  6288                           
  6289                           	psect	text39
  6290  0671                     __ptext39:	
  6291 ;; *************** function _rdBlkRegCompleteHandler *****************
  6292 ;; Defined at:
  6293 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  p               1    9[BANK0 ] PTR void 
  6296 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6297 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;		None
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      enum E358
  6302 ;; Registers used:
  6303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6309 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;Total ram usage:        1 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    8
  6316 ;; This function calls:
  6317 ;;		_i2c_setBuffer
  6318 ;;		_i2c_setDataCompleteCallback
  6319 ;; This function is called by:
  6320 ;;		_i2c_readDataBlock
  6321 ;;		_do_I2C_DO_ADDRESS_NACK
  6322 ;;		_do_I2C_TX
  6323 ;;		_do_I2C_RX
  6324 ;;		_do_I2C_TX_EMPTY
  6325 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6326 ;;		i1_do_I2C_TX
  6327 ;;		i1_do_I2C_RX
  6328 ;;		i1_do_I2C_TX_EMPTY
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           
  6333                           ;psect for function _rdBlkRegCompleteHandler
  6334  0671                     _rdBlkRegCompleteHandler:	
  6335                           
  6336                           ;Skip over the trampoline to the duplicate function for level 1
  6337  0671  1C7E               	btfss	126,0
  6338  0672  2E75               	goto	l4738
  6339  0673  3186  2EA8         	ljmp	i1l5080
  6340  0675                     _rdBlkRegCompleteHandler$intlevel0:	
  6341  0675                     l4738:	
  6342                           ;incstack = 0
  6343                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6344                           
  6345                           
  6346                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
  6347  0675  0020               	movlb	0	; select bank0
  6348  0676  0861               	movf	rdBlkRegCompleteHandler@p,w
  6349  0677  0086               	movwf	6
  6350  0678  0187               	clrf	7
  6351  0679  3F40               	moviw [0]fsr1
  6352  067A  00D8               	movwf	i2c_setBuffer@bufferSize
  6353  067B  3F41               	moviw [1]fsr1
  6354  067C  00D9               	movwf	i2c_setBuffer@bufferSize+1
  6355  067D  0861               	movf	rdBlkRegCompleteHandler@p,w
  6356  067E  3E02               	addlw	2
  6357  067F  0086               	movwf	6
  6358  0680  0187               	clrf	7
  6359  0681  0801               	movf	1,w
  6360  0682  3187  27B4  3186   	fcall	_i2c_setBuffer
  6361                           
  6362                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
  6363  0685  3000               	movlw	0
  6364  0686  0020               	movlb	0	; select bank0
  6365  0687  00DD               	movwf	i2c_setDataCompleteCallback@cb
  6366  0688  00DE               	movwf	i2c_setDataCompleteCallback@cb+1
  6367  0689  01DF               	clrf	i2c_setDataCompleteCallback@p
  6368  068A  3187  27DD         	fcall	_i2c_setDataCompleteCallback
  6369                           
  6370                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
  6371  068C  3002               	movlw	2
  6372  068D  0008               	return
  6373  068E                     __end_of_rdBlkRegCompleteHandler:	
  6374                           
  6375                           	psect	text40
  6376  06D7                     __ptext40:	
  6377 ;; *************** function _rd2RegCompleteHandler *****************
  6378 ;; Defined at:
  6379 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  p               1    9[BANK0 ] PTR void 
  6382 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6383 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      enum E358
  6388 ;; Registers used:
  6389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        1 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    8
  6402 ;; This function calls:
  6403 ;;		_i2c_setBuffer
  6404 ;;		_i2c_setDataCompleteCallback
  6405 ;; This function is called by:
  6406 ;;		_i2c_read2ByteRegister
  6407 ;;		_do_I2C_DO_ADDRESS_NACK
  6408 ;;		_do_I2C_TX
  6409 ;;		_do_I2C_RX
  6410 ;;		_do_I2C_TX_EMPTY
  6411 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6412 ;;		i1_do_I2C_TX
  6413 ;;		i1_do_I2C_RX
  6414 ;;		i1_do_I2C_TX_EMPTY
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _rd2RegCompleteHandler
  6420  06D7                     _rd2RegCompleteHandler:	
  6421                           
  6422                           ;Skip over the trampoline to the duplicate function for level 1
  6423  06D7  1C7E               	btfss	126,0
  6424  06D8  2EDB               	goto	l4722
  6425  06D9  3187  2F70         	ljmp	i1l5064
  6426  06DB                     _rd2RegCompleteHandler$intlevel0:	
  6427  06DB                     l4722:	
  6428                           ;incstack = 0
  6429                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6430                           
  6431                           
  6432                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
  6433  06DB  3002               	movlw	2
  6434  06DC  0020               	movlb	0	; select bank0
  6435  06DD  00D8               	movwf	i2c_setBuffer@bufferSize
  6436  06DE  3000               	movlw	0
  6437  06DF  00D9               	movwf	i2c_setBuffer@bufferSize+1
  6438  06E0  0861               	movf	rd2RegCompleteHandler@p,w
  6439  06E1  3187  27B4  3186   	fcall	_i2c_setBuffer
  6440                           
  6441                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
  6442  06E4  3000               	movlw	0
  6443  06E5  0020               	movlb	0	; select bank0
  6444  06E6  00DD               	movwf	i2c_setDataCompleteCallback@cb
  6445  06E7  00DE               	movwf	i2c_setDataCompleteCallback@cb+1
  6446  06E8  01DF               	clrf	i2c_setDataCompleteCallback@p
  6447  06E9  3187  27DD         	fcall	_i2c_setDataCompleteCallback
  6448                           
  6449                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
  6450  06EB  3002               	movlw	2
  6451  06EC  0008               	return
  6452  06ED                     __end_of_rd2RegCompleteHandler:	
  6453                           
  6454                           	psect	text41
  6455  06ED                     __ptext41:	
  6456 ;; *************** function _rd1RegCompleteHandler *****************
  6457 ;; Defined at:
  6458 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  p               1    9[BANK0 ] PTR void 
  6461 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6462 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      enum E358
  6467 ;; Registers used:
  6468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6474 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;Total ram usage:        1 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    8
  6481 ;; This function calls:
  6482 ;;		_i2c_setBuffer
  6483 ;;		_i2c_setDataCompleteCallback
  6484 ;; This function is called by:
  6485 ;;		_i2c_read1ByteRegister
  6486 ;;		_do_I2C_DO_ADDRESS_NACK
  6487 ;;		_do_I2C_TX
  6488 ;;		_do_I2C_RX
  6489 ;;		_do_I2C_TX_EMPTY
  6490 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6491 ;;		i1_do_I2C_TX
  6492 ;;		i1_do_I2C_RX
  6493 ;;		i1_do_I2C_TX_EMPTY
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497                           
  6498                           ;psect for function _rd1RegCompleteHandler
  6499  06ED                     _rd1RegCompleteHandler:	
  6500                           
  6501                           ;Skip over the trampoline to the duplicate function for level 1
  6502  06ED  1C7E               	btfss	126,0
  6503  06EE  2EF1               	goto	l4714
  6504  06EF  3187  2F81         	ljmp	i1l5056
  6505  06F1                     _rd1RegCompleteHandler$intlevel0:	
  6506  06F1                     l4714:	
  6507                           ;incstack = 0
  6508                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6509                           
  6510                           
  6511                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
  6512  06F1  3001               	movlw	1
  6513  06F2  0020               	movlb	0	; select bank0
  6514  06F3  00D8               	movwf	i2c_setBuffer@bufferSize
  6515  06F4  3000               	movlw	0
  6516  06F5  00D9               	movwf	i2c_setBuffer@bufferSize+1
  6517  06F6  0861               	movf	rd1RegCompleteHandler@p,w
  6518  06F7  3187  27B4  3186   	fcall	_i2c_setBuffer
  6519                           
  6520                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
  6521  06FA  3000               	movlw	0
  6522  06FB  0020               	movlb	0	; select bank0
  6523  06FC  00DD               	movwf	i2c_setDataCompleteCallback@cb
  6524  06FD  00DE               	movwf	i2c_setDataCompleteCallback@cb+1
  6525  06FE  01DF               	clrf	i2c_setDataCompleteCallback@p
  6526  06FF  3187  27DD         	fcall	_i2c_setDataCompleteCallback
  6527                           
  6528                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
  6529  0701  3002               	movlw	2
  6530  0702  0008               	return
  6531  0703                     __end_of_rd1RegCompleteHandler:	
  6532                           
  6533                           	psect	text42
  6534  0703                     __ptext42:	
  6535 ;; *************** function _wr1RegCompleteHandler *****************
  6536 ;; Defined at:
  6537 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  p               1    9[BANK0 ] PTR void 
  6540 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6541 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;		None
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      enum E358
  6546 ;; Registers used:
  6547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6553 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;Total ram usage:        1 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    8
  6560 ;; This function calls:
  6561 ;;		_i2c_setBuffer
  6562 ;;		_i2c_setDataCompleteCallback
  6563 ;; This function is called by:
  6564 ;;		_i2c_write1ByteRegister
  6565 ;;		_do_I2C_DO_ADDRESS_NACK
  6566 ;;		_do_I2C_TX
  6567 ;;		_do_I2C_RX
  6568 ;;		_do_I2C_TX_EMPTY
  6569 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6570 ;;		i1_do_I2C_TX
  6571 ;;		i1_do_I2C_RX
  6572 ;;		i1_do_I2C_TX_EMPTY
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           
  6577                           ;psect for function _wr1RegCompleteHandler
  6578  0703                     _wr1RegCompleteHandler:	
  6579                           
  6580                           ;Skip over the trampoline to the duplicate function for level 1
  6581  0703  1C7E               	btfss	126,0
  6582  0704  2F07               	goto	l4706
  6583  0705  3187  2F92         	ljmp	i1l5048
  6584  0707                     _wr1RegCompleteHandler$intlevel0:	
  6585  0707                     l4706:	
  6586                           ;incstack = 0
  6587                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6588                           
  6589                           
  6590                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
  6591  0707  3001               	movlw	1
  6592  0708  0020               	movlb	0	; select bank0
  6593  0709  00D8               	movwf	i2c_setBuffer@bufferSize
  6594  070A  3000               	movlw	0
  6595  070B  00D9               	movwf	i2c_setBuffer@bufferSize+1
  6596  070C  0861               	movf	wr1RegCompleteHandler@p,w
  6597  070D  3187  27B4  3187   	fcall	_i2c_setBuffer
  6598                           
  6599                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
  6600  0710  3000               	movlw	0
  6601  0711  0020               	movlb	0	; select bank0
  6602  0712  00DD               	movwf	i2c_setDataCompleteCallback@cb
  6603  0713  00DE               	movwf	i2c_setDataCompleteCallback@cb+1
  6604  0714  01DF               	clrf	i2c_setDataCompleteCallback@p
  6605  0715  3187  27DD         	fcall	_i2c_setDataCompleteCallback
  6606                           
  6607                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
  6608  0717  3004               	movlw	4
  6609  0718  0008               	return
  6610  0719                     __end_of_wr1RegCompleteHandler:	
  6611                           
  6612                           	psect	text43
  6613  0EF9                     __ptext43:	
  6614 ;; *************** function _i2c_restartWrite *****************
  6615 ;; Defined at:
  6616 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  p               1    9[BANK0 ] PTR void 
  6619 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6620 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      enum E358
  6625 ;; Registers used:
  6626 ;;		wreg
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6632 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;Total ram usage:        1 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    6
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_i2c_writeNBytes
  6643 ;;		_i2c_readDataBlock
  6644 ;;		_i2c_write1ByteRegister
  6645 ;;		_i2c_read1ByteRegister
  6646 ;;		_i2c_read2ByteRegister
  6647 ;;		_i2c_write2ByteRegister
  6648 ;;		_do_I2C_DO_ADDRESS_NACK
  6649 ;;		_do_I2C_TX
  6650 ;;		_do_I2C_RX
  6651 ;;		_do_I2C_TX_EMPTY
  6652 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6653 ;;		i1_do_I2C_TX
  6654 ;;		i1_do_I2C_RX
  6655 ;;		i1_do_I2C_TX_EMPTY
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _i2c_restartWrite
  6661  0EF9                     _i2c_restartWrite:	
  6662                           
  6663                           ;Skip over the trampoline to the duplicate function for level 1
  6664  0EF9  1C7E               	btfss	126,0
  6665  0EFA  2EFD               	goto	l4744
  6666  0EFB  3180  2802         	ljmp	i1l5086
  6667  0EFD                     _i2c_restartWrite$intlevel0:	
  6668  0EFD                     l4744:	
  6669                           ;incstack = 0
  6670                           ; Regs used in _i2c_restartWrite: [wreg]
  6671                           
  6672                           
  6673                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
  6674  0EFD  3003               	movlw	3
  6675  0EFE  0008               	return
  6676  0EFF                     __end_of_i2c_restartWrite:	
  6677                           
  6678                           	psect	text44
  6679  0EF3                     __ptext44:	
  6680 ;; *************** function _returnReset *****************
  6681 ;; Defined at:
  6682 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  p               1    9[BANK0 ] PTR void 
  6685 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6686 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      enum E3257
  6691 ;; Registers used:
  6692 ;;		wreg
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6698 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;Total ram usage:        1 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    6
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_i2c_open
  6709 ;;		_do_I2C_DO_ADDRESS_NACK
  6710 ;;		_do_I2C_TX
  6711 ;;		_do_I2C_RX
  6712 ;;		_do_I2C_TX_EMPTY
  6713 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6714 ;;		i1_do_I2C_TX
  6715 ;;		i1_do_I2C_RX
  6716 ;;		i1_do_I2C_TX_EMPTY
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function _returnReset
  6722  0EF3                     _returnReset:	
  6723                           
  6724                           ;Skip over the trampoline to the duplicate function for level 1
  6725  0EF3  1C7E               	btfss	126,0
  6726  0EF4  2EF7               	goto	l4702
  6727  0EF5  318E  2E65         	ljmp	i1l5044
  6728  0EF7                     _returnReset$intlevel0:	
  6729  0EF7                     l4702:	
  6730                           ;incstack = 0
  6731                           ; Regs used in _returnReset: [wreg]
  6732                           
  6733                           
  6734                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
  6735  0EF7  3005               	movlw	5
  6736  0EF8  0008               	return
  6737  0EF9                     __end_of_returnReset:	
  6738                           
  6739                           	psect	text45
  6740  0EED                     __ptext45:	
  6741 ;; *************** function _returnStop *****************
  6742 ;; Defined at:
  6743 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;  p               1    9[BANK0 ] PTR void 
  6746 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6747 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  1    wreg      enum E3257
  6752 ;; Registers used:
  6753 ;;		wreg
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6759 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;Total ram usage:        1 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    6
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_i2c_open
  6770 ;;		_setCallBack
  6771 ;;		_do_I2C_DO_ADDRESS_NACK
  6772 ;;		_do_I2C_TX
  6773 ;;		_do_I2C_RX
  6774 ;;		_do_I2C_TX_EMPTY
  6775 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6776 ;;		i1_do_I2C_TX
  6777 ;;		i1_do_I2C_RX
  6778 ;;		i1_do_I2C_TX_EMPTY
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           
  6783                           ;psect for function _returnStop
  6784  0EED                     _returnStop:	
  6785                           
  6786                           ;Skip over the trampoline to the duplicate function for level 1
  6787  0EED  1C7E               	btfss	126,0
  6788  0EEE  2EF1               	goto	l4698
  6789  0EEF  318E  2E63         	ljmp	i1l5040
  6790  0EF1                     _returnStop$intlevel0:	
  6791  0EF1                     l4698:	
  6792                           ;incstack = 0
  6793                           ; Regs used in _returnStop: [wreg]
  6794                           
  6795                           
  6796                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
  6797  0EF1  3001               	movlw	1
  6798  0EF2  0008               	return
  6799  0EF3                     __end_of_returnStop:	
  6800                           
  6801                           	psect	text46
  6802  0719                     __ptext46:	
  6803 ;; *************** function _wr2RegCompleteHandler *****************
  6804 ;; Defined at:
  6805 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;  p               1    9[BANK0 ] PTR void 
  6808 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6809 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;		None
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  1    wreg      enum E358
  6814 ;; Registers used:
  6815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6821 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;Total ram usage:        1 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    8
  6828 ;; This function calls:
  6829 ;;		_i2c_setBuffer
  6830 ;;		_i2c_setDataCompleteCallback
  6831 ;; This function is called by:
  6832 ;;		_i2c_write2ByteRegister
  6833 ;;		_do_I2C_DO_ADDRESS_NACK
  6834 ;;		_do_I2C_TX
  6835 ;;		_do_I2C_RX
  6836 ;;		_do_I2C_TX_EMPTY
  6837 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6838 ;;		i1_do_I2C_TX
  6839 ;;		i1_do_I2C_RX
  6840 ;;		i1_do_I2C_TX_EMPTY
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           
  6845                           ;psect for function _wr2RegCompleteHandler
  6846  0719                     _wr2RegCompleteHandler:	
  6847                           
  6848                           ;Skip over the trampoline to the duplicate function for level 1
  6849  0719  1C7E               	btfss	126,0
  6850  071A  2F1D               	goto	l4730
  6851  071B  3187  2FA3         	ljmp	i1l5072
  6852  071D                     _wr2RegCompleteHandler$intlevel0:	
  6853  071D                     l4730:	
  6854                           ;incstack = 0
  6855                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6856                           
  6857                           
  6858                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
  6859  071D  3002               	movlw	2
  6860  071E  0020               	movlb	0	; select bank0
  6861  071F  00D8               	movwf	i2c_setBuffer@bufferSize
  6862  0720  3000               	movlw	0
  6863  0721  00D9               	movwf	i2c_setBuffer@bufferSize+1
  6864  0722  0861               	movf	wr2RegCompleteHandler@p,w
  6865  0723  3187  27B4  3187   	fcall	_i2c_setBuffer
  6866                           
  6867                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
  6868  0726  3000               	movlw	0
  6869  0727  0020               	movlb	0	; select bank0
  6870  0728  00DD               	movwf	i2c_setDataCompleteCallback@cb
  6871  0729  00DE               	movwf	i2c_setDataCompleteCallback@cb+1
  6872  072A  01DF               	clrf	i2c_setDataCompleteCallback@p
  6873  072B  3187  27DD         	fcall	_i2c_setDataCompleteCallback
  6874                           
  6875                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
  6876  072D  3004               	movlw	4
  6877  072E  0008               	return
  6878  072F                     __end_of_wr2RegCompleteHandler:	
  6879                           
  6880                           	psect	text47
  6881  07DD                     __ptext47:	
  6882 ;; *************** function _i2c_setDataCompleteCallback *****************
  6883 ;; Defined at:
  6884 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  6887 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6888 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  6889 ;;  p               1    7[BANK0 ] PTR void 
  6890 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6891 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;		None
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  1    wreg      void 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6903 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;Total ram usage:        4 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    7
  6910 ;; This function calls:
  6911 ;;		_setCallBack
  6912 ;; This function is called by:
  6913 ;;		_wr1RegCompleteHandler
  6914 ;;		_rd1RegCompleteHandler
  6915 ;;		_rd2RegCompleteHandler
  6916 ;;		_wr2RegCompleteHandler
  6917 ;;		_rdBlkRegCompleteHandler
  6918 ;;		_i2c_readDataBlock
  6919 ;;		_i2c_write1ByteRegister
  6920 ;;		_i2c_read1ByteRegister
  6921 ;;		_i2c_read2ByteRegister
  6922 ;;		_i2c_write2ByteRegister
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           
  6927                           ;psect for function _i2c_setDataCompleteCallback
  6928  07DD                     _i2c_setDataCompleteCallback:	
  6929                           
  6930                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
  6931                           
  6932                           ;incstack = 0
  6933                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6934  07DD  0020               	movlb	0	; select bank0
  6935  07DE  085E               	movf	i2c_setDataCompleteCallback@cb+1,w
  6936  07DF  00D9               	movwf	setCallBack@cb+1
  6937  07E0  085D               	movf	i2c_setDataCompleteCallback@cb,w
  6938  07E1  00D8               	movwf	setCallBack@cb
  6939  07E2  085F               	movf	i2c_setDataCompleteCallback@p,w
  6940  07E3  00E0               	movwf	??_i2c_setDataCompleteCallback
  6941  07E4  0860               	movf	??_i2c_setDataCompleteCallback,w
  6942  07E5  00DA               	movwf	setCallBack@p
  6943  07E6  3000               	movlw	0
  6944  07E7  3185  25C5         	fcall	_setCallBack
  6945  07E9  0008               	return
  6946  07EA                     __end_of_i2c_setDataCompleteCallback:	
  6947                           
  6948                           	psect	text48
  6949  05C5                     __ptext48:	
  6950 ;; *************** function _setCallBack *****************
  6951 ;; Defined at:
  6952 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  idx             1    wreg     enum E3429
  6955 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
  6956 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6957 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
  6958 ;;  p               1    2[BANK0 ] PTR void 
  6959 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6960 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  idx             1    4[BANK0 ] enum E3429
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      void 
  6965 ;; Registers used:
  6966 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6972 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6975 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;Total ram usage:        5 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    6
  6979 ;; This function calls:
  6980 ;;		Nothing
  6981 ;; This function is called by:
  6982 ;;		_i2c_setDataCompleteCallback
  6983 ;;		_i2c_setAddressNACKCallback
  6984 ;;		_i2c_setWriteCollisionCallback
  6985 ;;		_i2c_setDataNACKCallback
  6986 ;;		_i2c_setTimeOutCallback
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           
  6991                           ;psect for function _setCallBack
  6992  05C5                     _setCallBack:	
  6993                           
  6994                           ;incstack = 0
  6995                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  6996                           ;setCallBack@idx stored from wreg
  6997  05C5  0020               	movlb	0	; select bank0
  6998  05C6  00DC               	movwf	setCallBack@idx
  6999                           
  7000                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
  7001  05C7  0858               	movf	setCallBack@cb,w
  7002  05C8  0459               	iorwf	setCallBack@cb+1,w
  7003  05C9  1903               	btfsc	3,2
  7004  05CA  2DDC               	goto	l4630
  7005                           
  7006                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
  7007  05CB  355C               	lslf	setCallBack@idx,w
  7008  05CC  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7009  05CD  0086               	movwf	6
  7010  05CE  0187               	clrf	7
  7011  05CF  0858               	movf	setCallBack@cb,w
  7012  05D0  3FC0               	movwi [0]fsr1
  7013  05D1  0859               	movf	setCallBack@cb+1,w
  7014  05D2  3FC1               	movwi [1]fsr1
  7015                           
  7016                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
  7017  05D3  085A               	movf	setCallBack@p,w
  7018  05D4  00DB               	movwf	??_setCallBack
  7019  05D5  085C               	movf	setCallBack@idx,w
  7020  05D6  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7021  05D7  0086               	movwf	6
  7022  05D8  0187               	clrf	7
  7023  05D9  085B               	movf	??_setCallBack,w
  7024  05DA  0081               	movwf	1
  7025                           
  7026                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
  7027  05DB  0008               	return
  7028  05DC                     l4630:	
  7029                           
  7030                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
  7031  05DC  355C               	lslf	setCallBack@idx,w
  7032  05DD  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7033  05DE  0086               	movwf	6
  7034  05DF  0187               	clrf	7
  7035  05E0  30ED               	movlw	low _returnStop
  7036  05E1  3FC0               	movwi [0]fsr1
  7037  05E2  300E               	movlw	high _returnStop
  7038  05E3  3FC1               	movwi [1]fsr1
  7039                           
  7040                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
  7041  05E4  085C               	movf	setCallBack@idx,w
  7042  05E5  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7043  05E6  0086               	movwf	6
  7044  05E7  0187               	clrf	7
  7045  05E8  0181               	clrf	1
  7046  05E9  0008               	return
  7047  05EA                     __end_of_setCallBack:	
  7048                           
  7049                           	psect	text49
  7050  07B4                     __ptext49:	
  7051 ;; *************** function _i2c_setBuffer *****************
  7052 ;; Defined at:
  7053 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  buffer          1    wreg     PTR void 
  7056 ;;		 -> rtcData(9), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
  7057 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
  7058 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
  7059 ;;  bufferSize      2    0[BANK0 ] unsigned int 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  buffer          1    3[BANK0 ] PTR void 
  7062 ;;		 -> rtcData(9), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
  7063 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
  7064 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      void 
  7067 ;; Registers used:
  7068 ;;		wreg
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7074 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;Total ram usage:        4 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    6
  7081 ;; This function calls:
  7082 ;;		Nothing
  7083 ;; This function is called by:
  7084 ;;		_wr1RegCompleteHandler
  7085 ;;		_i2c_writeNBytes
  7086 ;;		_rd1RegCompleteHandler
  7087 ;;		_rd2RegCompleteHandler
  7088 ;;		_wr2RegCompleteHandler
  7089 ;;		_rdBlkRegCompleteHandler
  7090 ;;		_i2c_readDataBlock
  7091 ;;		_i2c_write1ByteRegister
  7092 ;;		_i2c_read1ByteRegister
  7093 ;;		_i2c_read2ByteRegister
  7094 ;;		_i2c_write2ByteRegister
  7095 ;;		_i2c_readNBytes
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _i2c_setBuffer
  7101  07B4                     _i2c_setBuffer:	
  7102                           
  7103                           ;incstack = 0
  7104                           ; Regs used in _i2c_setBuffer: [wreg]
  7105                           ;i2c_setBuffer@buffer stored from wreg
  7106  07B4  0020               	movlb	0	; select bank0
  7107  07B5  00DB               	movwf	i2c_setBuffer@buffer
  7108                           
  7109                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
  7110  07B6  1D20               	btfss	_i2c_status,2
  7111  07B7  0008               	return
  7112                           
  7113                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
  7114  07B8  085B               	movf	i2c_setBuffer@buffer,w
  7115  07B9  00DA               	movwf	??_i2c_setBuffer
  7116  07BA  085A               	movf	??_i2c_setBuffer,w
  7117  07BB  00A2               	movwf	low ((_i2c_status| 0+2))
  7118                           
  7119                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
  7120  07BC  0859               	movf	i2c_setBuffer@bufferSize+1,w
  7121  07BD  00A4               	movwf	_i2c_status+4
  7122  07BE  0858               	movf	i2c_setBuffer@bufferSize,w
  7123  07BF  00A3               	movwf	_i2c_status+3
  7124                           
  7125                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
  7126  07C0  1120               	bcf	_i2c_status,2
  7127  07C1  0008               	return
  7128  07C2                     __end_of_i2c_setBuffer:	
  7129                           
  7130                           	psect	text50
  7131  0E8B                     __ptext50:	
  7132 ;; *************** function _i2c_driver_stop *****************
  7133 ;; Defined at:
  7134 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;		None
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;		None
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  1    wreg      void 
  7141 ;; Registers used:
  7142 ;;		None
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;Total ram usage:        0 bytes
  7153 ;; Hardware stack levels used:    1
  7154 ;; Hardware stack levels required when called:    6
  7155 ;; This function calls:
  7156 ;;		Nothing
  7157 ;; This function is called by:
  7158 ;;		_do_I2C_SEND_STOP
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           
  7163                           ;psect for function _i2c_driver_stop
  7164  0E8B                     _i2c_driver_stop:	
  7165                           
  7166                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
  7167                           
  7168                           ;incstack = 0
  7169                           ; Regs used in _i2c_driver_stop: []
  7170  0E8B  0024               	movlb	4	; select bank4
  7171  0E8C  1516               	bsf	22,2	;volatile
  7172  0E8D  0008               	return
  7173  0E8E                     __end_of_i2c_driver_stop:	
  7174                           
  7175                           	psect	text51
  7176  0E88                     __ptext51:	
  7177 ;; *************** function _i2c_driver_restart *****************
  7178 ;; Defined at:
  7179 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      void 
  7186 ;; Registers used:
  7187 ;;		None
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    6
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_do_I2C_SEND_RESTART_READ
  7204 ;;		_do_I2C_SEND_RESTART_WRITE
  7205 ;;		_do_I2C_SEND_RESTART
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           
  7210                           ;psect for function _i2c_driver_restart
  7211  0E88                     _i2c_driver_restart:	
  7212                           
  7213                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in _i2c_driver_restart: []
  7217  0E88  0024               	movlb	4	; select bank4
  7218  0E89  1496               	bsf	22,1	;volatile
  7219  0E8A  0008               	return
  7220  0E8B                     __end_of_i2c_driver_restart:	
  7221                           
  7222                           	psect	text52
  7223  0EBF                     __ptext52:	
  7224 ;; *************** function _i2c_driver_sendACK *****************
  7225 ;; Defined at:
  7226 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;		None
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;		None
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  1    wreg      void 
  7233 ;; Registers used:
  7234 ;;		None
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:        0 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    6
  7247 ;; This function calls:
  7248 ;;		Nothing
  7249 ;; This function is called by:
  7250 ;;		_do_I2C_DO_ACK
  7251 ;;		_do_I2C_RX
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _i2c_driver_sendACK
  7257  0EBF                     _i2c_driver_sendACK:	
  7258                           
  7259                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in _i2c_driver_sendACK: []
  7263  0EBF  0024               	movlb	4	; select bank4
  7264  0EC0  1296               	bcf	22,5	;volatile
  7265                           
  7266                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
  7267  0EC1  1616               	bsf	22,4	;volatile
  7268  0EC2  0008               	return
  7269  0EC3                     __end_of_i2c_driver_sendACK:	
  7270                           
  7271                           	psect	text53
  7272  0E85                     __ptext53:	
  7273 ;; *************** function _i2c_driver_start *****************
  7274 ;; Defined at:
  7275 ;;		line 147 in file "mcc_generated_files/i2c_driver.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;		None
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;		None
  7280 ;; Return value:  Size  Location     Type
  7281 ;;                  1    wreg      void 
  7282 ;; Registers used:
  7283 ;;		None
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;Total ram usage:        0 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    6
  7296 ;; This function calls:
  7297 ;;		Nothing
  7298 ;; This function is called by:
  7299 ;;		_i2c_masterOperation
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           
  7304                           ;psect for function _i2c_driver_start
  7305  0E85                     _i2c_driver_start:	
  7306                           
  7307                           ;mcc_generated_files/i2c_driver.c: 149:     SSPCON2bits.SEN = 1;
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _i2c_driver_start: []
  7311  0E85  0024               	movlb	4	; select bank4
  7312  0E86  1416               	bsf	22,0	;volatile
  7313  0E87  0008               	return
  7314  0E88                     __end_of_i2c_driver_start:	
  7315                           
  7316                           	psect	text54
  7317  072F                     __ptext54:	
  7318 ;; *************** function _i2c_close *****************
  7319 ;; Defined at:
  7320 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;		None
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;  ret             1    1[BANK0 ] enum E3252
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      enum E3252
  7327 ;; Registers used:
  7328 ;;		wreg, status,2, status,0, pclath, cstack
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;Total ram usage:        2 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    7
  7341 ;; This function calls:
  7342 ;;		_mssp_clearIRQ
  7343 ;;		_mssp_disableIRQ
  7344 ;; This function is called by:
  7345 ;;		_i2c_writeNBytes
  7346 ;;		_i2c_readDataBlock
  7347 ;;		_i2c_write1ByteRegister
  7348 ;;		_i2c_read1ByteRegister
  7349 ;;		_i2c_read2ByteRegister
  7350 ;;		_i2c_write2ByteRegister
  7351 ;;		_i2c_readNBytes
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           
  7356                           ;psect for function _i2c_close
  7357  072F                     _i2c_close:	
  7358                           
  7359                           ;mcc_generated_files/drivers/i2c_master.c: 164:     i2c_error_t ret = I2C_BUSY;
  7360                           
  7361                           ;incstack = 0
  7362                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  7363  072F  0020               	movlb	0	; select bank0
  7364  0730  01D9               	clrf	i2c_close@ret
  7365  0731  0AD9               	incf	i2c_close@ret,f
  7366                           
  7367                           ;mcc_generated_files/drivers/i2c_master.c: 165:     if(!i2c_status.busy)
  7368  0732  1820               	btfsc	_i2c_status,0
  7369  0733  2F43               	goto	l83
  7370                           
  7371                           ;mcc_generated_files/drivers/i2c_master.c: 166:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 167:         i2c_status.inUse = 0;
  7372  0734  10A0               	bcf	_i2c_status,1
  7373                           
  7374                           ;mcc_generated_files/drivers/i2c_master.c: 169:         i2c_status.address = 0xff;
  7375  0735  30FF               	movlw	255
  7376  0736  00D8               	movwf	??_i2c_close
  7377  0737  0858               	movf	??_i2c_close,w
  7378  0738  00A1               	movwf	_i2c_status+1
  7379                           
  7380                           ;mcc_generated_files/drivers/i2c_master.c: 170:         mssp_clearIRQ();
  7381  0739  318E  267F  3187   	fcall	_mssp_clearIRQ
  7382                           
  7383                           ;mcc_generated_files/drivers/i2c_master.c: 171:         mssp_disableIRQ();
  7384  073C  318E  2682         	fcall	_mssp_disableIRQ
  7385                           
  7386                           ;mcc_generated_files/drivers/i2c_master.c: 172:         ret = i2c_status.error;
  7387  073E  0020               	movlb	0	; select bank0
  7388  073F  082A               	movf	_i2c_status+10,w
  7389  0740  00D8               	movwf	??_i2c_close
  7390  0741  0858               	movf	??_i2c_close,w
  7391  0742  00D9               	movwf	i2c_close@ret
  7392  0743                     l83:	
  7393                           ;mcc_generated_files/drivers/i2c_master.c: 173:     }
  7394                           
  7395                           
  7396                           ;mcc_generated_files/drivers/i2c_master.c: 174:     return ret;
  7397  0743  0859               	movf	i2c_close@ret,w
  7398  0744  0008               	return
  7399  0745                     __end_of_i2c_close:	
  7400                           
  7401                           	psect	text55
  7402  0E82                     __ptext55:	
  7403 ;; *************** function _mssp_disableIRQ *****************
  7404 ;; Defined at:
  7405 ;;		line 49 in file "mcc_generated_files/i2c_driver.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;		None
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		None
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;Total ram usage:        0 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    6
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		_i2c_close
  7430 ;;		_i2c_setTimeOut
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function _mssp_disableIRQ
  7436  0E82                     _mssp_disableIRQ:	
  7437                           
  7438                           ;mcc_generated_files/i2c_driver.c: 51: __bit i2c_driver_open(void)
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _mssp_disableIRQ: []
  7442  0E82  0021               	movlb	1	; select bank1
  7443  0E83  1191               	bcf	17,3	;volatile
  7444  0E84  0008               	return
  7445  0E85                     __end_of_mssp_disableIRQ:	
  7446                           
  7447                           	psect	text56
  7448  0E7F                     __ptext56:	
  7449 ;; *************** function _mssp_clearIRQ *****************
  7450 ;; Defined at:
  7451 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		None
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;Total ram usage:        0 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    6
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_i2c_open
  7476 ;;		_i2c_close
  7477 ;;		_i2c_ISR
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           
  7482                           ;psect for function _mssp_clearIRQ
  7483  0E7F                     _mssp_clearIRQ:	
  7484                           
  7485                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in _mssp_clearIRQ: []
  7489  0E7F  0020               	movlb	0	; select bank0
  7490  0E80  1191               	bcf	17,3	;volatile
  7491  0E81  0008               	return
  7492  0E82                     __end_of_mssp_clearIRQ:	
  7493                           
  7494                           	psect	text57
  7495  0528                     __ptext57:	
  7496 ;; *************** function _bcdMinuteIncr *****************
  7497 ;; Defined at:
  7498 ;;		line 125 in file "main.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  mn              1    wreg     unsigned char 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  mn              1    0[BANK0 ] unsigned char 
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      unsigned char 
  7505 ;; Registers used:
  7506 ;;		wreg, status,2, status,0
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;Total ram usage:        1 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    6
  7519 ;; This function calls:
  7520 ;;		Nothing
  7521 ;; This function is called by:
  7522 ;;		_main
  7523 ;; This function uses a non-reentrant model
  7524 ;;
  7525                           
  7526                           
  7527                           ;psect for function _bcdMinuteIncr
  7528  0528                     _bcdMinuteIncr:	
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _bcdMinuteIncr: [wreg+status,2+status,0]
  7532                           ;bcdMinuteIncr@mn stored from wreg
  7533  0528  0020               	movlb	0	; select bank0
  7534  0529  00D8               	movwf	bcdMinuteIncr@mn
  7535                           
  7536                           ;main.c: 127:     if(mn == 0x09) return 0x10;
  7537  052A  3009               	movlw	9
  7538  052B  0658               	xorwf	bcdMinuteIncr@mn,w
  7539  052C  1D03               	btfss	3,2
  7540  052D  2D30               	goto	l5362
  7541  052E  3010               	movlw	16
  7542  052F  0008               	return
  7543  0530                     l5362:	
  7544                           
  7545                           ;main.c: 128:     if(mn == 0x19) return 0x20;
  7546  0530  3019               	movlw	25
  7547  0531  0658               	xorwf	bcdMinuteIncr@mn,w
  7548  0532  1D03               	btfss	3,2
  7549  0533  2D36               	goto	l5368
  7550  0534  3020               	movlw	32
  7551  0535  0008               	return
  7552  0536                     l5368:	
  7553                           
  7554                           ;main.c: 129:     if(mn == 0x29) return 0x30;
  7555  0536  3029               	movlw	41
  7556  0537  0658               	xorwf	bcdMinuteIncr@mn,w
  7557  0538  1D03               	btfss	3,2
  7558  0539  2D3C               	goto	l5374
  7559  053A  3030               	movlw	48
  7560  053B  0008               	return
  7561  053C                     l5374:	
  7562                           
  7563                           ;main.c: 130:     if(mn == 0x39) return 0x40;
  7564  053C  3039               	movlw	57
  7565  053D  0658               	xorwf	bcdMinuteIncr@mn,w
  7566  053E  1D03               	btfss	3,2
  7567  053F  2D42               	goto	l5380
  7568  0540  3040               	movlw	64
  7569  0541  0008               	return
  7570  0542                     l5380:	
  7571                           
  7572                           ;main.c: 131:     if(mn == 0x49) return 0x50;
  7573  0542  3049               	movlw	73
  7574  0543  0658               	xorwf	bcdMinuteIncr@mn,w
  7575  0544  1D03               	btfss	3,2
  7576  0545  2D48               	goto	l5386
  7577  0546  3050               	movlw	80
  7578  0547  0008               	return
  7579  0548                     l5386:	
  7580                           
  7581                           ;main.c: 132:     if(mn == 0x59) return 0x00;
  7582  0548  3059               	movlw	89
  7583  0549  0658               	xorwf	bcdMinuteIncr@mn,w
  7584  054A  1D03               	btfss	3,2
  7585  054B  2D4E               	goto	l5392
  7586  054C  3000               	movlw	0
  7587  054D  0008               	return
  7588  054E                     l5392:	
  7589                           
  7590                           ;main.c: 133:     return (mn + 1);
  7591  054E  0858               	movf	bcdMinuteIncr@mn,w
  7592  054F  3E01               	addlw	1
  7593  0550  0008               	return
  7594  0551                     __end_of_bcdMinuteIncr:	
  7595                           
  7596                           	psect	text58
  7597  0551                     __ptext58:	
  7598 ;; *************** function _bcdMinuteDecr *****************
  7599 ;; Defined at:
  7600 ;;		line 136 in file "main.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;  mn              1    wreg     unsigned char 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  mn              1    0[BANK0 ] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      unsigned char 
  7607 ;; Registers used:
  7608 ;;		wreg, status,2, status,0
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;Total ram usage:        1 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    6
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_main
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           
  7629                           ;psect for function _bcdMinuteDecr
  7630  0551                     _bcdMinuteDecr:	
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _bcdMinuteDecr: [wreg+status,2+status,0]
  7634                           ;bcdMinuteDecr@mn stored from wreg
  7635  0551  0020               	movlb	0	; select bank0
  7636  0552  00D8               	movwf	bcdMinuteDecr@mn
  7637                           
  7638                           ;main.c: 137:     if(mn == 0x00) return 0x59;
  7639  0553  0858               	movf	bcdMinuteDecr@mn,w
  7640  0554  1D03               	btfss	3,2
  7641  0555  2D58               	goto	l5402
  7642  0556  3059               	movlw	89
  7643  0557  0008               	return
  7644  0558                     l5402:	
  7645                           
  7646                           ;main.c: 138:     if(mn == 0x10) return 0x09;
  7647  0558  3010               	movlw	16
  7648  0559  0658               	xorwf	bcdMinuteDecr@mn,w
  7649  055A  1D03               	btfss	3,2
  7650  055B  2D5E               	goto	l5408
  7651  055C  3009               	movlw	9
  7652  055D  0008               	return
  7653  055E                     l5408:	
  7654                           
  7655                           ;main.c: 139:     if(mn == 0x20) return 0x19;
  7656  055E  3020               	movlw	32
  7657  055F  0658               	xorwf	bcdMinuteDecr@mn,w
  7658  0560  1D03               	btfss	3,2
  7659  0561  2D64               	goto	l5414
  7660  0562  3019               	movlw	25
  7661  0563  0008               	return
  7662  0564                     l5414:	
  7663                           
  7664                           ;main.c: 140:     if(mn == 0x30) return 0x29;
  7665  0564  3030               	movlw	48
  7666  0565  0658               	xorwf	bcdMinuteDecr@mn,w
  7667  0566  1D03               	btfss	3,2
  7668  0567  2D6A               	goto	l5420
  7669  0568  3029               	movlw	41
  7670  0569  0008               	return
  7671  056A                     l5420:	
  7672                           
  7673                           ;main.c: 141:     if(mn == 0x40) return 0x39;
  7674  056A  3040               	movlw	64
  7675  056B  0658               	xorwf	bcdMinuteDecr@mn,w
  7676  056C  1D03               	btfss	3,2
  7677  056D  2D70               	goto	l5426
  7678  056E  3039               	movlw	57
  7679  056F  0008               	return
  7680  0570                     l5426:	
  7681                           
  7682                           ;main.c: 142:     if(mn == 0x50) return 0x49;
  7683  0570  3050               	movlw	80
  7684  0571  0658               	xorwf	bcdMinuteDecr@mn,w
  7685  0572  1D03               	btfss	3,2
  7686  0573  2D76               	goto	l5432
  7687  0574  3049               	movlw	73
  7688  0575  0008               	return
  7689  0576                     l5432:	
  7690                           
  7691                           ;main.c: 143:     return (mn - 1);
  7692  0576  0858               	movf	bcdMinuteDecr@mn,w
  7693  0577  3EFF               	addlw	255
  7694  0578  0008               	return
  7695  0579                     __end_of_bcdMinuteDecr:	
  7696                           
  7697                           	psect	text59
  7698  06C0                     __ptext59:	
  7699 ;; *************** function _bcdHourIncr *****************
  7700 ;; Defined at:
  7701 ;;		line 110 in file "main.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  hr              1    wreg     unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  hr              1    0[BANK0 ] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      unsigned char 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;Total ram usage:        1 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    6
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_main
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function _bcdHourIncr
  7731  06C0                     _bcdHourIncr:	
  7732                           
  7733                           ;incstack = 0
  7734                           ; Regs used in _bcdHourIncr: [wreg+status,2+status,0]
  7735                           ;bcdHourIncr@hr stored from wreg
  7736  06C0  0020               	movlb	0	; select bank0
  7737  06C1  00D8               	movwf	bcdHourIncr@hr
  7738                           
  7739                           ;main.c: 112:     if(hr == 0x09) return 0x10;
  7740  06C2  3009               	movlw	9
  7741  06C3  0658               	xorwf	bcdHourIncr@hr,w
  7742  06C4  1D03               	btfss	3,2
  7743  06C5  2EC8               	goto	l5318
  7744  06C6  3010               	movlw	16
  7745  06C7  0008               	return
  7746  06C8                     l5318:	
  7747                           
  7748                           ;main.c: 113:     if(hr == 0x19) return 0x20;
  7749  06C8  3019               	movlw	25
  7750  06C9  0658               	xorwf	bcdHourIncr@hr,w
  7751  06CA  1D03               	btfss	3,2
  7752  06CB  2ECE               	goto	l5324
  7753  06CC  3020               	movlw	32
  7754  06CD  0008               	return
  7755  06CE                     l5324:	
  7756                           
  7757                           ;main.c: 114:     if(hr == 0x23) return 0x00;
  7758  06CE  3023               	movlw	35
  7759  06CF  0658               	xorwf	bcdHourIncr@hr,w
  7760  06D0  1D03               	btfss	3,2
  7761  06D1  2ED4               	goto	l5330
  7762  06D2  3000               	movlw	0
  7763  06D3  0008               	return
  7764  06D4                     l5330:	
  7765                           
  7766                           ;main.c: 115:     return (hr + 1);
  7767  06D4  0858               	movf	bcdHourIncr@hr,w
  7768  06D5  3E01               	addlw	1
  7769  06D6  0008               	return
  7770  06D7                     __end_of_bcdHourIncr:	
  7771                           
  7772                           	psect	text60
  7773  0745                     __ptext60:	
  7774 ;; *************** function _bcdHourDecr *****************
  7775 ;; Defined at:
  7776 ;;		line 118 in file "main.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  hr              1    wreg     unsigned char 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;  hr              1    0[BANK0 ] unsigned char 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      unsigned char 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;Total ram usage:        1 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    6
  7797 ;; This function calls:
  7798 ;;		Nothing
  7799 ;; This function is called by:
  7800 ;;		_main
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           
  7805                           ;psect for function _bcdHourDecr
  7806  0745                     _bcdHourDecr:	
  7807                           
  7808                           ;incstack = 0
  7809                           ; Regs used in _bcdHourDecr: [wreg+status,2+status,0]
  7810                           ;bcdHourDecr@hr stored from wreg
  7811  0745  0020               	movlb	0	; select bank0
  7812  0746  00D8               	movwf	bcdHourDecr@hr
  7813                           
  7814                           ;main.c: 119:     if(hr == 0x00) return 0x23;
  7815  0747  0858               	movf	bcdHourDecr@hr,w
  7816  0748  1D03               	btfss	3,2
  7817  0749  2F4C               	goto	l5340
  7818  074A  3023               	movlw	35
  7819  074B  0008               	return
  7820  074C                     l5340:	
  7821                           
  7822                           ;main.c: 120:     if(hr == 0x10) return 0x09;
  7823  074C  3010               	movlw	16
  7824  074D  0658               	xorwf	bcdHourDecr@hr,w
  7825  074E  1D03               	btfss	3,2
  7826  074F  2F52               	goto	l5346
  7827  0750  3009               	movlw	9
  7828  0751  0008               	return
  7829  0752                     l5346:	
  7830                           
  7831                           ;main.c: 121:     if(hr == 0x20) return 0x19;
  7832  0752  3020               	movlw	32
  7833  0753  0658               	xorwf	bcdHourDecr@hr,w
  7834  0754  1D03               	btfss	3,2
  7835  0755  2F58               	goto	l5352
  7836  0756  3019               	movlw	25
  7837  0757  0008               	return
  7838  0758                     l5352:	
  7839                           
  7840                           ;main.c: 122:     return (hr - 1);
  7841  0758  0858               	movf	bcdHourDecr@hr,w
  7842  0759  3EFF               	addlw	255
  7843  075A  0008               	return
  7844  075B                     __end_of_bcdHourDecr:	
  7845                           
  7846                           	psect	text61
  7847  0FDB                     __ptext61:	
  7848 ;; *************** function _SYSTEM_Initialize *****************
  7849 ;; Defined at:
  7850 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;		None
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      void 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0, pclath, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;Total ram usage:        0 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    8
  7871 ;; This function calls:
  7872 ;;		_OSCILLATOR_Initialize
  7873 ;;		_PIN_MANAGER_Initialize
  7874 ;;		_TMR0_Initialize
  7875 ;;		_WDT_Initialize
  7876 ;; This function is called by:
  7877 ;;		_main
  7878 ;; This function uses a non-reentrant model
  7879 ;;
  7880                           
  7881                           
  7882                           ;psect for function _SYSTEM_Initialize
  7883  0FDB                     _SYSTEM_Initialize:	
  7884                           
  7885                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  7886                           
  7887                           ;incstack = 0
  7888                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7889  0FDB  3184  24A8  318F   	fcall	_PIN_MANAGER_Initialize
  7890                           
  7891                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  7892  0FDE  318F  2787  318F   	fcall	_OSCILLATOR_Initialize
  7893                           
  7894                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  7895  0FE1  318E  26BB  318F   	fcall	_WDT_Initialize
  7896                           
  7897                           ;mcc_generated_files/mcc.c: 56:     TMR0_Initialize();
  7898  0FE4  3187  275B         	fcall	_TMR0_Initialize
  7899  0FE6  0008               	return
  7900  0FE7                     __end_of_SYSTEM_Initialize:	
  7901                           
  7902                           	psect	text62
  7903  0EBB                     __ptext62:	
  7904 ;; *************** function _WDT_Initialize *****************
  7905 ;; Defined at:
  7906 ;;		line 73 in file "mcc_generated_files/mcc.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;		None
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;		None
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		wreg
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;Total ram usage:        0 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    6
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		_SYSTEM_Initialize
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           
  7935                           ;psect for function _WDT_Initialize
  7936  0EBB                     _WDT_Initialize:	
  7937                           
  7938                           ;mcc_generated_files/mcc.c: 76:     WDTCON = 0x12;
  7939                           
  7940                           ;incstack = 0
  7941                           ; Regs used in _WDT_Initialize: [wreg]
  7942  0EBB  3012               	movlw	18
  7943  0EBC  0021               	movlb	1	; select bank1
  7944  0EBD  0097               	movwf	23	;volatile
  7945  0EBE  0008               	return
  7946  0EBF                     __end_of_WDT_Initialize:	
  7947                           
  7948                           	psect	text63
  7949  075B                     __ptext63:	
  7950 ;; *************** function _TMR0_Initialize *****************
  7951 ;; Defined at:
  7952 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;		None
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;		None
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  1    wreg      void 
  7959 ;; Registers used:
  7960 ;;		wreg, status,2, status,0, pclath, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:        1 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    7
  7973 ;; This function calls:
  7974 ;;		_TMR0_SetInterruptHandler
  7975 ;; This function is called by:
  7976 ;;		_SYSTEM_Initialize
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _TMR0_Initialize
  7982  075B                     _TMR0_Initialize:	
  7983                           
  7984                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
  7985                           
  7986                           ;incstack = 0
  7987                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7988  075B  0021               	movlb	1	; select bank1
  7989  075C  0815               	movf	21,w	;volatile
  7990  075D  39C0               	andlw	192
  7991  075E  3817               	iorlw	23
  7992  075F  0095               	movwf	21	;volatile
  7993                           
  7994                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
  7995  0760  3083               	movlw	131
  7996  0761  0020               	movlb	0	; select bank0
  7997  0762  0095               	movwf	21	;volatile
  7998                           
  7999                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
  8000  0763  3083               	movlw	131
  8001  0764  00DA               	movwf	??_TMR0_Initialize
  8002  0765  085A               	movf	??_TMR0_Initialize,w
  8003  0766  00FD               	movwf	_timer0ReloadVal	;volatile
  8004                           
  8005                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  8006  0767  110B               	bcf	11,2	;volatile
  8007                           
  8008                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  8009  0768  168B               	bsf	11,5	;volatile
  8010                           
  8011                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  8012  0769  3060               	movlw	low _TMR0_DefaultInterruptHandler
  8013  076A  00D8               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  8014  076B  300E               	movlw	high _TMR0_DefaultInterruptHandler
  8015  076C  00D9               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  8016  076D  318E  26E7         	fcall	_TMR0_SetInterruptHandler
  8017  076F  0008               	return
  8018  0770                     __end_of_TMR0_Initialize:	
  8019                           
  8020                           	psect	text64
  8021  0EE7                     __ptext64:	
  8022 ;; *************** function _TMR0_SetInterruptHandler *****************
  8023 ;; Defined at:
  8024 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  8027 ;;		 -> displayRefreshISR(1), TMR0_DefaultInterruptHandler(1), 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;		None
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  1    wreg      void 
  8032 ;; Registers used:
  8033 ;;		wreg
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8039 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;Total ram usage:        2 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    6
  8046 ;; This function calls:
  8047 ;;		Nothing
  8048 ;; This function is called by:
  8049 ;;		_TMR0_Initialize
  8050 ;;		_main
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           
  8055                           ;psect for function _TMR0_SetInterruptHandler
  8056  0EE7                     _TMR0_SetInterruptHandler:	
  8057                           
  8058                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  8059                           
  8060                           ;incstack = 0
  8061                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  8062  0EE7  0020               	movlb	0	; select bank0
  8063  0EE8  0859               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  8064  0EE9  00F9               	movwf	_TMR0_InterruptHandler+1
  8065  0EEA  0858               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  8066  0EEB  00F8               	movwf	_TMR0_InterruptHandler
  8067  0EEC  0008               	return
  8068  0EED                     __end_of_TMR0_SetInterruptHandler:	
  8069                           
  8070                           	psect	text65
  8071  04A8                     __ptext65:	
  8072 ;; *************** function _PIN_MANAGER_Initialize *****************
  8073 ;; Defined at:
  8074 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;		None
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;		None
  8079 ;; Return value:  Size  Location     Type
  8080 ;;                  1    wreg      void 
  8081 ;; Registers used:
  8082 ;;		wreg, status,2, status,0, pclath, cstack
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;Total ram usage:        0 bytes
  8093 ;; Hardware stack levels used:    1
  8094 ;; Hardware stack levels required when called:    7
  8095 ;; This function calls:
  8096 ;;		_IOCBF4_SetInterruptHandler
  8097 ;; This function is called by:
  8098 ;;		_SYSTEM_Initialize
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           
  8103                           ;psect for function _PIN_MANAGER_Initialize
  8104  04A8                     _PIN_MANAGER_Initialize:	
  8105                           
  8106                           ;mcc_generated_files/pin_manager.c: 62:     LATE = 0x00;
  8107                           
  8108                           ;incstack = 0
  8109                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8110  04A8  0022               	movlb	2	; select bank2
  8111  04A9  0190               	clrf	16	;volatile
  8112                           
  8113                           ;mcc_generated_files/pin_manager.c: 63:     LATD = 0x00;
  8114  04AA  018F               	clrf	15	;volatile
  8115                           
  8116                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  8117  04AB  018C               	clrf	12	;volatile
  8118                           
  8119                           ;mcc_generated_files/pin_manager.c: 65:     LATB = 0x00;
  8120  04AC  018D               	clrf	13	;volatile
  8121                           
  8122                           ;mcc_generated_files/pin_manager.c: 66:     LATC = 0x00;
  8123  04AD  018E               	clrf	14	;volatile
  8124                           
  8125                           ;mcc_generated_files/pin_manager.c: 71:     TRISE = 0x0D;
  8126  04AE  300D               	movlw	13
  8127  04AF  0021               	movlb	1	; select bank1
  8128  04B0  0090               	movwf	16	;volatile
  8129                           
  8130                           ;mcc_generated_files/pin_manager.c: 72:     TRISA = 0x67;
  8131  04B1  3067               	movlw	103
  8132  04B2  008C               	movwf	12	;volatile
  8133                           
  8134                           ;mcc_generated_files/pin_manager.c: 73:     TRISB = 0xFF;
  8135  04B3  30FF               	movlw	255
  8136  04B4  008D               	movwf	13	;volatile
  8137                           
  8138                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFD;
  8139  04B5  30FD               	movlw	253
  8140  04B6  008E               	movwf	14	;volatile
  8141                           
  8142                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0x00;
  8143  04B7  018F               	clrf	15	;volatile
  8144                           
  8145                           ;mcc_generated_files/pin_manager.c: 80:     ANSELD = 0x00;
  8146  04B8  0023               	movlb	3	; select bank3
  8147  04B9  018F               	clrf	15	;volatile
  8148                           
  8149                           ;mcc_generated_files/pin_manager.c: 81:     ANSELB = 0x20;
  8150  04BA  3020               	movlw	32
  8151  04BB  008D               	movwf	13	;volatile
  8152                           
  8153                           ;mcc_generated_files/pin_manager.c: 82:     ANSELE = 0x05;
  8154  04BC  3005               	movlw	5
  8155  04BD  0090               	movwf	16	;volatile
  8156                           
  8157                           ;mcc_generated_files/pin_manager.c: 83:     ANSELA = 0x27;
  8158  04BE  3027               	movlw	39
  8159  04BF  008C               	movwf	12	;volatile
  8160                           
  8161                           ;mcc_generated_files/pin_manager.c: 88:     WPUE = 0x00;
  8162  04C0  0024               	movlb	4	; select bank4
  8163  04C1  0190               	clrf	16	;volatile
  8164                           
  8165                           ;mcc_generated_files/pin_manager.c: 89:     WPUB = 0x00;
  8166  04C2  018D               	clrf	13	;volatile
  8167                           
  8168                           ;mcc_generated_files/pin_manager.c: 90:     OPTION_REGbits.nWPUEN = 1;
  8169  04C3  0021               	movlb	1	; select bank1
  8170  04C4  1795               	bsf	21,7	;volatile
  8171                           
  8172                           ;mcc_generated_files/pin_manager.c: 96:     APFCON = 0x00;
  8173  04C5  0022               	movlb	2	; select bank2
  8174  04C6  019D               	clrf	29	;volatile
  8175                           
  8176                           ;mcc_generated_files/pin_manager.c: 102:     IOCBFbits.IOCBF4 = 0;
  8177  04C7  0027               	movlb	7	; select bank7
  8178  04C8  1216               	bcf	22,4	;volatile
  8179                           
  8180                           ;mcc_generated_files/pin_manager.c: 104:     IOCBNbits.IOCBN4 = 0;
  8181  04C9  1215               	bcf	21,4	;volatile
  8182                           
  8183                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP4 = 1;
  8184  04CA  1614               	bsf	20,4	;volatile
  8185                           
  8186                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF4_SetInterruptHandler(IOCBF4_DefaultIn
      +                          terruptHandler);
  8187  04CB  305F               	movlw	low _IOCBF4_DefaultInterruptHandler
  8188  04CC  0020               	movlb	0	; select bank0
  8189  04CD  00D8               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
  8190  04CE  300E               	movlw	high _IOCBF4_DefaultInterruptHandler
  8191  04CF  00D9               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
  8192  04D0  318E  26E1         	fcall	_IOCBF4_SetInterruptHandler
  8193                           
  8194                           ;mcc_generated_files/pin_manager.c: 114:     INTCONbits.IOCIE = 1;
  8195  04D2  158B               	bsf	11,3	;volatile
  8196  04D3  0008               	return
  8197  04D4                     __end_of_PIN_MANAGER_Initialize:	
  8198                           
  8199                           	psect	text66
  8200  0EE1                     __ptext66:	
  8201 ;; *************** function _IOCBF4_SetInterruptHandler *****************
  8202 ;; Defined at:
  8203 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  8206 ;;		 -> secondISR(1), IOCBF4_DefaultInterruptHandler(1), 
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;		None
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  1    wreg      void 
  8211 ;; Registers used:
  8212 ;;		wreg
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8218 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;Total ram usage:        2 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:    6
  8225 ;; This function calls:
  8226 ;;		Nothing
  8227 ;; This function is called by:
  8228 ;;		_PIN_MANAGER_Initialize
  8229 ;;		_main
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           
  8234                           ;psect for function _IOCBF4_SetInterruptHandler
  8235  0EE1                     _IOCBF4_SetInterruptHandler:	
  8236                           
  8237                           ;mcc_generated_files/pin_manager.c: 146:     IOCBF4_InterruptHandler = InterruptHandler;
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in _IOCBF4_SetInterruptHandler: [wreg]
  8241  0EE1  0020               	movlb	0	; select bank0
  8242  0EE2  0859               	movf	IOCBF4_SetInterruptHandler@InterruptHandler+1,w
  8243  0EE3  00EE               	movwf	_IOCBF4_InterruptHandler+1
  8244  0EE4  0858               	movf	IOCBF4_SetInterruptHandler@InterruptHandler,w
  8245  0EE5  00ED               	movwf	_IOCBF4_InterruptHandler
  8246  0EE6  0008               	return
  8247  0EE7                     __end_of_IOCBF4_SetInterruptHandler:	
  8248                           
  8249                           	psect	text67
  8250  0F87                     __ptext67:	
  8251 ;; *************** function _OSCILLATOR_Initialize *****************
  8252 ;; Defined at:
  8253 ;;		line 59 in file "mcc_generated_files/mcc.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;		None
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;		None
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      void 
  8260 ;; Registers used:
  8261 ;;		wreg, status,2
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;Total ram usage:        0 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; Hardware stack levels required when called:    6
  8274 ;; This function calls:
  8275 ;;		Nothing
  8276 ;; This function is called by:
  8277 ;;		_SYSTEM_Initialize
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           
  8282                           ;psect for function _OSCILLATOR_Initialize
  8283  0F87                     _OSCILLATOR_Initialize:	
  8284                           
  8285                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x70;
  8286                           
  8287                           ;incstack = 0
  8288                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8289  0F87  3070               	movlw	112
  8290  0F88  0021               	movlb	1	; select bank1
  8291  0F89  0099               	movwf	25	;volatile
  8292                           
  8293                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
  8294  0F8A  0198               	clrf	24	;volatile
  8295                           
  8296                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  8297  0F8B  0022               	movlb	2	; select bank2
  8298  0F8C  0196               	clrf	22	;volatile
  8299  0F8D                     l432:	
  8300                           ;mcc_generated_files/mcc.c: 69:     {;mcc_generated_files/mcc.c: 70:     }
  8301                           
  8302                           
  8303                           ;mcc_generated_files/mcc.c: 68:     while(PLLR == 0)
  8304  0F8D  0021               	movlb	1	; select bank1
  8305  0F8E  1B1A               	btfsc	26,6	;volatile
  8306  0F8F  0008               	return
  8307  0F90  2F8D               	goto	l432
  8308  0F91                     __end_of_OSCILLATOR_Initialize:	
  8309                           
  8310                           	psect	intentry
  8311  0004                     __pintentry:	
  8312 ;; *************** function _INTERRUPT_InterruptManager *****************
  8313 ;; Defined at:
  8314 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;		None
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;		None
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      void 
  8321 ;; Registers used:
  8322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;Total ram usage:        0 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    5
  8335 ;; This function calls:
  8336 ;;		Absolute function
  8337 ;;		_PIN_MANAGER_IOC
  8338 ;;		_TMR0_ISR
  8339 ;;		_i2c_busCollisionISR
  8340 ;;		i1_i2c_ISR
  8341 ;; This function is called by:
  8342 ;;		Interrupt level 1
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346  0004                     _INTERRUPT_InterruptManager:	
  8347                           
  8348                           ;incstack = 0
  8349  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8350                           
  8351                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8352  0005  3180               	pagesel	$
  8353                           
  8354                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  8355  0006  1A8B               	btfsc	11,5	;volatile
  8356  0007  1D0B               	btfss	11,2	;volatile
  8357  0008  280D               	goto	i1l394
  8358                           
  8359                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  8360  0009  318F  2717  3180   	fcall	_TMR0_ISR
  8361                           
  8362                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  8363  000C  282D               	goto	i1l404
  8364  000D                     i1l394:	
  8365                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
  8366                           
  8367  000D  198B               	btfsc	11,3	;volatile
  8368  000E  1C0B               	btfss	11,0	;volatile
  8369  000F  2814               	goto	i1l396
  8370                           
  8371                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         PIN_MANAGER_IOC();
  8372  0010  318E  26D5  3180   	fcall	_PIN_MANAGER_IOC
  8373                           
  8374                           ;mcc_generated_files/interrupt_manager.c: 62:     }
  8375  0013  282D               	goto	i1l404
  8376  0014                     i1l396:	
  8377                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.PEIE == 1)
  8378                           
  8379  0014  1F0B               	btfss	11,6	;volatile
  8380  0015  282D               	goto	i1l404
  8381                           
  8382                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         if(PIE2bits.BCLIE == 1 && PIR2bits.BCLIF == 1)
  8383  0016  0021               	movlb	1	; select bank1
  8384  0017  1D92               	btfss	18,3	;volatile
  8385  0018  2822               	goto	i1l399
  8386  0019  0020               	movlb	0	; select bank0
  8387  001A  1D92               	btfss	18,3	;volatile
  8388  001B  2822               	goto	i1l399
  8389                           
  8390                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c_driver_busCollisionISR();
  8391  001C  087B               	movf	_i2c_driver_busCollisionISR+1,w
  8392  001D  008A               	movwf	10
  8393  001E  087A               	movf	_i2c_driver_busCollisionISR,w
  8394  001F  000A               	callw
  8395  0020  3180               	pagesel	$
  8396                           
  8397                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  8398  0021  282D               	goto	i1l404
  8399  0022                     i1l399:	
  8400                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
  8401                           
  8402  0022  0021               	movlb	1	; select bank1
  8403  0023  1D91               	btfss	17,3	;volatile
  8404  0024  282D               	goto	i1l404
  8405  0025  0020               	movlb	0	; select bank0
  8406  0026  1D91               	btfss	17,3	;volatile
  8407  0027  282D               	goto	i1l404
  8408                           
  8409                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c_driver_i2cISR();
  8410  0028  084A               	movf	_i2c_driver_i2cISR+1,w
  8411  0029  008A               	movwf	10
  8412  002A  0849               	movf	_i2c_driver_i2cISR,w
  8413  002B  000A               	callw
  8414  002C  3180               	pagesel	$
  8415  002D                     i1l404:	
  8416                           ;mcc_generated_files/interrupt_manager.c: 79:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 81:     }
  8417                           
  8418                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  8419                           
  8420  002D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8421  002E  0009               	retfie
  8422  002F                     __end_of_INTERRUPT_InterruptManager:	
  8423                           
  8424                           	psect	text69
  8425  059F                     __ptext69:	
  8426 ;; *************** function i1_i2c_ISR *****************
  8427 ;; Defined at:
  8428 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      void 
  8435 ;; Registers used:
  8436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        3 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    4
  8449 ;; This function calls:
  8450 ;;		i1_do_I2C_DO_ACK
  8451 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8452 ;;		i1_do_I2C_DO_NACK_RESTART
  8453 ;;		i1_do_I2C_DO_NACK_STOP
  8454 ;;		i1_do_I2C_IDLE
  8455 ;;		i1_do_I2C_RCEN
  8456 ;;		i1_do_I2C_RESET
  8457 ;;		i1_do_I2C_RX
  8458 ;;		i1_do_I2C_SEND_ADR_READ
  8459 ;;		i1_do_I2C_SEND_ADR_WRITE
  8460 ;;		i1_do_I2C_SEND_RESTART
  8461 ;;		i1_do_I2C_SEND_RESTART_READ
  8462 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8463 ;;		i1_do_I2C_SEND_STOP
  8464 ;;		i1_do_I2C_TX
  8465 ;;		i1_do_I2C_TX_EMPTY
  8466 ;;		i1_i2c_driver_isNACK
  8467 ;;		i1_mssp_clearIRQ
  8468 ;; This function is called by:
  8469 ;;		_INTERRUPT_InterruptManager
  8470 ;; This function uses a non-reentrant model
  8471 ;;
  8472                           
  8473                           
  8474                           ;psect for function i1_i2c_ISR
  8475  059F                     i1_i2c_ISR:	
  8476  059F                     i1l5436:	
  8477                           ;incstack = 0
  8478                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8479                           
  8480                           
  8481                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
  8482  059F  318E  267C  3185   	fcall	i1_mssp_clearIRQ
  8483                           
  8484                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
  8485  05A2  0020               	movlb	0	; select bank0
  8486  05A3  1DA0               	btfss	_i2c_status,3
  8487  05A4  2DAF               	goto	i1l5444
  8488  05A5  318F  272C  3185   	fcall	i1_i2c_driver_isNACK
  8489  05A8  1C03               	btfss	3,0
  8490  05A9  2DAF               	goto	i1l5444
  8491                           
  8492                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
  8493  05AA  300F               	movlw	15
  8494  05AB  00F3               	movwf	??i1_i2c_ISR
  8495  05AC  0873               	movf	??i1_i2c_ISR,w
  8496  05AD  0020               	movlb	0	; select bank0
  8497  05AE  00A9               	movwf	_i2c_status+9
  8498  05AF                     i1l5444:	
  8499                           
  8500                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
  8501  05AF  0020               	movlb	0	; select bank0
  8502  05B0  0829               	movf	_i2c_status+9,w
  8503  05B1  00F3               	movwf	??i1_i2c_ISR
  8504  05B2  01F4               	clrf	??i1_i2c_ISR+1
  8505  05B3  35F3               	lslf	??i1_i2c_ISR,f
  8506  05B4  0DF4               	rlf	??i1_i2c_ISR+1,f
  8507  05B5  3032               	movlw	low (_fsmStateTable| (0+32768))
  8508  05B6  0773               	addwf	??i1_i2c_ISR,w
  8509  05B7  0084               	movwf	4
  8510  05B8  3086               	movlw	high (_fsmStateTable| (0+32768))
  8511  05B9  3D74               	addwfc	??i1_i2c_ISR+1,w
  8512  05BA  0085               	movwf	5
  8513  05BB  3F01               	moviw [1]fsr0
  8514  05BC  008A               	movwf	10
  8515  05BD  3F00               	moviw [0]fsr0
  8516  05BE  000A               	callw
  8517  05BF  3185               	pagesel	$
  8518  05C0  00F5               	movwf	??i1_i2c_ISR+2
  8519  05C1  0875               	movf	??i1_i2c_ISR+2,w
  8520  05C2  0020               	movlb	0	; select bank0
  8521  05C3  00A9               	movwf	_i2c_status+9
  8522  05C4  0008               	return
  8523  05C5                     __end_ofi1_i2c_ISR:	
  8524                           
  8525                           	psect	text70
  8526  0E7C                     __ptext70:	
  8527 ;; *************** function i1_mssp_clearIRQ *****************
  8528 ;; Defined at:
  8529 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      void 
  8536 ;; Registers used:
  8537 ;;		None
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;Total ram usage:        0 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; This function calls:
  8550 ;;		Nothing
  8551 ;; This function is called by:
  8552 ;;		i1_i2c_ISR
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function i1_mssp_clearIRQ
  8558  0E7C                     i1_mssp_clearIRQ:	
  8559                           
  8560                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
  8561                           
  8562                           ;incstack = 0
  8563                           ; Regs used in i1_mssp_clearIRQ: []
  8564  0E7C  0020               	movlb	0	; select bank0
  8565  0E7D  1191               	bcf	17,3	;volatile
  8566  0E7E  0008               	return
  8567  0E7F                     __end_ofi1_mssp_clearIRQ:	
  8568                           
  8569                           	psect	text71
  8570  035A                     __ptext71:	
  8571 ;; *************** function i1_do_I2C_RX *****************
  8572 ;; Defined at:
  8573 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;		None
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;		None
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      enum E3411
  8580 ;; Registers used:
  8581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;Total ram usage:        3 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    3
  8594 ;; This function calls:
  8595 ;;		Absolute function
  8596 ;;		i1_do_I2C_DO_NACK_RESTART
  8597 ;;		i1_do_I2C_DO_NACK_STOP
  8598 ;;		i1_i2c_driver_getRXData
  8599 ;;		i1_i2c_driver_sendACK
  8600 ;;		i1_i2c_restartWrite
  8601 ;;		i1_rd1RegCompleteHandler
  8602 ;;		i1_rd2RegCompleteHandler
  8603 ;;		i1_rdBlkRegCompleteHandler
  8604 ;;		i1_returnReset
  8605 ;;		i1_returnStop
  8606 ;;		i1_wr1RegCompleteHandler
  8607 ;;		i1_wr2RegCompleteHandler
  8608 ;; This function is called by:
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           
  8613                           ;psect for function i1_do_I2C_RX
  8614  035A                     i1_do_I2C_RX:	
  8615  035A                     i1l5224:	
  8616                           ;incstack = 0
  8617                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8618                           
  8619                           
  8620                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
  8621  035A  318E  2676  3183   	fcall	i1_i2c_driver_getRXData
  8622  035D  00F0               	movwf	??i1_do_I2C_RX
  8623  035E  0020               	movlb	0	; select bank0
  8624  035F  0822               	movf	low ((_i2c_status| 0+2)),w
  8625  0360  0086               	movwf	6
  8626  0361  0187               	clrf	7
  8627  0362  0870               	movf	??i1_do_I2C_RX,w
  8628  0363  0081               	movwf	1
  8629  0364  3001               	movlw	1
  8630  0365  00F0               	movwf	??i1_do_I2C_RX
  8631  0366  0870               	movf	??i1_do_I2C_RX,w
  8632  0367  07A2               	addwf	low ((_i2c_status| 0+2)),f
  8633                           
  8634                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
  8635  0368  3001               	movlw	1
  8636  0369  02A3               	subwf	_i2c_status+3,f
  8637  036A  3000               	movlw	0
  8638  036B  3BA4               	subwfb	_i2c_status+4,f
  8639  036C  0823               	movf	_i2c_status+3,w
  8640  036D  0424               	iorwf	_i2c_status+4,w
  8641  036E  1903               	btfsc	3,2
  8642  036F  2B74               	goto	i1l173
  8643                           
  8644                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
  8645  0370  318E  2697         	fcall	i1_i2c_driver_sendACK
  8646                           
  8647                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
  8648  0372  3005               	movlw	5
  8649  0373  0008               	return
  8650  0374                     i1l173:	
  8651                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
  8652                           
  8653                           
  8654                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
  8655  0374  1520               	bsf	_i2c_status,2
  8656                           
  8657                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  8658  0375  2B7C               	goto	i1l5248
  8659  0376                     i1l5238:	
  8660                           
  8661                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
  8662  0376  318E  26B7         	fcall	i1_do_I2C_DO_NACK_RESTART
  8663  0378  0008               	return
  8664  0379                     i1l5242:	
  8665                           
  8666                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
  8667  0379  318E  26B3         	fcall	i1_do_I2C_DO_NACK_STOP
  8668  037B  0008               	return
  8669  037C                     i1l5248:	
  8670  037C  0837               	movf	low ((_i2c_status| 0+23)),w
  8671  037D  00F0               	movwf	??i1_do_I2C_RX
  8672  037E  0870               	movf	??i1_do_I2C_RX,w
  8673  037F  00D9               	movwf	i1wr1RegCompleteHandler@p
  8674  0380  300B               	movlw	11
  8675  0381  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8676  0382  0086               	movwf	6
  8677  0383  0187               	clrf	7
  8678  0384  3F41               	moviw [1]fsr1
  8679  0385  008A               	movwf	10
  8680  0386  3F40               	moviw [0]fsr1
  8681  0387  000A               	callw
  8682  0388  3183               	pagesel	$
  8683  0389  00F1               	movwf	??i1_do_I2C_RX+1
  8684  038A  01F2               	clrf	??i1_do_I2C_RX+2
  8685                           
  8686                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8687                           ; Switch size 1, requested type "simple"
  8688                           ; Number of cases is 1, Range of values is 0 to 0
  8689                           ; switch strategies available:
  8690                           ; Name         Instructions Cycles
  8691                           ; simple_byte            4     3 (average)
  8692                           ; direct_byte            8     6 (fixed)
  8693                           ; jumptable            260     6 (fixed)
  8694                           ;	Chosen strategy is simple_byte
  8695  038B  0872               	movf	??i1_do_I2C_RX+2,w
  8696  038C  3A00               	xorlw	0	; case 0
  8697  038D  1903               	skipnz
  8698  038E  2B90               	goto	i1l5902
  8699  038F  2B79               	goto	i1l5242
  8700  0390                     i1l5902:	
  8701                           
  8702                           ; Switch size 1, requested type "simple"
  8703                           ; Number of cases is 4, Range of values is 1 to 4
  8704                           ; switch strategies available:
  8705                           ; Name         Instructions Cycles
  8706                           ; simple_byte           13     7 (average)
  8707                           ; direct_byte           17     9 (fixed)
  8708                           ; jumptable            263     9 (fixed)
  8709                           ;	Chosen strategy is simple_byte
  8710  0390  0871               	movf	??i1_do_I2C_RX+1,w
  8711  0391  3A01               	xorlw	1	; case 1
  8712  0392  1903               	skipnz
  8713  0393  2B79               	goto	i1l5242
  8714  0394  3A03               	xorlw	3	; case 2
  8715  0395  1903               	skipnz
  8716  0396  2B76               	goto	i1l5238
  8717  0397  3A01               	xorlw	1	; case 3
  8718  0398  1903               	skipnz
  8719  0399  2B76               	goto	i1l5238
  8720  039A  3A07               	xorlw	7	; case 4
  8721  039B  1903               	skipnz
  8722  039C  2B79               	goto	i1l5242
  8723  039D  2B79               	goto	i1l5242
  8724  039E  0008               	return
  8725  039F                     __end_ofi1_do_I2C_RX:	
  8726                           
  8727                           	psect	text72
  8728  027B                     __ptext72:	
  8729 ;; *************** function i1_do_I2C_TX *****************
  8730 ;; Defined at:
  8731 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      enum E3411
  8738 ;; Registers used:
  8739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;Total ram usage:        3 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    3
  8752 ;; This function calls:
  8753 ;;		Absolute function
  8754 ;;		i1_do_I2C_SEND_RESTART_READ
  8755 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8756 ;;		i1_do_I2C_SEND_STOP
  8757 ;;		i1_i2c_driver_TXData
  8758 ;;		i1_i2c_driver_isNACK
  8759 ;;		i1_i2c_restartWrite
  8760 ;;		i1_rd1RegCompleteHandler
  8761 ;;		i1_rd2RegCompleteHandler
  8762 ;;		i1_rdBlkRegCompleteHandler
  8763 ;;		i1_returnReset
  8764 ;;		i1_returnStop
  8765 ;;		i1_wr1RegCompleteHandler
  8766 ;;		i1_wr2RegCompleteHandler
  8767 ;; This function is called by:
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           
  8772                           ;psect for function i1_do_I2C_TX
  8773  027B                     i1_do_I2C_TX:	
  8774  027B                     i1l5190:	
  8775                           ;incstack = 0
  8776                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8777                           
  8778                           
  8779                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
  8780  027B  318F  272C  3182   	fcall	i1_i2c_driver_isNACK
  8781  027E  1803               	btfsc	3,0
  8782  027F  2A8A               	goto	i1l5208
  8783  0280  2AAD               	goto	i1l157
  8784  0281                     i1l5194:	
  8785                           
  8786                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
  8787  0281  318E  269F         	fcall	i1_do_I2C_SEND_RESTART_READ
  8788  0283  0008               	return
  8789  0284                     i1l5198:	
  8790                           
  8791                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
  8792  0284  318E  26A3         	fcall	i1_do_I2C_SEND_RESTART_WRITE
  8793  0286  0008               	return
  8794  0287                     i1l5202:	
  8795                           
  8796                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
  8797  0287  318E  26AB         	fcall	i1_do_I2C_SEND_STOP
  8798  0289  0008               	return
  8799  028A                     i1l5208:	
  8800  028A  0020               	movlb	0	; select bank0
  8801  028B  083A               	movf	low ((_i2c_status| 0+26)),w
  8802  028C  00F0               	movwf	??i1_do_I2C_TX
  8803  028D  0870               	movf	??i1_do_I2C_TX,w
  8804  028E  00D9               	movwf	i1wr1RegCompleteHandler@p
  8805  028F  3011               	movlw	17
  8806  0290  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8807  0291  0086               	movwf	6
  8808  0292  0187               	clrf	7
  8809  0293  3F41               	moviw [1]fsr1
  8810  0294  008A               	movwf	10
  8811  0295  3F40               	moviw [0]fsr1
  8812  0296  000A               	callw
  8813  0297  3182               	pagesel	$
  8814  0298  00F1               	movwf	??i1_do_I2C_TX+1
  8815  0299  01F2               	clrf	??i1_do_I2C_TX+2
  8816                           
  8817                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8818                           ; Switch size 1, requested type "simple"
  8819                           ; Number of cases is 1, Range of values is 0 to 0
  8820                           ; switch strategies available:
  8821                           ; Name         Instructions Cycles
  8822                           ; simple_byte            4     3 (average)
  8823                           ; direct_byte            8     6 (fixed)
  8824                           ; jumptable            260     6 (fixed)
  8825                           ;	Chosen strategy is simple_byte
  8826  029A  0872               	movf	??i1_do_I2C_TX+2,w
  8827  029B  3A00               	xorlw	0	; case 0
  8828  029C  1903               	skipnz
  8829  029D  2A9F               	goto	i1l5904
  8830  029E  2A87               	goto	i1l5202
  8831  029F                     i1l5904:	
  8832                           
  8833                           ; Switch size 1, requested type "simple"
  8834                           ; Number of cases is 4, Range of values is 1 to 4
  8835                           ; switch strategies available:
  8836                           ; Name         Instructions Cycles
  8837                           ; simple_byte           13     7 (average)
  8838                           ; direct_byte           17     9 (fixed)
  8839                           ; jumptable            263     9 (fixed)
  8840                           ;	Chosen strategy is simple_byte
  8841  029F  0871               	movf	??i1_do_I2C_TX+1,w
  8842  02A0  3A01               	xorlw	1	; case 1
  8843  02A1  1903               	skipnz
  8844  02A2  2A87               	goto	i1l5202
  8845  02A3  3A03               	xorlw	3	; case 2
  8846  02A4  1903               	skipnz
  8847  02A5  2A81               	goto	i1l5194
  8848  02A6  3A01               	xorlw	1	; case 3
  8849  02A7  1903               	skipnz
  8850  02A8  2A84               	goto	i1l5198
  8851  02A9  3A07               	xorlw	7	; case 4
  8852  02AA  1903               	skipnz
  8853  02AB  2A87               	goto	i1l5202
  8854  02AC  2A87               	goto	i1l5202
  8855  02AD                     i1l157:	
  8856                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
  8857                           
  8858                           
  8859                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
  8860  02AD  0020               	movlb	0	; select bank0
  8861  02AE  11A0               	bcf	_i2c_status,3
  8862                           
  8863                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
  8864  02AF  3002               	movlw	2
  8865  02B0  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8866  02B1  0086               	movwf	6
  8867  02B2  0187               	clrf	7
  8868  02B3  3F40               	moviw [0]fsr1
  8869  02B4  0084               	movwf	4
  8870  02B5  0185               	clrf	5
  8871  02B6  0A81               	incf	1,f
  8872  02B7  0800               	movf	0,w
  8873  02B8  318E  26CB  3182   	fcall	i1_i2c_driver_TXData
  8874                           
  8875                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
  8876  02BB  3001               	movlw	1
  8877  02BC  0020               	movlb	0	; select bank0
  8878  02BD  02A3               	subwf	_i2c_status+3,f
  8879  02BE  3000               	movlw	0
  8880  02BF  3BA4               	subwfb	_i2c_status+4,f
  8881  02C0  0823               	movf	_i2c_status+3,w
  8882  02C1  0424               	iorwf	_i2c_status+4,w
  8883  02C2  1D03               	btfss	3,2
  8884  02C3  2AC6               	goto	i1l5216
  8885  02C4  3006               	movlw	6
  8886  02C5  0008               	return
  8887  02C6                     i1l5216:	
  8888  02C6  3003               	movlw	3
  8889  02C7  0008               	return
  8890  02C8                     __end_ofi1_do_I2C_TX:	
  8891                           
  8892                           	psect	text73
  8893  04FE                     __ptext73:	
  8894 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
  8895 ;; Defined at:
  8896 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      enum E3411
  8903 ;; Registers used:
  8904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:        3 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    3
  8917 ;; This function calls:
  8918 ;;		Absolute function
  8919 ;;		i1_do_I2C_SEND_RESTART
  8920 ;;		i1_do_I2C_SEND_STOP
  8921 ;;		i1_i2c_restartWrite
  8922 ;;		i1_rd1RegCompleteHandler
  8923 ;;		i1_rd2RegCompleteHandler
  8924 ;;		i1_rdBlkRegCompleteHandler
  8925 ;;		i1_returnReset
  8926 ;;		i1_returnStop
  8927 ;;		i1_wr1RegCompleteHandler
  8928 ;;		i1_wr2RegCompleteHandler
  8929 ;; This function is called by:
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           
  8934                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
  8935  04FE                     i1_do_I2C_DO_ADDRESS_NACK:	
  8936  04FE                     i1l5170:	
  8937                           ;incstack = 0
  8938                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8939                           
  8940                           
  8941                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
  8942  04FE  0020               	movlb	0	; select bank0
  8943  04FF  11A0               	bcf	_i2c_status,3
  8944                           
  8945                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
  8946  0500  3002               	movlw	2
  8947  0501  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  8948  0502  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  8949  0503  00AA               	movwf	_i2c_status+10
  8950                           
  8951                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
  8952  0504  2D0B               	goto	i1l5184
  8953  0505                     i1l5174:	
  8954                           
  8955                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
  8956  0505  318E  26A7         	fcall	i1_do_I2C_SEND_RESTART
  8957  0507  0008               	return
  8958  0508                     i1l5178:	
  8959                           
  8960                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
  8961  0508  318E  26AB         	fcall	i1_do_I2C_SEND_STOP
  8962  050A  0008               	return
  8963  050B                     i1l5184:	
  8964  050B  0839               	movf	low ((_i2c_status| 0+25)),w
  8965  050C  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  8966  050D  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  8967  050E  00D9               	movwf	i1wr1RegCompleteHandler@p
  8968  050F  300F               	movlw	15
  8969  0510  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8970  0511  0086               	movwf	6
  8971  0512  0187               	clrf	7
  8972  0513  3F41               	moviw [1]fsr1
  8973  0514  008A               	movwf	10
  8974  0515  3F40               	moviw [0]fsr1
  8975  0516  000A               	callw
  8976  0517  3184               	pagesel	$
  8977  0518  00F1               	movwf	??i1_do_I2C_DO_ADDRESS_NACK+1
  8978  0519  01F2               	clrf	??i1_do_I2C_DO_ADDRESS_NACK+2
  8979                           
  8980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8981                           ; Switch size 1, requested type "simple"
  8982                           ; Number of cases is 1, Range of values is 0 to 0
  8983                           ; switch strategies available:
  8984                           ; Name         Instructions Cycles
  8985                           ; simple_byte            4     3 (average)
  8986                           ; direct_byte            8     6 (fixed)
  8987                           ; jumptable            260     6 (fixed)
  8988                           ;	Chosen strategy is simple_byte
  8989  051A  0872               	movf	??i1_do_I2C_DO_ADDRESS_NACK+2,w
  8990  051B  3A00               	xorlw	0	; case 0
  8991  051C  1903               	skipnz
  8992  051D  2D1F               	goto	i1l5906
  8993  051E  2D08               	goto	i1l5178
  8994  051F                     i1l5906:	
  8995                           
  8996                           ; Switch size 1, requested type "simple"
  8997                           ; Number of cases is 2, Range of values is 2 to 3
  8998                           ; switch strategies available:
  8999                           ; Name         Instructions Cycles
  9000                           ; simple_byte            7     4 (average)
  9001                           ; direct_byte           13     9 (fixed)
  9002                           ; jumptable            263     9 (fixed)
  9003                           ;	Chosen strategy is simple_byte
  9004  051F  0871               	movf	??i1_do_I2C_DO_ADDRESS_NACK+1,w
  9005  0520  3A02               	xorlw	2	; case 2
  9006  0521  1903               	skipnz
  9007  0522  2D05               	goto	i1l5174
  9008  0523  3A01               	xorlw	1	; case 3
  9009  0524  1903               	skipnz
  9010  0525  2D05               	goto	i1l5174
  9011  0526  2D08               	goto	i1l5178
  9012  0527  0008               	return
  9013  0528                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
  9014                           
  9015                           	psect	text74
  9016  0EB7                     __ptext74:	
  9017 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
  9018 ;; Defined at:
  9019 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;		None
  9022 ;; Auto vars:     Size  Location     Type
  9023 ;;		None
  9024 ;; Return value:  Size  Location     Type
  9025 ;;                  1    wreg      enum E3411
  9026 ;; Registers used:
  9027 ;;		wreg, status,2, status,0, pclath, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;Total ram usage:        0 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    1
  9040 ;; This function calls:
  9041 ;;		i1_i2c_driver_sendNACK
  9042 ;; This function is called by:
  9043 ;;		i1_do_I2C_RX
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           
  9048                           ;psect for function i1_do_I2C_DO_NACK_RESTART
  9049  0EB7                     i1_do_I2C_DO_NACK_RESTART:	
  9050  0EB7                     i1l3676:	
  9051                           ;incstack = 0
  9052                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9053                           
  9054                           
  9055                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
  9056  0EB7  318E  269B         	fcall	i1_i2c_driver_sendNACK
  9057                           
  9058                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
  9059  0EB9  3009               	movlw	9
  9060  0EBA  0008               	return
  9061  0EBB                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
  9062                           
  9063                           	psect	text75
  9064  0EB3                     __ptext75:	
  9065 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
  9066 ;; Defined at:
  9067 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;		None
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;		None
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  1    wreg      enum E3411
  9074 ;; Registers used:
  9075 ;;		wreg, status,2, status,0, pclath, cstack
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;Total ram usage:        0 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; Hardware stack levels required when called:    1
  9088 ;; This function calls:
  9089 ;;		i1_i2c_driver_sendNACK
  9090 ;; This function is called by:
  9091 ;;		i1_do_I2C_RX
  9092 ;; This function uses a non-reentrant model
  9093 ;;
  9094                           
  9095                           
  9096                           ;psect for function i1_do_I2C_DO_NACK_STOP
  9097  0EB3                     i1_do_I2C_DO_NACK_STOP:	
  9098  0EB3                     i1l3670:	
  9099                           ;incstack = 0
  9100                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9101                           
  9102                           
  9103                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
  9104  0EB3  318E  269B         	fcall	i1_i2c_driver_sendNACK
  9105                           
  9106                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
  9107  0EB5  300A               	movlw	10
  9108  0EB6  0008               	return
  9109  0EB7                     __end_ofi1_do_I2C_DO_NACK_STOP:	
  9110                           
  9111                           	psect	text76
  9112  0EAF                     __ptext76:	
  9113 ;; *************** function i1_do_I2C_DO_ACK *****************
  9114 ;; Defined at:
  9115 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;		None
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;		None
  9120 ;; Return value:  Size  Location     Type
  9121 ;;                  1    wreg      enum E3411
  9122 ;; Registers used:
  9123 ;;		wreg, status,2, status,0, pclath, cstack
  9124 ;; Tracked objects:
  9125 ;;		On entry : 0/0
  9126 ;;		On exit  : 0/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;Total ram usage:        0 bytes
  9134 ;; Hardware stack levels used:    1
  9135 ;; Hardware stack levels required when called:    1
  9136 ;; This function calls:
  9137 ;;		i1_i2c_driver_sendACK
  9138 ;; This function is called by:
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           
  9143                           ;psect for function i1_do_I2C_DO_ACK
  9144  0EAF                     i1_do_I2C_DO_ACK:	
  9145  0EAF                     i1l3882:	
  9146                           ;incstack = 0
  9147                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  9148                           
  9149                           
  9150                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
  9151  0EAF  318E  2697         	fcall	i1_i2c_driver_sendACK
  9152                           
  9153                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
  9154  0EB1  3005               	movlw	5
  9155  0EB2  0008               	return
  9156  0EB3                     __end_ofi1_do_I2C_DO_ACK:	
  9157                           
  9158                           	psect	text77
  9159  0EDB                     __ptext77:	
  9160 ;; *************** function i1_do_I2C_RCEN *****************
  9161 ;; Defined at:
  9162 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;		None
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      enum E3411
  9169 ;; Registers used:
  9170 ;;		wreg, status,2, status,0, pclath, cstack
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;Total ram usage:        0 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    1
  9183 ;; This function calls:
  9184 ;;		i1_i2c_driver_startRX
  9185 ;; This function is called by:
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           
  9190                           ;psect for function i1_do_I2C_RCEN
  9191  0EDB                     i1_do_I2C_RCEN:	
  9192  0EDB                     i1l3874:	
  9193                           ;incstack = 0
  9194                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9195                           
  9196                           
  9197                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
  9198  0EDB  0020               	movlb	0	; select bank0
  9199  0EDC  11A0               	bcf	_i2c_status,3
  9200                           
  9201                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
  9202  0EDD  318E  2673         	fcall	i1_i2c_driver_startRX
  9203                           
  9204                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
  9205  0EDF  3004               	movlw	4
  9206  0EE0  0008               	return
  9207  0EE1                     __end_ofi1_do_I2C_RCEN:	
  9208                           
  9209                           	psect	text78
  9210  0F25                     __ptext78:	
  9211 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
  9212 ;; Defined at:
  9213 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;		None
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;		None
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      enum E3411
  9220 ;; Registers used:
  9221 ;;		wreg, status,2, status,0, pclath, cstack
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;Total ram usage:        0 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    1
  9234 ;; This function calls:
  9235 ;;		i1_i2c_driver_TXData
  9236 ;; This function is called by:
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
  9242  0F25                     i1_do_I2C_SEND_ADR_WRITE:	
  9243  0F25                     i1l3866:	
  9244                           ;incstack = 0
  9245                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9246                           
  9247                           
  9248                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
  9249  0F25  0020               	movlb	0	; select bank0
  9250  0F26  15A0               	bsf	_i2c_status,3
  9251                           
  9252                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
  9253  0F27  3521               	lslf	_i2c_status+1,w
  9254  0F28  318E  26CB         	fcall	i1_i2c_driver_TXData
  9255                           
  9256                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
  9257  0F2A  3003               	movlw	3
  9258  0F2B  0008               	return
  9259  0F2C                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
  9260                           
  9261                           	psect	text79
  9262  0F34                     __ptext79:	
  9263 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
  9264 ;; Defined at:
  9265 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;		None
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;		None
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  1    wreg      enum E3411
  9272 ;; Registers used:
  9273 ;;		wreg, status,2, status,0, pclath, cstack
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;Total ram usage:        0 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    1
  9286 ;; This function calls:
  9287 ;;		i1_i2c_driver_TXData
  9288 ;; This function is called by:
  9289 ;; This function uses a non-reentrant model
  9290 ;;
  9291                           
  9292                           
  9293                           ;psect for function i1_do_I2C_SEND_ADR_READ
  9294  0F34                     i1_do_I2C_SEND_ADR_READ:	
  9295  0F34                     i1l3858:	
  9296                           ;incstack = 0
  9297                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  9298                           
  9299                           
  9300                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
  9301  0F34  0020               	movlb	0	; select bank0
  9302  0F35  15A0               	bsf	_i2c_status,3
  9303                           
  9304                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
  9305  0F36  1403               	setc
  9306  0F37  0D21               	rlf	_i2c_status+1,w
  9307  0F38  318E  26CB         	fcall	i1_i2c_driver_TXData
  9308                           
  9309                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
  9310  0F3A  3005               	movlw	5
  9311  0F3B  0008               	return
  9312  0F3C                     __end_ofi1_do_I2C_SEND_ADR_READ:	
  9313                           
  9314                           	psect	text80
  9315  0EAB                     __ptext80:	
  9316 ;; *************** function i1_do_I2C_SEND_STOP *****************
  9317 ;; Defined at:
  9318 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;		None
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;		None
  9323 ;; Return value:  Size  Location     Type
  9324 ;;                  1    wreg      enum E3411
  9325 ;; Registers used:
  9326 ;;		wreg, status,2, status,0, pclath, cstack
  9327 ;; Tracked objects:
  9328 ;;		On entry : 0/0
  9329 ;;		On exit  : 0/0
  9330 ;;		Unchanged: 0/0
  9331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;Total ram usage:        0 bytes
  9337 ;; Hardware stack levels used:    1
  9338 ;; Hardware stack levels required when called:    1
  9339 ;; This function calls:
  9340 ;;		i1_i2c_driver_stop
  9341 ;; This function is called by:
  9342 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9343 ;;		i1_do_I2C_TX
  9344 ;;		i1_do_I2C_TX_EMPTY
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           
  9349                           ;psect for function i1_do_I2C_SEND_STOP
  9350  0EAB                     i1_do_I2C_SEND_STOP:	
  9351  0EAB                     i1l3664:	
  9352                           ;incstack = 0
  9353                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9354                           
  9355                           
  9356                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
  9357  0EAB  318E  2670         	fcall	i1_i2c_driver_stop
  9358                           
  9359                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
  9360  0EAD  3000               	movlw	0
  9361  0EAE  0008               	return
  9362  0EAF                     __end_ofi1_do_I2C_SEND_STOP:	
  9363                           
  9364                           	psect	text81
  9365  0EA7                     __ptext81:	
  9366 ;; *************** function i1_do_I2C_SEND_RESTART *****************
  9367 ;; Defined at:
  9368 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;		None
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;                  1    wreg      enum E3411
  9375 ;; Registers used:
  9376 ;;		wreg, status,2, status,0, pclath, cstack
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;Total ram usage:        0 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    1
  9389 ;; This function calls:
  9390 ;;		i1_i2c_driver_restart
  9391 ;; This function is called by:
  9392 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9393 ;;		i1_do_I2C_TX_EMPTY
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function i1_do_I2C_SEND_RESTART
  9399  0EA7                     i1_do_I2C_SEND_RESTART:	
  9400  0EA7                     i1l3658:	
  9401                           ;incstack = 0
  9402                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9403                           
  9404                           
  9405                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
  9406  0EA7  318E  266D         	fcall	i1_i2c_driver_restart
  9407                           
  9408                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
  9409  0EA9  3001               	movlw	1
  9410  0EAA  0008               	return
  9411  0EAB                     __end_ofi1_do_I2C_SEND_RESTART:	
  9412                           
  9413                           	psect	text82
  9414  0EA3                     __ptext82:	
  9415 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
  9416 ;; Defined at:
  9417 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;		None
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;		None
  9422 ;; Return value:  Size  Location     Type
  9423 ;;                  1    wreg      enum E3411
  9424 ;; Registers used:
  9425 ;;		wreg, status,2, status,0, pclath, cstack
  9426 ;; Tracked objects:
  9427 ;;		On entry : 0/0
  9428 ;;		On exit  : 0/0
  9429 ;;		Unchanged: 0/0
  9430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;Total ram usage:        0 bytes
  9436 ;; Hardware stack levels used:    1
  9437 ;; Hardware stack levels required when called:    1
  9438 ;; This function calls:
  9439 ;;		i1_i2c_driver_restart
  9440 ;; This function is called by:
  9441 ;;		i1_do_I2C_TX
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           
  9446                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
  9447  0EA3                     i1_do_I2C_SEND_RESTART_WRITE:	
  9448  0EA3                     i1l3652:	
  9449                           ;incstack = 0
  9450                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9451                           
  9452                           
  9453                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
  9454  0EA3  318E  266D         	fcall	i1_i2c_driver_restart
  9455                           
  9456                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
  9457  0EA5  3002               	movlw	2
  9458  0EA6  0008               	return
  9459  0EA7                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
  9460                           
  9461                           	psect	text83
  9462  0E9F                     __ptext83:	
  9463 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
  9464 ;; Defined at:
  9465 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;		None
  9470 ;; Return value:  Size  Location     Type
  9471 ;;                  1    wreg      enum E3411
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0, pclath, cstack
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;Total ram usage:        0 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    1
  9486 ;; This function calls:
  9487 ;;		i1_i2c_driver_restart
  9488 ;; This function is called by:
  9489 ;;		i1_do_I2C_TX
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           
  9494                           ;psect for function i1_do_I2C_SEND_RESTART_READ
  9495  0E9F                     i1_do_I2C_SEND_RESTART_READ:	
  9496  0E9F                     i1l3646:	
  9497                           ;incstack = 0
  9498                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9499                           
  9500                           
  9501                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
  9502  0E9F  318E  266D         	fcall	i1_i2c_driver_restart
  9503                           
  9504                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
  9505  0EA1  3001               	movlw	1
  9506  0EA2  0008               	return
  9507  0EA3                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
  9508                           
  9509                           	psect	text84
  9510  0ED0                     __ptext84:	
  9511 ;; *************** function i1_do_I2C_IDLE *****************
  9512 ;; Defined at:
  9513 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;		None
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  1    wreg      enum E3411
  9520 ;; Registers used:
  9521 ;;		wreg, status,2
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;Total ram usage:        0 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           
  9540                           ;psect for function i1_do_I2C_IDLE
  9541  0ED0                     i1_do_I2C_IDLE:	
  9542  0ED0                     i1l3850:	
  9543                           ;incstack = 0
  9544                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
  9545                           
  9546                           
  9547                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
  9548  0ED0  0020               	movlb	0	; select bank0
  9549  0ED1  1020               	bcf	_i2c_status,0
  9550                           
  9551                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
  9552  0ED2  01AA               	clrf	_i2c_status+10
  9553                           
  9554                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
  9555  0ED3  300E               	movlw	14
  9556  0ED4  0008               	return
  9557  0ED5                     __end_ofi1_do_I2C_IDLE:	
  9558                           
  9559                           	psect	text85
  9560  0F1E                     __ptext85:	
  9561 ;; *************** function i1_do_I2C_RESET *****************
  9562 ;; Defined at:
  9563 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;		None
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;		None
  9568 ;; Return value:  Size  Location     Type
  9569 ;;                  1    wreg      enum E3411
  9570 ;; Registers used:
  9571 ;;		wreg, status,2, status,0, pclath, cstack
  9572 ;; Tracked objects:
  9573 ;;		On entry : 0/0
  9574 ;;		On exit  : 0/0
  9575 ;;		Unchanged: 0/0
  9576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;Total ram usage:        0 bytes
  9582 ;; Hardware stack levels used:    1
  9583 ;; Hardware stack levels required when called:    1
  9584 ;; This function calls:
  9585 ;;		i1_i2c_driver_resetBus
  9586 ;; This function is called by:
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           
  9591                           ;psect for function i1_do_I2C_RESET
  9592  0F1E                     i1_do_I2C_RESET:	
  9593  0F1E                     i1l3840:	
  9594                           ;incstack = 0
  9595                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  9596                           
  9597                           
  9598                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
  9599  0F1E  318E  2661         	fcall	i1_i2c_driver_resetBus
  9600                           
  9601                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
  9602  0F20  0020               	movlb	0	; select bank0
  9603  0F21  1020               	bcf	_i2c_status,0
  9604                           
  9605                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
  9606  0F22  01AA               	clrf	_i2c_status+10
  9607                           
  9608                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
  9609  0F23  300E               	movlw	14
  9610  0F24  0008               	return
  9611  0F25                     __end_ofi1_do_I2C_RESET:	
  9612                           
  9613                           	psect	text86
  9614  0449                     __ptext86:	
  9615 ;; *************** function i1_do_I2C_TX_EMPTY *****************
  9616 ;; Defined at:
  9617 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;		None
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      enum E3411
  9624 ;; Registers used:
  9625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;Total ram usage:        3 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    3
  9638 ;; This function calls:
  9639 ;;		Absolute function
  9640 ;;		i1_do_I2C_SEND_RESTART
  9641 ;;		i1_do_I2C_SEND_STOP
  9642 ;;		i1_i2c_restartWrite
  9643 ;;		i1_mssp_setIRQ
  9644 ;;		i1_rd1RegCompleteHandler
  9645 ;;		i1_rd2RegCompleteHandler
  9646 ;;		i1_rdBlkRegCompleteHandler
  9647 ;;		i1_returnReset
  9648 ;;		i1_returnStop
  9649 ;;		i1_wr1RegCompleteHandler
  9650 ;;		i1_wr2RegCompleteHandler
  9651 ;; This function is called by:
  9652 ;; This function uses a non-reentrant model
  9653 ;;
  9654                           
  9655                           
  9656                           ;psect for function i1_do_I2C_TX_EMPTY
  9657  0449                     i1_do_I2C_TX_EMPTY:	
  9658  0449                     i1l5254:	
  9659                           ;incstack = 0
  9660                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9661                           
  9662                           
  9663                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
  9664  0449  0020               	movlb	0	; select bank0
  9665  044A  1520               	bsf	_i2c_status,2
  9666                           
  9667                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  9668  044B  2C56               	goto	i1l5272
  9669  044C                     i1l5256:	
  9670                           
  9671                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
  9672  044C  318E  26A7         	fcall	i1_do_I2C_SEND_RESTART
  9673  044E  0008               	return
  9674  044F                     i1l5260:	
  9675                           
  9676                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
  9677  044F  318E  2679         	fcall	i1_mssp_setIRQ
  9678                           
  9679                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
  9680  0451  3003               	movlw	3
  9681  0452  0008               	return
  9682  0453                     i1l5266:	
  9683                           
  9684                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
  9685  0453  318E  26AB         	fcall	i1_do_I2C_SEND_STOP
  9686  0455  0008               	return
  9687  0456                     i1l5272:	
  9688  0456  0837               	movf	low ((_i2c_status| 0+23)),w
  9689  0457  00F0               	movwf	??i1_do_I2C_TX_EMPTY
  9690  0458  0870               	movf	??i1_do_I2C_TX_EMPTY,w
  9691  0459  00D9               	movwf	i1wr1RegCompleteHandler@p
  9692  045A  300B               	movlw	11
  9693  045B  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9694  045C  0086               	movwf	6
  9695  045D  0187               	clrf	7
  9696  045E  3F41               	moviw [1]fsr1
  9697  045F  008A               	movwf	10
  9698  0460  3F40               	moviw [0]fsr1
  9699  0461  000A               	callw
  9700  0462  3184               	pagesel	$
  9701  0463  00F1               	movwf	??i1_do_I2C_TX_EMPTY+1
  9702  0464  01F2               	clrf	??i1_do_I2C_TX_EMPTY+2
  9703                           
  9704                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9705                           ; Switch size 1, requested type "simple"
  9706                           ; Number of cases is 1, Range of values is 0 to 0
  9707                           ; switch strategies available:
  9708                           ; Name         Instructions Cycles
  9709                           ; simple_byte            4     3 (average)
  9710                           ; direct_byte            8     6 (fixed)
  9711                           ; jumptable            260     6 (fixed)
  9712                           ;	Chosen strategy is simple_byte
  9713  0465  0872               	movf	??i1_do_I2C_TX_EMPTY+2,w
  9714  0466  3A00               	xorlw	0	; case 0
  9715  0467  1903               	skipnz
  9716  0468  2C6A               	goto	i1l5908
  9717  0469  2C53               	goto	i1l5266
  9718  046A                     i1l5908:	
  9719                           
  9720                           ; Switch size 1, requested type "simple"
  9721                           ; Number of cases is 4, Range of values is 1 to 4
  9722                           ; switch strategies available:
  9723                           ; Name         Instructions Cycles
  9724                           ; simple_byte           13     7 (average)
  9725                           ; direct_byte           17     9 (fixed)
  9726                           ; jumptable            263     9 (fixed)
  9727                           ;	Chosen strategy is simple_byte
  9728  046A  0871               	movf	??i1_do_I2C_TX_EMPTY+1,w
  9729  046B  3A01               	xorlw	1	; case 1
  9730  046C  1903               	skipnz
  9731  046D  2C53               	goto	i1l5266
  9732  046E  3A03               	xorlw	3	; case 2
  9733  046F  1903               	skipnz
  9734  0470  2C4C               	goto	i1l5256
  9735  0471  3A01               	xorlw	1	; case 3
  9736  0472  1903               	skipnz
  9737  0473  2C4C               	goto	i1l5256
  9738  0474  3A07               	xorlw	7	; case 4
  9739  0475  1903               	skipnz
  9740  0476  2C4F               	goto	i1l5260
  9741  0477  2C53               	goto	i1l5266
  9742  0478  0008               	return
  9743  0479                     __end_ofi1_do_I2C_TX_EMPTY:	
  9744                           
  9745                           	psect	text87
  9746  0E79                     __ptext87:	
  9747 ;; *************** function i1_mssp_setIRQ *****************
  9748 ;; Defined at:
  9749 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		None
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;Total ram usage:        0 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; This function calls:
  9770 ;;		Nothing
  9771 ;; This function is called by:
  9772 ;;		i1_do_I2C_TX_EMPTY
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           
  9777                           ;psect for function i1_mssp_setIRQ
  9778  0E79                     i1_mssp_setIRQ:	
  9779                           
  9780                           ;mcc_generated_files/i2c_driver.c: 61:     else
  9781                           
  9782                           ;incstack = 0
  9783                           ; Regs used in i1_mssp_setIRQ: []
  9784  0E79  0020               	movlb	0	; select bank0
  9785  0E7A  1591               	bsf	17,3	;volatile
  9786  0E7B  0008               	return
  9787  0E7C                     __end_ofi1_mssp_setIRQ:	
  9788                           
  9789                           	psect	text88
  9790  0F2C                     __ptext88:	
  9791 ;; *************** function i1_i2c_driver_isNACK *****************
  9792 ;; Defined at:
  9793 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;		None               void
  9800 ;; Registers used:
  9801 ;;		wreg, status,2, status,0
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;Total ram usage:        1 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; This function calls:
  9814 ;;		Nothing
  9815 ;; This function is called by:
  9816 ;;		i1_do_I2C_TX
  9817 ;;		i1_i2c_ISR
  9818 ;; This function uses a non-reentrant model
  9819 ;;
  9820                           
  9821                           
  9822                           ;psect for function i1_i2c_driver_isNACK
  9823  0F2C                     i1_i2c_driver_isNACK:	
  9824                           
  9825                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
  9826                           
  9827                           ;incstack = 0
  9828                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
  9829  0F2C  0024               	movlb	4	; select bank4
  9830  0F2D  0E16               	swapf	22,w	;volatile
  9831  0F2E  0C89               	rrf	9,f
  9832  0F2F  0C89               	rrf	9,f
  9833  0F30  3901               	andlw	1
  9834  0F31  00F0               	movwf	??i1_i2c_driver_isNACK
  9835  0F32  0C70               	rrf	??i1_i2c_driver_isNACK,w
  9836  0F33  0008               	return
  9837  0F34                     __end_ofi1_i2c_driver_isNACK:	
  9838                           
  9839                           	psect	text89
  9840  0ECB                     __ptext89:	
  9841 ;; *************** function i1_i2c_driver_TXData *****************
  9842 ;; Defined at:
  9843 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;  d               1    wreg     unsigned char 
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;  d               1    0[COMMON] unsigned char 
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  1    wreg      void 
  9850 ;; Registers used:
  9851 ;;		wreg
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;Total ram usage:        1 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; This function calls:
  9864 ;;		Nothing
  9865 ;; This function is called by:
  9866 ;;		i1_do_I2C_SEND_ADR_READ
  9867 ;;		i1_do_I2C_SEND_ADR_WRITE
  9868 ;;		i1_do_I2C_TX
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           
  9873                           ;psect for function i1_i2c_driver_TXData
  9874  0ECB                     i1_i2c_driver_TXData:	
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in i1_i2c_driver_TXData: [wreg]
  9878                           ;i1i2c_driver_TXData@d stored from wreg
  9879  0ECB  00F0               	movwf	i1i2c_driver_TXData@d
  9880                           
  9881                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
  9882  0ECC  0870               	movf	i1i2c_driver_TXData@d,w
  9883  0ECD  0024               	movlb	4	; select bank4
  9884  0ECE  0091               	movwf	17	;volatile
  9885  0ECF  0008               	return
  9886  0ED0                     __end_ofi1_i2c_driver_TXData:	
  9887                           
  9888                           	psect	text90
  9889  0E76                     __ptext90:	
  9890 ;; *************** function i1_i2c_driver_getRXData *****************
  9891 ;; Defined at:
  9892 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;		None
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      unsigned char 
  9899 ;; Registers used:
  9900 ;;		wreg
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;Total ram usage:        0 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; This function calls:
  9913 ;;		Nothing
  9914 ;; This function is called by:
  9915 ;;		i1_do_I2C_RX
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           
  9920                           ;psect for function i1_i2c_driver_getRXData
  9921  0E76                     i1_i2c_driver_getRXData:	
  9922                           
  9923                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
  9924                           
  9925                           ;incstack = 0
  9926                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
  9927  0E76  0024               	movlb	4	; select bank4
  9928  0E77  0811               	movf	17,w	;volatile
  9929  0E78  0008               	return
  9930  0E79                     __end_ofi1_i2c_driver_getRXData:	
  9931                           
  9932                           	psect	text91
  9933  0E9B                     __ptext91:	
  9934 ;; *************** function i1_i2c_driver_sendNACK *****************
  9935 ;; Defined at:
  9936 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;		None
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;		None
  9941 ;; Return value:  Size  Location     Type
  9942 ;;                  1    wreg      void 
  9943 ;; Registers used:
  9944 ;;		None
  9945 ;; Tracked objects:
  9946 ;;		On entry : 0/0
  9947 ;;		On exit  : 0/0
  9948 ;;		Unchanged: 0/0
  9949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;Total ram usage:        0 bytes
  9955 ;; Hardware stack levels used:    1
  9956 ;; This function calls:
  9957 ;;		Nothing
  9958 ;; This function is called by:
  9959 ;;		i1_do_I2C_DO_NACK_STOP
  9960 ;;		i1_do_I2C_DO_NACK_RESTART
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           
  9965                           ;psect for function i1_i2c_driver_sendNACK
  9966  0E9B                     i1_i2c_driver_sendNACK:	
  9967                           
  9968                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
  9969                           
  9970                           ;incstack = 0
  9971                           ; Regs used in i1_i2c_driver_sendNACK: []
  9972  0E9B  0024               	movlb	4	; select bank4
  9973  0E9C  1696               	bsf	22,5	;volatile
  9974                           
  9975                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
  9976  0E9D  1616               	bsf	22,4	;volatile
  9977  0E9E  0008               	return
  9978  0E9F                     __end_ofi1_i2c_driver_sendNACK:	
  9979                           
  9980                           	psect	text92
  9981  0E61                     __ptext92:	
  9982 ;; *************** function i1_i2c_driver_resetBus *****************
  9983 ;; Defined at:
  9984 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;		None
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;		None
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  1    wreg      void 
  9991 ;; Registers used:
  9992 ;;		None
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;Total ram usage:        0 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; This function calls:
 10005 ;;		Nothing
 10006 ;; This function is called by:
 10007 ;;		i1_do_I2C_RESET
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           
 10012                           ;psect for function i1_i2c_driver_resetBus
 10013  0E61                     i1_i2c_driver_resetBus:	
 10014                           
 10015                           ;incstack = 0
 10016                           ; Regs used in i1_i2c_driver_resetBus: []
 10017  0E61  0008               	return
 10018  0E62                     __end_ofi1_i2c_driver_resetBus:	
 10019                           
 10020                           	psect	text93
 10021  0E73                     __ptext93:	
 10022 ;; *************** function i1_i2c_driver_startRX *****************
 10023 ;; Defined at:
 10024 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      void 
 10031 ;; Registers used:
 10032 ;;		None
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;Total ram usage:        0 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; This function calls:
 10045 ;;		Nothing
 10046 ;; This function is called by:
 10047 ;;		i1_do_I2C_RCEN
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           
 10052                           ;psect for function i1_i2c_driver_startRX
 10053  0E73                     i1_i2c_driver_startRX:	
 10054                           
 10055                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
 10056                           
 10057                           ;incstack = 0
 10058                           ; Regs used in i1_i2c_driver_startRX: []
 10059  0E73  0024               	movlb	4	; select bank4
 10060  0E74  1596               	bsf	22,3	;volatile
 10061  0E75  0008               	return
 10062  0E76                     __end_ofi1_i2c_driver_startRX:	
 10063                           
 10064                           	psect	text94
 10065  0002                     __ptext94:	
 10066 ;; *************** function i1_i2c_restartWrite *****************
 10067 ;; Defined at:
 10068 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;  p               1    1[BANK0 ] PTR void 
 10071 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10072 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;		None
 10075 ;; Return value:  Size  Location     Type
 10076 ;;                  1    wreg      enum E358
 10077 ;; Registers used:
 10078 ;;		wreg
 10079 ;; Tracked objects:
 10080 ;;		On entry : 0/0
 10081 ;;		On exit  : 0/0
 10082 ;;		Unchanged: 0/0
 10083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10084 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;Total ram usage:        1 bytes
 10089 ;; Hardware stack levels used:    1
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		_do_I2C_DO_ADDRESS_NACK
 10094 ;;		_do_I2C_TX
 10095 ;;		_do_I2C_RX
 10096 ;;		_do_I2C_TX_EMPTY
 10097 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10098 ;;		i1_do_I2C_TX
 10099 ;;		i1_do_I2C_RX
 10100 ;;		i1_do_I2C_TX_EMPTY
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           
 10105                           ;psect for function i1_i2c_restartWrite
 10106  0002                     i1_i2c_restartWrite:	
 10107  0002                     i1l5086:	
 10108                           ;incstack = 0
 10109                           ; Regs used in i1_i2c_restartWrite: [wreg]
 10110                           
 10111                           
 10112                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
 10113  0002  3003               	movlw	3
 10114  0003  0008               	return
 10115  0004                     __end_ofi1_i2c_restartWrite:	
 10116                           
 10117                           	psect	text95
 10118  06A8                     __ptext95:	
 10119 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 10120 ;; Defined at:
 10121 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;  p               1    1[BANK0 ] PTR void 
 10124 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10125 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;		None
 10128 ;; Return value:  Size  Location     Type
 10129 ;;                  1    wreg      enum E358
 10130 ;; Registers used:
 10131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10137 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;Total ram usage:        1 bytes
 10142 ;; Hardware stack levels used:    1
 10143 ;; Hardware stack levels required when called:    2
 10144 ;; This function calls:
 10145 ;;		i1_i2c_setBuffer
 10146 ;;		i1_i2c_setDataCompleteCallback
 10147 ;; This function is called by:
 10148 ;;		_do_I2C_DO_ADDRESS_NACK
 10149 ;;		_do_I2C_TX
 10150 ;;		_do_I2C_RX
 10151 ;;		_do_I2C_TX_EMPTY
 10152 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10153 ;;		i1_do_I2C_TX
 10154 ;;		i1_do_I2C_RX
 10155 ;;		i1_do_I2C_TX_EMPTY
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function i1_rdBlkRegCompleteHandler
 10161  06A8                     i1_rdBlkRegCompleteHandler:	
 10162  06A8                     i1l5080:	
 10163                           ;incstack = 0
 10164                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10165                           
 10166                           
 10167                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 10168  06A8  0020               	movlb	0	; select bank0
 10169  06A9  0859               	movf	i1rdBlkRegCompleteHandler@p,w
 10170  06AA  0086               	movwf	6
 10171  06AB  0187               	clrf	7
 10172  06AC  3F40               	moviw [0]fsr1
 10173  06AD  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10174  06AE  3F41               	moviw [1]fsr1
 10175  06AF  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10176  06B0  0859               	movf	i1rdBlkRegCompleteHandler@p,w
 10177  06B1  3E02               	addlw	2
 10178  06B2  0086               	movwf	6
 10179  06B3  0187               	clrf	7
 10180  06B4  0801               	movf	1,w
 10181  06B5  3187  27C2  3186   	fcall	i1_i2c_setBuffer
 10182                           
 10183                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 10184  06B8  3000               	movlw	0
 10185  06B9  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10186  06BA  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10187  06BB  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10188  06BC  3187  27EA         	fcall	i1_i2c_setDataCompleteCallback
 10189                           
 10190                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
 10191  06BE  3002               	movlw	2
 10192  06BF  0008               	return
 10193  06C0                     __end_ofi1_rdBlkRegCompleteHandler:	
 10194                           
 10195                           	psect	text96
 10196  0770                     __ptext96:	
 10197 ;; *************** function i1_rd2RegCompleteHandler *****************
 10198 ;; Defined at:
 10199 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;  p               1    1[BANK0 ] PTR void 
 10202 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10203 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;		None
 10206 ;; Return value:  Size  Location     Type
 10207 ;;                  1    wreg      enum E358
 10208 ;; Registers used:
 10209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10215 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;Total ram usage:        1 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    2
 10222 ;; This function calls:
 10223 ;;		i1_i2c_setBuffer
 10224 ;;		i1_i2c_setDataCompleteCallback
 10225 ;; This function is called by:
 10226 ;;		_do_I2C_DO_ADDRESS_NACK
 10227 ;;		_do_I2C_TX
 10228 ;;		_do_I2C_RX
 10229 ;;		_do_I2C_TX_EMPTY
 10230 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10231 ;;		i1_do_I2C_TX
 10232 ;;		i1_do_I2C_RX
 10233 ;;		i1_do_I2C_TX_EMPTY
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function i1_rd2RegCompleteHandler
 10239  0770                     i1_rd2RegCompleteHandler:	
 10240  0770                     i1l5064:	
 10241                           ;incstack = 0
 10242                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10243                           
 10244                           
 10245                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
 10246  0770  3002               	movlw	2
 10247  0771  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10248  0772  3000               	movlw	0
 10249  0773  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10250  0774  0020               	movlb	0	; select bank0
 10251  0775  0859               	movf	i1rd2RegCompleteHandler@p,w
 10252  0776  3187  27C2  3187   	fcall	i1_i2c_setBuffer
 10253                           
 10254                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10255  0779  3000               	movlw	0
 10256  077A  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10257  077B  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10258  077C  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10259  077D  3187  27EA         	fcall	i1_i2c_setDataCompleteCallback
 10260                           
 10261                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
 10262  077F  3002               	movlw	2
 10263  0780  0008               	return
 10264  0781                     __end_ofi1_rd2RegCompleteHandler:	
 10265                           
 10266                           	psect	text97
 10267  0781                     __ptext97:	
 10268 ;; *************** function i1_rd1RegCompleteHandler *****************
 10269 ;; Defined at:
 10270 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;  p               1    1[BANK0 ] PTR void 
 10273 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10274 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10275 ;; Auto vars:     Size  Location     Type
 10276 ;;		None
 10277 ;; Return value:  Size  Location     Type
 10278 ;;                  1    wreg      enum E358
 10279 ;; Registers used:
 10280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10286 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;Total ram usage:        1 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:    2
 10293 ;; This function calls:
 10294 ;;		i1_i2c_setBuffer
 10295 ;;		i1_i2c_setDataCompleteCallback
 10296 ;; This function is called by:
 10297 ;;		_do_I2C_DO_ADDRESS_NACK
 10298 ;;		_do_I2C_TX
 10299 ;;		_do_I2C_RX
 10300 ;;		_do_I2C_TX_EMPTY
 10301 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10302 ;;		i1_do_I2C_TX
 10303 ;;		i1_do_I2C_RX
 10304 ;;		i1_do_I2C_TX_EMPTY
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function i1_rd1RegCompleteHandler
 10310  0781                     i1_rd1RegCompleteHandler:	
 10311  0781                     i1l5056:	
 10312                           ;incstack = 0
 10313                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10314                           
 10315                           
 10316                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
 10317  0781  3001               	movlw	1
 10318  0782  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10319  0783  3000               	movlw	0
 10320  0784  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10321  0785  0020               	movlb	0	; select bank0
 10322  0786  0859               	movf	i1rd1RegCompleteHandler@p,w
 10323  0787  3187  27C2  3187   	fcall	i1_i2c_setBuffer
 10324                           
 10325                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10326  078A  3000               	movlw	0
 10327  078B  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10328  078C  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10329  078D  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10330  078E  3187  27EA         	fcall	i1_i2c_setDataCompleteCallback
 10331                           
 10332                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
 10333  0790  3002               	movlw	2
 10334  0791  0008               	return
 10335  0792                     __end_ofi1_rd1RegCompleteHandler:	
 10336                           
 10337                           	psect	text98
 10338  0792                     __ptext98:	
 10339 ;; *************** function i1_wr1RegCompleteHandler *****************
 10340 ;; Defined at:
 10341 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10342 ;; Parameters:    Size  Location     Type
 10343 ;;  p               1    1[BANK0 ] PTR void 
 10344 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10345 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;		None
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      enum E358
 10350 ;; Registers used:
 10351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10357 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;Total ram usage:        1 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    2
 10364 ;; This function calls:
 10365 ;;		i1_i2c_setBuffer
 10366 ;;		i1_i2c_setDataCompleteCallback
 10367 ;; This function is called by:
 10368 ;;		_do_I2C_DO_ADDRESS_NACK
 10369 ;;		_do_I2C_TX
 10370 ;;		_do_I2C_RX
 10371 ;;		_do_I2C_TX_EMPTY
 10372 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10373 ;;		i1_do_I2C_TX
 10374 ;;		i1_do_I2C_RX
 10375 ;;		i1_do_I2C_TX_EMPTY
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           
 10380                           ;psect for function i1_wr1RegCompleteHandler
 10381  0792                     i1_wr1RegCompleteHandler:	
 10382  0792                     i1l5048:	
 10383                           ;incstack = 0
 10384                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10385                           
 10386                           
 10387                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
 10388  0792  3001               	movlw	1
 10389  0793  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10390  0794  3000               	movlw	0
 10391  0795  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10392  0796  0020               	movlb	0	; select bank0
 10393  0797  0859               	movf	i1wr1RegCompleteHandler@p,w
 10394  0798  3187  27C2  3187   	fcall	i1_i2c_setBuffer
 10395                           
 10396                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10397  079B  3000               	movlw	0
 10398  079C  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10399  079D  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10400  079E  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10401  079F  3187  27EA         	fcall	i1_i2c_setDataCompleteCallback
 10402                           
 10403                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
 10404  07A1  3004               	movlw	4
 10405  07A2  0008               	return
 10406  07A3                     __end_ofi1_wr1RegCompleteHandler:	
 10407                           
 10408                           	psect	text99
 10409  0E65                     __ptext99:	
 10410 ;; *************** function i1_returnReset *****************
 10411 ;; Defined at:
 10412 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;  p               1    1[BANK0 ] PTR void 
 10415 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10416 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;		None
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  1    wreg      enum E3257
 10421 ;; Registers used:
 10422 ;;		wreg
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10428 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;Total ram usage:        1 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; This function calls:
 10435 ;;		Nothing
 10436 ;; This function is called by:
 10437 ;;		_do_I2C_DO_ADDRESS_NACK
 10438 ;;		_do_I2C_TX
 10439 ;;		_do_I2C_RX
 10440 ;;		_do_I2C_TX_EMPTY
 10441 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10442 ;;		i1_do_I2C_TX
 10443 ;;		i1_do_I2C_RX
 10444 ;;		i1_do_I2C_TX_EMPTY
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           
 10449                           ;psect for function i1_returnReset
 10450  0E65                     i1_returnReset:	
 10451  0E65                     i1l5044:	
 10452                           ;incstack = 0
 10453                           ; Regs used in i1_returnReset: [wreg]
 10454                           
 10455                           
 10456                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 10457  0E65  3005               	movlw	5
 10458  0E66  0008               	return
 10459  0E67                     __end_ofi1_returnReset:	
 10460                           
 10461                           	psect	text100
 10462  0E63                     __ptext100:	
 10463 ;; *************** function i1_returnStop *****************
 10464 ;; Defined at:
 10465 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 10466 ;; Parameters:    Size  Location     Type
 10467 ;;  p               1    1[BANK0 ] PTR void 
 10468 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10469 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  1    wreg      enum E3257
 10474 ;; Registers used:
 10475 ;;		wreg
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        1 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; This function calls:
 10488 ;;		Nothing
 10489 ;; This function is called by:
 10490 ;;		i1_setCallBack
 10491 ;;		_do_I2C_DO_ADDRESS_NACK
 10492 ;;		_do_I2C_TX
 10493 ;;		_do_I2C_RX
 10494 ;;		_do_I2C_TX_EMPTY
 10495 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10496 ;;		i1_do_I2C_TX
 10497 ;;		i1_do_I2C_RX
 10498 ;;		i1_do_I2C_TX_EMPTY
 10499 ;; This function uses a non-reentrant model
 10500 ;;
 10501                           
 10502                           
 10503                           ;psect for function i1_returnStop
 10504  0E63                     i1_returnStop:	
 10505  0E63                     i1l5040:	
 10506                           ;incstack = 0
 10507                           ; Regs used in i1_returnStop: [wreg]
 10508                           
 10509                           
 10510                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 10511  0E63  3001               	movlw	1
 10512  0E64  0008               	return
 10513  0E65                     __end_ofi1_returnStop:	
 10514                           
 10515                           	psect	text101
 10516  07A3                     __ptext101:	
 10517 ;; *************** function i1_wr2RegCompleteHandler *****************
 10518 ;; Defined at:
 10519 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;  p               1    1[BANK0 ] PTR void 
 10522 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10523 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10524 ;; Auto vars:     Size  Location     Type
 10525 ;;		None
 10526 ;; Return value:  Size  Location     Type
 10527 ;;                  1    wreg      enum E358
 10528 ;; Registers used:
 10529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10535 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;Total ram usage:        1 bytes
 10540 ;; Hardware stack levels used:    1
 10541 ;; Hardware stack levels required when called:    2
 10542 ;; This function calls:
 10543 ;;		i1_i2c_setBuffer
 10544 ;;		i1_i2c_setDataCompleteCallback
 10545 ;; This function is called by:
 10546 ;;		_do_I2C_DO_ADDRESS_NACK
 10547 ;;		_do_I2C_TX
 10548 ;;		_do_I2C_RX
 10549 ;;		_do_I2C_TX_EMPTY
 10550 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10551 ;;		i1_do_I2C_TX
 10552 ;;		i1_do_I2C_RX
 10553 ;;		i1_do_I2C_TX_EMPTY
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function i1_wr2RegCompleteHandler
 10559  07A3                     i1_wr2RegCompleteHandler:	
 10560  07A3                     i1l5072:	
 10561                           ;incstack = 0
 10562                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10563                           
 10564                           
 10565                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
 10566  07A3  3002               	movlw	2
 10567  07A4  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10568  07A5  3000               	movlw	0
 10569  07A6  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10570  07A7  0020               	movlb	0	; select bank0
 10571  07A8  0859               	movf	i1wr2RegCompleteHandler@p,w
 10572  07A9  3187  27C2  3187   	fcall	i1_i2c_setBuffer
 10573                           
 10574                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 10575  07AC  3000               	movlw	0
 10576  07AD  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10577  07AE  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10578  07AF  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10579  07B0  3187  27EA         	fcall	i1_i2c_setDataCompleteCallback
 10580                           
 10581                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
 10582  07B2  3004               	movlw	4
 10583  07B3  0008               	return
 10584  07B4                     __end_ofi1_wr2RegCompleteHandler:	
 10585                           
 10586                           	psect	text102
 10587  07EA                     __ptext102:	
 10588 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 10589 ;; Defined at:
 10590 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10593 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10594 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10595 ;;  p               1    7[COMMON] PTR void 
 10596 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10597 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;		None
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      void 
 10602 ;; Registers used:
 10603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         3       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        4 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    1
 10616 ;; This function calls:
 10617 ;;		i1_setCallBack
 10618 ;; This function is called by:
 10619 ;;		i1_wr1RegCompleteHandler
 10620 ;;		i1_rd1RegCompleteHandler
 10621 ;;		i1_rd2RegCompleteHandler
 10622 ;;		i1_wr2RegCompleteHandler
 10623 ;;		i1_rdBlkRegCompleteHandler
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           
 10628                           ;psect for function i1_i2c_setDataCompleteCallback
 10629  07EA                     i1_i2c_setDataCompleteCallback:	
 10630                           
 10631                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
 10632                           
 10633                           ;incstack = 0
 10634                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 10635  07EA  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 10636  07EB  00F1               	movwf	i1setCallBack@cb+1
 10637  07EC  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 10638  07ED  00F0               	movwf	i1setCallBack@cb
 10639  07EE  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 10640  07EF  0020               	movlb	0	; select bank0
 10641  07F0  00D8               	movwf	??i1_i2c_setDataCompleteCallback
 10642  07F1  0858               	movf	??i1_i2c_setDataCompleteCallback,w
 10643  07F2  00F2               	movwf	i1setCallBack@p
 10644  07F3  3000               	movlw	0
 10645  07F4  3185  25EA         	fcall	i1_setCallBack
 10646  07F6  0008               	return
 10647  07F7                     __end_ofi1_i2c_setDataCompleteCallback:	
 10648                           
 10649                           	psect	text103
 10650  05EA                     __ptext103:	
 10651 ;; *************** function i1_setCallBack *****************
 10652 ;; Defined at:
 10653 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;  idx             1    wreg     enum E3429
 10656 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 10657 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10658 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 10659 ;;  p               1    2[COMMON] PTR void 
 10660 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10661 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;  idx             1    4[COMMON] enum E3429
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  1    wreg      void 
 10666 ;; Registers used:
 10667 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10673 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;Total ram usage:        5 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; This function calls:
 10680 ;;		Nothing
 10681 ;; This function is called by:
 10682 ;;		i1_i2c_setDataCompleteCallback
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           
 10687                           ;psect for function i1_setCallBack
 10688  05EA                     i1_setCallBack:	
 10689                           
 10690                           ;incstack = 0
 10691                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 10692                           ;i1setCallBack@idx stored from wreg
 10693  05EA  00F4               	movwf	i1setCallBack@idx
 10694                           
 10695                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
 10696  05EB  0870               	movf	i1setCallBack@cb,w
 10697  05EC  0471               	iorwf	i1setCallBack@cb+1,w
 10698  05ED  1903               	btfsc	3,2
 10699  05EE  2E00               	goto	i1l4940
 10700                           
 10701                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
 10702  05EF  3574               	lslf	i1setCallBack@idx,w
 10703  05F0  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10704  05F1  0086               	movwf	6
 10705  05F2  0187               	clrf	7
 10706  05F3  0870               	movf	i1setCallBack@cb,w
 10707  05F4  3FC0               	movwi [0]fsr1
 10708  05F5  0871               	movf	i1setCallBack@cb+1,w
 10709  05F6  3FC1               	movwi [1]fsr1
 10710                           
 10711                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
 10712  05F7  0872               	movf	i1setCallBack@p,w
 10713  05F8  00F3               	movwf	??i1_setCallBack
 10714  05F9  0874               	movf	i1setCallBack@idx,w
 10715  05FA  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10716  05FB  0086               	movwf	6
 10717  05FC  0187               	clrf	7
 10718  05FD  0873               	movf	??i1_setCallBack,w
 10719  05FE  0081               	movwf	1
 10720                           
 10721                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
 10722  05FF  0008               	return
 10723  0600                     i1l4940:	
 10724                           
 10725                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
 10726  0600  3574               	lslf	i1setCallBack@idx,w
 10727  0601  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10728  0602  0086               	movwf	6
 10729  0603  0187               	clrf	7
 10730  0604  30ED               	movlw	low _returnStop
 10731  0605  3FC0               	movwi [0]fsr1
 10732  0606  300E               	movlw	high _returnStop
 10733  0607  3FC1               	movwi [1]fsr1
 10734                           
 10735                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
 10736  0608  0874               	movf	i1setCallBack@idx,w
 10737  0609  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10738  060A  0086               	movwf	6
 10739  060B  0187               	clrf	7
 10740  060C  0181               	clrf	1
 10741  060D  0008               	return
 10742  060E                     __end_ofi1_setCallBack:	
 10743                           
 10744                           	psect	text104
 10745  07C2                     __ptext104:	
 10746 ;; *************** function i1_i2c_setBuffer *****************
 10747 ;; Defined at:
 10748 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;  buffer          1    wreg     PTR void 
 10751 ;;		 -> rtcData(9), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 10752 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 10753 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 10754 ;;  bufferSize      2    0[COMMON] unsigned int 
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;  buffer          1    3[COMMON] PTR void 
 10757 ;;		 -> rtcData(9), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 10758 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 10759 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  1    wreg      void 
 10762 ;; Registers used:
 10763 ;;		wreg
 10764 ;; Tracked objects:
 10765 ;;		On entry : 0/0
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10769 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10772 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10773 ;;Total ram usage:        4 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; This function calls:
 10776 ;;		Nothing
 10777 ;; This function is called by:
 10778 ;;		i1_wr1RegCompleteHandler
 10779 ;;		i1_rd1RegCompleteHandler
 10780 ;;		i1_rd2RegCompleteHandler
 10781 ;;		i1_wr2RegCompleteHandler
 10782 ;;		i1_rdBlkRegCompleteHandler
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           
 10787                           ;psect for function i1_i2c_setBuffer
 10788  07C2                     i1_i2c_setBuffer:	
 10789                           
 10790                           ;incstack = 0
 10791                           ; Regs used in i1_i2c_setBuffer: [wreg]
 10792                           ;i1i2c_setBuffer@buffer stored from wreg
 10793  07C2  00F3               	movwf	i1i2c_setBuffer@buffer
 10794                           
 10795                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
 10796  07C3  0020               	movlb	0	; select bank0
 10797  07C4  1D20               	btfss	_i2c_status,2
 10798  07C5  0008               	return
 10799                           
 10800                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
 10801  07C6  0873               	movf	i1i2c_setBuffer@buffer,w
 10802  07C7  00F2               	movwf	??i1_i2c_setBuffer
 10803  07C8  0872               	movf	??i1_i2c_setBuffer,w
 10804  07C9  00A2               	movwf	low ((_i2c_status| 0+2))
 10805                           
 10806                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
 10807  07CA  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 10808  07CB  00A4               	movwf	_i2c_status+4
 10809  07CC  0870               	movf	i1i2c_setBuffer@bufferSize,w
 10810  07CD  00A3               	movwf	_i2c_status+3
 10811                           
 10812                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
 10813  07CE  1120               	bcf	_i2c_status,2
 10814  07CF  0008               	return
 10815  07D0                     __end_ofi1_i2c_setBuffer:	
 10816                           
 10817                           	psect	text105
 10818  0E70                     __ptext105:	
 10819 ;; *************** function i1_i2c_driver_stop *****************
 10820 ;; Defined at:
 10821 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;		None
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;		None
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  1    wreg      void 
 10828 ;; Registers used:
 10829 ;;		None
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;Total ram usage:        0 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; This function calls:
 10842 ;;		Nothing
 10843 ;; This function is called by:
 10844 ;;		i1_do_I2C_SEND_STOP
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           
 10849                           ;psect for function i1_i2c_driver_stop
 10850  0E70                     i1_i2c_driver_stop:	
 10851                           
 10852                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
 10853                           
 10854                           ;incstack = 0
 10855                           ; Regs used in i1_i2c_driver_stop: []
 10856  0E70  0024               	movlb	4	; select bank4
 10857  0E71  1516               	bsf	22,2	;volatile
 10858  0E72  0008               	return
 10859  0E73                     __end_ofi1_i2c_driver_stop:	
 10860                           
 10861                           	psect	text106
 10862  0E6D                     __ptext106:	
 10863 ;; *************** function i1_i2c_driver_restart *****************
 10864 ;; Defined at:
 10865 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;		None
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;		None
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  1    wreg      void 
 10872 ;; Registers used:
 10873 ;;		None
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;Total ram usage:        0 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; This function calls:
 10886 ;;		Nothing
 10887 ;; This function is called by:
 10888 ;;		i1_do_I2C_SEND_RESTART_READ
 10889 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10890 ;;		i1_do_I2C_SEND_RESTART
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           
 10895                           ;psect for function i1_i2c_driver_restart
 10896  0E6D                     i1_i2c_driver_restart:	
 10897                           
 10898                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
 10899                           
 10900                           ;incstack = 0
 10901                           ; Regs used in i1_i2c_driver_restart: []
 10902  0E6D  0024               	movlb	4	; select bank4
 10903  0E6E  1496               	bsf	22,1	;volatile
 10904  0E6F  0008               	return
 10905  0E70                     __end_ofi1_i2c_driver_restart:	
 10906                           
 10907                           	psect	text107
 10908  0E97                     __ptext107:	
 10909 ;; *************** function i1_i2c_driver_sendACK *****************
 10910 ;; Defined at:
 10911 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;		None
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;		None
 10916 ;; Return value:  Size  Location     Type
 10917 ;;                  1    wreg      void 
 10918 ;; Registers used:
 10919 ;;		None
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;Total ram usage:        0 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; This function calls:
 10932 ;;		Nothing
 10933 ;; This function is called by:
 10934 ;;		i1_do_I2C_DO_ACK
 10935 ;;		i1_do_I2C_RX
 10936 ;; This function uses a non-reentrant model
 10937 ;;
 10938                           
 10939                           
 10940                           ;psect for function i1_i2c_driver_sendACK
 10941  0E97                     i1_i2c_driver_sendACK:	
 10942                           
 10943                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
 10944                           
 10945                           ;incstack = 0
 10946                           ; Regs used in i1_i2c_driver_sendACK: []
 10947  0E97  0024               	movlb	4	; select bank4
 10948  0E98  1296               	bcf	22,5	;volatile
 10949                           
 10950                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
 10951  0E99  1616               	bsf	22,4	;volatile
 10952  0E9A  0008               	return
 10953  0E9B                     __end_ofi1_i2c_driver_sendACK:	
 10954                           
 10955                           	psect	text108
 10956  0E6A                     __ptext108:	
 10957 ;; *************** function _i2c_busCollisionISR *****************
 10958 ;; Defined at:
 10959 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;		None
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  1    wreg      void 
 10966 ;; Registers used:
 10967 ;;		status,2, status,0, pclath, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;Total ram usage:        0 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    1
 10980 ;; This function calls:
 10981 ;;		_i2c_driver_clearBusCollision
 10982 ;; This function is called by:
 10983 ;;		_i2c_open
 10984 ;;		_INTERRUPT_InterruptManager
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           
 10989                           ;psect for function _i2c_busCollisionISR
 10990  0E6A                     _i2c_busCollisionISR:	
 10991                           
 10992                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c_driver_clearBusCollision();
 10993                           
 10994                           ;incstack = 0
 10995                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 10996  0E6A  318E  2667         	fcall	_i2c_driver_clearBusCollision
 10997  0E6C  0008               	return
 10998  0E6D                     __end_of_i2c_busCollisionISR:	
 10999                           
 11000                           	psect	text109
 11001  0E67                     __ptext109:	
 11002 ;; *************** function _i2c_driver_clearBusCollision *****************
 11003 ;; Defined at:
 11004 ;;		line 254 in file "mcc_generated_files/i2c_driver.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;		None
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;		None
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  1    wreg      void 
 11011 ;; Registers used:
 11012 ;;		None
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;Total ram usage:        0 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_i2c_busCollisionISR
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function _i2c_driver_clearBusCollision
 11033  0E67                     _i2c_driver_clearBusCollision:	
 11034                           
 11035                           ;mcc_generated_files/i2c_driver.c: 256:     PIR2bits.BCLIF = 0;
 11036                           
 11037                           ;incstack = 0
 11038                           ; Regs used in _i2c_driver_clearBusCollision: []
 11039  0E67  0020               	movlb	0	; select bank0
 11040  0E68  1192               	bcf	18,3	;volatile
 11041  0E69  0008               	return
 11042  0E6A                     __end_of_i2c_driver_clearBusCollision:	
 11043                           
 11044                           	psect	text110
 11045  0F17                     __ptext110:	
 11046 ;; *************** function _TMR0_ISR *****************
 11047 ;; Defined at:
 11048 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;		None
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;		None
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      void 
 11055 ;; Registers used:
 11056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;Total ram usage:        0 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    2
 11069 ;; This function calls:
 11070 ;;		_TMR0_CallBack
 11071 ;; This function is called by:
 11072 ;;		_INTERRUPT_InterruptManager
 11073 ;; This function uses a non-reentrant model
 11074 ;;
 11075                           
 11076                           
 11077                           ;psect for function _TMR0_ISR
 11078  0F17                     _TMR0_ISR:	
 11079                           
 11080                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 11081                           
 11082                           ;incstack = 0
 11083                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11084  0F17  110B               	bcf	11,2	;volatile
 11085                           
 11086                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 11087  0F18  087D               	movf	_timer0ReloadVal,w	;volatile
 11088  0F19  0020               	movlb	0	; select bank0
 11089  0F1A  0095               	movwf	21	;volatile
 11090                           
 11091                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
 11092  0F1B  318F  277D         	fcall	_TMR0_CallBack
 11093  0F1D  0008               	return
 11094  0F1E                     __end_of_TMR0_ISR:	
 11095                           
 11096                           	psect	text111
 11097  0F7D                     __ptext111:	
 11098 ;; *************** function _TMR0_CallBack *****************
 11099 ;; Defined at:
 11100 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;		None
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;		None
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  1    wreg      void 
 11107 ;; Registers used:
 11108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;Total ram usage:        0 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    1
 11121 ;; This function calls:
 11122 ;;		Absolute function
 11123 ;;		_TMR0_DefaultInterruptHandler
 11124 ;;		_displayRefreshISR
 11125 ;; This function is called by:
 11126 ;;		_TMR0_ISR
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           
 11131                           ;psect for function _TMR0_CallBack
 11132  0F7D                     _TMR0_CallBack:	
 11133                           
 11134                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
 11135                           
 11136                           ;incstack = 0
 11137                           ; Regs used in _TMR0_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11138  0F7D  0878               	movf	_TMR0_InterruptHandler,w
 11139  0F7E  0479               	iorwf	_TMR0_InterruptHandler+1,w
 11140  0F7F  1903               	btfsc	3,2
 11141  0F80  0008               	return
 11142                           
 11143                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
 11144  0F81  0879               	movf	_TMR0_InterruptHandler+1,w
 11145  0F82  008A               	movwf	10
 11146  0F83  0878               	movf	_TMR0_InterruptHandler,w
 11147  0F84  000A               	callw
 11148  0F85  318F               	pagesel	$
 11149  0F86  0008               	return
 11150  0F87                     __end_of_TMR0_CallBack:	
 11151                           
 11152                           	psect	text112
 11153  0E60                     __ptext112:	
 11154 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11155 ;; Defined at:
 11156 ;;		line 137 in file "mcc_generated_files/tmr0.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      void 
 11163 ;; Registers used:
 11164 ;;		None
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;Total ram usage:        0 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; This function calls:
 11177 ;;		Nothing
 11178 ;; This function is called by:
 11179 ;;		_TMR0_Initialize
 11180 ;;		_TMR0_CallBack
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           
 11185                           ;psect for function _TMR0_DefaultInterruptHandler
 11186  0E60                     _TMR0_DefaultInterruptHandler:	
 11187                           
 11188                           ;incstack = 0
 11189                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11190  0E60  0008               	return
 11191  0E61                     __end_of_TMR0_DefaultInterruptHandler:	
 11192                           
 11193                           	psect	text113
 11194  01C9                     __ptext113:	
 11195 ;; *************** function _displayRefreshISR *****************
 11196 ;; Defined at:
 11197 ;;		line 309 in file "main.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;		None
 11200 ;; Auto vars:     Size  Location     Type
 11201 ;;		None
 11202 ;; Return value:  Size  Location     Type
 11203 ;;                  1    wreg      void 
 11204 ;; Registers used:
 11205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11206 ;; Tracked objects:
 11207 ;;		On entry : 0/0
 11208 ;;		On exit  : 0/0
 11209 ;;		Unchanged: 0/0
 11210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;Total ram usage:        2 bytes
 11216 ;; Hardware stack levels used:    1
 11217 ;; This function calls:
 11218 ;;		Nothing
 11219 ;; This function is called by:
 11220 ;;		_main
 11221 ;;		_TMR0_CallBack
 11222 ;; This function uses a non-reentrant model
 11223 ;;
 11224                           
 11225                           
 11226                           ;psect for function _displayRefreshISR
 11227  01C9                     _displayRefreshISR:	
 11228                           
 11229                           ;main.c: 310:     static uint8_t i;;main.c: 311:     i &= 0x03;
 11230                           
 11231                           ;incstack = 0
 11232                           ; Regs used in _displayRefreshISR: [wreg-fsr1h+status,2+status,0]
 11233  01C9  3003               	movlw	3
 11234  01CA  00F0               	movwf	??_displayRefreshISR
 11235  01CB  0870               	movf	??_displayRefreshISR,w
 11236  01CC  05FC               	andwf	displayRefreshISR@i,f
 11237                           
 11238                           ;main.c: 312:     LATD = displayBuff[i];
 11239  01CD  087C               	movf	displayRefreshISR@i,w
 11240  01CE  3E45               	addlw	(low (_displayBuff| 0))& (0+255)
 11241  01CF  0086               	movwf	6
 11242  01D0  0187               	clrf	7
 11243  01D1  0801               	movf	1,w
 11244  01D2  0022               	movlb	2	; select bank2
 11245  01D3  008F               	movwf	15	;volatile
 11246                           
 11247                           ;main.c: 313:     switch(i){
 11248  01D4  29E1               	goto	i1l3622
 11249  01D5                     i1l852:	
 11250                           ;main.c: 315:             do { LATAbits.LATA3 = 0; } while(0);
 11251                           
 11252  01D5  118C               	bcf	12,3	;volatile
 11253                           
 11254                           ;main.c: 316:             do { LATEbits.LATE1 = 1; } while(0);
 11255  01D6  1490               	bsf	16,1	;volatile
 11256  01D7  29F7               	goto	i1l3624
 11257  01D8                     i1l858:	
 11258                           ;main.c: 319:             do { LATEbits.LATE1 = 0; } while(0);
 11259                           
 11260  01D8  1090               	bcf	16,1	;volatile
 11261                           
 11262                           ;main.c: 320:             do { LATCbits.LATC1 = 1; } while(0);
 11263  01D9  148E               	bsf	14,1	;volatile
 11264  01DA  29F7               	goto	i1l3624
 11265  01DB                     i1l863:	
 11266                           ;main.c: 323:             do { LATCbits.LATC1 = 0; } while(0);
 11267                           
 11268  01DB  108E               	bcf	14,1	;volatile
 11269                           
 11270                           ;main.c: 324:             do { LATAbits.LATA4 = 1; } while(0);
 11271  01DC  160C               	bsf	12,4	;volatile
 11272  01DD  29F7               	goto	i1l3624
 11273  01DE                     i1l868:	
 11274                           ;main.c: 327:             do { LATAbits.LATA4 = 0; } while(0);
 11275                           
 11276  01DE  120C               	bcf	12,4	;volatile
 11277                           
 11278                           ;main.c: 328:             do { LATAbits.LATA3 = 1; } while(0);
 11279  01DF  158C               	bsf	12,3	;volatile
 11280  01E0  29F7               	goto	i1l3624
 11281  01E1                     i1l3622:	
 11282  01E1  087C               	movf	displayRefreshISR@i,w
 11283  01E2  00F0               	movwf	??_displayRefreshISR
 11284  01E3  01F1               	clrf	??_displayRefreshISR+1
 11285                           
 11286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11287                           ; Switch size 1, requested type "simple"
 11288                           ; Number of cases is 1, Range of values is 0 to 0
 11289                           ; switch strategies available:
 11290                           ; Name         Instructions Cycles
 11291                           ; simple_byte            4     3 (average)
 11292                           ; direct_byte            8     6 (fixed)
 11293                           ; jumptable            260     6 (fixed)
 11294                           ;	Chosen strategy is simple_byte
 11295  01E4  0871               	movf	??_displayRefreshISR+1,w
 11296  01E5  3A00               	xorlw	0	; case 0
 11297  01E6  1903               	skipnz
 11298  01E7  29E9               	goto	i1l5910
 11299  01E8  29F7               	goto	i1l3624
 11300  01E9                     i1l5910:	
 11301                           
 11302                           ; Switch size 1, requested type "simple"
 11303                           ; Number of cases is 4, Range of values is 0 to 3
 11304                           ; switch strategies available:
 11305                           ; Name         Instructions Cycles
 11306                           ; simple_byte           13     7 (average)
 11307                           ; direct_byte           14     6 (fixed)
 11308                           ; jumptable            260     6 (fixed)
 11309                           ;	Chosen strategy is simple_byte
 11310  01E9  0870               	movf	??_displayRefreshISR,w
 11311  01EA  3A00               	xorlw	0	; case 0
 11312  01EB  1903               	skipnz
 11313  01EC  29D5               	goto	i1l852
 11314  01ED  3A01               	xorlw	1	; case 1
 11315  01EE  1903               	skipnz
 11316  01EF  29D8               	goto	i1l858
 11317  01F0  3A03               	xorlw	3	; case 2
 11318  01F1  1903               	skipnz
 11319  01F2  29DB               	goto	i1l863
 11320  01F3  3A01               	xorlw	1	; case 3
 11321  01F4  1903               	skipnz
 11322  01F5  29DE               	goto	i1l868
 11323  01F6  29F7               	goto	i1l3624
 11324  01F7                     i1l3624:	
 11325                           
 11326                           ;main.c: 332:     i++;
 11327  01F7  3001               	movlw	1
 11328  01F8  00F0               	movwf	??_displayRefreshISR
 11329  01F9  0870               	movf	??_displayRefreshISR,w
 11330  01FA  07FC               	addwf	displayRefreshISR@i,f
 11331                           
 11332                           ;main.c: 335:     if(flag_button_press_count[0] != 0){
 11333  01FB  0020               	movlb	0	; select bank0
 11334  01FC  0841               	movf	_flag_button_press_count,w
 11335  01FD  1903               	btfsc	3,2
 11336  01FE  2A07               	goto	i1l872
 11337                           
 11338                           ;main.c: 336:   if(button_press_count[0] < 200) button_press_count[0]++;
 11339  01FF  30C8               	movlw	200
 11340  0200  023D               	subwf	_button_press_count,w
 11341  0201  1803               	skipnc
 11342  0202  2A07               	goto	i1l872
 11343  0203  3001               	movlw	1
 11344  0204  00F0               	movwf	??_displayRefreshISR
 11345  0205  0870               	movf	??_displayRefreshISR,w
 11346  0206  07BD               	addwf	_button_press_count,f
 11347  0207                     i1l872:	
 11348                           ;main.c: 337:  }
 11349                           
 11350                           
 11351                           ;main.c: 338:     if(flag_button_press_count[1] != 0){
 11352  0207  0842               	movf	_flag_button_press_count+1,w
 11353  0208  1903               	btfsc	3,2
 11354  0209  2A12               	goto	i1l874
 11355                           
 11356                           ;main.c: 339:   if(button_press_count[1] < 200) button_press_count[1]++;
 11357  020A  30C8               	movlw	200
 11358  020B  023E               	subwf	_button_press_count+1,w
 11359  020C  1803               	skipnc
 11360  020D  2A12               	goto	i1l874
 11361  020E  3001               	movlw	1
 11362  020F  00F0               	movwf	??_displayRefreshISR
 11363  0210  0870               	movf	??_displayRefreshISR,w
 11364  0211  07BE               	addwf	_button_press_count+1,f
 11365  0212                     i1l874:	
 11366                           ;main.c: 340:  }
 11367                           
 11368                           
 11369                           ;main.c: 341:     if(flag_button_press_count[2] != 0){
 11370  0212  0843               	movf	_flag_button_press_count+2,w
 11371  0213  1903               	btfsc	3,2
 11372  0214  2A1D               	goto	i1l876
 11373                           
 11374                           ;main.c: 342:   if(button_press_count[2] < 200) button_press_count[2]++;
 11375  0215  30C8               	movlw	200
 11376  0216  023F               	subwf	_button_press_count+2,w
 11377  0217  1803               	skipnc
 11378  0218  2A1D               	goto	i1l876
 11379  0219  3001               	movlw	1
 11380  021A  00F0               	movwf	??_displayRefreshISR
 11381  021B  0870               	movf	??_displayRefreshISR,w
 11382  021C  07BF               	addwf	_button_press_count+2,f
 11383  021D                     i1l876:	
 11384                           ;main.c: 343:  }
 11385                           
 11386                           
 11387                           ;main.c: 344:     if(flag_button_press_count[3] != 0){
 11388  021D  0844               	movf	_flag_button_press_count+3,w
 11389  021E  1903               	btfsc	3,2
 11390  021F  0008               	return
 11391                           
 11392                           ;main.c: 345:   if(button_press_count[3] < 200) button_press_count[3]++;
 11393  0220  30C8               	movlw	200
 11394  0221  0240               	subwf	_button_press_count+3,w
 11395  0222  1803               	skipnc
 11396  0223  0008               	return
 11397  0224  3001               	movlw	1
 11398  0225  00F0               	movwf	??_displayRefreshISR
 11399  0226  0870               	movf	??_displayRefreshISR,w
 11400  0227  07C0               	addwf	_button_press_count+3,f
 11401  0228  0008               	return
 11402  0229                     __end_of_displayRefreshISR:	
 11403                           
 11404                           	psect	text114
 11405  0ED5                     __ptext114:	
 11406 ;; *************** function _PIN_MANAGER_IOC *****************
 11407 ;; Defined at:
 11408 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;		None
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;		None
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  1    wreg      void 
 11415 ;; Registers used:
 11416 ;;		wreg, status,2, status,0, pclath, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;Total ram usage:        0 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    2
 11429 ;; This function calls:
 11430 ;;		_IOCBF4_ISR
 11431 ;; This function is called by:
 11432 ;;		_INTERRUPT_InterruptManager
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           
 11437                           ;psect for function _PIN_MANAGER_IOC
 11438  0ED5                     _PIN_MANAGER_IOC:	
 11439                           
 11440                           ;mcc_generated_files/pin_manager.c: 121:     if(IOCBFbits.IOCBF4 == 1)
 11441                           
 11442                           ;incstack = 0
 11443                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 11444  0ED5  0027               	movlb	7	; select bank7
 11445  0ED6  1E16               	btfss	22,4	;volatile
 11446  0ED7  0008               	return
 11447                           
 11448                           ;mcc_generated_files/pin_manager.c: 122:     {;mcc_generated_files/pin_manager.c: 123:  
      +                                 IOCBF4_ISR();
 11449  0ED8  318F  27F3         	fcall	_IOCBF4_ISR
 11450  0EDA  0008               	return
 11451  0EDB                     __end_of_PIN_MANAGER_IOC:	
 11452                           
 11453                           	psect	text115
 11454  0FF3                     __ptext115:	
 11455 ;; *************** function _IOCBF4_ISR *****************
 11456 ;; Defined at:
 11457 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;		None
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;		None
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  1    wreg      void 
 11464 ;; Registers used:
 11465 ;;		wreg, status,2, status,0, pclath, cstack
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;Total ram usage:        0 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    1
 11478 ;; This function calls:
 11479 ;;		Absolute function
 11480 ;;		_IOCBF4_DefaultInterruptHandler
 11481 ;;		_secondISR
 11482 ;; This function is called by:
 11483 ;;		_PIN_MANAGER_IOC
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           
 11488                           ;psect for function _IOCBF4_ISR
 11489  0FF3                     _IOCBF4_ISR:	
 11490                           
 11491                           ;mcc_generated_files/pin_manager.c: 135:     if(IOCBF4_InterruptHandler)
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _IOCBF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11495  0FF3  0020               	movlb	0	; select bank0
 11496  0FF4  086D               	movf	_IOCBF4_InterruptHandler,w
 11497  0FF5  046E               	iorwf	_IOCBF4_InterruptHandler+1,w
 11498  0FF6  1903               	btfsc	3,2
 11499  0FF7  2FFD               	goto	i1l3834
 11500                           
 11501                           ;mcc_generated_files/pin_manager.c: 136:     {;mcc_generated_files/pin_manager.c: 137:  
      +                                 IOCBF4_InterruptHandler();
 11502  0FF8  086E               	movf	_IOCBF4_InterruptHandler+1,w
 11503  0FF9  008A               	movwf	10
 11504  0FFA  086D               	movf	_IOCBF4_InterruptHandler,w
 11505  0FFB  000A               	callw
 11506  0FFC  318F               	pagesel	$
 11507  0FFD                     i1l3834:	
 11508                           
 11509                           ;mcc_generated_files/pin_manager.c: 139:     IOCBFbits.IOCBF4 = 0;
 11510  0FFD  0027               	movlb	7	; select bank7
 11511  0FFE  1216               	bcf	22,4	;volatile
 11512  0FFF  0008               	return
 11513  1000                     __end_of_IOCBF4_ISR:	
 11514                           
 11515                           	psect	text116
 11516  0E5F                     __ptext116:	
 11517 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 11518 ;; Defined at:
 11519 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;		None
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;		None
 11524 ;; Return value:  Size  Location     Type
 11525 ;;                  1    wreg      void 
 11526 ;; Registers used:
 11527 ;;		None
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;Total ram usage:        0 bytes
 11538 ;; Hardware stack levels used:    1
 11539 ;; This function calls:
 11540 ;;		Nothing
 11541 ;; This function is called by:
 11542 ;;		_PIN_MANAGER_Initialize
 11543 ;;		_IOCBF4_ISR
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           
 11548                           ;psect for function _IOCBF4_DefaultInterruptHandler
 11549  0E5F                     _IOCBF4_DefaultInterruptHandler:	
 11550                           
 11551                           ;incstack = 0
 11552                           ; Regs used in _IOCBF4_DefaultInterruptHandler: []
 11553  0E5F  0008               	return
 11554  0E60                     __end_of_IOCBF4_DefaultInterruptHandler:	
 11555                           
 11556                           	psect	text117
 11557  060E                     __ptext117:	
 11558 ;; *************** function _secondISR *****************
 11559 ;; Defined at:
 11560 ;;		line 290 in file "main.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;		None
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;		None
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      void 
 11567 ;; Registers used:
 11568 ;;		wreg, status,2, status,0
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;Total ram usage:        0 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; This function calls:
 11581 ;;		Nothing
 11582 ;; This function is called by:
 11583 ;;		_main
 11584 ;;		_IOCBF4_ISR
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           
 11589                           ;psect for function _secondISR
 11590  060E                     _secondISR:	
 11591                           
 11592                           ;main.c: 292:     if(mode == MODE_NORMAL){
 11593                           
 11594                           ;incstack = 0
 11595                           ; Regs used in _secondISR: [wreg+status,2+status,0]
 11596  060E  0020               	movlb	0	; select bank0
 11597  060F  084C               	movf	_mode,w
 11598  0610  1D03               	btfss	3,2
 11599  0611  2E1E               	goto	i1l3606
 11600  0612  1003               	clrc
 11601  0613  0022               	movlb	2	; select bank2
 11602  0614  1F8C               	btfss	12,7	;volatile
 11603  0615  1403               	setc
 11604  0616  1C03               	btfss	3,0
 11605  0617  2E1B               	goto	u144_20
 11606  0618  0022               	movlb	2	; select bank2
 11607  0619  178C               	bsf	12,7	;volatile
 11608  061A  2E25               	goto	i1l3604
 11609  061B                     u144_20:	
 11610  061B  0022               	movlb	2	; select bank2
 11611  061C  138C               	bcf	12,7	;volatile
 11612                           
 11613                           ;main.c: 295:     } else {
 11614  061D  2E25               	goto	i1l3604
 11615  061E                     i1l3606:	
 11616                           
 11617                           ;main.c: 296:         if(flag_dot_blink) flag_dot_blink = 0;
 11618  061E  084D               	movf	_flag_dot_blink,w
 11619  061F  1903               	btfsc	3,2
 11620  0620  2E23               	goto	i1l841
 11621  0621  01CD               	clrf	_flag_dot_blink
 11622  0622  2E25               	goto	i1l3604
 11623  0623                     i1l841:	
 11624                           ;main.c: 297:         else flag_dot_blink = 1;
 11625                           
 11626  0623  01CD               	clrf	_flag_dot_blink
 11627  0624  0ACD               	incf	_flag_dot_blink,f
 11628  0625                     i1l3604:	
 11629                           
 11630                           ;main.c: 294:         flag_time_display_update = 1;
 11631  0625  0020               	movlb	0	; select bank0
 11632  0626  01CE               	clrf	_flag_time_display_update
 11633  0627  0ACE               	incf	_flag_time_display_update,f
 11634                           
 11635                           ;main.c: 301:     if(mode_timeout_count) {
 11636  0628  084B               	movf	_mode_timeout_count,w
 11637  0629  1903               	btfsc	3,2
 11638  062A  0008               	return
 11639                           
 11640                           ;main.c: 302:         mode_timeout_count--;
 11641  062B  3001               	movlw	1
 11642  062C  02CB               	subwf	_mode_timeout_count,f
 11643                           
 11644                           ;main.c: 303:         if(mode_timeout_count == 0){
 11645  062D  084B               	movf	_mode_timeout_count,w
 11646  062E  1D03               	btfss	3,2
 11647  062F  0008               	return
 11648                           
 11649                           ;main.c: 304:             mode = MODE_NORMAL;
 11650  0630  01CC               	clrf	_mode
 11651  0631  0008               	return
 11652  0632                     __end_of_secondISR:	
 11653  007E                     btemp	set	126	;btemp
 11654  007E                     int$flags	set	126
 11655  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    42
    Data        0
    BSS         62
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     21      79
    BANK1            80      2       2
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    do_I2C_TX$2186$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$2192	const PTR FTN()enum E3411 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX$2191	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$2186	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned short  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_driver_setI2cISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_setBusCollisionISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), IOCBF4_DefaultInterruptHandler(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), IOCBF4_DefaultInterruptHandler(), Absolute function(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i1_i2c_ISR(), Absolute function(), i2c_ISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    i2c_readDataBlock@data	PTR void  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    d.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    S373$data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E3411[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_i2c_restartWrite(), i1_rd1RegCompleteHandler(), i1_rd2RegCompleteHandler(), 
		 -> i1_wr2RegCompleteHandler(), i1_rdBlkRegCompleteHandler(), i1_returnReset(), i1_returnStop(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 9
		 -> rtcData(BANK0[9]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_DO_ADDRESS_NACK
    i1_i2c_ISR->i1_do_I2C_RX
    i1_i2c_ISR->i1_do_I2C_TX
    i1_i2c_ISR->i1_do_I2C_TX_EMPTY
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _TMR0_CallBack->_displayRefreshISR

Critical Paths under _main in BANK0

    _main->_initRTC
    _updateRTC->_i2c_writeNBytes
    _initRTC->_i2c_readDataBlock
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c_driver_TXData
    _do_I2C_TX->_i2c_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  399068
                                              0 BANK1      2     2      0
         _IOCBF4_SetInterruptHandler
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                        _bcdHourDecr
                        _bcdHourIncr
                      _bcdMinuteDecr
                      _bcdMinuteIncr
                  _i2c_readDataBlock
                            _initRTC
                          _updateRTC
 ---------------------------------------------------------------------------------
 (1) _updateRTC                                            3     2      1   97845
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              2     2      0  198695
                                             19 BANK0      2     2      0
                  _i2c_readDataBlock
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   97693
                                             10 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_readDataBlock                                    9     5      4  101002
                                             10 BANK0      9     5      4
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    2259
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     310
                                              2 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   93060
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   93060
                                              7 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   92992
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              3     3      0   92937
                                              4 BANK0      3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   23242
                                              1 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    4692
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1      32
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4735
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2979
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3    1117
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1574
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      37
                                              0 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteIncr                                        1     1      0     217
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteDecr                                        1     1      0     217
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourIncr                                          1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourDecr                                          1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     422
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     211
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0   18830
                   Absolute function *
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           3     3      0   18830
                                              3 COMMON     3     3      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         3     3      0    4713
                                              0 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_wr2RegCompleteHandler                             1     0      1     904
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_wr1RegCompleteHandler                             1     0      1    1044
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1       0
                                              1 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1       0
                                              1 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_rdBlkRegCompleteHandler                           1     0      1     935
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd2RegCompleteHandler                             1     0      1     904
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd1RegCompleteHandler                             1     0      1     904
                                              1 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setDataCompleteCallback                       4     1      3     699
                                              5 COMMON     3     0      3
                                              0 BANK0      1     1      0
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (16) i1_setCallBack                                       5     2      3     287
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) i1_i2c_restartWrite                                  1     0      1       0
                                              1 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                  _displayRefreshISR *
 ---------------------------------------------------------------------------------
 (14) _displayRefreshISR                                   2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF4_DefaultInterruptHandler *
                          _secondISR *
 ---------------------------------------------------------------------------------
 (14) _secondISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCBF4_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _bcdHourDecr
   _bcdHourIncr
   _bcdMinuteDecr
   _bcdMinuteIncr
   _i2c_readDataBlock
     _i2c_close
       _mssp_clearIRQ
       _mssp_disableIRQ
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_DO_NACK_RESTART *
               _i2c_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c_driver_startRX
             _do_I2C_RESET *
               _i2c_driver_resetBus
             _do_I2C_RX *
               Absolute function(Fake) *
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _i2c_driver_getRXData *
               _i2c_driver_sendACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_SEND_ADR_READ *
               _i2c_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c_driver_restart
             _do_I2C_SEND_STOP *
               _i2c_driver_stop
             _do_I2C_TX *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_driver_TXData *
               _i2c_driver_isNACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_TX_EMPTY *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _mssp_setIRQ *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _i2c_driver_isNACK *
             _mssp_clearIRQ *
           _mssp_waitForEvent
         _mssp_IRQisEnabled
     _i2c_open
       _i2c_driver_open
       _i2c_driver_setBusCollisionISR
       _i2c_driver_setI2cISR
       _mssp_clearIRQ
     _i2c_setAddressNACKCallback
       _setCallBack
     _i2c_setBuffer
     _i2c_setDataCompleteCallback
       _setCallBack
   _initRTC
     _i2c_readDataBlock
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
       _i2c_setDataCompleteCallback
         _setCallBack
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateRTC
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCBF4_ISR
       Absolute function(Fake) *
       _IOCBF4_DefaultInterruptHandler *
       _secondISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _displayRefreshISR *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2       2       7        2.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      5D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      5D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Sep  7 18:38:09 2019

                __end_of_i2c_driver_restart 0E8B                         i1_i2c_driver_isNACK 0F2C  
                              returnReset@p 0061                                  __CFG_CP$ON 0000  
                __end_of_i2c_driver_startRX 0E91                      __size_of_bcdMinuteDecr 0028  
             _do_I2C_SEND_RESTART$intlevel0 0F50                                 _SSPSTATbits 0214  
                    __size_of_bcdMinuteIncr 0029                                          l83 0743  
                                        l76 0358                             i1_mssp_clearIRQ 0E7C  
                      __size_of_do_I2C_IDLE 0009                         _do_I2C_SEND_RESTART 0F4C  
                      __size_of_do_I2C_RCEN 000A                             _timer0ReloadVal 007D  
                      __end_ofi1_returnStop 0E65                        ?i1_i2c_driver_TXData 0070  
                               i1_do_I2C_RX 035A                                 i1_do_I2C_TX 027B  
                               __CFG_LVP$ON 0000                        i1_i2c_driver_sendACK 0E97  
                                       l157 0260                                         l173 02E6  
                                       l432 0F8D                                         l603 0FC8  
                                       l800 0071                                         l805 009A  
                                       l795 0060                                         l796 0067  
                                       l798 006C                                __CFG_CPD$OFF 0000  
                  i1_do_I2C_DO_NACK_RESTART 0EB7                __size_of_i2c_masterOperation 001F  
                      _returnStop$intlevel0 0EF1                        i1_i2c_driver_restart 0E6D  
             i2c_setDataCompleteCallback@cb 005D                    ?i1_rd2RegCompleteHandler 0059  
                     __size_of_do_I2C_RESET 000B                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                      i1_i2c_driver_startRX 0E73                       __end_ofi1_returnReset 0E67  
        __end_of_IOCBF4_SetInterruptHandler 0EE7                  _IOCBF4_SetInterruptHandler 0EE1  
                      ?i1_i2c_driver_isNACK 0070                    ?i1_wr2RegCompleteHandler 0059  
           ??i1_i2c_setDataCompleteCallback 0058                      i1_i2c_driver_getRXData 0E76  
                     __end_ofi1_mssp_setIRQ 0E7C                     ??_rd2RegCompleteHandler 0062  
                     i1_i2c_driver_sendNACK 0E9B                                        l5100 0598  
                                      l5104 03E4                                        l5114 040D  
                             i1returnStop@p 0059                                        l5330 06D4  
                                      l5402 0558                                        l5340 074C  
                                      l5324 06CE                                        l5420 056A  
                                      l5092 057B                                        l5318 06C8  
                                      l5414 0564                                        l4630 05DC  
                                      l4702 0EF7                                        l5352 0758  
                                      l5432 0576                                        l5408 055E  
                                      l5346 0752                                        l5426 0570  
                                      l5362 0530                                        l4730 071D  
                                      l4706 0707                                        l4714 06F1  
                                      l4722 06DB                                        l4802 0484  
                                      l5602 008F                                        l5610 009C  
                                      l5380 0542                                        l4900 0425  
                                      l4652 0F48                                        l4812 048A  
                                      l5620 00C1                                        l5374 053C  
                                      l4750 0FB3                                        l4646 0F40  
                                      l4806 0487                                        l4830 0239  
                                      l4822 0233                                        l5392 054E  
                                      l5368 0536                                        l4744 0EFD  
                                      l4760 07FB                                        l4664 0F58  
                                      l4920 04E8                                        l4912 04D8  
                                      l5624 00B4                                        l5632 00C9  
                                      l5608 0099                                        l5386 0548  
                                      l4738 0675                                        l4658 0F50  
                                      l4682 0F70                                        l4826 0236  
                                      l4818 022D                                        l5650 00E3  
                                      l5900 043A                                        l4676 0F68  
                                      l4844 0279                                        l4836 023C  
                                      l4852 02CC                                        l5708 01C3  
                                      l5636 00CB                                        l4870 02EB  
                                      l4934 0FD0                                        l5646 00F0  
                                      l5662 00FA                                        l4768 0FEB  
                                      l4776 0FBE                                        l4784 0F95  
                                      l4792 0F60                                        l4698 0EF1  
                                      l4882 0418                                        l4866 02E8  
                                      l4970 0660                                        l5674 0113  
                                      l5658 00F8                                        l4884 041B  
                                      l4876 02EE                                        l4972 0664  
                                      l5692 016F                                        l5588 0076  
                                      l4894 0422                                        l4798 047D  
                                      l5694 0171                                        l5678 0115  
                                      l4888 041E                                        l4976 066E  
                                      l5894 0303                                        l5896 0252  
                                      l5898 049F                                __CFG_WDTE$ON 0000  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                                        _LATD 010F  
                                      _LATE 0110                                        u3335 012F  
                                      u3417 03A5                                        u3345 0151  
                                      u3427 0FCC                                        u3365 017B  
                                      u3375 019D                        ?_do_I2C_SEND_RESTART 0070  
                                      _PLLR 04D6                                        _TMR0 0015  
                                      _WPUB 020D                                        _WPUE 0210  
                   ??_wr2RegCompleteHandler 0062                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                       i1_i2c_driver_resetBus 0E61  
         __size_of_do_I2C_SEND_RESTART_READ 0008                   ?_do_I2C_SEND_RESTART_READ 0070  
                           ??_mssp_clearIRQ 0058                                        _main 0042  
                                      _mode 004C                   __size_of_do_I2C_SEND_STOP 0008  
                    __size_of_do_I2C_DO_ACK 0008                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                         ??i1_do_I2C_DO_ACK 0070                               __CFG_BOREN$ON 0000  
                     ?_do_I2C_SEND_ADR_READ 0070                    __size_of_i2c_writeNBytes 0026  
                                      start 002F                               _i2c_setBuffer 07B4  
                             __CFG_MCLRE$ON 0000                             __end_of_i2c_ISR 04FE  
          __size_of_rdBlkRegCompleteHandler 001D                    ??_do_I2C_DO_NACK_RESTART 0058  
                             i1_do_I2C_IDLE 0ED0                               i1_do_I2C_RCEN 0EDB  
                   __end_of_TMR0_Initialize 0770                                _do_I2C_RESET 0FAF  
                            i1returnReset@p 0059                               __CFG_PLLEN$ON 0000  
            ??_TMR0_DefaultInterruptHandler 0070              __size_of_OSCILLATOR_Initialize 000A  
               i2c_setAddressNACKCallback@p 005F                       ??i1_i2c_driver_TXData 0070  
             __end_of_OSCILLATOR_Initialize 0F91                         __size_of_IOCBF4_ISR 000D  
                     ?i1_i2c_driver_sendACK 0070                                       ?_main 0070  
                  __size_of_mssp_disableIRQ 0003                 i2c_driver_setI2cISR@handler 0058  
                                     i1l404 002D                                       i1l157 02AD  
                                     i1l173 0374                                       i1l394 000D  
                                     i1l396 0014                                       i1l399 0022  
                                     i1l841 0623                                       i1l852 01D5  
                                     i1l863 01DB                                       i1l872 0207  
                                     i1l874 0212                                       i1l858 01D8  
                                     i1l876 021D                                       i1l868 01DE  
                     ?i1_i2c_driver_restart 0070                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TRISD 008F                                       _TRISE 0090  
                     ?i1_i2c_driver_startRX 0070           __size_of_TMR0_SetInterruptHandler 0006  
                 ?_TMR0_SetInterruptHandler 0058                               __CFG_PWRTE$ON 0000  
                     ??i1_i2c_driver_isNACK 0070                                 i2c_open@ret 005C  
                          __end_of_TMR0_ISR 0F1E                          __size_ofi1_i2c_ISR 0026  
                           __end_of_initRTC 03DA                     __end_of_PIN_MANAGER_IOC 0EDB  
                            _WDT_Initialize 0EBB                               _bcdMinuteDecr 0551  
                      _i2c_driver_getRXData 0E91                ?i1_do_I2C_SEND_RESTART_WRITE 0070  
                ?_do_I2C_SEND_RESTART_WRITE 0070                               _bcdMinuteIncr 0528  
                     ??_do_I2C_SEND_RESTART 0058                                       pclath 000A  
                _i2c_driver_busCollisionISR 007A                      ?_do_I2C_SEND_ADR_WRITE 0070  
                                     status 0003                                       wtemp0 007E  
                        i2c_driver_TXData@d 0058                   __size_of_i2c_driver_start 0003  
                            ?_i2c_setBuffer 0058                                ?_setCallBack 0058  
                   __end_ofi1_mssp_clearIRQ 0E7F                               _fsmStateTable 0632  
                           __initialization 0031              __size_ofi1_do_I2C_SEND_RESTART 0004  
                                _i2c_poller 0FD0               __end_ofi1_do_I2C_SEND_RESTART 0EAB  
                                _i2c_status 0020                              ?i1_do_I2C_IDLE 0070  
                              __end_of_main 01C9                              ?i1_do_I2C_RCEN 0070  
                __end_ofi1_do_I2C_SEND_STOP 0EAF                            __end_of_i2c_open 035A  
                      _i2c_driver_setI2cISR 0F0B                 ?_INTERRUPT_InterruptManager 0070  
           __end_ofi1_rd2RegCompleteHandler 0781                               setCallBack@cb 0058  
                            i1_do_I2C_RESET 0F1E                               _do_I2C_DO_ACK 0F5C  
                                    ??_main 00A0                           ?_i2c_restartWrite 0061  
           __end_ofi1_wr2RegCompleteHandler 07B4                                i2c_close@ret 0059  
                           _i2c_driver_open 0FA5                          ??_i2c_restartWrite 0062  
                           _i2c_driver_stop 0E8B                      __end_of_WDT_Initialize 0EBF  
                   ?_do_I2C_DO_ADDRESS_NACK 0070                      ?i1_i2c_driver_sendNACK 0070  
                            ?_bcdMinuteDecr 0070                       ?_i2c_driver_getRXData 0070  
                            ?_bcdMinuteIncr 0070                                      _EEADRH 0192  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _APFCON 011D             i1i2c_setDataCompleteCallback@cb 0075  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELD 018F                                      _ANSELE 0190  
                                    _BORCON 0116                     ?i1_do_I2C_SEND_ADR_READ 0070  
                    ?i1_i2c_driver_resetBus 0070                                      i1l5040 0E63  
                                    i1l5202 0287                                      i1l3604 0625  
                                    i1l5044 0E65                                      i1l3606 061E  
                                    i1l3622 01E1                                      i1l3624 01F7  
                                    i1l5072 07A3                                      i1l5048 0792  
                                    i1l5056 0781                                      i1l5064 0770  
                                    i1l5080 06A8                                      i1l5216 02C6  
                                    i1l5208 028A                                      i1l5224 035A  
                                    i1l5170 04FE                                      i1l5242 0379  
                                    i1l5260 044F                                      i1l3652 0EA3  
                                    i1l5086 0002                                      i1l5254 0449  
                                    i1l3646 0E9F                                      i1l3670 0EB3  
                                    i1l5174 0505                                      i1l5190 027B  
                                    i1l5238 0376                                      i1l5256 044C  
                                    i1l5272 0456                                      i1l3840 0F1E  
                                    i1l3664 0EAB                                      i1l5184 050B  
                                    i1l5248 037C                                      i1l3834 0FFD  
                                    i1l5266 0453                                      i1l3850 0ED0  
                                    i1l3658 0EA7                                      i1l5178 0508  
                                    i1l5194 0281                                      i1l3676 0EB7  
                                    i1l5444 05AF                                      i1l5436 059F  
                                    i1l5198 0284                                      i1l3858 0F34  
                                    i1l3866 0F25                                      i1l3874 0EDB  
                                    i1l3882 0EAF                                      i1l4940 0600  
                                    i1l5910 01E9                                      i1l5902 0390  
                                    i1l5904 029F                                      i1l5906 051F  
                                    i1l5908 046A                                      u144_20 061B  
             ??i1_do_I2C_SEND_RESTART_WRITE 0070                          __size_of_i2c_close 0016  
                                    _OSCCON 0099                     i1_rd1RegCompleteHandler 0781  
                    ??_do_I2C_SEND_ADR_READ 0058                                      _WDTCON 0097  
                                    _SSPADD 0212                                      _SSPBUF 0211  
                  rdBlkRegCompleteHandler@p 0061                                      _SSPMSK 0213  
                                 ??_i2c_ISR 005C                     i1_wr1RegCompleteHandler 0792  
               ??i1_rdBlkRegCompleteHandler 0078                         _do_I2C_RX$intlevel0 02CC  
                     __size_ofi1_returnStop 0002                 __end_of_do_I2C_DO_NACK_STOP 0F6C  
                         __end_ofi1_i2c_ISR 05C5         __end_of_i2c_setDataCompleteCallback 07EA  
               _i2c_setDataCompleteCallback 07DD                             _i2c_masterWrite 0EC7  
                            __CFG_STVREN$ON 0000             __size_of_do_I2C_DO_NACK_RESTART 0008  
                     ?_i2c_driver_setI2cISR 0058                           ??_i2c_writeNBytes 0065  
                    __end_ofi1_do_I2C_RESET 0F25                             i1_i2c_setBuffer 07C2  
                    ??i1_i2c_driver_sendACK 0070                            ?_TMR0_Initialize 0070  
                            ?_do_I2C_DO_ACK 0070                 __size_ofi1_i2c_restartWrite 0002  
                    ??i1_i2c_driver_restart 0070                      ??i1_i2c_driver_startRX 0070  
                                 ??_initRTC 006B              __end_of_do_I2C_DO_ADDRESS_NACK 04A8  
               ?_i2c_setAddressNACKCallback 005D                             ?_WDT_Initialize 0070  
                              ?_returnReset 0061               _do_I2C_DO_NACK_STOP$intlevel0 0F68  
                i1rdBlkRegCompleteHandler@p 0059                       __end_of_TMR0_CallBack 0F87  
         __size_ofi1_do_I2C_DO_ADDRESS_NACK 002A                                ?_mssp_setIRQ 0070  
            __end_ofi1_do_I2C_SEND_ADR_READ 0F3C                           ??_mssp_disableIRQ 0058  
  TMR0_SetInterruptHandler@InterruptHandler 0058  IOCBF4_SetInterruptHandler@InterruptHandler 0058  
                 ?i1_do_I2C_DO_ADDRESS_NACK 0070                            ?_PIN_MANAGER_IOC 0070  
                              ??_IOCBF4_ISR 0070                           i1_do_I2C_TX_EMPTY 0449  
                         _SYSTEM_Initialize 0FDB                     __end_of__initialization 003E  
                           ??_i2c_setBuffer 005A              _do_I2C_SEND_ADR_READ$intlevel0 0FEB  
                          _do_I2C_SEND_STOP 0F54                                i1_returnStop 0E63  
                     i1_do_I2C_DO_NACK_STOP 0EB3                          __size_of_do_I2C_RX 004A  
                        __size_of_do_I2C_TX 0052                          ?i1_do_I2C_TX_EMPTY 0070  
                        ?_SYSTEM_Initialize 0070           _rdBlkRegCompleteHandler$intlevel0 0675  
                       _i2c_masterOperation 0652                    __size_of_do_I2C_TX_EMPTY 0035  
                          ?i1_mssp_clearIRQ 0070                             ??i1_do_I2C_IDLE 0070  
                           ??i1_do_I2C_RCEN 0070                     _rdBlkRegCompleteHandler 0671  
                               ?_i2c_poller 0070                              __pcstackCOMMON 0070  
                ??i1_do_I2C_DO_NACK_RESTART 0070                         _do_I2C_TX$intlevel0 022D  
                       ??i1_do_I2C_TX_EMPTY 0070                         ??_SYSTEM_Initialize 005B  
                                 ?_TMR0_ISR 0070                             ?i1_do_I2C_RESET 0070  
                   __end_of_i2c_driver_open 0FAF                     __end_of_i2c_driver_stop 0E8E  
                         __end_of_i2c_close 0745                                ?i1_do_I2C_RX 0070  
                              ?i1_do_I2C_TX 0070                          __end_of_IOCBF4_ISR 1000  
                       i1i2c_restartWrite@p 0059                          _i2c_driver_sendACK 0EBF  
                 i1_rdBlkRegCompleteHandler 06A8                        ?_i2c_masterOperation 0070  
            i1i2c_setDataCompleteCallback@p 0077                     ?i1_i2c_driver_getRXData 0070  
                            _OPTION_REGbits 0095                ??i1_do_I2C_SEND_RESTART_READ 0070  
                        _i2c_driver_restart 0E88                             ??_bcdMinuteDecr 0058  
                           ??_bcdMinuteIncr 0058                      __size_ofi1_setCallBack 0024  
                        _i2c_driver_startRX 0E8E                      ??_i2c_driver_getRXData 0058  
                           i1setCallBack@cb 0070                    i1rd1RegCompleteHandler@p 0059  
                           i1_do_I2C_DO_ACK 0EAF                 ?_IOCBF4_SetInterruptHandler 0058  
                       ?_i2c_driver_sendACK 0070                              setCallBack@idx 005C  
                 __end_ofi1_do_I2C_TX_EMPTY 0479                      _do_I2C_DO_NACK_RESTART 0F6C  
                 __end_of_SYSTEM_Initialize 0FE7                   ??i1_rd1RegCompleteHandler 0078  
                       ?_i2c_driver_restart 0070                                  __pbssBANK0 0020  
                 ??i1_wr1RegCompleteHandler 0078                         ?_i2c_driver_startRX 0070  
            __size_of_rd2RegCompleteHandler 0016                                   ?_i2c_open 0070  
             __end_of_rd2RegCompleteHandler 06ED                               ??_bcdHourDecr 0058  
                             ??_bcdHourIncr 0058                             __CFG_VCAPEN$RA0 0000  
            __size_of_wr2RegCompleteHandler 0016            __size_ofi1_rd2RegCompleteHandler 0011  
             __end_of_wr2RegCompleteHandler 072F                     __end_of_i2c_masterWrite 0ECB  
                  i1wr1RegCompleteHandler@p 0059                            _i2c_driver_start 0E85  
                     _rd1RegCompleteHandler 06ED                     __end_ofi1_i2c_setBuffer 07D0  
          __size_ofi1_wr2RegCompleteHandler 0011                       _do_I2C_IDLE$intlevel0 07FB  
                     _wr1RegCompleteHandler 0703                __size_of_i2c_busCollisionISR 0003  
           _wr1RegCompleteHandler$intlevel0 0707             _rd1RegCompleteHandler$intlevel0 06F1  
                                __pmaintext 0042                               ??_do_I2C_IDLE 0058  
                      __size_of_setCallBack 0025                               ??_do_I2C_RCEN 0058  
                      ??_i2c_driver_sendACK 0058                      ??_i2c_driver_setI2cISR 005A  
          __end_of_TMR0_SetInterruptHandler 0EED                          __size_of_secondISR 0024  
                                ??_TMR0_ISR 0072                             ??_do_I2C_DO_ACK 0058  
                                __pintentry 0004                        ??_i2c_driver_restart 0058  
              __size_of_i2c_driver_sendNACK 0004                        ??_i2c_driver_startRX 0058  
          ??_IOCBF4_DefaultInterruptHandler 0070             ?_IOCBF4_DefaultInterruptHandler 0070  
                       i2c_setBuffer@buffer 005B                __size_of_i2c_driver_resetBus 0001  
            __end_ofi1_i2c_driver_getRXData 0E79              ?_i2c_driver_setBusCollisionISR 0058  
                     ??_i2c_masterOperation 005F                           __end_of_do_I2C_RX 0312  
                         __end_of_do_I2C_TX 027B                       i2c_readDataBlock@data 0063  
                  ?i1_do_I2C_SEND_ADR_WRITE 0070                          __size_of_updateRTC 001A  
                                   _OSCTUNE 0098                                  _displayNum 1000  
                       __size_of_i2c_poller 000B                                     _SSPCON1 0215  
                                   _SSPCON2 0216                     ??_do_I2C_SEND_ADR_WRITE 0059  
       _do_I2C_SEND_RESTART_WRITE$intlevel0 0F48                                     _SSPSTAT 0214  
               ??_do_I2C_SEND_RESTART_WRITE 0058                      ?i1_do_I2C_DO_NACK_STOP 0070  
                         _mssp_IRQisEnabled 0F9B                                  ??_i2c_open 005A  
                                   _i2c_ISR 04D4                   ??_rdBlkRegCompleteHandler 0062  
                         _mssp_waitForEvent 0FC5                          ?_mssp_IRQisEnabled 0070  
                     __end_of_mssp_clearIRQ 0E82                       _returnReset$intlevel0 0EF7  
                     _do_I2C_RCEN$intlevel0 0F95                               i1_setCallBack 05EA  
                        ?_mssp_waitForEvent 0070            _do_I2C_DO_ADDRESS_NACK$intlevel0 047D  
               __end_ofi1_i2c_driver_TXData 0ED0                         __end_of_bcdHourDecr 075B  
                       __end_of_bcdHourIncr 06D7         __size_of_i2c_setAddressNACKCallback 000D  
                    __size_ofi1_returnReset 0002                         ??_mssp_IRQisEnabled 0058  
                    __size_ofi1_mssp_setIRQ 0003                           ??_do_I2C_TX_EMPTY 0058  
                          ?_i2c_driver_open 0070                         ??_mssp_waitForEvent 0058  
                          ?_i2c_driver_stop 0070                      i2c_writeNBytes@address 0065  
               __end_ofi1_i2c_driver_isNACK 0F34                     __end_ofi1_do_I2C_DO_ACK 0EB3  
                                   __ptext1 068E                                     __ptext2 039F  
                                   __ptext3 0579                                     __ptext4 03DA  
                                   __ptext5 07D0                                     __ptext6 0312  
                                   __ptext7 0F0B                                     __ptext8 0F05  
                                   __ptext9 0FA5                          i2c_readDataBlock@d 0068  
                       __end_of_do_I2C_IDLE 0800                         __end_of_do_I2C_RCEN 0F9B  
                                   _initRTC 039F                       _OSCILLATOR_Initialize 0F87  
                   ??i1_i2c_driver_sendNACK 0070                 __end_of_do_I2C_SEND_RESTART 0F54  
                  ??_PIN_MANAGER_Initialize 005A                                     _rtcData 004F  
                                 _IOCBFbits 0396                               bcdHourDecr@hr 0058  
                    i2c_masterOperation@ret 0061                                   _IOCBNbits 0395  
                   ??i1_i2c_driver_resetBus 0070                                   _IOCBPbits 0394  
                        i1_do_I2C_SEND_STOP 0EAB                  _do_I2C_SEND_STOP$intlevel0 0F58  
                __size_ofi1_do_I2C_TX_EMPTY 0030                    _do_I2C_SEND_RESTART_READ 0F3C  
                __size_of_SYSTEM_Initialize 000C                                     clrloop0 0F12  
                 __end_of_mssp_IRQisEnabled 0FA5                           __end_of_secondISR 0632  
                             bcdHourIncr@hr 0058                        __size_of_returnReset 0006  
                      end_of_initialization 003E                        __size_of_mssp_setIRQ 0003  
                 __end_of_mssp_waitForEvent 0FD0                   __size_of_i2c_restartWrite 0006  
                       ?i1_do_I2C_SEND_STOP 0070                      ?_rd1RegCompleteHandler 0061  
                           _i2c_writeNBytes 0579                            ?_i2c_masterWrite 0070  
                    ?_wr1RegCompleteHandler 0061                              ?i1_setCallBack 0070  
                          ?i1_i2c_setBuffer 0070                           __end_of_updateRTC 06A8  
                 _do_I2C_SEND_RESTART_WRITE 0F44                       i1_do_I2C_SEND_RESTART 0EA7  
          __end_ofi1_do_I2C_DO_ADDRESS_NACK 0528                          _button_press_count 003D  
           __end_ofi1_do_I2C_SEND_ADR_WRITE 0F2C                             _mssp_disableIRQ 0E82  
                          ??_WDT_Initialize 0058                                   i1_i2c_ISR 059F  
                      ??i1_do_I2C_SEND_STOP 0070                                  _returnStop 0EED  
                  _TMR0_SetInterruptHandler 0EE7                                   _PORTBbits 000D  
           __end_of_rdBlkRegCompleteHandler 068E                    __end_of_do_I2C_SEND_STOP 0F5C  
        __end_ofi1_do_I2C_SEND_RESTART_READ 0EA3                  i1_do_I2C_SEND_RESTART_READ 0E9F  
                          __CFG_FOSC$INTOSC 0000                        __size_ofi1_do_I2C_RX 0045  
                      __size_ofi1_do_I2C_TX 004D        __size_of_i2c_setDataCompleteCallback 000D  
                             i1_returnReset 0E65                                 returnStop@p 0061  
                             i1_mssp_setIRQ 0E79          __size_ofi1_rdBlkRegCompleteHandler 0018  
              i2c_setDataCompleteCallback@p 005F                     i1_rd2RegCompleteHandler 0770  
                               _bcdHourDecr 0745                                 _bcdHourIncr 06C0  
                   i1_wr2RegCompleteHandler 07A3               __size_of_do_I2C_SEND_ADR_READ 000C  
                          ??i1_do_I2C_RESET 0070                    _flag_time_display_update 004E  
                              ??_i2c_poller 005F                                 _do_I2C_IDLE 07F7  
                               _do_I2C_RCEN 0F91                  __end_ofi1_i2c_restartWrite 0004  
      __end_of_i2c_driver_clearBusCollision 0E6A       __size_of_i2c_driver_clearBusCollision 0003  
              _i2c_driver_clearBusCollision 0E67                          _mode_timeout_count 004B  
                         __size_of_TMR0_ISR 0007                                  ?i1_i2c_ISR 0070  
                          ?i1_do_I2C_DO_ACK 0070                      ?_OSCILLATOR_Initialize 0070  
             __size_ofi1_i2c_driver_sendACK 0004                __size_of_do_I2C_DO_NACK_STOP 0008  
                  __end_of_i2c_driver_start 0E88               __size_ofi1_i2c_driver_restart 0003  
                   ?_do_I2C_DO_NACK_RESTART 0070                         start_initialization 0031  
                        updateRTC@bcdMinute 0066                                   _i2c_close 072F  
             __size_ofi1_i2c_driver_startRX 0003                         _i2c_busCollisionISR 0E6A  
                  __size_of_TMR0_Initialize 0015             __size_of_PIN_MANAGER_Initialize 002C  
                            ?i1_returnReset 0059                     __end_of_i2c_writeNBytes 059F  
       __end_ofi1_do_I2C_SEND_RESTART_WRITE 0EA7                 i1_do_I2C_SEND_RESTART_WRITE 0EA3  
                            ?i1_mssp_setIRQ 0070                              _flag_dot_blink 004D  
                __size_of_mssp_IRQisEnabled 000A                                setCallBack@p 005A  
                        __end_of_i2c_poller 0FDB                           _displayRefreshISR 01C9  
                       _i2c_driver_sendNACK 0EC3                             i2c_open@address 005B  
                   i2c_setBuffer@bufferSize 0058                  __size_of_mssp_waitForEvent 000B  
                    rd1RegCompleteHandler@p 0061                          ?_displayRefreshISR 0070  
                       _i2c_driver_resetBus 0E62                             ??i1_setCallBack 0073  
                   _flag_button_press_count 0041                       __end_of_i2c_setBuffer 07C2  
                         __size_of_i2c_open 0048                    __size_of_PIN_MANAGER_IOC 0006  
     __end_ofi1_i2c_setDataCompleteCallback 07F7      __size_ofi1_i2c_setDataCompleteCallback 000D  
             i1_i2c_setDataCompleteCallback 07EA                        ?_i2c_busCollisionISR 0070  
                   __end_of_mssp_disableIRQ 0E85                            i1setCallBack@idx 0074  
                       ??_displayRefreshISR 0070                       __end_ofi1_do_I2C_IDLE 0ED5  
                     __end_ofi1_do_I2C_RCEN 0EE1                   i1i2c_setBuffer@bufferSize 0070  
                    ?i1_do_I2C_SEND_RESTART 0070                      wr1RegCompleteHandler@p 0061  
                    __size_of_TMR0_CallBack 000A                        ?_i2c_driver_sendNACK 0070  
                             ?_do_I2C_RESET 0070                   _do_I2C_TX_EMPTY$intlevel0 0418  
                  __size_ofi1_mssp_clearIRQ 0003                                 ?_returnStop 0061  
                      ?_i2c_driver_resetBus 0070                           _i2c_driver_TXData 0EFF  
            __end_of_do_I2C_DO_NACK_RESTART 0F74               ?_i2c_driver_clearBusCollision 0070  
                         _i2c_driver_i2cISR 0049                    i1_do_I2C_DO_ADDRESS_NACK 04FE  
                        ?_i2c_driver_TXData 0070                                 __pbssCOMMON 0078  
                                ?_i2c_close 0070                                   ___latbits 0003  
                             __pcstackBANK0 0058                               __pcstackBANK1 00A0  
         __size_ofi1_do_I2C_DO_NACK_RESTART 0004                    i1rd2RegCompleteHandler@p 0059  
                                 _do_I2C_RX 02C8                   ?i1_do_I2C_DO_NACK_RESTART 0070  
                                 _do_I2C_TX 0229                   __end_of_displayRefreshISR 0229  
                         _i2c_driver_isNACK 0F74                       __end_of_bcdMinuteDecr 0579  
                   ??i1_do_I2C_DO_NACK_STOP 0070                       __end_of_bcdMinuteIncr 0551  
                          updateRTC@bcdHour 0068                   ??i1_rd2RegCompleteHandler 0078  
             __size_of_i2c_driver_getRXData 0003      __end_of_IOCBF4_DefaultInterruptHandler 0E60  
   __size_of_IOCBF4_DefaultInterruptHandler 0001              _IOCBF4_DefaultInterruptHandler 0E5F  
                        ?_i2c_driver_isNACK 0070                         ??_i2c_driver_TXData 0058  
            __size_of_do_I2C_SEND_ADR_WRITE 000B                   ??i1_wr2RegCompleteHandler 0078  
             __end_of_do_I2C_SEND_ADR_WRITE 0FC5             ??_i2c_driver_setBusCollisionISR 005A  
                            i1setCallBack@p 0072                            _i2c_restartWrite 0EF9  
                _i2c_restartWrite$intlevel0 0EFD                                    ?_i2c_ISR 0070  
           _do_I2C_SEND_ADR_WRITE$intlevel0 0FBE            __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                           _do_I2C_TX_EMPTY 0414                       _TMR0_InterruptHandler 0078  
                             ??_setCallBack 005B                                   __pnvBANK0 006D  
                  i1wr2RegCompleteHandler@p 0059                       _rd2RegCompleteHandler 06D7  
                       ??_i2c_driver_isNACK 0058                       ??_i2c_busCollisionISR 0070  
                     __end_of_fsmStateTable 0652                      _PIN_MANAGER_Initialize 04A8  
                     _wr2RegCompleteHandler 0719                 __size_of_i2c_driver_sendACK 0004  
                            ??_do_I2C_RESET 0058                                   __ptext100 0E63  
                                 __ptext101 07A3                                   __ptext110 0F17  
                                 __ptext102 07EA                                   __ptext111 0F7D  
                                 __ptext103 05EA                                   __ptext112 0E60  
                                 __ptext104 07C2                                   __ptext113 01C9  
                                 __ptext105 0E70                                   __ptext114 0ED5  
                                 __ptext106 0E6D                                   __ptext115 0FF3  
                                 __ptext107 0E97                                   __ptext116 0E5F  
                                 __ptext108 0E6A                       ??_i2c_driver_sendNACK 0058  
                                 __ptext117 060E                                   __ptext109 0E67  
               __end_of_i2c_masterOperation 0671                    ??_do_I2C_DO_ADDRESS_NACK 0058  
             __size_of_i2c_driver_setI2cISR 0006                 __size_of_i2c_driver_restart 0003  
                      i2c_readDataBlock@len 0064                   __end_of_i2c_driver_TXData 0F05  
                      i2c_readDataBlock@reg 0062                       __end_of_do_I2C_DO_ACK 0F64  
                     ??_i2c_driver_resetBus 0058                 __size_of_i2c_driver_startRX 0003  
                               ??i1_i2c_ISR 0073                ??_INTERRUPT_InterruptManager 0076  
                ??_do_I2C_SEND_RESTART_READ 0058                    ??i1_do_I2C_SEND_ADR_READ 0070  
                                  ?_initRTC 0070                             ??i1_returnReset 0078  
                         _i2c_readDataBlock 03DA                   __end_of_i2c_driver_isNACK 0F7D  
                  ?i1_rd1RegCompleteHandler 0059          __size_of_do_I2C_SEND_RESTART_WRITE 0008  
                           ??i1_mssp_setIRQ 0070              __size_ofi1_i2c_driver_sendNACK 0004  
             __end_ofi1_i2c_driver_sendNACK 0E9F                    ?i1_wr1RegCompleteHandler 0059  
                                ?_do_I2C_RX 0070                                  ?_do_I2C_TX 0070  
                        ?_i2c_readDataBlock 0062                            ?_i2c_writeNBytes 0062  
            __size_ofi1_i2c_driver_resetBus 0001                               _TMR0_CallBack 0F7D  
             __end_ofi1_i2c_driver_resetBus 0E62                     ??_rd1RegCompleteHandler 0062  
                         _i2c_ISR$intlevel0 04D8                     ??_wr1RegCompleteHandler 0062  
                         ??_TMR0_Initialize 005A                         ??_i2c_readDataBlock 0066  
                                  _LATAbits 010C                                   _secondISR 060E  
                                  _LATCbits 010E                                    _LATEbits 0110  
                       __size_of_returnStop 0006                                   clear_ram0 0F11  
                                  _PIE1bits 0091                                    _PIE2bits 0092  
       __size_of_INTERRUPT_InterruptManager 002B                  ??_TMR0_SetInterruptHandler 005A  
                                  _PIR1bits 0011                                    _PIR2bits 0012  
                          ?_mssp_disableIRQ 0070                                    _TMR0_ISR 0F17  
              ?_i2c_setDataCompleteCallback 005D              ?i1_i2c_setDataCompleteCallback 0075  
                               _displayBuff 0045                         __end_of_setCallBack 05EA  
                         ??_PIN_MANAGER_IOC 0070                                   _updateRTC 068E  
                 __end_of_i2c_readDataBlock 0414                __size_ofi1_i2c_driver_TXData 0005  
                         i1_i2c_driver_stop 0E70                i2c_setAddressNACKCallback@cb 005D  
                         ?_do_I2C_SEND_STOP 0070                 ?i1_do_I2C_SEND_RESTART_READ 0070  
                        ?i1_i2c_driver_stop 0070                                 ??_i2c_close 0058  
                             ??_returnReset 0062                          ??_do_I2C_SEND_STOP 0058  
                    __size_of_mssp_clearIRQ 0003                    __size_of_i2c_driver_open 000A  
                         ??i1_mssp_clearIRQ 0070                ??_i2c_setAddressNACKCallback 0060  
                  __size_of_i2c_driver_stop 0003                  __size_of_displayRefreshISR 0060  
         __end_of_do_I2C_SEND_RESTART_WRITE 0F4C                __size_ofi1_i2c_driver_isNACK 0008  
                             ??_mssp_setIRQ 0058              ??_i2c_driver_clearBusCollision 0070  
                            ?_TMR0_CallBack 0070                     __end_of_do_I2C_TX_EMPTY 0449  
                  ?_rdBlkRegCompleteHandler 0061                         ??i1_i2c_driver_stop 0070  
              __size_of_do_I2C_SEND_RESTART 0008                     _do_I2C_DO_ACK$intlevel0 0F60  
                                  _i2c_open 0312                               ?i1_returnStop 0059  
                              ?_bcdHourDecr 0070                      ?_rd2RegCompleteHandler 0061  
                                ?_secondISR 0070                                ?_bcdHourIncr 0070  
                       _do_I2C_DO_NACK_STOP 0F64                                  _EECON1bits 0195  
                          __size_of_i2c_ISR 002A                      ?_wr2RegCompleteHandler 0061  
           _wr2RegCompleteHandler$intlevel0 071D             _rd2RegCompleteHandler$intlevel0 06DB  
     __end_of_i2c_driver_setBusCollisionISR 0F0B      __size_of_i2c_driver_setBusCollisionISR 0006  
             _i2c_driver_setBusCollisionISR 0F05                         i2c_writeNBytes@data 0062  
                              ?_do_I2C_IDLE 0070                    ??i1_i2c_driver_getRXData 0070  
                              ?_do_I2C_RCEN 0070                     ??_OSCILLATOR_Initialize 0058  
                  __size_of_i2c_masterWrite 0004                  __size_of_i2c_driver_TXData 0006  
           __size_of_do_I2C_DO_ADDRESS_NACK 002F                   __end_ofi1_i2c_driver_stop 0E73  
                        __end_of_displayNum 100A                       i1i2c_setBuffer@buffer 0073  
                                ?_updateRTC 0066               ??_i2c_setDataCompleteCallback 0060  
           __end_ofi1_rd1RegCompleteHandler 0792                    __size_ofi1_i2c_setBuffer 000E  
                             ??i1_do_I2C_RX 0070                               ??i1_do_I2C_TX 0070  
        _do_I2C_SEND_RESTART_READ$intlevel0 0F40                 __size_ofi1_do_I2C_SEND_STOP 0004  
           __end_ofi1_wr1RegCompleteHandler 07A3                        ?_do_I2C_DO_NACK_STOP 0070  
              __end_of_do_I2C_SEND_ADR_READ 0FF3             __size_ofi1_do_I2C_SEND_ADR_READ 0008  
                __size_of_i2c_driver_isNACK 0009                     _IOCBF4_InterruptHandler 006D  
                         ?_i2c_driver_start 0070                            __size_of_initRTC 003B  
                        i1_i2c_restartWrite 0002                                 ??_do_I2C_RX 0058  
                               ??_do_I2C_TX 0059                          ??_i2c_driver_start 0058  
                                  __ptext10 0EC7                                    __ptext11 0652  
                                  __ptext20 0F64                                    __ptext12 0F9B  
                                  __ptext21 0F5C                                    __ptext13 0FD0  
                                  __ptext30 0FAF                                    __ptext22 0F91  
                                  __ptext14 0FC5                                    __ptext31 0414  
                                  __ptext23 0FBA                                    __ptext15 04D4  
                                  __ptext40 06D7                                    __ptext32 0E94  
                                  __ptext24 0FE7                                    __ptext16 02C8  
                                  __ptext41 06ED                                    __ptext33 0F74  
                                  __ptext25 0F54                                    __ptext17 0229  
                                  __ptext50 0E8B                                    __ptext42 0703  
                                  __ptext34 0EFF                                    __ptext26 0F4C  
                                  __ptext18 0479                                    __ptext51 0E88  
                                  __ptext43 0EF9                                    __ptext35 0E91  
                                  __ptext27 0F44                                    __ptext19 0F6C  
                                  __ptext60 0745                                    __ptext52 0EBF  
                                  __ptext44 0EF3                                    __ptext36 0EC3  
                                  __ptext28 0F3C                                    __ptext61 0FDB  
                                  __ptext53 0E85                                    __ptext45 0EED  
                                  __ptext37 0E62                                    __ptext29 07F7  
                                  __ptext70 0E7C                                    __ptext62 0EBB  
                                  __ptext54 072F                                    __ptext46 0719  
                                  __ptext38 0E8E                                    __ptext71 035A  
                                  __ptext63 075B                                    __ptext55 0E82  
                                  __ptext47 07DD                                    __ptext39 0671  
                                  __ptext80 0EAB                                    __ptext72 027B  
                                  __ptext64 0EE7                                    __ptext56 0E7F  
                                  __ptext48 05C5                                    __ptext81 0EA7  
                                  __ptext73 04FE                                    __ptext65 04A8  
                                  __ptext57 0528                                    __ptext49 07B4  
                                  __ptext90 0E76                                    __ptext82 0EA3  
                                  __ptext74 0EB7                                    __ptext66 0EE1  
                                  __ptext58 0551                                    __ptext91 0E9B  
                                  __ptext83 0E9F                                    __ptext75 0EB3  
                                  __ptext67 0F87                                    __ptext59 06C0  
                                  __ptext92 0E61                                    __ptext84 0ED0  
                                  __ptext76 0EAF                                    __ptext93 0E73  
                                  __ptext85 0F1E                                    __ptext77 0EDB  
                                  __ptext69 059F                                    __ptext94 0002  
                                  __ptext86 0449                                    __ptext78 0F25  
                                  __ptext95 06A8                                    __ptext87 0E79  
                                  __ptext79 0F34                                    __ptext96 0770  
                                  __ptext88 0F2C                                    __ptext97 0781  
                                  __ptext89 0ECB                                    __ptext98 0792  
                                  __ptext99 0E65                ??_IOCBF4_SetInterruptHandler 005A  
                      __end_of_do_I2C_RESET 0FBA                                  _IOCBF4_ISR 0FF3  
                            ??i1_returnStop 0078                     i1_do_I2C_SEND_ADR_WRITE 0F25  
                       ?i1_i2c_restartWrite 0059                __end_ofi1_i2c_driver_sendACK 0E9B  
                       __end_of_returnReset 0EF9                               __size_of_main 0187  
                       __end_of_mssp_setIRQ 0E97                __end_ofi1_i2c_driver_restart 0E70  
                      i1i2c_driver_TXData@d 0070        __end_of_TMR0_DefaultInterruptHandler 0E61  
     __size_of_TMR0_DefaultInterruptHandler 0001                _TMR0_DefaultInterruptHandler 0E60  
              __end_ofi1_i2c_driver_startRX 0E76                    i2c_readDataBlock@address 0067  
                               _setCallBack 05C5                     ??i1_do_I2C_SEND_RESTART 0070  
                             _mssp_clearIRQ 0E7F                     i2c_masterOperation@read 0060  
      __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004                                    int$flags 007E  
                ??i1_do_I2C_DO_ADDRESS_NACK 0070            __end_ofi1_do_I2C_DO_NACK_RESTART 0EBB  
        __end_of_INTERRUPT_InterruptManager 002F                  _INTERRUPT_InterruptManager 0004  
                      ??i1_i2c_restartWrite 0078            __end_of_do_I2C_SEND_RESTART_READ 0F44  
                              ??_returnStop 0062                    __end_of_i2c_restartWrite 0EFF  
                     ??_do_I2C_DO_NACK_STOP 0058                  __size_of_i2c_readDataBlock 003A  
                  mssp_waitForEvent@timeout 0058         __size_of_IOCBF4_SetInterruptHandler 0006  
      i2c_driver_setBusCollisionISR@handler 0058                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0072                          i2c_writeNBytes@len 0063  
                       __end_ofi1_do_I2C_RX 039F                         __end_ofi1_do_I2C_TX 02C8  
                  __size_ofi1_do_I2C_DO_ACK 0004                            ?_do_I2C_TX_EMPTY 0070  
                   __size_of_WDT_Initialize 0004                      _do_I2C_DO_ADDRESS_NACK 0479  
            __size_ofi1_do_I2C_DO_NACK_STOP 0004                                    intlevel1 0000  
             __end_ofi1_do_I2C_DO_NACK_STOP 0EB7                      _do_I2C_RESET$intlevel0 0FB3  
                    rd2RegCompleteHandler@p 0061                           ??_i2c_driver_open 0058  
                         ??_i2c_driver_stop 0058                     ?_PIN_MANAGER_Initialize 0070  
                               ??_secondISR 0070                           i2c_restartWrite@p 0061  
                    i1_do_I2C_SEND_ADR_READ 0F34                           __CFG_CLKOUTEN$OFF 0000  
                ?i1_rdBlkRegCompleteHandler 0059                          __end_of_returnStop 0EF3  
                            ?_mssp_clearIRQ 0070                       __end_ofi1_setCallBack 060E  
       __size_ofi1_do_I2C_SEND_RESTART_READ 0004               ?_TMR0_DefaultInterruptHandler 0070  
              __end_of_i2c_driver_getRXData 0E94             __size_ofi1_i2c_driver_getRXData 0003  
                    wr2RegCompleteHandler@p 0061                             bcdMinuteDecr@mn 0058  
                __size_ofi1_i2c_driver_stop 0003                                 ??_updateRTC 0067  
                        displayRefreshISR@i 007C                               __pstringtext1 0632  
                             __pstringtext2 1000                             bcdMinuteIncr@mn 0058  
                   __size_ofi1_do_I2C_RESET 0007                                  _OPTION_REG 0095  
                           _TMR0_Initialize 075B                           ??_i2c_masterWrite 0062  
        __end_of_i2c_setAddressNACKCallback 07DD                  _i2c_setAddressNACKCallback 07D0  
                    __size_of_i2c_setBuffer 000E                           ??i1_i2c_setBuffer 0072  
                               _returnReset 0EF3            _do_I2C_DO_NACK_RESTART$intlevel0 0F70  
                               _SSPCON1bits 0215                                 _SSPCON2bits 0216  
                               _mssp_setIRQ 0E94                   ??i1_do_I2C_SEND_ADR_WRITE 0070  
              __end_of_i2c_driver_setI2cISR 0F11                      __size_ofi1_do_I2C_IDLE 0005  
                    __size_ofi1_do_I2C_RCEN 0006                                 ?_IOCBF4_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 04D4                 __end_of_i2c_busCollisionISR 0E6D  
            __size_of_rd1RegCompleteHandler 0016               __end_of_rd1RegCompleteHandler 0703  
                       i1_i2c_driver_TXData 0ECB                             _PIN_MANAGER_IOC 0ED5  
            __size_of_wr1RegCompleteHandler 0016            __size_ofi1_rd1RegCompleteHandler 0011  
             __end_of_wr1RegCompleteHandler 0719                       _do_I2C_SEND_ADR_WRITE 0FBA  
               __end_of_i2c_driver_sendNACK 0EC7                        _do_I2C_SEND_ADR_READ 0FE7  
         __end_ofi1_rdBlkRegCompleteHandler 06C0            __size_ofi1_wr1RegCompleteHandler 0011  
                __end_of_i2c_driver_sendACK 0EC3                        __size_of_bcdHourDecr 0016  
                      __size_of_bcdHourIncr 0017                 __end_of_i2c_driver_resetBus 0E63  
