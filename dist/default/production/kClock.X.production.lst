

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jul 21 15:26:02 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F1939
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	text68,local,class=CODE,merge=1,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,delta=2
    88                           	psect	text74,local,class=CODE,merge=1,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,delta=2
    90                           	psect	text76,local,class=CODE,merge=1,delta=2
    91                           	psect	text77,local,class=CODE,merge=1,delta=2
    92                           	psect	text78,local,class=CODE,merge=1,delta=2
    93                           	psect	text79,local,class=CODE,merge=1,delta=2
    94                           	psect	text80,local,class=CODE,merge=1,delta=2
    95                           	psect	text81,local,class=CODE,merge=1,delta=2
    96                           	psect	text82,local,class=CODE,merge=1,delta=2
    97                           	psect	text83,local,class=CODE,merge=1,delta=2
    98                           	psect	text84,local,class=CODE,merge=1,delta=2
    99                           	psect	text85,local,class=CODE,merge=1,delta=2
   100                           	psect	text86,local,class=CODE,merge=1,delta=2
   101                           	psect	text87,local,class=CODE,merge=1,delta=2
   102                           	psect	text88,local,class=CODE,merge=1,delta=2
   103                           	psect	text89,local,class=CODE,merge=1,delta=2
   104                           	psect	intentry,global,class=CODE,delta=2
   105                           	psect	text91,local,class=CODE,merge=1,delta=2
   106                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text93,local,class=CODE,merge=1,delta=2
   108                           	psect	text94,local,class=CODE,merge=1,delta=2
   109                           	psect	text95,local,class=CODE,merge=1,delta=2
   110                           	psect	text96,local,class=CODE,merge=1,delta=2
   111                           	psect	text97,local,class=CODE,merge=1,delta=2
   112                           	psect	text98,local,class=CODE,merge=1,delta=2
   113                           	psect	text99,local,class=CODE,merge=1,delta=2
   114                           	psect	text100,local,class=CODE,merge=1,delta=2
   115                           	psect	text101,local,class=CODE,merge=1,delta=2
   116                           	psect	text102,local,class=CODE,merge=1,delta=2
   117                           	psect	text103,local,class=CODE,merge=1,delta=2
   118                           	psect	text104,local,class=CODE,merge=1,delta=2
   119                           	psect	text105,local,class=CODE,merge=1,delta=2
   120                           	psect	text106,local,class=CODE,merge=1,delta=2
   121                           	psect	text107,local,class=CODE,merge=1,delta=2
   122                           	psect	text108,local,class=CODE,merge=1,delta=2
   123                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text116,local,class=CODE,merge=1,delta=2
   131                           	psect	text117,local,class=CODE,merge=1,delta=2
   132                           	psect	text118,local,class=CODE,merge=1,delta=2
   133                           	psect	text119,local,class=CODE,merge=1,delta=2
   134                           	psect	text120,local,class=CODE,merge=1,delta=2
   135                           	psect	text121,local,class=CODE,merge=1,delta=2
   136                           	psect	text122,local,class=CODE,merge=1,delta=2
   137                           	psect	text123,local,class=CODE,merge=1,delta=2
   138                           	psect	text124,local,class=CODE,merge=1,delta=2
   139                           	psect	text125,local,class=CODE,merge=1,delta=2
   140                           	psect	text126,local,class=CODE,merge=1,delta=2
   141                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text130,local,class=CODE,merge=1,delta=2
   145                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text132,local,class=CODE,merge=1,delta=2
   147                           	psect	text133,local,class=CODE,merge=1,delta=2
   148                           	psect	text134,local,class=CODE,merge=1,delta=2
   149                           	psect	text135,local,class=CODE,merge=1,delta=2
   150                           	psect	text136,local,class=CODE,merge=1,delta=2
   151                           	psect	text137,local,class=CODE,merge=1,delta=2
   152                           	psect	text138,local,class=CODE,merge=1,delta=2
   153                           	psect	text139,local,class=CODE,merge=1,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     
   156                           ; Version 2.10
   157                           ; Generated 31/07/2019 GMT
   158                           ; 
   159                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   160                           ; All rights reserved.
   161                           ; 
   162                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   163                           ; 
   164                           ; Redistribution and use in source and binary forms, with or without modification, are
   165                           ; permitted provided that the following conditions are met:
   166                           ; 
   167                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   168                           ;        conditions and the following disclaimer.
   169                           ; 
   170                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   171                           ;        of conditions and the following disclaimer in the documentation and/or other
   172                           ;        materials provided with the distribution.
   173                           ; 
   174                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   175                           ;        software without specific prior written permission.
   176                           ; 
   177                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   178                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   179                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   180                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   181                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   182                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   183                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   184                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   185                           ; 
   186                           ; 
   187                           ; Code-generator required, PIC16F1939 Definitions
   188                           ; 
   189                           ; SFR Addresses
   190  0000                     	;# 
   191  0001                     	;# 
   192  0002                     	;# 
   193  0003                     	;# 
   194  0004                     	;# 
   195  0005                     	;# 
   196  0006                     	;# 
   197  0007                     	;# 
   198  0008                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000F                     	;# 
   206  0010                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0013                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  008F                     	;# 
   225  0090                     	;# 
   226  0091                     	;# 
   227  0092                     	;# 
   228  0093                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0098                     	;# 
   233  0099                     	;# 
   234  009A                     	;# 
   235  009B                     	;# 
   236  009B                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0110                     	;# 
   245  0111                     	;# 
   246  0112                     	;# 
   247  0113                     	;# 
   248  0114                     	;# 
   249  0115                     	;# 
   250  0116                     	;# 
   251  0117                     	;# 
   252  0118                     	;# 
   253  0119                     	;# 
   254  011A                     	;# 
   255  011B                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  018F                     	;# 
   260  0190                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019C                     	;# 
   277  019C                     	;# 
   278  019D                     	;# 
   279  019E                     	;# 
   280  019F                     	;# 
   281  020D                     	;# 
   282  0210                     	;# 
   283  0211                     	;# 
   284  0212                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0216                     	;# 
   290  0217                     	;# 
   291  0291                     	;# 
   292  0291                     	;# 
   293  0292                     	;# 
   294  0293                     	;# 
   295  0294                     	;# 
   296  0295                     	;# 
   297  0295                     	;# 
   298  0296                     	;# 
   299  0298                     	;# 
   300  0298                     	;# 
   301  0299                     	;# 
   302  029A                     	;# 
   303  029B                     	;# 
   304  029C                     	;# 
   305  029C                     	;# 
   306  029D                     	;# 
   307  029E                     	;# 
   308  029F                     	;# 
   309  0311                     	;# 
   310  0311                     	;# 
   311  0312                     	;# 
   312  0313                     	;# 
   313  0314                     	;# 
   314  0315                     	;# 
   315  0315                     	;# 
   316  0316                     	;# 
   317  0318                     	;# 
   318  0318                     	;# 
   319  0319                     	;# 
   320  031A                     	;# 
   321  031C                     	;# 
   322  031C                     	;# 
   323  031D                     	;# 
   324  031E                     	;# 
   325  0394                     	;# 
   326  0395                     	;# 
   327  0396                     	;# 
   328  0415                     	;# 
   329  0416                     	;# 
   330  0417                     	;# 
   331  041C                     	;# 
   332  041D                     	;# 
   333  041E                     	;# 
   334  0791                     	;# 
   335  0792                     	;# 
   336  0793                     	;# 
   337  0794                     	;# 
   338  0795                     	;# 
   339  0798                     	;# 
   340  0799                     	;# 
   341  079A                     	;# 
   342  07A0                     	;# 
   343  07A1                     	;# 
   344  07A2                     	;# 
   345  07A3                     	;# 
   346  07A4                     	;# 
   347  07A5                     	;# 
   348  07A6                     	;# 
   349  07A7                     	;# 
   350  07A8                     	;# 
   351  07A9                     	;# 
   352  07AA                     	;# 
   353  07AB                     	;# 
   354  0FE4                     	;# 
   355  0FE5                     	;# 
   356  0FE6                     	;# 
   357  0FE7                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEB                     	;# 
   362  0FED                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0015                     	;# 
   386  0016                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001C                     	;# 
   394  001E                     	;# 
   395  001F                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  008F                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0097                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009A                     	;# 
   410  009B                     	;# 
   411  009B                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009E                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010E                     	;# 
   418  010F                     	;# 
   419  0110                     	;# 
   420  0111                     	;# 
   421  0112                     	;# 
   422  0113                     	;# 
   423  0114                     	;# 
   424  0115                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  0118                     	;# 
   428  0119                     	;# 
   429  011A                     	;# 
   430  011B                     	;# 
   431  011D                     	;# 
   432  018C                     	;# 
   433  018D                     	;# 
   434  018F                     	;# 
   435  0190                     	;# 
   436  0191                     	;# 
   437  0191                     	;# 
   438  0192                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0193                     	;# 
   442  0194                     	;# 
   443  0195                     	;# 
   444  0196                     	;# 
   445  0199                     	;# 
   446  019A                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019C                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019F                     	;# 
   456  020D                     	;# 
   457  0210                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0294                     	;# 
   471  0295                     	;# 
   472  0295                     	;# 
   473  0296                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  029B                     	;# 
   479  029C                     	;# 
   480  029C                     	;# 
   481  029D                     	;# 
   482  029E                     	;# 
   483  029F                     	;# 
   484  0311                     	;# 
   485  0311                     	;# 
   486  0312                     	;# 
   487  0313                     	;# 
   488  0314                     	;# 
   489  0315                     	;# 
   490  0315                     	;# 
   491  0316                     	;# 
   492  0318                     	;# 
   493  0318                     	;# 
   494  0319                     	;# 
   495  031A                     	;# 
   496  031C                     	;# 
   497  031C                     	;# 
   498  031D                     	;# 
   499  031E                     	;# 
   500  0394                     	;# 
   501  0395                     	;# 
   502  0396                     	;# 
   503  0415                     	;# 
   504  0416                     	;# 
   505  0417                     	;# 
   506  041C                     	;# 
   507  041D                     	;# 
   508  041E                     	;# 
   509  0791                     	;# 
   510  0792                     	;# 
   511  0793                     	;# 
   512  0794                     	;# 
   513  0795                     	;# 
   514  0798                     	;# 
   515  0799                     	;# 
   516  079A                     	;# 
   517  07A0                     	;# 
   518  07A1                     	;# 
   519  07A2                     	;# 
   520  07A3                     	;# 
   521  07A4                     	;# 
   522  07A5                     	;# 
   523  07A6                     	;# 
   524  07A7                     	;# 
   525  07A8                     	;# 
   526  07A9                     	;# 
   527  07AA                     	;# 
   528  07AB                     	;# 
   529  0FE4                     	;# 
   530  0FE5                     	;# 
   531  0FE6                     	;# 
   532  0FE7                     	;# 
   533  0FE8                     	;# 
   534  0FE9                     	;# 
   535  0FEA                     	;# 
   536  0FEB                     	;# 
   537  0FED                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540  0000                     	;# 
   541  0001                     	;# 
   542  0002                     	;# 
   543  0003                     	;# 
   544  0004                     	;# 
   545  0005                     	;# 
   546  0006                     	;# 
   547  0007                     	;# 
   548  0008                     	;# 
   549  0009                     	;# 
   550  000A                     	;# 
   551  000B                     	;# 
   552  000C                     	;# 
   553  000D                     	;# 
   554  000E                     	;# 
   555  000F                     	;# 
   556  0010                     	;# 
   557  0011                     	;# 
   558  0012                     	;# 
   559  0013                     	;# 
   560  0015                     	;# 
   561  0016                     	;# 
   562  0016                     	;# 
   563  0017                     	;# 
   564  0018                     	;# 
   565  0019                     	;# 
   566  001A                     	;# 
   567  001B                     	;# 
   568  001C                     	;# 
   569  001E                     	;# 
   570  001F                     	;# 
   571  008C                     	;# 
   572  008D                     	;# 
   573  008E                     	;# 
   574  008F                     	;# 
   575  0090                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0095                     	;# 
   580  0096                     	;# 
   581  0097                     	;# 
   582  0098                     	;# 
   583  0099                     	;# 
   584  009A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  0110                     	;# 
   595  0111                     	;# 
   596  0112                     	;# 
   597  0113                     	;# 
   598  0114                     	;# 
   599  0115                     	;# 
   600  0116                     	;# 
   601  0117                     	;# 
   602  0118                     	;# 
   603  0119                     	;# 
   604  011A                     	;# 
   605  011B                     	;# 
   606  011D                     	;# 
   607  018C                     	;# 
   608  018D                     	;# 
   609  018F                     	;# 
   610  0190                     	;# 
   611  0191                     	;# 
   612  0191                     	;# 
   613  0192                     	;# 
   614  0193                     	;# 
   615  0193                     	;# 
   616  0193                     	;# 
   617  0194                     	;# 
   618  0195                     	;# 
   619  0196                     	;# 
   620  0199                     	;# 
   621  019A                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019C                     	;# 
   627  019C                     	;# 
   628  019D                     	;# 
   629  019E                     	;# 
   630  019F                     	;# 
   631  020D                     	;# 
   632  0210                     	;# 
   633  0211                     	;# 
   634  0212                     	;# 
   635  0213                     	;# 
   636  0214                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0216                     	;# 
   640  0217                     	;# 
   641  0291                     	;# 
   642  0291                     	;# 
   643  0292                     	;# 
   644  0293                     	;# 
   645  0294                     	;# 
   646  0295                     	;# 
   647  0295                     	;# 
   648  0296                     	;# 
   649  0298                     	;# 
   650  0298                     	;# 
   651  0299                     	;# 
   652  029A                     	;# 
   653  029B                     	;# 
   654  029C                     	;# 
   655  029C                     	;# 
   656  029D                     	;# 
   657  029E                     	;# 
   658  029F                     	;# 
   659  0311                     	;# 
   660  0311                     	;# 
   661  0312                     	;# 
   662  0313                     	;# 
   663  0314                     	;# 
   664  0315                     	;# 
   665  0315                     	;# 
   666  0316                     	;# 
   667  0318                     	;# 
   668  0318                     	;# 
   669  0319                     	;# 
   670  031A                     	;# 
   671  031C                     	;# 
   672  031C                     	;# 
   673  031D                     	;# 
   674  031E                     	;# 
   675  0394                     	;# 
   676  0395                     	;# 
   677  0396                     	;# 
   678  0415                     	;# 
   679  0416                     	;# 
   680  0417                     	;# 
   681  041C                     	;# 
   682  041D                     	;# 
   683  041E                     	;# 
   684  0791                     	;# 
   685  0792                     	;# 
   686  0793                     	;# 
   687  0794                     	;# 
   688  0795                     	;# 
   689  0798                     	;# 
   690  0799                     	;# 
   691  079A                     	;# 
   692  07A0                     	;# 
   693  07A1                     	;# 
   694  07A2                     	;# 
   695  07A3                     	;# 
   696  07A4                     	;# 
   697  07A5                     	;# 
   698  07A6                     	;# 
   699  07A7                     	;# 
   700  07A8                     	;# 
   701  07A9                     	;# 
   702  07AA                     	;# 
   703  07AB                     	;# 
   704  0FE4                     	;# 
   705  0FE5                     	;# 
   706  0FE6                     	;# 
   707  0FE7                     	;# 
   708  0FE8                     	;# 
   709  0FE9                     	;# 
   710  0FEA                     	;# 
   711  0FEB                     	;# 
   712  0FED                     	;# 
   713  0FEE                     	;# 
   714  0FEF                     	;# 
   715  0000                     	;# 
   716  0001                     	;# 
   717  0002                     	;# 
   718  0003                     	;# 
   719  0004                     	;# 
   720  0005                     	;# 
   721  0006                     	;# 
   722  0007                     	;# 
   723  0008                     	;# 
   724  0009                     	;# 
   725  000A                     	;# 
   726  000B                     	;# 
   727  000C                     	;# 
   728  000D                     	;# 
   729  000E                     	;# 
   730  000F                     	;# 
   731  0010                     	;# 
   732  0011                     	;# 
   733  0012                     	;# 
   734  0013                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0016                     	;# 
   738  0017                     	;# 
   739  0018                     	;# 
   740  0019                     	;# 
   741  001A                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  008F                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0098                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  010F                     	;# 
   769  0110                     	;# 
   770  0111                     	;# 
   771  0112                     	;# 
   772  0113                     	;# 
   773  0114                     	;# 
   774  0115                     	;# 
   775  0116                     	;# 
   776  0117                     	;# 
   777  0118                     	;# 
   778  0119                     	;# 
   779  011A                     	;# 
   780  011B                     	;# 
   781  011D                     	;# 
   782  018C                     	;# 
   783  018D                     	;# 
   784  018F                     	;# 
   785  0190                     	;# 
   786  0191                     	;# 
   787  0191                     	;# 
   788  0192                     	;# 
   789  0193                     	;# 
   790  0193                     	;# 
   791  0193                     	;# 
   792  0194                     	;# 
   793  0195                     	;# 
   794  0196                     	;# 
   795  0199                     	;# 
   796  019A                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019B                     	;# 
   800  019B                     	;# 
   801  019C                     	;# 
   802  019C                     	;# 
   803  019D                     	;# 
   804  019E                     	;# 
   805  019F                     	;# 
   806  020D                     	;# 
   807  0210                     	;# 
   808  0211                     	;# 
   809  0212                     	;# 
   810  0213                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0216                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  029B                     	;# 
   829  029C                     	;# 
   830  029C                     	;# 
   831  029D                     	;# 
   832  029E                     	;# 
   833  029F                     	;# 
   834  0311                     	;# 
   835  0311                     	;# 
   836  0312                     	;# 
   837  0313                     	;# 
   838  0314                     	;# 
   839  0315                     	;# 
   840  0315                     	;# 
   841  0316                     	;# 
   842  0318                     	;# 
   843  0318                     	;# 
   844  0319                     	;# 
   845  031A                     	;# 
   846  031C                     	;# 
   847  031C                     	;# 
   848  031D                     	;# 
   849  031E                     	;# 
   850  0394                     	;# 
   851  0395                     	;# 
   852  0396                     	;# 
   853  0415                     	;# 
   854  0416                     	;# 
   855  0417                     	;# 
   856  041C                     	;# 
   857  041D                     	;# 
   858  041E                     	;# 
   859  0791                     	;# 
   860  0792                     	;# 
   861  0793                     	;# 
   862  0794                     	;# 
   863  0795                     	;# 
   864  0798                     	;# 
   865  0799                     	;# 
   866  079A                     	;# 
   867  07A0                     	;# 
   868  07A1                     	;# 
   869  07A2                     	;# 
   870  07A3                     	;# 
   871  07A4                     	;# 
   872  07A5                     	;# 
   873  07A6                     	;# 
   874  07A7                     	;# 
   875  07A8                     	;# 
   876  07A9                     	;# 
   877  07AA                     	;# 
   878  07AB                     	;# 
   879  0FE4                     	;# 
   880  0FE5                     	;# 
   881  0FE6                     	;# 
   882  0FE7                     	;# 
   883  0FE8                     	;# 
   884  0FE9                     	;# 
   885  0FEA                     	;# 
   886  0FEB                     	;# 
   887  0FED                     	;# 
   888  0FEE                     	;# 
   889  0FEF                     	;# 
   890  0000                     	;# 
   891  0001                     	;# 
   892  0002                     	;# 
   893  0003                     	;# 
   894  0004                     	;# 
   895  0005                     	;# 
   896  0006                     	;# 
   897  0007                     	;# 
   898  0008                     	;# 
   899  0009                     	;# 
   900  000A                     	;# 
   901  000B                     	;# 
   902  000C                     	;# 
   903  000D                     	;# 
   904  000E                     	;# 
   905  000F                     	;# 
   906  0010                     	;# 
   907  0011                     	;# 
   908  0012                     	;# 
   909  0013                     	;# 
   910  0015                     	;# 
   911  0016                     	;# 
   912  0016                     	;# 
   913  0017                     	;# 
   914  0018                     	;# 
   915  0019                     	;# 
   916  001A                     	;# 
   917  001B                     	;# 
   918  001C                     	;# 
   919  001E                     	;# 
   920  001F                     	;# 
   921  008C                     	;# 
   922  008D                     	;# 
   923  008E                     	;# 
   924  008F                     	;# 
   925  0090                     	;# 
   926  0091                     	;# 
   927  0092                     	;# 
   928  0093                     	;# 
   929  0095                     	;# 
   930  0096                     	;# 
   931  0097                     	;# 
   932  0098                     	;# 
   933  0099                     	;# 
   934  009A                     	;# 
   935  009B                     	;# 
   936  009B                     	;# 
   937  009C                     	;# 
   938  009D                     	;# 
   939  009E                     	;# 
   940  010C                     	;# 
   941  010D                     	;# 
   942  010E                     	;# 
   943  010F                     	;# 
   944  0110                     	;# 
   945  0111                     	;# 
   946  0112                     	;# 
   947  0113                     	;# 
   948  0114                     	;# 
   949  0115                     	;# 
   950  0116                     	;# 
   951  0117                     	;# 
   952  0118                     	;# 
   953  0119                     	;# 
   954  011A                     	;# 
   955  011B                     	;# 
   956  011D                     	;# 
   957  018C                     	;# 
   958  018D                     	;# 
   959  018F                     	;# 
   960  0190                     	;# 
   961  0191                     	;# 
   962  0191                     	;# 
   963  0192                     	;# 
   964  0193                     	;# 
   965  0193                     	;# 
   966  0193                     	;# 
   967  0194                     	;# 
   968  0195                     	;# 
   969  0196                     	;# 
   970  0199                     	;# 
   971  019A                     	;# 
   972  019B                     	;# 
   973  019B                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019C                     	;# 
   977  019C                     	;# 
   978  019D                     	;# 
   979  019E                     	;# 
   980  019F                     	;# 
   981  020D                     	;# 
   982  0210                     	;# 
   983  0211                     	;# 
   984  0212                     	;# 
   985  0213                     	;# 
   986  0214                     	;# 
   987  0215                     	;# 
   988  0215                     	;# 
   989  0216                     	;# 
   990  0217                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0298                     	;# 
  1000  0298                     	;# 
  1001  0299                     	;# 
  1002  029A                     	;# 
  1003  029B                     	;# 
  1004  029C                     	;# 
  1005  029C                     	;# 
  1006  029D                     	;# 
  1007  029E                     	;# 
  1008  029F                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0314                     	;# 
  1014  0315                     	;# 
  1015  0315                     	;# 
  1016  0316                     	;# 
  1017  0318                     	;# 
  1018  0318                     	;# 
  1019  0319                     	;# 
  1020  031A                     	;# 
  1021  031C                     	;# 
  1022  031C                     	;# 
  1023  031D                     	;# 
  1024  031E                     	;# 
  1025  0394                     	;# 
  1026  0395                     	;# 
  1027  0396                     	;# 
  1028  0415                     	;# 
  1029  0416                     	;# 
  1030  0417                     	;# 
  1031  041C                     	;# 
  1032  041D                     	;# 
  1033  041E                     	;# 
  1034  0791                     	;# 
  1035  0792                     	;# 
  1036  0793                     	;# 
  1037  0794                     	;# 
  1038  0795                     	;# 
  1039  0798                     	;# 
  1040  0799                     	;# 
  1041  079A                     	;# 
  1042  07A0                     	;# 
  1043  07A1                     	;# 
  1044  07A2                     	;# 
  1045  07A3                     	;# 
  1046  07A4                     	;# 
  1047  07A5                     	;# 
  1048  07A6                     	;# 
  1049  07A7                     	;# 
  1050  07A8                     	;# 
  1051  07A9                     	;# 
  1052  07AA                     	;# 
  1053  07AB                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000D                     	;# 
  1079  000E                     	;# 
  1080  000F                     	;# 
  1081  0010                     	;# 
  1082  0011                     	;# 
  1083  0012                     	;# 
  1084  0013                     	;# 
  1085  0015                     	;# 
  1086  0016                     	;# 
  1087  0016                     	;# 
  1088  0017                     	;# 
  1089  0018                     	;# 
  1090  0019                     	;# 
  1091  001A                     	;# 
  1092  001B                     	;# 
  1093  001C                     	;# 
  1094  001E                     	;# 
  1095  001F                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  008F                     	;# 
  1100  0090                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0095                     	;# 
  1105  0096                     	;# 
  1106  0097                     	;# 
  1107  0098                     	;# 
  1108  0099                     	;# 
  1109  009A                     	;# 
  1110  009B                     	;# 
  1111  009B                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009E                     	;# 
  1115  010C                     	;# 
  1116  010D                     	;# 
  1117  010E                     	;# 
  1118  010F                     	;# 
  1119  0110                     	;# 
  1120  0111                     	;# 
  1121  0112                     	;# 
  1122  0113                     	;# 
  1123  0114                     	;# 
  1124  0115                     	;# 
  1125  0116                     	;# 
  1126  0117                     	;# 
  1127  0118                     	;# 
  1128  0119                     	;# 
  1129  011A                     	;# 
  1130  011B                     	;# 
  1131  011D                     	;# 
  1132  018C                     	;# 
  1133  018D                     	;# 
  1134  018F                     	;# 
  1135  0190                     	;# 
  1136  0191                     	;# 
  1137  0191                     	;# 
  1138  0192                     	;# 
  1139  0193                     	;# 
  1140  0193                     	;# 
  1141  0193                     	;# 
  1142  0194                     	;# 
  1143  0195                     	;# 
  1144  0196                     	;# 
  1145  0199                     	;# 
  1146  019A                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019C                     	;# 
  1152  019C                     	;# 
  1153  019D                     	;# 
  1154  019E                     	;# 
  1155  019F                     	;# 
  1156  020D                     	;# 
  1157  0210                     	;# 
  1158  0211                     	;# 
  1159  0212                     	;# 
  1160  0213                     	;# 
  1161  0214                     	;# 
  1162  0215                     	;# 
  1163  0215                     	;# 
  1164  0216                     	;# 
  1165  0217                     	;# 
  1166  0291                     	;# 
  1167  0291                     	;# 
  1168  0292                     	;# 
  1169  0293                     	;# 
  1170  0294                     	;# 
  1171  0295                     	;# 
  1172  0295                     	;# 
  1173  0296                     	;# 
  1174  0298                     	;# 
  1175  0298                     	;# 
  1176  0299                     	;# 
  1177  029A                     	;# 
  1178  029B                     	;# 
  1179  029C                     	;# 
  1180  029C                     	;# 
  1181  029D                     	;# 
  1182  029E                     	;# 
  1183  029F                     	;# 
  1184  0311                     	;# 
  1185  0311                     	;# 
  1186  0312                     	;# 
  1187  0313                     	;# 
  1188  0314                     	;# 
  1189  0315                     	;# 
  1190  0315                     	;# 
  1191  0316                     	;# 
  1192  0318                     	;# 
  1193  0318                     	;# 
  1194  0319                     	;# 
  1195  031A                     	;# 
  1196  031C                     	;# 
  1197  031C                     	;# 
  1198  031D                     	;# 
  1199  031E                     	;# 
  1200  0394                     	;# 
  1201  0395                     	;# 
  1202  0396                     	;# 
  1203  0415                     	;# 
  1204  0416                     	;# 
  1205  0417                     	;# 
  1206  041C                     	;# 
  1207  041D                     	;# 
  1208  041E                     	;# 
  1209  0791                     	;# 
  1210  0792                     	;# 
  1211  0793                     	;# 
  1212  0794                     	;# 
  1213  0795                     	;# 
  1214  0798                     	;# 
  1215  0799                     	;# 
  1216  079A                     	;# 
  1217  07A0                     	;# 
  1218  07A1                     	;# 
  1219  07A2                     	;# 
  1220  07A3                     	;# 
  1221  07A4                     	;# 
  1222  07A5                     	;# 
  1223  07A6                     	;# 
  1224  07A7                     	;# 
  1225  07A8                     	;# 
  1226  07A9                     	;# 
  1227  07AA                     	;# 
  1228  07AB                     	;# 
  1229  0FE4                     	;# 
  1230  0FE5                     	;# 
  1231  0FE6                     	;# 
  1232  0FE7                     	;# 
  1233  0FE8                     	;# 
  1234  0FE9                     	;# 
  1235  0FEA                     	;# 
  1236  0FEB                     	;# 
  1237  0FED                     	;# 
  1238  0FEE                     	;# 
  1239  0FEF                     	;# 
  1240  0000                     	;# 
  1241  0001                     	;# 
  1242  0002                     	;# 
  1243  0003                     	;# 
  1244  0004                     	;# 
  1245  0005                     	;# 
  1246  0006                     	;# 
  1247  0007                     	;# 
  1248  0008                     	;# 
  1249  0009                     	;# 
  1250  000A                     	;# 
  1251  000B                     	;# 
  1252  000C                     	;# 
  1253  000D                     	;# 
  1254  000E                     	;# 
  1255  000F                     	;# 
  1256  0010                     	;# 
  1257  0011                     	;# 
  1258  0012                     	;# 
  1259  0013                     	;# 
  1260  0015                     	;# 
  1261  0016                     	;# 
  1262  0016                     	;# 
  1263  0017                     	;# 
  1264  0018                     	;# 
  1265  0019                     	;# 
  1266  001A                     	;# 
  1267  001B                     	;# 
  1268  001C                     	;# 
  1269  001E                     	;# 
  1270  001F                     	;# 
  1271  008C                     	;# 
  1272  008D                     	;# 
  1273  008E                     	;# 
  1274  008F                     	;# 
  1275  0090                     	;# 
  1276  0091                     	;# 
  1277  0092                     	;# 
  1278  0093                     	;# 
  1279  0095                     	;# 
  1280  0096                     	;# 
  1281  0097                     	;# 
  1282  0098                     	;# 
  1283  0099                     	;# 
  1284  009A                     	;# 
  1285  009B                     	;# 
  1286  009B                     	;# 
  1287  009C                     	;# 
  1288  009D                     	;# 
  1289  009E                     	;# 
  1290  010C                     	;# 
  1291  010D                     	;# 
  1292  010E                     	;# 
  1293  010F                     	;# 
  1294  0110                     	;# 
  1295  0111                     	;# 
  1296  0112                     	;# 
  1297  0113                     	;# 
  1298  0114                     	;# 
  1299  0115                     	;# 
  1300  0116                     	;# 
  1301  0117                     	;# 
  1302  0118                     	;# 
  1303  0119                     	;# 
  1304  011A                     	;# 
  1305  011B                     	;# 
  1306  011D                     	;# 
  1307  018C                     	;# 
  1308  018D                     	;# 
  1309  018F                     	;# 
  1310  0190                     	;# 
  1311  0191                     	;# 
  1312  0191                     	;# 
  1313  0192                     	;# 
  1314  0193                     	;# 
  1315  0193                     	;# 
  1316  0193                     	;# 
  1317  0194                     	;# 
  1318  0195                     	;# 
  1319  0196                     	;# 
  1320  0199                     	;# 
  1321  019A                     	;# 
  1322  019B                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019C                     	;# 
  1327  019C                     	;# 
  1328  019D                     	;# 
  1329  019E                     	;# 
  1330  019F                     	;# 
  1331  020D                     	;# 
  1332  0210                     	;# 
  1333  0211                     	;# 
  1334  0212                     	;# 
  1335  0213                     	;# 
  1336  0214                     	;# 
  1337  0215                     	;# 
  1338  0215                     	;# 
  1339  0216                     	;# 
  1340  0217                     	;# 
  1341  0291                     	;# 
  1342  0291                     	;# 
  1343  0292                     	;# 
  1344  0293                     	;# 
  1345  0294                     	;# 
  1346  0295                     	;# 
  1347  0295                     	;# 
  1348  0296                     	;# 
  1349  0298                     	;# 
  1350  0298                     	;# 
  1351  0299                     	;# 
  1352  029A                     	;# 
  1353  029B                     	;# 
  1354  029C                     	;# 
  1355  029C                     	;# 
  1356  029D                     	;# 
  1357  029E                     	;# 
  1358  029F                     	;# 
  1359  0311                     	;# 
  1360  0311                     	;# 
  1361  0312                     	;# 
  1362  0313                     	;# 
  1363  0314                     	;# 
  1364  0315                     	;# 
  1365  0315                     	;# 
  1366  0316                     	;# 
  1367  0318                     	;# 
  1368  0318                     	;# 
  1369  0319                     	;# 
  1370  031A                     	;# 
  1371  031C                     	;# 
  1372  031C                     	;# 
  1373  031D                     	;# 
  1374  031E                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0415                     	;# 
  1379  0416                     	;# 
  1380  0417                     	;# 
  1381  041C                     	;# 
  1382  041D                     	;# 
  1383  041E                     	;# 
  1384  0791                     	;# 
  1385  0792                     	;# 
  1386  0793                     	;# 
  1387  0794                     	;# 
  1388  0795                     	;# 
  1389  0798                     	;# 
  1390  0799                     	;# 
  1391  079A                     	;# 
  1392  07A0                     	;# 
  1393  07A1                     	;# 
  1394  07A2                     	;# 
  1395  07A3                     	;# 
  1396  07A4                     	;# 
  1397  07A5                     	;# 
  1398  07A6                     	;# 
  1399  07A7                     	;# 
  1400  07A8                     	;# 
  1401  07A9                     	;# 
  1402  07AA                     	;# 
  1403  07AB                     	;# 
  1404  0FE4                     	;# 
  1405  0FE5                     	;# 
  1406  0FE6                     	;# 
  1407  0FE7                     	;# 
  1408  0FE8                     	;# 
  1409  0FE9                     	;# 
  1410  0FEA                     	;# 
  1411  0FEB                     	;# 
  1412  0FED                     	;# 
  1413  0FEE                     	;# 
  1414  0FEF                     	;# 
  1415  0000                     	;# 
  1416  0001                     	;# 
  1417  0002                     	;# 
  1418  0003                     	;# 
  1419  0004                     	;# 
  1420  0005                     	;# 
  1421  0006                     	;# 
  1422  0007                     	;# 
  1423  0008                     	;# 
  1424  0009                     	;# 
  1425  000A                     	;# 
  1426  000B                     	;# 
  1427  000C                     	;# 
  1428  000D                     	;# 
  1429  000E                     	;# 
  1430  000F                     	;# 
  1431  0010                     	;# 
  1432  0011                     	;# 
  1433  0012                     	;# 
  1434  0013                     	;# 
  1435  0015                     	;# 
  1436  0016                     	;# 
  1437  0016                     	;# 
  1438  0017                     	;# 
  1439  0018                     	;# 
  1440  0019                     	;# 
  1441  001A                     	;# 
  1442  001B                     	;# 
  1443  001C                     	;# 
  1444  001E                     	;# 
  1445  001F                     	;# 
  1446  008C                     	;# 
  1447  008D                     	;# 
  1448  008E                     	;# 
  1449  008F                     	;# 
  1450  0090                     	;# 
  1451  0091                     	;# 
  1452  0092                     	;# 
  1453  0093                     	;# 
  1454  0095                     	;# 
  1455  0096                     	;# 
  1456  0097                     	;# 
  1457  0098                     	;# 
  1458  0099                     	;# 
  1459  009A                     	;# 
  1460  009B                     	;# 
  1461  009B                     	;# 
  1462  009C                     	;# 
  1463  009D                     	;# 
  1464  009E                     	;# 
  1465  010C                     	;# 
  1466  010D                     	;# 
  1467  010E                     	;# 
  1468  010F                     	;# 
  1469  0110                     	;# 
  1470  0111                     	;# 
  1471  0112                     	;# 
  1472  0113                     	;# 
  1473  0114                     	;# 
  1474  0115                     	;# 
  1475  0116                     	;# 
  1476  0117                     	;# 
  1477  0118                     	;# 
  1478  0119                     	;# 
  1479  011A                     	;# 
  1480  011B                     	;# 
  1481  011D                     	;# 
  1482  018C                     	;# 
  1483  018D                     	;# 
  1484  018F                     	;# 
  1485  0190                     	;# 
  1486  0191                     	;# 
  1487  0191                     	;# 
  1488  0192                     	;# 
  1489  0193                     	;# 
  1490  0193                     	;# 
  1491  0193                     	;# 
  1492  0194                     	;# 
  1493  0195                     	;# 
  1494  0196                     	;# 
  1495  0199                     	;# 
  1496  019A                     	;# 
  1497  019B                     	;# 
  1498  019B                     	;# 
  1499  019B                     	;# 
  1500  019B                     	;# 
  1501  019C                     	;# 
  1502  019C                     	;# 
  1503  019D                     	;# 
  1504  019E                     	;# 
  1505  019F                     	;# 
  1506  020D                     	;# 
  1507  0210                     	;# 
  1508  0211                     	;# 
  1509  0212                     	;# 
  1510  0213                     	;# 
  1511  0214                     	;# 
  1512  0215                     	;# 
  1513  0215                     	;# 
  1514  0216                     	;# 
  1515  0217                     	;# 
  1516  0291                     	;# 
  1517  0291                     	;# 
  1518  0292                     	;# 
  1519  0293                     	;# 
  1520  0294                     	;# 
  1521  0295                     	;# 
  1522  0295                     	;# 
  1523  0296                     	;# 
  1524  0298                     	;# 
  1525  0298                     	;# 
  1526  0299                     	;# 
  1527  029A                     	;# 
  1528  029B                     	;# 
  1529  029C                     	;# 
  1530  029C                     	;# 
  1531  029D                     	;# 
  1532  029E                     	;# 
  1533  029F                     	;# 
  1534  0311                     	;# 
  1535  0311                     	;# 
  1536  0312                     	;# 
  1537  0313                     	;# 
  1538  0314                     	;# 
  1539  0315                     	;# 
  1540  0315                     	;# 
  1541  0316                     	;# 
  1542  0318                     	;# 
  1543  0318                     	;# 
  1544  0319                     	;# 
  1545  031A                     	;# 
  1546  031C                     	;# 
  1547  031C                     	;# 
  1548  031D                     	;# 
  1549  031E                     	;# 
  1550  0394                     	;# 
  1551  0395                     	;# 
  1552  0396                     	;# 
  1553  0415                     	;# 
  1554  0416                     	;# 
  1555  0417                     	;# 
  1556  041C                     	;# 
  1557  041D                     	;# 
  1558  041E                     	;# 
  1559  0791                     	;# 
  1560  0792                     	;# 
  1561  0793                     	;# 
  1562  0794                     	;# 
  1563  0795                     	;# 
  1564  0798                     	;# 
  1565  0799                     	;# 
  1566  079A                     	;# 
  1567  07A0                     	;# 
  1568  07A1                     	;# 
  1569  07A2                     	;# 
  1570  07A3                     	;# 
  1571  07A4                     	;# 
  1572  07A5                     	;# 
  1573  07A6                     	;# 
  1574  07A7                     	;# 
  1575  07A8                     	;# 
  1576  07A9                     	;# 
  1577  07AA                     	;# 
  1578  07AB                     	;# 
  1579  0FE4                     	;# 
  1580  0FE5                     	;# 
  1581  0FE6                     	;# 
  1582  0FE7                     	;# 
  1583  0FE8                     	;# 
  1584  0FE9                     	;# 
  1585  0FEA                     	;# 
  1586  0FEB                     	;# 
  1587  0FED                     	;# 
  1588  0FEE                     	;# 
  1589  0FEF                     	;# 
  1590  0000                     	;# 
  1591  0001                     	;# 
  1592  0002                     	;# 
  1593  0003                     	;# 
  1594  0004                     	;# 
  1595  0005                     	;# 
  1596  0006                     	;# 
  1597  0007                     	;# 
  1598  0008                     	;# 
  1599  0009                     	;# 
  1600  000A                     	;# 
  1601  000B                     	;# 
  1602  000C                     	;# 
  1603  000D                     	;# 
  1604  000E                     	;# 
  1605  000F                     	;# 
  1606  0010                     	;# 
  1607  0011                     	;# 
  1608  0012                     	;# 
  1609  0013                     	;# 
  1610  0015                     	;# 
  1611  0016                     	;# 
  1612  0016                     	;# 
  1613  0017                     	;# 
  1614  0018                     	;# 
  1615  0019                     	;# 
  1616  001A                     	;# 
  1617  001B                     	;# 
  1618  001C                     	;# 
  1619  001E                     	;# 
  1620  001F                     	;# 
  1621  008C                     	;# 
  1622  008D                     	;# 
  1623  008E                     	;# 
  1624  008F                     	;# 
  1625  0090                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0093                     	;# 
  1629  0095                     	;# 
  1630  0096                     	;# 
  1631  0097                     	;# 
  1632  0098                     	;# 
  1633  0099                     	;# 
  1634  009A                     	;# 
  1635  009B                     	;# 
  1636  009B                     	;# 
  1637  009C                     	;# 
  1638  009D                     	;# 
  1639  009E                     	;# 
  1640  010C                     	;# 
  1641  010D                     	;# 
  1642  010E                     	;# 
  1643  010F                     	;# 
  1644  0110                     	;# 
  1645  0111                     	;# 
  1646  0112                     	;# 
  1647  0113                     	;# 
  1648  0114                     	;# 
  1649  0115                     	;# 
  1650  0116                     	;# 
  1651  0117                     	;# 
  1652  0118                     	;# 
  1653  0119                     	;# 
  1654  011A                     	;# 
  1655  011B                     	;# 
  1656  011D                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018F                     	;# 
  1660  0190                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0215                     	;# 
  1688  0215                     	;# 
  1689  0216                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0294                     	;# 
  1696  0295                     	;# 
  1697  0295                     	;# 
  1698  0296                     	;# 
  1699  0298                     	;# 
  1700  0298                     	;# 
  1701  0299                     	;# 
  1702  029A                     	;# 
  1703  029B                     	;# 
  1704  029C                     	;# 
  1705  029C                     	;# 
  1706  029D                     	;# 
  1707  029E                     	;# 
  1708  029F                     	;# 
  1709  0311                     	;# 
  1710  0311                     	;# 
  1711  0312                     	;# 
  1712  0313                     	;# 
  1713  0314                     	;# 
  1714  0315                     	;# 
  1715  0315                     	;# 
  1716  0316                     	;# 
  1717  0318                     	;# 
  1718  0318                     	;# 
  1719  0319                     	;# 
  1720  031A                     	;# 
  1721  031C                     	;# 
  1722  031C                     	;# 
  1723  031D                     	;# 
  1724  031E                     	;# 
  1725  0394                     	;# 
  1726  0395                     	;# 
  1727  0396                     	;# 
  1728  0415                     	;# 
  1729  0416                     	;# 
  1730  0417                     	;# 
  1731  041C                     	;# 
  1732  041D                     	;# 
  1733  041E                     	;# 
  1734  0791                     	;# 
  1735  0792                     	;# 
  1736  0793                     	;# 
  1737  0794                     	;# 
  1738  0795                     	;# 
  1739  0798                     	;# 
  1740  0799                     	;# 
  1741  079A                     	;# 
  1742  07A0                     	;# 
  1743  07A1                     	;# 
  1744  07A2                     	;# 
  1745  07A3                     	;# 
  1746  07A4                     	;# 
  1747  07A5                     	;# 
  1748  07A6                     	;# 
  1749  07A7                     	;# 
  1750  07A8                     	;# 
  1751  07A9                     	;# 
  1752  07AA                     	;# 
  1753  07AB                     	;# 
  1754  0FE4                     	;# 
  1755  0FE5                     	;# 
  1756  0FE6                     	;# 
  1757  0FE7                     	;# 
  1758  0FE8                     	;# 
  1759  0FE9                     	;# 
  1760  0FEA                     	;# 
  1761  0FEB                     	;# 
  1762  0FED                     	;# 
  1763  0FEE                     	;# 
  1764  0FEF                     	;# 
  1765  0000                     	;# 
  1766  0001                     	;# 
  1767  0002                     	;# 
  1768  0003                     	;# 
  1769  0004                     	;# 
  1770  0005                     	;# 
  1771  0006                     	;# 
  1772  0007                     	;# 
  1773  0008                     	;# 
  1774  0009                     	;# 
  1775  000A                     	;# 
  1776  000B                     	;# 
  1777  000C                     	;# 
  1778  000D                     	;# 
  1779  000E                     	;# 
  1780  000F                     	;# 
  1781  0010                     	;# 
  1782  0011                     	;# 
  1783  0012                     	;# 
  1784  0013                     	;# 
  1785  0015                     	;# 
  1786  0016                     	;# 
  1787  0016                     	;# 
  1788  0017                     	;# 
  1789  0018                     	;# 
  1790  0019                     	;# 
  1791  001A                     	;# 
  1792  001B                     	;# 
  1793  001C                     	;# 
  1794  001E                     	;# 
  1795  001F                     	;# 
  1796  008C                     	;# 
  1797  008D                     	;# 
  1798  008E                     	;# 
  1799  008F                     	;# 
  1800  0090                     	;# 
  1801  0091                     	;# 
  1802  0092                     	;# 
  1803  0093                     	;# 
  1804  0095                     	;# 
  1805  0096                     	;# 
  1806  0097                     	;# 
  1807  0098                     	;# 
  1808  0099                     	;# 
  1809  009A                     	;# 
  1810  009B                     	;# 
  1811  009B                     	;# 
  1812  009C                     	;# 
  1813  009D                     	;# 
  1814  009E                     	;# 
  1815  010C                     	;# 
  1816  010D                     	;# 
  1817  010E                     	;# 
  1818  010F                     	;# 
  1819  0110                     	;# 
  1820  0111                     	;# 
  1821  0112                     	;# 
  1822  0113                     	;# 
  1823  0114                     	;# 
  1824  0115                     	;# 
  1825  0116                     	;# 
  1826  0117                     	;# 
  1827  0118                     	;# 
  1828  0119                     	;# 
  1829  011A                     	;# 
  1830  011B                     	;# 
  1831  011D                     	;# 
  1832  018C                     	;# 
  1833  018D                     	;# 
  1834  018F                     	;# 
  1835  0190                     	;# 
  1836  0191                     	;# 
  1837  0191                     	;# 
  1838  0192                     	;# 
  1839  0193                     	;# 
  1840  0193                     	;# 
  1841  0193                     	;# 
  1842  0194                     	;# 
  1843  0195                     	;# 
  1844  0196                     	;# 
  1845  0199                     	;# 
  1846  019A                     	;# 
  1847  019B                     	;# 
  1848  019B                     	;# 
  1849  019B                     	;# 
  1850  019B                     	;# 
  1851  019C                     	;# 
  1852  019C                     	;# 
  1853  019D                     	;# 
  1854  019E                     	;# 
  1855  019F                     	;# 
  1856  020D                     	;# 
  1857  0210                     	;# 
  1858  0211                     	;# 
  1859  0212                     	;# 
  1860  0213                     	;# 
  1861  0214                     	;# 
  1862  0215                     	;# 
  1863  0215                     	;# 
  1864  0216                     	;# 
  1865  0217                     	;# 
  1866  0291                     	;# 
  1867  0291                     	;# 
  1868  0292                     	;# 
  1869  0293                     	;# 
  1870  0294                     	;# 
  1871  0295                     	;# 
  1872  0295                     	;# 
  1873  0296                     	;# 
  1874  0298                     	;# 
  1875  0298                     	;# 
  1876  0299                     	;# 
  1877  029A                     	;# 
  1878  029B                     	;# 
  1879  029C                     	;# 
  1880  029C                     	;# 
  1881  029D                     	;# 
  1882  029E                     	;# 
  1883  029F                     	;# 
  1884  0311                     	;# 
  1885  0311                     	;# 
  1886  0312                     	;# 
  1887  0313                     	;# 
  1888  0314                     	;# 
  1889  0315                     	;# 
  1890  0315                     	;# 
  1891  0316                     	;# 
  1892  0318                     	;# 
  1893  0318                     	;# 
  1894  0319                     	;# 
  1895  031A                     	;# 
  1896  031C                     	;# 
  1897  031C                     	;# 
  1898  031D                     	;# 
  1899  031E                     	;# 
  1900  0394                     	;# 
  1901  0395                     	;# 
  1902  0396                     	;# 
  1903  0415                     	;# 
  1904  0416                     	;# 
  1905  0417                     	;# 
  1906  041C                     	;# 
  1907  041D                     	;# 
  1908  041E                     	;# 
  1909  0791                     	;# 
  1910  0792                     	;# 
  1911  0793                     	;# 
  1912  0794                     	;# 
  1913  0795                     	;# 
  1914  0798                     	;# 
  1915  0799                     	;# 
  1916  079A                     	;# 
  1917  07A0                     	;# 
  1918  07A1                     	;# 
  1919  07A2                     	;# 
  1920  07A3                     	;# 
  1921  07A4                     	;# 
  1922  07A5                     	;# 
  1923  07A6                     	;# 
  1924  07A7                     	;# 
  1925  07A8                     	;# 
  1926  07A9                     	;# 
  1927  07AA                     	;# 
  1928  07AB                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  000F                     	;# 
  1956  0010                     	;# 
  1957  0011                     	;# 
  1958  0012                     	;# 
  1959  0013                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001B                     	;# 
  1968  001C                     	;# 
  1969  001E                     	;# 
  1970  001F                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  008F                     	;# 
  1975  0090                     	;# 
  1976  0091                     	;# 
  1977  0092                     	;# 
  1978  0093                     	;# 
  1979  0095                     	;# 
  1980  0096                     	;# 
  1981  0097                     	;# 
  1982  0098                     	;# 
  1983  0099                     	;# 
  1984  009A                     	;# 
  1985  009B                     	;# 
  1986  009B                     	;# 
  1987  009C                     	;# 
  1988  009D                     	;# 
  1989  009E                     	;# 
  1990  010C                     	;# 
  1991  010D                     	;# 
  1992  010E                     	;# 
  1993  010F                     	;# 
  1994  0110                     	;# 
  1995  0111                     	;# 
  1996  0112                     	;# 
  1997  0113                     	;# 
  1998  0114                     	;# 
  1999  0115                     	;# 
  2000  0116                     	;# 
  2001  0117                     	;# 
  2002  0118                     	;# 
  2003  0119                     	;# 
  2004  011A                     	;# 
  2005  011B                     	;# 
  2006  011D                     	;# 
  2007  018C                     	;# 
  2008  018D                     	;# 
  2009  018F                     	;# 
  2010  0190                     	;# 
  2011  0191                     	;# 
  2012  0191                     	;# 
  2013  0192                     	;# 
  2014  0193                     	;# 
  2015  0193                     	;# 
  2016  0193                     	;# 
  2017  0194                     	;# 
  2018  0195                     	;# 
  2019  0196                     	;# 
  2020  0199                     	;# 
  2021  019A                     	;# 
  2022  019B                     	;# 
  2023  019B                     	;# 
  2024  019B                     	;# 
  2025  019B                     	;# 
  2026  019C                     	;# 
  2027  019C                     	;# 
  2028  019D                     	;# 
  2029  019E                     	;# 
  2030  019F                     	;# 
  2031  020D                     	;# 
  2032  0210                     	;# 
  2033  0211                     	;# 
  2034  0212                     	;# 
  2035  0213                     	;# 
  2036  0214                     	;# 
  2037  0215                     	;# 
  2038  0215                     	;# 
  2039  0216                     	;# 
  2040  0217                     	;# 
  2041  0291                     	;# 
  2042  0291                     	;# 
  2043  0292                     	;# 
  2044  0293                     	;# 
  2045  0294                     	;# 
  2046  0295                     	;# 
  2047  0295                     	;# 
  2048  0296                     	;# 
  2049  0298                     	;# 
  2050  0298                     	;# 
  2051  0299                     	;# 
  2052  029A                     	;# 
  2053  029B                     	;# 
  2054  029C                     	;# 
  2055  029C                     	;# 
  2056  029D                     	;# 
  2057  029E                     	;# 
  2058  029F                     	;# 
  2059  0311                     	;# 
  2060  0311                     	;# 
  2061  0312                     	;# 
  2062  0313                     	;# 
  2063  0314                     	;# 
  2064  0315                     	;# 
  2065  0315                     	;# 
  2066  0316                     	;# 
  2067  0318                     	;# 
  2068  0318                     	;# 
  2069  0319                     	;# 
  2070  031A                     	;# 
  2071  031C                     	;# 
  2072  031C                     	;# 
  2073  031D                     	;# 
  2074  031E                     	;# 
  2075  0394                     	;# 
  2076  0395                     	;# 
  2077  0396                     	;# 
  2078  0415                     	;# 
  2079  0416                     	;# 
  2080  0417                     	;# 
  2081  041C                     	;# 
  2082  041D                     	;# 
  2083  041E                     	;# 
  2084  0791                     	;# 
  2085  0792                     	;# 
  2086  0793                     	;# 
  2087  0794                     	;# 
  2088  0795                     	;# 
  2089  0798                     	;# 
  2090  0799                     	;# 
  2091  079A                     	;# 
  2092  07A0                     	;# 
  2093  07A1                     	;# 
  2094  07A2                     	;# 
  2095  07A3                     	;# 
  2096  07A4                     	;# 
  2097  07A5                     	;# 
  2098  07A6                     	;# 
  2099  07A7                     	;# 
  2100  07A8                     	;# 
  2101  07A9                     	;# 
  2102  07AA                     	;# 
  2103  07AB                     	;# 
  2104  0FE4                     	;# 
  2105  0FE5                     	;# 
  2106  0FE6                     	;# 
  2107  0FE7                     	;# 
  2108  0FE8                     	;# 
  2109  0FE9                     	;# 
  2110  0FEA                     	;# 
  2111  0FEB                     	;# 
  2112  0FED                     	;# 
  2113  0FEE                     	;# 
  2114  0FEF                     	;# 
  2115  0000                     	;# 
  2116  0001                     	;# 
  2117  0002                     	;# 
  2118  0003                     	;# 
  2119  0004                     	;# 
  2120  0005                     	;# 
  2121  0006                     	;# 
  2122  0007                     	;# 
  2123  0008                     	;# 
  2124  0009                     	;# 
  2125  000A                     	;# 
  2126  000B                     	;# 
  2127  000C                     	;# 
  2128  000D                     	;# 
  2129  000E                     	;# 
  2130  000F                     	;# 
  2131  0010                     	;# 
  2132  0011                     	;# 
  2133  0012                     	;# 
  2134  0013                     	;# 
  2135  0015                     	;# 
  2136  0016                     	;# 
  2137  0016                     	;# 
  2138  0017                     	;# 
  2139  0018                     	;# 
  2140  0019                     	;# 
  2141  001A                     	;# 
  2142  001B                     	;# 
  2143  001C                     	;# 
  2144  001E                     	;# 
  2145  001F                     	;# 
  2146  008C                     	;# 
  2147  008D                     	;# 
  2148  008E                     	;# 
  2149  008F                     	;# 
  2150  0090                     	;# 
  2151  0091                     	;# 
  2152  0092                     	;# 
  2153  0093                     	;# 
  2154  0095                     	;# 
  2155  0096                     	;# 
  2156  0097                     	;# 
  2157  0098                     	;# 
  2158  0099                     	;# 
  2159  009A                     	;# 
  2160  009B                     	;# 
  2161  009B                     	;# 
  2162  009C                     	;# 
  2163  009D                     	;# 
  2164  009E                     	;# 
  2165  010C                     	;# 
  2166  010D                     	;# 
  2167  010E                     	;# 
  2168  010F                     	;# 
  2169  0110                     	;# 
  2170  0111                     	;# 
  2171  0112                     	;# 
  2172  0113                     	;# 
  2173  0114                     	;# 
  2174  0115                     	;# 
  2175  0116                     	;# 
  2176  0117                     	;# 
  2177  0118                     	;# 
  2178  0119                     	;# 
  2179  011A                     	;# 
  2180  011B                     	;# 
  2181  011D                     	;# 
  2182  018C                     	;# 
  2183  018D                     	;# 
  2184  018F                     	;# 
  2185  0190                     	;# 
  2186  0191                     	;# 
  2187  0191                     	;# 
  2188  0192                     	;# 
  2189  0193                     	;# 
  2190  0193                     	;# 
  2191  0193                     	;# 
  2192  0194                     	;# 
  2193  0195                     	;# 
  2194  0196                     	;# 
  2195  0199                     	;# 
  2196  019A                     	;# 
  2197  019B                     	;# 
  2198  019B                     	;# 
  2199  019B                     	;# 
  2200  019B                     	;# 
  2201  019C                     	;# 
  2202  019C                     	;# 
  2203  019D                     	;# 
  2204  019E                     	;# 
  2205  019F                     	;# 
  2206  020D                     	;# 
  2207  0210                     	;# 
  2208  0211                     	;# 
  2209  0212                     	;# 
  2210  0213                     	;# 
  2211  0214                     	;# 
  2212  0215                     	;# 
  2213  0215                     	;# 
  2214  0216                     	;# 
  2215  0217                     	;# 
  2216  0291                     	;# 
  2217  0291                     	;# 
  2218  0292                     	;# 
  2219  0293                     	;# 
  2220  0294                     	;# 
  2221  0295                     	;# 
  2222  0295                     	;# 
  2223  0296                     	;# 
  2224  0298                     	;# 
  2225  0298                     	;# 
  2226  0299                     	;# 
  2227  029A                     	;# 
  2228  029B                     	;# 
  2229  029C                     	;# 
  2230  029C                     	;# 
  2231  029D                     	;# 
  2232  029E                     	;# 
  2233  029F                     	;# 
  2234  0311                     	;# 
  2235  0311                     	;# 
  2236  0312                     	;# 
  2237  0313                     	;# 
  2238  0314                     	;# 
  2239  0315                     	;# 
  2240  0315                     	;# 
  2241  0316                     	;# 
  2242  0318                     	;# 
  2243  0318                     	;# 
  2244  0319                     	;# 
  2245  031A                     	;# 
  2246  031C                     	;# 
  2247  031C                     	;# 
  2248  031D                     	;# 
  2249  031E                     	;# 
  2250  0394                     	;# 
  2251  0395                     	;# 
  2252  0396                     	;# 
  2253  0415                     	;# 
  2254  0416                     	;# 
  2255  0417                     	;# 
  2256  041C                     	;# 
  2257  041D                     	;# 
  2258  041E                     	;# 
  2259  0791                     	;# 
  2260  0792                     	;# 
  2261  0793                     	;# 
  2262  0794                     	;# 
  2263  0795                     	;# 
  2264  0798                     	;# 
  2265  0799                     	;# 
  2266  079A                     	;# 
  2267  07A0                     	;# 
  2268  07A1                     	;# 
  2269  07A2                     	;# 
  2270  07A3                     	;# 
  2271  07A4                     	;# 
  2272  07A5                     	;# 
  2273  07A6                     	;# 
  2274  07A7                     	;# 
  2275  07A8                     	;# 
  2276  07A9                     	;# 
  2277  07AA                     	;# 
  2278  07AB                     	;# 
  2279  0FE4                     	;# 
  2280  0FE5                     	;# 
  2281  0FE6                     	;# 
  2282  0FE7                     	;# 
  2283  0FE8                     	;# 
  2284  0FE9                     	;# 
  2285  0FEA                     	;# 
  2286  0FEB                     	;# 
  2287  0FED                     	;# 
  2288  0FEE                     	;# 
  2289  0FEF                     	;# 
  2290                           
  2291 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2292  0000                     
  2293 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2294  0000                     
  2295 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2296  0000                     
  2297                           	psect	stringtext1
  2298  1000                     __pstringtext1:	
  2299  1000                     _fsmStateTable:	
  2300  1000  345B               	retlw	low _do_I2C_IDLE
  2301  1001  3415               	retlw	high _do_I2C_IDLE
  2302  1002  340E               	retlw	low _do_I2C_SEND_ADR_READ
  2303  1003  3416               	retlw	high _do_I2C_SEND_ADR_READ
  2304  1004  34DC               	retlw	low _do_I2C_SEND_ADR_WRITE
  2305  1005  3415               	retlw	high _do_I2C_SEND_ADR_WRITE
  2306  1006  342C               	retlw	low _do_I2C_TX
  2307  1007  3401               	retlw	high _do_I2C_TX
  2308  1008  3434               	retlw	low _do_I2C_RX
  2309  1009  3402               	retlw	high _do_I2C_RX
  2310  100A  34AD               	retlw	low _do_I2C_RCEN
  2311  100B  3415               	retlw	high _do_I2C_RCEN
  2312  100C  3420               	retlw	low _do_I2C_TX_EMPTY
  2313  100D  3404               	retlw	high _do_I2C_TX_EMPTY
  2314  100E  3464               	retlw	low _do_I2C_SEND_RESTART_READ
  2315  100F  3415               	retlw	high _do_I2C_SEND_RESTART_READ
  2316  1010  346D               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2317  1011  3415               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2318  1012  3476               	retlw	low _do_I2C_SEND_RESTART
  2319  1013  3415               	retlw	high _do_I2C_SEND_RESTART
  2320  1014  347F               	retlw	low _do_I2C_SEND_STOP
  2321  1015  3415               	retlw	high _do_I2C_SEND_STOP
  2322  1016  3488               	retlw	low _do_I2C_DO_ACK
  2323  1017  3415               	retlw	high _do_I2C_DO_ACK
  2324  1018  3491               	retlw	low _do_I2C_DO_NACK_STOP
  2325  1019  3415               	retlw	high _do_I2C_DO_NACK_STOP
  2326  101A  349A               	retlw	low _do_I2C_DO_NACK_RESTART
  2327  101B  3415               	retlw	high _do_I2C_DO_NACK_RESTART
  2328  101C  34D0               	retlw	low _do_I2C_RESET
  2329  101D  3415               	retlw	high _do_I2C_RESET
  2330  101E  34FF               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2331  101F  3404               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2332  1020                     __end_of_fsmStateTable:	
  2333                           
  2334                           	psect	stringtext2
  2335  1800                     __pstringtext2:	
  2336  1800                     _displayNum:	
  2337  1800  34FC               	retlw	252
  2338  1801  3460               	retlw	96
  2339  1802  34DA               	retlw	218
  2340  1803  34F2               	retlw	242
  2341  1804  3466               	retlw	102
  2342  1805  34B6               	retlw	182
  2343  1806  34BE               	retlw	190
  2344  1807  34E0               	retlw	224
  2345  1808  34FE               	retlw	254
  2346  1809  34F6               	retlw	246
  2347  180A                     __end_of_displayNum:	
  2348                           
  2349                           	psect	nvBANK1
  2350  00D7                     __pnvBANK1:	
  2351  00D7                     _IOCBF4_InterruptHandler:	
  2352  00D7                     	ds	2
  2353  000D                     _PORTBbits	set	13
  2354  0015                     _TMR0	set	21
  2355  0011                     _PIR1bits	set	17
  2356  0012                     _PIR2bits	set	18
  2357  000B                     _INTCONbits	set	11
  2358  009D                     _ADCON0bits	set	157
  2359  009C                     _ADRESH	set	156
  2360  009B                     _ADRESL	set	155
  2361  009E                     _ADCON1	set	158
  2362  009D                     _ADCON0	set	157
  2363  0095                     _OPTION_REG	set	149
  2364  0095                     _OPTION_REGbits	set	149
  2365  008F                     _TRISD	set	143
  2366  008E                     _TRISC	set	142
  2367  008D                     _TRISB	set	141
  2368  008C                     _TRISA	set	140
  2369  0090                     _TRISE	set	144
  2370  0097                     _WDTCON	set	151
  2371  0098                     _OSCTUNE	set	152
  2372  0099                     _OSCCON	set	153
  2373  0091                     _PIE1bits	set	145
  2374  0092                     _PIE2bits	set	146
  2375  04D6                     _PLLR	set	1238
  2376  010D                     _LATBbits	set	269
  2377  010C                     _LATAbits	set	268
  2378  010E                     _LATCbits	set	270
  2379  0110                     _LATEbits	set	272
  2380  0117                     _FVRCONbits	set	279
  2381  0117                     _FVRCON	set	279
  2382  011D                     _APFCON	set	285
  2383  010E                     _LATC	set	270
  2384  010D                     _LATB	set	269
  2385  010C                     _LATA	set	268
  2386  010F                     _LATD	set	271
  2387  0110                     _LATE	set	272
  2388  0116                     _BORCON	set	278
  2389  019A                     _TXREG	set	410
  2390  0199                     _RCREG	set	409
  2391  019D                     _RCSTAbits	set	413
  2392  019E                     _TXSTAbits	set	414
  2393  019C                     _SPBRGH	set	412
  2394  019B                     _SPBRGL	set	411
  2395  019E                     _TXSTA	set	414
  2396  019D                     _RCSTA	set	413
  2397  019F                     _BAUDCON	set	415
  2398  018C                     _ANSELA	set	396
  2399  0190                     _ANSELE	set	400
  2400  018D                     _ANSELB	set	397
  2401  018F                     _ANSELD	set	399
  2402  0196                     _EECON2	set	406
  2403  0193                     _EEDATL	set	403
  2404  0194                     _EEDATH	set	404
  2405  0195                     _EECON1bits	set	405
  2406  0192                     _EEADRH	set	402
  2407  0191                     _EEADRL	set	401
  2408  0214                     _SSPSTATbits	set	532
  2409  0213                     _SSPMSK	set	531
  2410  0211                     _SSPBUF	set	529
  2411  0216                     _SSPCON2bits	set	534
  2412  0212                     _SSPADD	set	530
  2413  0216                     _SSPCON2	set	534
  2414  0215                     _SSPCON1	set	533
  2415  0214                     _SSPSTAT	set	532
  2416  0215                     _SSPCON1bits	set	533
  2417  020D                     _WPUB	set	525
  2418  0210                     _WPUE	set	528
  2419  0394                     _IOCBPbits	set	916
  2420  0395                     _IOCBNbits	set	917
  2421  0396                     _IOCBFbits	set	918
  2422                           
  2423                           ; #config settings
  2424  0000                     
  2425                           	psect	cinit
  2426  0046                     start_initialization:	
  2427  0046                     __initialization:	
  2428                           
  2429                           ; Clear objects allocated to COMMON
  2430  0046  01F9               	clrf	__pbssCOMMON& (0+127)
  2431  0047  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2432  0048  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  2433  0049  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  2434  004A  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
  2435                           
  2436                           ; Clear objects allocated to BANK0
  2437  004B  3020               	movlw	low __pbssBANK0
  2438  004C  0084               	movwf	4
  2439  004D  3000               	movlw	high __pbssBANK0
  2440  004E  0085               	movwf	5
  2441  004F  3036               	movlw	54
  2442  0050  3194  24EF  3180   	fcall	clear_ram0
  2443                           
  2444                           ; Clear objects allocated to BANK1
  2445  0053  30A0               	movlw	low __pbssBANK1
  2446  0054  0084               	movwf	4
  2447  0055  3000               	movlw	high __pbssBANK1
  2448  0056  0085               	movwf	5
  2449  0057  3037               	movlw	55
  2450  0058  3194  24EF  3180   	fcall	clear_ram0
  2451  005B                     end_of_initialization:	
  2452                           ;End of C runtime variable initialization code
  2453                           
  2454  005B                     __end_of__initialization:	
  2455  005B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2456  005C  0020               	movlb	0
  2457  005D  3188  2846         	ljmp	_main	;jump to C main() function
  2458                           
  2459                           	psect	bssCOMMON
  2460  0079                     __pbssCOMMON:	
  2461  0079                     _TMR0_InterruptHandler:	
  2462  0079                     	ds	2
  2463  007B                     displayRefreshISR@i:	
  2464  007B                     	ds	1
  2465  007C                     _eusartRxLastError:	
  2466  007C                     	ds	1
  2467  007D                     _timer0ReloadVal:	
  2468  007D                     	ds	1
  2469                           
  2470                           	psect	bssBANK0
  2471  0020                     __pbssBANK0:	
  2472  0020                     _button_press_count:	
  2473  0020                     	ds	4
  2474  0024                     _flag_button_press_count:	
  2475  0024                     	ds	4
  2476  0028                     _displayBuff:	
  2477  0028                     	ds	4
  2478  002C                     FIR_filter@oldest:	
  2479  002C                     	ds	2
  2480  002E                     _filter_temp:	
  2481  002E                     	ds	2
  2482  0030                     _bcd_temp:	
  2483  0030                     	ds	2
  2484  0032                     _ADC_InterruptHandler:	
  2485  0032                     	ds	2
  2486  0034                     _i2c_driver_i2cISR:	
  2487  0034                     	ds	2
  2488  0036                     _i2c_driver_busCollisionISR:	
  2489  0036                     	ds	2
  2490  0038                     _buzz_timeout:	
  2491  0038                     	ds	1
  2492  0039                     _temp_display_mode:	
  2493  0039                     	ds	1
  2494  003A                     _display_mode:	
  2495  003A                     	ds	1
  2496  003B                     _flag_alarm2:	
  2497  003B                     	ds	1
  2498  003C                     _flag_alarm1:	
  2499  003C                     	ds	1
  2500  003D                     _mode_flash_count:	
  2501  003D                     	ds	1
  2502  003E                     _mode_timeout_count:	
  2503  003E                     	ds	1
  2504  003F                     _mode:	
  2505  003F                     	ds	1
  2506  0040                     _flag_dot_blink:	
  2507  0040                     	ds	1
  2508  0041                     _flag_time_display_update:	
  2509  0041                     	ds	1
  2510  0042                     _rtcData:	
  2511  0042                     	ds	20
  2512                           
  2513                           	psect	bssBANK1
  2514  00A0                     __pbssBANK1:	
  2515  00A0                     _i2c_status:	
  2516  00A0                     	ds	29
  2517  00BD                     FIR_filter@buffer:	
  2518  00BD                     	ds	16
  2519  00CD                     FIR_filter@sum:	
  2520  00CD                     	ds	4
  2521  00D1                     _EUSART_ErrorHandler:	
  2522  00D1                     	ds	2
  2523  00D3                     _EUSART_OverrunErrorHandler:	
  2524  00D3                     	ds	2
  2525  00D5                     _EUSART_FramingErrorHandler:	
  2526  00D5                     	ds	2
  2527                           
  2528                           	psect	clrtext
  2529  14EF                     clear_ram0:	
  2530                           ;	Called with FSR0 containing the base address, and
  2531                           ;	WREG with the size to clear
  2532                           
  2533  14EF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2534  14F0                     clrloop0:	
  2535  14F0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2536  14F1  3101               	addfsr 0,1
  2537  14F2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2538  14F3  2CF0               	goto	clrloop0	;have we reached the end yet?
  2539  14F4  3400               	retlw	0	;all done for this memory range, return
  2540                           
  2541                           	psect	cstackCOMMON
  2542  0070                     __pcstackCOMMON:	
  2543  0070                     ?_i2c_driver_open:	
  2544  0070                     ?_mssp_IRQisEnabled:	
  2545                           ; 1 bit 
  2546                           
  2547  0070                     ?_i2c_driver_isNACK:	
  2548                           ; 1 bit 
  2549                           
  2550  0070                     ?i1_i2c_driver_isNACK:	
  2551                           ; 1 bit 
  2552                           
  2553  0070                     ?_mssp_clearIRQ:	
  2554                           ; 1 bit 
  2555                           
  2556  0070                     ?_i2c_busCollisionISR:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ??_i2c_busCollisionISR:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ?_i2c_ISR:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ?_mssp_disableIRQ:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ?_i2c_driver_start:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_i2c_poller:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_mssp_waitForEvent:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_i2c_driver_resetBus:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_i2c_driver_restart:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_i2c_driver_stop:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_i2c_driver_TXData:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ?_i2c_driver_startRX:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_i2c_driver_sendACK:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_i2c_driver_sendNACK:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_i2c_driver_getRXData:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_mssp_setIRQ:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_i2c_driver_clearBusCollision:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ??_i2c_driver_clearBusCollision:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_TMR0_ISR:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_PIN_MANAGER_IOC:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ??_PIN_MANAGER_IOC:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?_PIN_MANAGER_Initialize:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_OSCILLATOR_Initialize:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ?_WDT_Initialize:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_FVR_Initialize:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_ADC_Initialize:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ?_TMR0_Initialize:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_EUSART_Initialize:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ?_IOCBF4_DefaultInterruptHandler:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ??_IOCBF4_DefaultInterruptHandler:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ?_IOCBF4_ISR:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ??_IOCBF4_ISR:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ?_TMR0_DefaultInterruptHandler:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ??_TMR0_DefaultInterruptHandler:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ?_TMR0_CallBack:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_secondISR:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ??_secondISR:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_displayRefreshISR:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ??_displayRefreshISR:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_i2c_open:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_i2c_close:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?_i2c_masterOperation:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_i2c_masterWrite:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_do_I2C_RESET:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_do_I2C_IDLE:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_do_I2C_SEND_RESTART_READ:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     ?_do_I2C_SEND_RESTART:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     ?_do_I2C_SEND_STOP:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_do_I2C_SEND_ADR_READ:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?_do_I2C_RCEN:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ?_do_I2C_DO_ACK:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?_do_I2C_DO_NACK_STOP:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ?_do_I2C_DO_NACK_RESTART:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?_do_I2C_TX:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_do_I2C_RX:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_do_I2C_TX_EMPTY:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ?_DATAEE_ReadByte:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     ?_INTERRUPT_InterruptManager:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ?_SYSTEM_Initialize:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_initRTC:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_clearAlarmFlag:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_updateDate:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     ?_updateMonth:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0070                     ?_bcdHourIncr:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0070                     ?_bcdHourDecr:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0070                     ?_bcdMinuteIncr:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0070                     ?_bcdMinuteDecr:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0070                     ?_bcdMonthIncr:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0070                     ?_bcdMonthDecr:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_bcdDateIncr:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0070                     ?_bcdDateDecr:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_main:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?i1_i2c_setBuffer:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?i1_do_I2C_RESET:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ??i1_do_I2C_RESET:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?i1_do_I2C_IDLE:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ??i1_do_I2C_IDLE:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?i1_do_I2C_SEND_RESTART:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ??i1_do_I2C_SEND_RESTART:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?i1_do_I2C_SEND_STOP:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ??i1_do_I2C_SEND_STOP:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ??i1_do_I2C_SEND_ADR_READ:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0070                     ??i1_do_I2C_SEND_ADR_WRITE:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0070                     ?i1_do_I2C_RCEN:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ??i1_do_I2C_RCEN:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?i1_do_I2C_DO_ACK:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ??i1_do_I2C_DO_ACK:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?i1_do_I2C_TX:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ??i1_do_I2C_TX:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?i1_do_I2C_RX:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ??i1_do_I2C_RX:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?i1_do_I2C_TX_EMPTY:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ??i1_do_I2C_TX_EMPTY:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?i1_i2c_ISR:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?i1_setCallBack:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?i1_mssp_clearIRQ:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ??i1_mssp_clearIRQ:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?i1_mssp_setIRQ:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ??i1_mssp_setIRQ:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?i1_i2c_driver_resetBus:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ??i1_i2c_driver_resetBus:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?i1_i2c_driver_restart:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ??i1_i2c_driver_restart:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?i1_i2c_driver_stop:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ??i1_i2c_driver_stop:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ??i1_i2c_driver_isNACK:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?i1_i2c_driver_startRX:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ??i1_i2c_driver_startRX:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?i1_i2c_driver_getRXData:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ??i1_i2c_driver_getRXData:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?i1_i2c_driver_TXData:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ??i1_i2c_driver_TXData:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?i1_i2c_driver_sendACK:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ??i1_i2c_driver_sendACK:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?i1_i2c_driver_sendNACK:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ??i1_i2c_driver_sendNACK:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     i1i2c_driver_TXData@d:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     i1i2c_setBuffer@bufferSize:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     i1setCallBack@cb:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958                           
  2959                           ; 2 bytes @ 0x0
  2960  0070                     	ds	2
  2961  0072                     ??_TMR0_ISR:	
  2962  0072                     ??_TMR0_CallBack:	
  2963                           ; 1 bytes @ 0x2
  2964                           
  2965  0072                     ??i1_i2c_setBuffer:	
  2966                           ; 1 bytes @ 0x2
  2967                           
  2968  0072                     i1setCallBack@p:	
  2969                           ; 1 bytes @ 0x2
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x2
  2973  0072                     	ds	1
  2974  0073                     ??i1_i2c_ISR:	
  2975  0073                     ??i1_setCallBack:	
  2976                           ; 1 bytes @ 0x3
  2977                           
  2978  0073                     i1i2c_setBuffer@buffer:	
  2979                           ; 1 bytes @ 0x3
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x3
  2983  0073                     	ds	1
  2984  0074                     i1setCallBack@idx:	
  2985                           
  2986                           ; 1 bytes @ 0x4
  2987  0074                     	ds	1
  2988  0075                     ?i1_i2c_setDataCompleteCallback:	
  2989  0075                     i1i2c_setDataCompleteCallback@cb:	
  2990                           ; 1 bytes @ 0x5
  2991                           
  2992                           
  2993                           ; 2 bytes @ 0x5
  2994  0075                     	ds	1
  2995  0076                     ??_INTERRUPT_InterruptManager:	
  2996                           
  2997                           ; 1 bytes @ 0x6
  2998  0076                     	ds	1
  2999  0077                     i1i2c_setDataCompleteCallback@p:	
  3000                           
  3001                           ; 1 bytes @ 0x7
  3002  0077                     	ds	1
  3003  0078                     ??i1_i2c_setDataCompleteCallback:	
  3004                           
  3005                           ; 1 bytes @ 0x8
  3006  0078                     	ds	1
  3007  0079                     ??i1_returnStop:	
  3008  0079                     ??i1_returnReset:	
  3009                           ; 1 bytes @ 0x9
  3010                           
  3011  0079                     ??i1_wr1RegCompleteHandler:	
  3012                           ; 1 bytes @ 0x9
  3013                           
  3014  0079                     ??i1_rd1RegCompleteHandler:	
  3015                           ; 1 bytes @ 0x9
  3016                           
  3017  0079                     ??i1_rd2RegCompleteHandler:	
  3018                           ; 1 bytes @ 0x9
  3019                           
  3020  0079                     ??i1_wr2RegCompleteHandler:	
  3021                           ; 1 bytes @ 0x9
  3022                           
  3023  0079                     ??i1_rdBlkRegCompleteHandler:	
  3024                           ; 1 bytes @ 0x9
  3025                           
  3026  0079                     ??i1_i2c_restartWrite:	
  3027                           ; 1 bytes @ 0x9
  3028                           
  3029                           
  3030                           	psect	cstackBANK0
  3031  0056                     __pcstackBANK0:	
  3032                           ; 1 bytes @ 0x9
  3033                           
  3034  0056                     ?_setCallBack:	
  3035  0056                     ??_i2c_driver_open:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038  0056                     ??_mssp_clearIRQ:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041  0056                     ?_i2c_driver_setBusCollisionISR:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044  0056                     ?_i2c_driver_setI2cISR:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047  0056                     ??_mssp_disableIRQ:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050  0056                     ??_i2c_driver_start:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053  0056                     ??_mssp_IRQisEnabled:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056  0056                     ??_mssp_waitForEvent:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059  0056                     ??_i2c_driver_resetBus:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062  0056                     ??_i2c_driver_restart:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065  0056                     ??_i2c_driver_stop:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068  0056                     ??_i2c_driver_TXData:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071  0056                     ??_i2c_driver_startRX:	
  3072                           ; 1 bytes @ 0x0
  3073                           
  3074  0056                     ??_i2c_driver_sendACK:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077  0056                     ??_i2c_driver_sendNACK:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080  0056                     ??_i2c_driver_isNACK:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083  0056                     ??_i2c_driver_getRXData:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086  0056                     ??_mssp_setIRQ:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089  0056                     ??_OSCILLATOR_Initialize:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0056                     ??_WDT_Initialize:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095  0056                     ??_FVR_Initialize:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0056                     ??_ADC_Initialize:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101  0056                     ?_IOCBF4_SetInterruptHandler:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104  0056                     ?_TMR0_SetInterruptHandler:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0056                     ?_EUSART_SetFramingErrorHandler:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0056                     ?_EUSART_SetOverrunErrorHandler:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113  0056                     ?_EUSART_SetErrorHandler:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0056                     ??_i2c_close:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0056                     ?_i2c_setBuffer:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0056                     ??_do_I2C_RESET:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0056                     ??_do_I2C_IDLE:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0056                     ??_do_I2C_SEND_RESTART_READ:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0056                     ??_do_I2C_SEND_RESTART_WRITE:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0056                     ??_do_I2C_SEND_RESTART:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137  0056                     ??_do_I2C_SEND_STOP:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0056                     ??_do_I2C_SEND_ADR_READ:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0056                     ??_do_I2C_RCEN:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146  0056                     ??_do_I2C_DO_ACK:	
  3147                           ; 1 bytes @ 0x0
  3148                           
  3149  0056                     ??_do_I2C_DO_NACK_STOP:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0056                     ??_do_I2C_DO_NACK_RESTART:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155  0056                     ??_do_I2C_DO_ADDRESS_NACK:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158  0056                     ??_do_I2C_RX:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161  0056                     ??_do_I2C_TX_EMPTY:	
  3162                           ; 1 bytes @ 0x0
  3163                           
  3164  0056                     ?_DATAEE_WriteByte:	
  3165                           ; 1 bytes @ 0x0
  3166                           
  3167  0056                     ??_DATAEE_ReadByte:	
  3168                           ; 1 bytes @ 0x0
  3169                           
  3170  0056                     ??_bcdHourIncr:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0056                     ??_bcdHourDecr:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0056                     ??_bcdMinuteIncr:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0056                     ??_bcdMinuteDecr:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0056                     ??_bcdMonthIncr:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0056                     ??_bcdMonthDecr:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0056                     ??_bcdDateIncr:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0056                     ??_bcdDateDecr:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0056                     ?i1_returnStop:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0056                     ?i1_returnReset:	
  3198                           ; 1 bytes @ 0x0
  3199                           
  3200  0056                     ?i1_wr1RegCompleteHandler:	
  3201                           ; 1 bytes @ 0x0
  3202                           
  3203  0056                     ?i1_rd1RegCompleteHandler:	
  3204                           ; 1 bytes @ 0x0
  3205                           
  3206  0056                     ?i1_rd2RegCompleteHandler:	
  3207                           ; 1 bytes @ 0x0
  3208                           
  3209  0056                     ?i1_wr2RegCompleteHandler:	
  3210                           ; 1 bytes @ 0x0
  3211                           
  3212  0056                     ?i1_rdBlkRegCompleteHandler:	
  3213                           ; 1 bytes @ 0x0
  3214                           
  3215  0056                     ?i1_i2c_restartWrite:	
  3216                           ; 1 bytes @ 0x0
  3217                           
  3218  0056                     ?_ADC_GetConversion:	
  3219                           ; 1 bytes @ 0x0
  3220                           
  3221  0056                     ?___lwdiv:	
  3222                           ; 2 bytes @ 0x0
  3223                           
  3224  0056                     ?___lwmod:	
  3225                           ; 2 bytes @ 0x0
  3226                           
  3227  0056                     DATAEE_WriteByte@bData:	
  3228                           ; 2 bytes @ 0x0
  3229                           
  3230  0056                     DATAEE_ReadByte@bAdd:	
  3231                           ; 1 bytes @ 0x0
  3232                           
  3233  0056                     mssp_waitForEvent@timeout:	
  3234                           ; 1 bytes @ 0x0
  3235                           
  3236  0056                     i2c_driver_TXData@d:	
  3237                           ; 1 bytes @ 0x0
  3238                           
  3239  0056                     bcdMonthIncr@mo:	
  3240                           ; 1 bytes @ 0x0
  3241                           
  3242  0056                     bcdMonthDecr@mo:	
  3243                           ; 1 bytes @ 0x0
  3244                           
  3245  0056                     bcdDateIncr@dt:	
  3246                           ; 1 bytes @ 0x0
  3247                           
  3248  0056                     bcdDateDecr@dt:	
  3249                           ; 1 bytes @ 0x0
  3250                           
  3251  0056                     i1returnStop@p:	
  3252                           ; 1 bytes @ 0x0
  3253                           
  3254  0056                     i1returnReset@p:	
  3255                           ; 1 bytes @ 0x0
  3256                           
  3257  0056                     i1wr1RegCompleteHandler@p:	
  3258                           ; 1 bytes @ 0x0
  3259                           
  3260  0056                     i1rd1RegCompleteHandler@p:	
  3261                           ; 1 bytes @ 0x0
  3262                           
  3263  0056                     i1rd2RegCompleteHandler@p:	
  3264                           ; 1 bytes @ 0x0
  3265                           
  3266  0056                     i1wr2RegCompleteHandler@p:	
  3267                           ; 1 bytes @ 0x0
  3268                           
  3269  0056                     i1rdBlkRegCompleteHandler@p:	
  3270                           ; 1 bytes @ 0x0
  3271                           
  3272  0056                     i1i2c_restartWrite@p:	
  3273                           ; 1 bytes @ 0x0
  3274                           
  3275  0056                     i2c_setBuffer@bufferSize:	
  3276                           ; 1 bytes @ 0x0
  3277                           
  3278  0056                     setCallBack@cb:	
  3279                           ; 2 bytes @ 0x0
  3280                           
  3281  0056                     IOCBF4_SetInterruptHandler@InterruptHandler:	
  3282                           ; 2 bytes @ 0x0
  3283                           
  3284  0056                     TMR0_SetInterruptHandler@InterruptHandler:	
  3285                           ; 2 bytes @ 0x0
  3286                           
  3287  0056                     i2c_driver_setBusCollisionISR@handler:	
  3288                           ; 2 bytes @ 0x0
  3289                           
  3290  0056                     i2c_driver_setI2cISR@handler:	
  3291                           ; 2 bytes @ 0x0
  3292                           
  3293  0056                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3294                           ; 2 bytes @ 0x0
  3295                           
  3296  0056                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3297                           ; 2 bytes @ 0x0
  3298                           
  3299  0056                     EUSART_SetErrorHandler@interruptHandler:	
  3300                           ; 2 bytes @ 0x0
  3301                           
  3302  0056                     ___lwdiv@divisor:	
  3303                           ; 2 bytes @ 0x0
  3304                           
  3305  0056                     ___lwmod@divisor:	
  3306                           ; 2 bytes @ 0x0
  3307                           
  3308                           
  3309                           ; 2 bytes @ 0x0
  3310  0056                     	ds	1
  3311  0057                     ??_do_I2C_SEND_ADR_WRITE:	
  3312  0057                     ??_do_I2C_TX:	
  3313                           ; 1 bytes @ 0x1
  3314                           
  3315  0057                     ??_DATAEE_WriteByte:	
  3316                           ; 1 bytes @ 0x1
  3317                           
  3318  0057                     i2c_close@ret:	
  3319                           ; 1 bytes @ 0x1
  3320                           
  3321  0057                     DATAEE_WriteByte@bAdd:	
  3322                           ; 1 bytes @ 0x1
  3323                           
  3324  0057                     bcdHourIncr@hr:	
  3325                           ; 1 bytes @ 0x1
  3326                           
  3327  0057                     bcdHourDecr@hr:	
  3328                           ; 1 bytes @ 0x1
  3329                           
  3330  0057                     bcdMinuteIncr@mn:	
  3331                           ; 1 bytes @ 0x1
  3332                           
  3333  0057                     bcdMinuteDecr@mn:	
  3334                           ; 1 bytes @ 0x1
  3335                           
  3336                           
  3337                           ; 1 bytes @ 0x1
  3338  0057                     	ds	1
  3339  0058                     ??_i2c_driver_setBusCollisionISR:	
  3340  0058                     ??_i2c_driver_setI2cISR:	
  3341                           ; 1 bytes @ 0x2
  3342                           
  3343  0058                     ??_PIN_MANAGER_Initialize:	
  3344                           ; 1 bytes @ 0x2
  3345                           
  3346  0058                     ??_TMR0_Initialize:	
  3347                           ; 1 bytes @ 0x2
  3348                           
  3349  0058                     ??_EUSART_Initialize:	
  3350                           ; 1 bytes @ 0x2
  3351                           
  3352  0058                     ??_IOCBF4_SetInterruptHandler:	
  3353                           ; 1 bytes @ 0x2
  3354                           
  3355  0058                     ??_TMR0_SetInterruptHandler:	
  3356                           ; 1 bytes @ 0x2
  3357                           
  3358  0058                     ??_EUSART_SetFramingErrorHandler:	
  3359                           ; 1 bytes @ 0x2
  3360                           
  3361  0058                     ??_EUSART_SetOverrunErrorHandler:	
  3362                           ; 1 bytes @ 0x2
  3363                           
  3364  0058                     ??_EUSART_SetErrorHandler:	
  3365                           ; 1 bytes @ 0x2
  3366                           
  3367  0058                     ??_i2c_open:	
  3368                           ; 1 bytes @ 0x2
  3369                           
  3370  0058                     ??_i2c_setBuffer:	
  3371                           ; 1 bytes @ 0x2
  3372                           
  3373  0058                     ??_ADC_GetConversion:	
  3374                           ; 1 bytes @ 0x2
  3375                           
  3376  0058                     setCallBack@p:	
  3377                           ; 1 bytes @ 0x2
  3378                           
  3379  0058                     DATAEE_WriteByte@GIEBitValue:	
  3380                           ; 1 bytes @ 0x2
  3381                           
  3382  0058                     ___lwdiv@dividend:	
  3383                           ; 1 bytes @ 0x2
  3384                           
  3385  0058                     ___lwmod@dividend:	
  3386                           ; 2 bytes @ 0x2
  3387                           
  3388                           
  3389                           ; 2 bytes @ 0x2
  3390  0058                     	ds	1
  3391  0059                     ??_setCallBack:	
  3392  0059                     ??_SYSTEM_Initialize:	
  3393                           ; 1 bytes @ 0x3
  3394                           
  3395  0059                     i2c_open@address:	
  3396                           ; 1 bytes @ 0x3
  3397                           
  3398  0059                     i2c_setBuffer@buffer:	
  3399                           ; 1 bytes @ 0x3
  3400                           
  3401  0059                     ADC_GetConversion@channel:	
  3402                           ; 1 bytes @ 0x3
  3403                           
  3404                           
  3405                           ; 1 bytes @ 0x3
  3406  0059                     	ds	1
  3407  005A                     ??_i2c_ISR:	
  3408  005A                     ??___lwdiv:	
  3409                           ; 1 bytes @ 0x4
  3410                           
  3411  005A                     ??___lwmod:	
  3412                           ; 1 bytes @ 0x4
  3413                           
  3414  005A                     ?_FIR_filter:	
  3415                           ; 1 bytes @ 0x4
  3416                           
  3417  005A                     i2c_open@ret:	
  3418                           ; 2 bytes @ 0x4
  3419                           
  3420  005A                     setCallBack@idx:	
  3421                           ; 1 bytes @ 0x4
  3422                           
  3423  005A                     FIR_filter@sample:	
  3424                           ; 1 bytes @ 0x4
  3425                           
  3426                           
  3427                           ; 2 bytes @ 0x4
  3428  005A                     	ds	1
  3429  005B                     ?_i2c_setDataCompleteCallback:	
  3430  005B                     ?_i2c_setAddressNACKCallback:	
  3431                           ; 1 bytes @ 0x5
  3432                           
  3433  005B                     ___lwdiv@counter:	
  3434                           ; 1 bytes @ 0x5
  3435                           
  3436  005B                     ___lwmod@counter:	
  3437                           ; 1 bytes @ 0x5
  3438                           
  3439  005B                     i2c_setDataCompleteCallback@cb:	
  3440                           ; 1 bytes @ 0x5
  3441                           
  3442  005B                     i2c_setAddressNACKCallback@cb:	
  3443                           ; 2 bytes @ 0x5
  3444                           
  3445                           
  3446                           ; 2 bytes @ 0x5
  3447  005B                     	ds	1
  3448  005C                     ??_FIR_filter:	
  3449  005C                     ___lwdiv@quotient:	
  3450                           ; 1 bytes @ 0x6
  3451                           
  3452                           
  3453                           ; 2 bytes @ 0x6
  3454  005C                     	ds	1
  3455  005D                     ??_i2c_poller:	
  3456  005D                     ??_i2c_masterOperation:	
  3457                           ; 1 bytes @ 0x7
  3458                           
  3459  005D                     i2c_setDataCompleteCallback@p:	
  3460                           ; 1 bytes @ 0x7
  3461                           
  3462  005D                     i2c_setAddressNACKCallback@p:	
  3463                           ; 1 bytes @ 0x7
  3464                           
  3465                           
  3466                           ; 1 bytes @ 0x7
  3467  005D                     	ds	1
  3468  005E                     ??_i2c_setDataCompleteCallback:	
  3469  005E                     ??_i2c_setAddressNACKCallback:	
  3470                           ; 1 bytes @ 0x8
  3471                           
  3472  005E                     ?_intToBCD:	
  3473                           ; 1 bytes @ 0x8
  3474                           
  3475  005E                     i2c_masterOperation@read:	
  3476                           ; 2 bytes @ 0x8
  3477                           
  3478  005E                     intToBCD@binaryInput:	
  3479                           ; 1 bytes @ 0x8
  3480                           
  3481                           
  3482                           ; 2 bytes @ 0x8
  3483  005E                     	ds	1
  3484  005F                     ?_returnStop:	
  3485  005F                     ?_returnReset:	
  3486                           ; 1 bytes @ 0x9
  3487                           
  3488  005F                     ?_i2c_restartWrite:	
  3489                           ; 1 bytes @ 0x9
  3490                           
  3491  005F                     ?_wr1RegCompleteHandler:	
  3492                           ; 1 bytes @ 0x9
  3493                           
  3494  005F                     ?_rd1RegCompleteHandler:	
  3495                           ; 1 bytes @ 0x9
  3496                           
  3497  005F                     ?_rd2RegCompleteHandler:	
  3498                           ; 1 bytes @ 0x9
  3499                           
  3500  005F                     ?_wr2RegCompleteHandler:	
  3501                           ; 1 bytes @ 0x9
  3502                           
  3503  005F                     ?_rdBlkRegCompleteHandler:	
  3504                           ; 1 bytes @ 0x9
  3505                           
  3506  005F                     i2c_masterOperation@ret:	
  3507                           ; 1 bytes @ 0x9
  3508                           
  3509  005F                     returnStop@p:	
  3510                           ; 1 bytes @ 0x9
  3511                           
  3512  005F                     returnReset@p:	
  3513                           ; 1 bytes @ 0x9
  3514                           
  3515  005F                     wr1RegCompleteHandler@p:	
  3516                           ; 1 bytes @ 0x9
  3517                           
  3518  005F                     rd1RegCompleteHandler@p:	
  3519                           ; 1 bytes @ 0x9
  3520                           
  3521  005F                     rd2RegCompleteHandler@p:	
  3522                           ; 1 bytes @ 0x9
  3523                           
  3524  005F                     wr2RegCompleteHandler@p:	
  3525                           ; 1 bytes @ 0x9
  3526                           
  3527  005F                     rdBlkRegCompleteHandler@p:	
  3528                           ; 1 bytes @ 0x9
  3529                           
  3530  005F                     i2c_restartWrite@p:	
  3531                           ; 1 bytes @ 0x9
  3532                           
  3533                           
  3534                           ; 1 bytes @ 0x9
  3535  005F                     	ds	1
  3536  0060                     ??_returnStop:	
  3537  0060                     ??_returnReset:	
  3538                           ; 1 bytes @ 0xA
  3539                           
  3540  0060                     ??_i2c_restartWrite:	
  3541                           ; 1 bytes @ 0xA
  3542                           
  3543  0060                     ??_i2c_masterWrite:	
  3544                           ; 1 bytes @ 0xA
  3545                           
  3546  0060                     ??_wr1RegCompleteHandler:	
  3547                           ; 1 bytes @ 0xA
  3548                           
  3549  0060                     ?_i2c_writeNBytes:	
  3550                           ; 1 bytes @ 0xA
  3551                           
  3552  0060                     ??_rd1RegCompleteHandler:	
  3553                           ; 1 bytes @ 0xA
  3554                           
  3555  0060                     ??_rd2RegCompleteHandler:	
  3556                           ; 1 bytes @ 0xA
  3557                           
  3558  0060                     ??_wr2RegCompleteHandler:	
  3559                           ; 1 bytes @ 0xA
  3560                           
  3561  0060                     ??_rdBlkRegCompleteHandler:	
  3562                           ; 1 bytes @ 0xA
  3563                           
  3564  0060                     ?_i2c_readDataBlock:	
  3565                           ; 1 bytes @ 0xA
  3566                           
  3567  0060                     ??_intToBCD:	
  3568                           ; 1 bytes @ 0xA
  3569                           
  3570  0060                     i2c_writeNBytes@data:	
  3571                           ; 1 bytes @ 0xA
  3572                           
  3573  0060                     i2c_readDataBlock@reg:	
  3574                           ; 1 bytes @ 0xA
  3575                           
  3576                           
  3577                           ; 1 bytes @ 0xA
  3578  0060                     	ds	1
  3579  0061                     i2c_readDataBlock@data:	
  3580  0061                     i2c_writeNBytes@len:	
  3581                           ; 1 bytes @ 0xB
  3582                           
  3583                           
  3584                           ; 2 bytes @ 0xB
  3585  0061                     	ds	1
  3586  0062                     i2c_readDataBlock@len:	
  3587                           
  3588                           ; 2 bytes @ 0xC
  3589  0062                     	ds	1
  3590  0063                     ??_i2c_writeNBytes:	
  3591  0063                     i2c_writeNBytes@address:	
  3592                           ; 1 bytes @ 0xD
  3593                           
  3594  0063                     intToBCD@bcdResult:	
  3595                           ; 1 bytes @ 0xD
  3596                           
  3597                           
  3598                           ; 2 bytes @ 0xD
  3599  0063                     	ds	1
  3600  0064                     ??_i2c_readDataBlock:	
  3601  0064                     ?_updateRTC:	
  3602                           ; 1 bytes @ 0xE
  3603                           
  3604  0064                     ?_updateAlarm1:	
  3605                           ; 1 bytes @ 0xE
  3606                           
  3607  0064                     ?_updateAlarm2:	
  3608                           ; 1 bytes @ 0xE
  3609                           
  3610  0064                     ??_clearAlarmFlag:	
  3611                           ; 1 bytes @ 0xE
  3612                           
  3613  0064                     ??_updateDate:	
  3614                           ; 1 bytes @ 0xE
  3615                           
  3616  0064                     ??_updateMonth:	
  3617                           ; 1 bytes @ 0xE
  3618                           
  3619  0064                     updateRTC@bcdMinute:	
  3620                           ; 1 bytes @ 0xE
  3621                           
  3622  0064                     updateAlarm1@bcdMinute:	
  3623                           ; 1 bytes @ 0xE
  3624                           
  3625  0064                     updateAlarm2@bcdMinute:	
  3626                           ; 1 bytes @ 0xE
  3627                           
  3628                           
  3629                           ; 1 bytes @ 0xE
  3630  0064                     	ds	1
  3631  0065                     ??_updateRTC:	
  3632  0065                     ??_updateAlarm1:	
  3633                           ; 1 bytes @ 0xF
  3634                           
  3635  0065                     ??_updateAlarm2:	
  3636                           ; 1 bytes @ 0xF
  3637                           
  3638  0065                     i2c_readDataBlock@address:	
  3639                           ; 1 bytes @ 0xF
  3640                           
  3641  0065                     updateDate@bcdDate:	
  3642                           ; 1 bytes @ 0xF
  3643                           
  3644  0065                     updateMonth@bcdMonth:	
  3645                           ; 1 bytes @ 0xF
  3646                           
  3647  0065                     clearAlarmFlag@rData:	
  3648                           ; 1 bytes @ 0xF
  3649                           
  3650  0065                     intToBCD@shift:	
  3651                           ; 2 bytes @ 0xF
  3652                           
  3653                           
  3654                           ; 2 bytes @ 0xF
  3655  0065                     	ds	1
  3656  0066                     updateRTC@bcdHour:	
  3657  0066                     updateAlarm1@bcdHour:	
  3658                           ; 1 bytes @ 0x10
  3659                           
  3660  0066                     updateAlarm2@bcdHour:	
  3661                           ; 1 bytes @ 0x10
  3662                           
  3663  0066                     i2c_readDataBlock@d:	
  3664                           ; 1 bytes @ 0x10
  3665                           
  3666                           
  3667                           ; 3 bytes @ 0x10
  3668  0066                     	ds	3
  3669  0069                     ??_initRTC:	
  3670                           
  3671                           ; 1 bytes @ 0x13
  3672  0069                     	ds	2
  3673  006B                     ??_main:	
  3674                           
  3675                           ; 1 bytes @ 0x15
  3676  006B                     	ds	5
  3677                           
  3678                           	psect	maintext
  3679  0846                     __pmaintext:	
  3680 ;;
  3681 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  3682 ;;
  3683 ;; *************** function _main *****************
  3684 ;; Defined at:
  3685 ;;		line 389 in file "main.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;		None
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;		None
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : B1F/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3702 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;Total ram usage:        5 bytes
  3704 ;; Hardware stack levels required when called:   16
  3705 ;; This function calls:
  3706 ;;		_ADC_GetConversion
  3707 ;;		_DATAEE_ReadByte
  3708 ;;		_DATAEE_WriteByte
  3709 ;;		_FIR_filter
  3710 ;;		_IOCBF4_SetInterruptHandler
  3711 ;;		_SYSTEM_Initialize
  3712 ;;		_TMR0_SetInterruptHandler
  3713 ;;		_bcdDateDecr
  3714 ;;		_bcdDateIncr
  3715 ;;		_bcdHourDecr
  3716 ;;		_bcdHourIncr
  3717 ;;		_bcdMinuteDecr
  3718 ;;		_bcdMinuteIncr
  3719 ;;		_bcdMonthDecr
  3720 ;;		_bcdMonthIncr
  3721 ;;		_clearAlarmFlag
  3722 ;;		_i2c_readDataBlock
  3723 ;;		_initRTC
  3724 ;;		_intToBCD
  3725 ;;		_updateAlarm1
  3726 ;;		_updateAlarm2
  3727 ;;		_updateDate
  3728 ;;		_updateMonth
  3729 ;;		_updateRTC
  3730 ;; This function is called by:
  3731 ;;		Startup code after reset
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _main
  3737  0846                     _main:	
  3738  0846                     l7869:	
  3739                           ;incstack = 0
  3740                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3741                           
  3742                           
  3743                           ;main.c: 392:     SYSTEM_Initialize();
  3744  0846  3197  2710  3188   	fcall	_SYSTEM_Initialize
  3745  0849                     l7871:	
  3746  0849  0022               	movlb	2	; select bank2
  3747  084A  1090               	bcf	16,1	;volatile
  3748  084B                     l7873:	
  3749  084B  108E               	bcf	14,1	;volatile
  3750  084C                     l7875:	
  3751  084C  120C               	bcf	12,4	;volatile
  3752  084D                     l7877:	
  3753  084D  118C               	bcf	12,3	;volatile
  3754  084E                     l7879:	
  3755                           
  3756                           ;main.c: 400:     mode = MODE_NORMAL;
  3757  084E  0020               	movlb	0	; select bank0
  3758  084F  01BF               	clrf	_mode	;volatile
  3759  0850                     l7881:	
  3760                           
  3761                           ;main.c: 401:     flag_alarm1 = 0;
  3762  0850  01BC               	clrf	_flag_alarm1
  3763  0851                     l7883:	
  3764                           
  3765                           ;main.c: 402:     flag_alarm2 = 0;
  3766  0851  01BB               	clrf	_flag_alarm2
  3767  0852                     l7885:	
  3768                           
  3769                           ;main.c: 405:     display_mode = DATAEE_ReadByte(0x01);
  3770  0852  3001               	movlw	1
  3771  0853  3196  2601  3188   	fcall	_DATAEE_ReadByte
  3772  0856  0020               	movlb	0	; select bank0
  3773  0857  00EB               	movwf	??_main
  3774  0858  086B               	movf	??_main,w
  3775  0859  00BA               	movwf	_display_mode
  3776  085A                     l7887:	
  3777                           
  3778                           ;main.c: 407:     if(display_mode >= DISPLAY_MODE_END){
  3779  085A  3005               	movlw	5
  3780  085B  023A               	subwf	_display_mode,w
  3781  085C  1C03               	skipc
  3782  085D  285F               	goto	u6451
  3783  085E  2860               	goto	u6450
  3784  085F                     u6451:	
  3785  085F  2861               	goto	l7891
  3786  0860                     u6450:	
  3787  0860                     l7889:	
  3788                           
  3789                           ;main.c: 408:         display_mode = DISPLAY_MODE_TIME;
  3790  0860  01BA               	clrf	_display_mode
  3791  0861                     l7891:	
  3792                           
  3793                           ;main.c: 411:     IOCBF4_SetInterruptHandler(&secondISR);
  3794  0861  30E5               	movlw	low _secondISR
  3795  0862  00D6               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
  3796  0863  3003               	movlw	high _secondISR
  3797  0864  00D7               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
  3798  0865  3195  2549  3188   	fcall	_IOCBF4_SetInterruptHandler
  3799  0868                     l7893:	
  3800                           
  3801                           ;main.c: 412:     TMR0_SetInterruptHandler(&displayRefreshISR);
  3802  0868  305F               	movlw	low _displayRefreshISR
  3803  0869  0020               	movlb	0	; select bank0
  3804  086A  00D6               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3805  086B  3000               	movlw	high _displayRefreshISR
  3806  086C  00D7               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3807  086D  3194  24C5  3188   	fcall	_TMR0_SetInterruptHandler
  3808  0870                     l7895:	
  3809                           
  3810                           ;main.c: 417:     (INTCONbits.GIE = 1);
  3811  0870  178B               	bsf	11,7	;volatile
  3812  0871                     l7897:	
  3813                           
  3814                           ;main.c: 420:     (INTCONbits.PEIE = 1);
  3815  0871  170B               	bsf	11,6	;volatile
  3816  0872                     l7899:	
  3817                           
  3818                           ;main.c: 428:     initRTC();
  3819  0872  3181  2186  3188   	fcall	_initRTC
  3820  0875                     l1032:	
  3821                           ;main.c: 430:     while (1)
  3822                           
  3823  0875  0064               	clrwdt	;# 
  3824  0876                     l7901:	
  3825                           
  3826                           ;main.c: 436:         if(PORTBbits.RB0 == 0){
  3827  0876  0020               	movlb	0	; select bank0
  3828  0877  180D               	btfsc	13,0	;volatile
  3829  0878  287A               	goto	u6461
  3830  0879  287B               	goto	u6460
  3831  087A                     u6461:	
  3832  087A  287E               	goto	l1033
  3833  087B                     u6460:	
  3834  087B                     l7903:	
  3835                           
  3836                           ;main.c: 437:             flag_button_press_count[0] = 1;
  3837  087B  01A4               	clrf	_flag_button_press_count
  3838  087C  0AA4               	incf	_flag_button_press_count,f
  3839                           
  3840                           ;main.c: 438:         } else if(PORTBbits.RB1 == 0){
  3841  087D  2B03               	goto	l8191
  3842  087E                     l1033:	
  3843  087E  188D               	btfsc	13,1	;volatile
  3844  087F  2881               	goto	u6471
  3845  0880  2882               	goto	u6470
  3846  0881                     u6471:	
  3847  0881  2885               	goto	l1035
  3848  0882                     u6470:	
  3849  0882                     l7905:	
  3850                           
  3851                           ;main.c: 439:             flag_button_press_count[1] = 1;
  3852  0882  01A5               	clrf	_flag_button_press_count+1
  3853  0883  0AA5               	incf	_flag_button_press_count+1,f
  3854                           
  3855                           ;main.c: 440:         } else if(PORTBbits.RB2 == 0){
  3856  0884  2B03               	goto	l8191
  3857  0885                     l1035:	
  3858  0885  190D               	btfsc	13,2	;volatile
  3859  0886  2888               	goto	u6481
  3860  0887  2889               	goto	u6480
  3861  0888                     u6481:	
  3862  0888  288C               	goto	l1037
  3863  0889                     u6480:	
  3864  0889                     l7907:	
  3865                           
  3866                           ;main.c: 441:             flag_button_press_count[2] = 1;
  3867  0889  01A6               	clrf	_flag_button_press_count+2
  3868  088A  0AA6               	incf	_flag_button_press_count+2,f
  3869                           
  3870                           ;main.c: 442:         } else if(PORTBbits.RB3 == 0){
  3871  088B  2B03               	goto	l8191
  3872  088C                     l1037:	
  3873  088C  198D               	btfsc	13,3	;volatile
  3874  088D  288F               	goto	u6491
  3875  088E  2890               	goto	u6490
  3876  088F                     u6491:	
  3877  088F  2893               	goto	l7911
  3878  0890                     u6490:	
  3879  0890                     l7909:	
  3880                           
  3881                           ;main.c: 443:             flag_button_press_count[3] = 1;
  3882  0890  01A7               	clrf	_flag_button_press_count+3
  3883  0891  0AA7               	incf	_flag_button_press_count+3,f
  3884                           
  3885                           ;main.c: 444:         } else {
  3886  0892  2B03               	goto	l8191
  3887  0893                     l7911:	
  3888                           
  3889                           ;main.c: 445:             if(flag_button_press_count[0] == 1){
  3890  0893  0324               	decf	_flag_button_press_count,w
  3891  0894  1D03               	btfss	3,2
  3892  0895  2897               	goto	u6501
  3893  0896  2898               	goto	u6500
  3894  0897                     u6501:	
  3895  0897  293F               	goto	l7973
  3896  0898                     u6500:	
  3897  0898                     l7913:	
  3898                           
  3899                           ;main.c: 446:                 if(button_press_count[0] > 5 && button_press_count[0] < 10
      +                          0){
  3900  0898  3006               	movlw	6
  3901  0899  0220               	subwf	_button_press_count,w
  3902  089A  1C03               	skipc
  3903  089B  289D               	goto	u6511
  3904  089C  289E               	goto	u6510
  3905  089D                     u6511:	
  3906  089D  293D               	goto	l1042
  3907  089E                     u6510:	
  3908  089E                     l7915:	
  3909  089E  3064               	movlw	100
  3910  089F  0220               	subwf	_button_press_count,w
  3911  08A0  1803               	skipnc
  3912  08A1  28A3               	goto	u6521
  3913  08A2  28A4               	goto	u6520
  3914  08A3                     u6521:	
  3915  08A3  293D               	goto	l1042
  3916  08A4                     u6520:	
  3917  08A4                     l7917:	
  3918                           
  3919                           ;main.c: 447:                     if(mode == MODE_NORMAL){
  3920  08A4  083F               	movf	_mode,w	;volatile
  3921  08A5  1D03               	btfss	3,2
  3922  08A6  28A8               	goto	u6531
  3923  08A7  28A9               	goto	u6530
  3924  08A8                     u6531:	
  3925  08A8  28B4               	goto	l7923
  3926  08A9                     u6530:	
  3927  08A9                     l7919:	
  3928                           
  3929                           ;main.c: 448:                         mode = MODE_SET_HOUR;
  3930  08A9  3003               	movlw	3
  3931  08AA  00EB               	movwf	??_main
  3932  08AB  086B               	movf	??_main,w
  3933  08AC  00BF               	movwf	_mode	;volatile
  3934                           
  3935                           ;main.c: 449:                         mode_timeout_count = 18;
  3936  08AD  3012               	movlw	18
  3937  08AE  00EB               	movwf	??_main
  3938  08AF  086B               	movf	??_main,w
  3939  08B0  00BE               	movwf	_mode_timeout_count	;volatile
  3940  08B1                     l7921:	
  3941                           
  3942                           ;main.c: 450:                         flag_time_display_update = 1;
  3943  08B1  01C1               	clrf	_flag_time_display_update
  3944  08B2  0AC1               	incf	_flag_time_display_update,f
  3945                           
  3946                           ;main.c: 451:                     } else if(mode == MODE_SET_HOUR){
  3947  08B3  293D               	goto	l1042
  3948  08B4                     l7923:	
  3949  08B4  3003               	movlw	3
  3950  08B5  063F               	xorwf	_mode,w	;volatile
  3951  08B6  1D03               	btfss	3,2
  3952  08B7  28B9               	goto	u6541
  3953  08B8  28BA               	goto	u6540
  3954  08B9                     u6541:	
  3955  08B9  28C3               	goto	l7929
  3956  08BA                     u6540:	
  3957  08BA                     l7925:	
  3958                           
  3959                           ;main.c: 452:                         mode = MODE_SET_MINUTE;
  3960  08BA  3004               	movlw	4
  3961  08BB  00EB               	movwf	??_main
  3962  08BC  086B               	movf	??_main,w
  3963  08BD  00BF               	movwf	_mode	;volatile
  3964                           
  3965                           ;main.c: 453:                         mode_timeout_count = 18;
  3966  08BE  3012               	movlw	18
  3967  08BF  00EB               	movwf	??_main
  3968  08C0  086B               	movf	??_main,w
  3969  08C1  00BE               	movwf	_mode_timeout_count	;volatile
  3970  08C2  28B1               	goto	l7921
  3971  08C3                     l7929:	
  3972  08C3  3004               	movlw	4
  3973  08C4  063F               	xorwf	_mode,w	;volatile
  3974  08C5  1D03               	btfss	3,2
  3975  08C6  28C8               	goto	u6551
  3976  08C7  28C9               	goto	u6550
  3977  08C8                     u6551:	
  3978  08C8  28D6               	goto	l7935
  3979  08C9                     u6550:	
  3980  08C9                     l7931:	
  3981                           
  3982                           ;main.c: 456:                         mode = MODE_SET_MONTH;
  3983  08C9  3005               	movlw	5
  3984  08CA  00EB               	movwf	??_main
  3985  08CB  086B               	movf	??_main,w
  3986  08CC  00BF               	movwf	_mode	;volatile
  3987                           
  3988                           ;main.c: 457:                         mode_timeout_count = 18;
  3989  08CD  3012               	movlw	18
  3990  08CE  00EB               	movwf	??_main
  3991  08CF  086B               	movf	??_main,w
  3992  08D0  00BE               	movwf	_mode_timeout_count	;volatile
  3993                           
  3994                           ;main.c: 458:                         mode_flash_count = 4;
  3995  08D1  3004               	movlw	4
  3996  08D2  00EB               	movwf	??_main
  3997  08D3  086B               	movf	??_main,w
  3998  08D4  00BD               	movwf	_mode_flash_count	;volatile
  3999  08D5  28B1               	goto	l7921
  4000  08D6                     l7935:	
  4001  08D6  3005               	movlw	5
  4002  08D7  063F               	xorwf	_mode,w	;volatile
  4003  08D8  1D03               	btfss	3,2
  4004  08D9  28DB               	goto	u6561
  4005  08DA  28DC               	goto	u6560
  4006  08DB                     u6561:	
  4007  08DB  28E5               	goto	l7941
  4008  08DC                     u6560:	
  4009  08DC                     l7937:	
  4010                           
  4011                           ;main.c: 461:                         mode = MODE_SET_DATE;
  4012  08DC  3006               	movlw	6
  4013  08DD  00EB               	movwf	??_main
  4014  08DE  086B               	movf	??_main,w
  4015  08DF  00BF               	movwf	_mode	;volatile
  4016                           
  4017                           ;main.c: 462:                         mode_timeout_count = 18;
  4018  08E0  3012               	movlw	18
  4019  08E1  00EB               	movwf	??_main
  4020  08E2  086B               	movf	??_main,w
  4021  08E3  00BE               	movwf	_mode_timeout_count	;volatile
  4022  08E4  28B1               	goto	l7921
  4023  08E5                     l7941:	
  4024  08E5  3006               	movlw	6
  4025  08E6  063F               	xorwf	_mode,w	;volatile
  4026  08E7  1D03               	btfss	3,2
  4027  08E8  28EA               	goto	u6571
  4028  08E9  28EB               	goto	u6570
  4029  08EA                     u6571:	
  4030  08EA  28F8               	goto	l7947
  4031  08EB                     u6570:	
  4032  08EB                     l7943:	
  4033                           
  4034                           ;main.c: 465:                         mode = MODE_SET_AL1_H;
  4035  08EB  3007               	movlw	7
  4036  08EC  00EB               	movwf	??_main
  4037  08ED  086B               	movf	??_main,w
  4038  08EE  00BF               	movwf	_mode	;volatile
  4039                           
  4040                           ;main.c: 466:                         mode_timeout_count = 18;
  4041  08EF  3012               	movlw	18
  4042  08F0  00EB               	movwf	??_main
  4043  08F1  086B               	movf	??_main,w
  4044  08F2  00BE               	movwf	_mode_timeout_count	;volatile
  4045                           
  4046                           ;main.c: 467:                         mode_flash_count = 4;
  4047  08F3  3004               	movlw	4
  4048  08F4  00EB               	movwf	??_main
  4049  08F5  086B               	movf	??_main,w
  4050  08F6  00BD               	movwf	_mode_flash_count	;volatile
  4051  08F7  28B1               	goto	l7921
  4052  08F8                     l7947:	
  4053  08F8  3007               	movlw	7
  4054  08F9  063F               	xorwf	_mode,w	;volatile
  4055  08FA  1D03               	btfss	3,2
  4056  08FB  28FD               	goto	u6581
  4057  08FC  28FE               	goto	u6580
  4058  08FD                     u6581:	
  4059  08FD  2907               	goto	l7953
  4060  08FE                     u6580:	
  4061  08FE                     l7949:	
  4062                           
  4063                           ;main.c: 470:                         mode = MODE_SET_AL1_M;
  4064  08FE  3008               	movlw	8
  4065  08FF  00EB               	movwf	??_main
  4066  0900  086B               	movf	??_main,w
  4067  0901  00BF               	movwf	_mode	;volatile
  4068                           
  4069                           ;main.c: 471:                         mode_timeout_count = 18;
  4070  0902  3012               	movlw	18
  4071  0903  00EB               	movwf	??_main
  4072  0904  086B               	movf	??_main,w
  4073  0905  00BE               	movwf	_mode_timeout_count	;volatile
  4074  0906  28B1               	goto	l7921
  4075  0907                     l7953:	
  4076  0907  3008               	movlw	8
  4077  0908  063F               	xorwf	_mode,w	;volatile
  4078  0909  1D03               	btfss	3,2
  4079  090A  290C               	goto	u6591
  4080  090B  290D               	goto	u6590
  4081  090C                     u6591:	
  4082  090C  291A               	goto	l7959
  4083  090D                     u6590:	
  4084  090D                     l7955:	
  4085                           
  4086                           ;main.c: 474:                         mode = MODE_SET_AL2_H;
  4087  090D  3009               	movlw	9
  4088  090E  00EB               	movwf	??_main
  4089  090F  086B               	movf	??_main,w
  4090  0910  00BF               	movwf	_mode	;volatile
  4091                           
  4092                           ;main.c: 475:                         mode_timeout_count = 18;
  4093  0911  3012               	movlw	18
  4094  0912  00EB               	movwf	??_main
  4095  0913  086B               	movf	??_main,w
  4096  0914  00BE               	movwf	_mode_timeout_count	;volatile
  4097                           
  4098                           ;main.c: 476:                         mode_flash_count = 4;
  4099  0915  3004               	movlw	4
  4100  0916  00EB               	movwf	??_main
  4101  0917  086B               	movf	??_main,w
  4102  0918  00BD               	movwf	_mode_flash_count	;volatile
  4103  0919  28B1               	goto	l7921
  4104  091A                     l7959:	
  4105  091A  3009               	movlw	9
  4106  091B  063F               	xorwf	_mode,w	;volatile
  4107  091C  1D03               	btfss	3,2
  4108  091D  291F               	goto	u6601
  4109  091E  2920               	goto	u6600
  4110  091F                     u6601:	
  4111  091F  2929               	goto	l7965
  4112  0920                     u6600:	
  4113  0920                     l7961:	
  4114                           
  4115                           ;main.c: 479:                         mode = MODE_SET_AL2_M;
  4116  0920  300A               	movlw	10
  4117  0921  00EB               	movwf	??_main
  4118  0922  086B               	movf	??_main,w
  4119  0923  00BF               	movwf	_mode	;volatile
  4120                           
  4121                           ;main.c: 480:                         mode_timeout_count = 18;
  4122  0924  3012               	movlw	18
  4123  0925  00EB               	movwf	??_main
  4124  0926  086B               	movf	??_main,w
  4125  0927  00BE               	movwf	_mode_timeout_count	;volatile
  4126  0928  28B1               	goto	l7921
  4127  0929                     l7965:	
  4128  0929  300A               	movlw	10
  4129  092A  063F               	xorwf	_mode,w	;volatile
  4130  092B  1D03               	btfss	3,2
  4131  092C  292E               	goto	u6611
  4132  092D  292F               	goto	u6610
  4133  092E                     u6611:	
  4134  092E  293C               	goto	l7971
  4135  092F                     u6610:	
  4136  092F                     l7967:	
  4137                           
  4138                           ;main.c: 483:                         mode = MODE_SET_DISPLAY_MODE;
  4139  092F  300B               	movlw	11
  4140  0930  00EB               	movwf	??_main
  4141  0931  086B               	movf	??_main,w
  4142  0932  00BF               	movwf	_mode	;volatile
  4143                           
  4144                           ;main.c: 484:                         temp_display_mode = display_mode;
  4145  0933  083A               	movf	_display_mode,w
  4146  0934  00EB               	movwf	??_main
  4147  0935  086B               	movf	??_main,w
  4148  0936  00B9               	movwf	_temp_display_mode
  4149                           
  4150                           ;main.c: 485:                         mode_timeout_count = 18;
  4151  0937  3012               	movlw	18
  4152  0938  00EB               	movwf	??_main
  4153  0939  086B               	movf	??_main,w
  4154  093A  00BE               	movwf	_mode_timeout_count	;volatile
  4155  093B  28B1               	goto	l7921
  4156  093C                     l7971:	
  4157                           
  4158                           ;main.c: 488:                         mode = MODE_NORMAL;
  4159  093C  01BF               	clrf	_mode	;volatile
  4160  093D                     l1042:	
  4161                           ;main.c: 491:                 }
  4162                           
  4163                           
  4164                           ;main.c: 492:                 button_press_count[0] = 0;
  4165  093D  01A0               	clrf	_button_press_count
  4166                           
  4167                           ;main.c: 493:                 flag_button_press_count[0] = 0;
  4168  093E  01A4               	clrf	_flag_button_press_count
  4169  093F                     l7973:	
  4170                           
  4171                           ;main.c: 496:             if(flag_button_press_count[1] == 1){
  4172  093F  0325               	decf	_flag_button_press_count+1,w
  4173  0940  1D03               	btfss	3,2
  4174  0941  2943               	goto	u6621
  4175  0942  2944               	goto	u6620
  4176  0943                     u6621:	
  4177  0943  29E3               	goto	l8059
  4178  0944                     u6620:	
  4179  0944                     l7975:	
  4180                           
  4181                           ;main.c: 497:                 if(button_press_count[1] > 5 && button_press_count[1] < 10
      +                          0){
  4182  0944  3006               	movlw	6
  4183  0945  0221               	subwf	_button_press_count+1,w
  4184  0946  1C03               	skipc
  4185  0947  2949               	goto	u6631
  4186  0948  294A               	goto	u6630
  4187  0949                     u6631:	
  4188  0949  29E1               	goto	l8055
  4189  094A                     u6630:	
  4190  094A                     l7977:	
  4191  094A  3064               	movlw	100
  4192  094B  0221               	subwf	_button_press_count+1,w
  4193  094C  1803               	skipnc
  4194  094D  294F               	goto	u6641
  4195  094E  2950               	goto	u6640
  4196  094F                     u6641:	
  4197  094F  29E1               	goto	l8055
  4198  0950                     u6640:	
  4199  0950                     l7979:	
  4200                           
  4201                           ;main.c: 499:                     if(mode == MODE_SET_HOUR){
  4202  0950  3003               	movlw	3
  4203  0951  063F               	xorwf	_mode,w	;volatile
  4204  0952  1D03               	btfss	3,2
  4205  0953  2955               	goto	u6651
  4206  0954  2956               	goto	u6650
  4207  0955                     u6651:	
  4208  0955  2965               	goto	l7987
  4209  0956                     u6650:	
  4210  0956                     l7981:	
  4211                           
  4212                           ;main.c: 500:                         rtcData[0x02] = bcdHourIncr(rtcData[0x02]);
  4213  0956  0844               	movf	_rtcData+2,w
  4214  0957  3187  27C4  3188   	fcall	_bcdHourIncr
  4215  095A  0020               	movlb	0	; select bank0
  4216  095B  00EB               	movwf	??_main
  4217  095C  086B               	movf	??_main,w
  4218  095D  00C4               	movwf	_rtcData+2
  4219  095E                     l7983:	
  4220                           
  4221                           ;main.c: 501:                         mode_timeout_count = 18;
  4222  095E  3012               	movlw	18
  4223  095F  00EB               	movwf	??_main
  4224  0960  086B               	movf	??_main,w
  4225  0961  00BE               	movwf	_mode_timeout_count	;volatile
  4226  0962                     l7985:	
  4227                           
  4228                           ;main.c: 502:                         flag_time_display_update = 1;
  4229  0962  01C1               	clrf	_flag_time_display_update
  4230  0963  0AC1               	incf	_flag_time_display_update,f
  4231                           
  4232                           ;main.c: 503:                     } else if(mode == MODE_SET_MINUTE){
  4233  0964  29E0               	goto	l8053
  4234  0965                     l7987:	
  4235  0965  3004               	movlw	4
  4236  0966  063F               	xorwf	_mode,w	;volatile
  4237  0967  1D03               	btfss	3,2
  4238  0968  296A               	goto	u6661
  4239  0969  296B               	goto	u6660
  4240  096A                     u6661:	
  4241  096A  2974               	goto	l7995
  4242  096B                     u6660:	
  4243  096B                     l7989:	
  4244                           
  4245                           ;main.c: 504:                         rtcData[0x01] = bcdMinuteIncr(rtcData[0x01]);
  4246  096B  0843               	movf	_rtcData+1,w
  4247  096C  3184  2459  3188   	fcall	_bcdMinuteIncr
  4248  096F  0020               	movlb	0	; select bank0
  4249  0970  00EB               	movwf	??_main
  4250  0971  086B               	movf	??_main,w
  4251  0972  00C3               	movwf	_rtcData+1
  4252  0973  295E               	goto	l7983
  4253  0974                     l7995:	
  4254  0974  3005               	movlw	5
  4255  0975  063F               	xorwf	_mode,w	;volatile
  4256  0976  1D03               	btfss	3,2
  4257  0977  2979               	goto	u6671
  4258  0978  297A               	goto	u6670
  4259  0979                     u6671:	
  4260  0979  2983               	goto	l8003
  4261  097A                     u6670:	
  4262  097A                     l7997:	
  4263                           
  4264                           ;main.c: 508:                         rtcData[0x05] = bcdMonthIncr(rtcData[0x05]);
  4265  097A  0847               	movf	_rtcData+5,w
  4266  097B  3196  26E5  3188   	fcall	_bcdMonthIncr
  4267  097E  0020               	movlb	0	; select bank0
  4268  097F  00EB               	movwf	??_main
  4269  0980  086B               	movf	??_main,w
  4270  0981  00C7               	movwf	_rtcData+5
  4271  0982  295E               	goto	l7983
  4272  0983                     l8003:	
  4273  0983  3006               	movlw	6
  4274  0984  063F               	xorwf	_mode,w	;volatile
  4275  0985  1D03               	btfss	3,2
  4276  0986  2988               	goto	u6681
  4277  0987  2989               	goto	u6680
  4278  0988                     u6681:	
  4279  0988  2992               	goto	l8011
  4280  0989                     u6680:	
  4281  0989                     l8005:	
  4282                           
  4283                           ;main.c: 512:                         rtcData[0x04] = bcdDateIncr(rtcData[0x04]);
  4284  0989  0846               	movf	_rtcData+4,w
  4285  098A  3187  270D  3188   	fcall	_bcdDateIncr
  4286  098D  0020               	movlb	0	; select bank0
  4287  098E  00EB               	movwf	??_main
  4288  098F  086B               	movf	??_main,w
  4289  0990  00C6               	movwf	_rtcData+4
  4290  0991  295E               	goto	l7983
  4291  0992                     l8011:	
  4292  0992  3007               	movlw	7
  4293  0993  063F               	xorwf	_mode,w	;volatile
  4294  0994  1D03               	btfss	3,2
  4295  0995  2997               	goto	u6691
  4296  0996  2998               	goto	u6690
  4297  0997                     u6691:	
  4298  0997  29A1               	goto	l8019
  4299  0998                     u6690:	
  4300  0998                     l8013:	
  4301                           
  4302                           ;main.c: 516:                         rtcData[0x09] = bcdHourIncr(rtcData[0x09]);
  4303  0998  084B               	movf	_rtcData+9,w
  4304  0999  3187  27C4  3188   	fcall	_bcdHourIncr
  4305  099C  0020               	movlb	0	; select bank0
  4306  099D  00EB               	movwf	??_main
  4307  099E  086B               	movf	??_main,w
  4308  099F  00CB               	movwf	_rtcData+9
  4309  09A0  295E               	goto	l7983
  4310  09A1                     l8019:	
  4311  09A1  3008               	movlw	8
  4312  09A2  063F               	xorwf	_mode,w	;volatile
  4313  09A3  1D03               	btfss	3,2
  4314  09A4  29A6               	goto	u6701
  4315  09A5  29A7               	goto	u6700
  4316  09A6                     u6701:	
  4317  09A6  29B0               	goto	l8027
  4318  09A7                     u6700:	
  4319  09A7                     l8021:	
  4320                           
  4321                           ;main.c: 520:                         rtcData[0x08] = bcdMinuteIncr(rtcData[0x08]);
  4322  09A7  084A               	movf	_rtcData+8,w
  4323  09A8  3184  2459  3188   	fcall	_bcdMinuteIncr
  4324  09AB  0020               	movlb	0	; select bank0
  4325  09AC  00EB               	movwf	??_main
  4326  09AD  086B               	movf	??_main,w
  4327  09AE  00CA               	movwf	_rtcData+8
  4328  09AF  295E               	goto	l7983
  4329  09B0                     l8027:	
  4330  09B0  3009               	movlw	9
  4331  09B1  063F               	xorwf	_mode,w	;volatile
  4332  09B2  1D03               	btfss	3,2
  4333  09B3  29B5               	goto	u6711
  4334  09B4  29B6               	goto	u6710
  4335  09B5                     u6711:	
  4336  09B5  29BF               	goto	l8035
  4337  09B6                     u6710:	
  4338  09B6                     l8029:	
  4339                           
  4340                           ;main.c: 524:                         rtcData[0x0C] = bcdHourIncr(rtcData[0x0C]);
  4341  09B6  084E               	movf	_rtcData+12,w
  4342  09B7  3187  27C4  3188   	fcall	_bcdHourIncr
  4343  09BA  0020               	movlb	0	; select bank0
  4344  09BB  00EB               	movwf	??_main
  4345  09BC  086B               	movf	??_main,w
  4346  09BD  00CE               	movwf	_rtcData+12
  4347  09BE  295E               	goto	l7983
  4348  09BF                     l8035:	
  4349  09BF  300A               	movlw	10
  4350  09C0  063F               	xorwf	_mode,w	;volatile
  4351  09C1  1D03               	btfss	3,2
  4352  09C2  29C4               	goto	u6721
  4353  09C3  29C5               	goto	u6720
  4354  09C4                     u6721:	
  4355  09C4  29CE               	goto	l8043
  4356  09C5                     u6720:	
  4357  09C5                     l8037:	
  4358                           
  4359                           ;main.c: 528:                         rtcData[0x0B] = bcdMinuteIncr(rtcData[0x0B]);
  4360  09C5  084D               	movf	_rtcData+11,w
  4361  09C6  3184  2459  3188   	fcall	_bcdMinuteIncr
  4362  09C9  0020               	movlb	0	; select bank0
  4363  09CA  00EB               	movwf	??_main
  4364  09CB  086B               	movf	??_main,w
  4365  09CC  00CD               	movwf	_rtcData+11
  4366  09CD  295E               	goto	l7983
  4367  09CE                     l8043:	
  4368  09CE  300B               	movlw	11
  4369  09CF  063F               	xorwf	_mode,w	;volatile
  4370  09D0  1D03               	btfss	3,2
  4371  09D1  29D3               	goto	u6731
  4372  09D2  29D4               	goto	u6730
  4373  09D3                     u6731:	
  4374  09D3  29E0               	goto	l1074
  4375  09D4                     u6730:	
  4376  09D4                     l8045:	
  4377                           
  4378                           ;main.c: 532:                         temp_display_mode++;
  4379  09D4  3001               	movlw	1
  4380  09D5  00EB               	movwf	??_main
  4381  09D6  086B               	movf	??_main,w
  4382  09D7  07B9               	addwf	_temp_display_mode,f
  4383                           
  4384                           ;main.c: 534:                         if(temp_display_mode == DISPLAY_MODE_END){
  4385  09D8  3005               	movlw	5
  4386  09D9  0639               	xorwf	_temp_display_mode,w
  4387  09DA  1D03               	btfss	3,2
  4388  09DB  29DD               	goto	u6741
  4389  09DC  29DE               	goto	u6740
  4390  09DD                     u6741:	
  4391  09DD  295E               	goto	l7983
  4392  09DE                     u6740:	
  4393  09DE                     l8047:	
  4394                           
  4395                           ;main.c: 535:                             temp_display_mode = 0;
  4396  09DE  01B9               	clrf	_temp_display_mode
  4397  09DF  295E               	goto	l7983
  4398  09E0                     l1074:	
  4399  09E0                     l8053:	
  4400                           
  4401                           ;main.c: 542:                     mode_flash_count = 0;
  4402  09E0  01BD               	clrf	_mode_flash_count	;volatile
  4403  09E1                     l8055:	
  4404                           
  4405                           ;main.c: 545:                 button_press_count[1] = 0;
  4406  09E1  01A1               	clrf	_button_press_count+1
  4407  09E2                     l8057:	
  4408                           
  4409                           ;main.c: 546:                 flag_button_press_count[1] = 0;
  4410  09E2  01A5               	clrf	_flag_button_press_count+1
  4411  09E3                     l8059:	
  4412                           
  4413                           ;main.c: 549:             if(flag_button_press_count[2] == 1){
  4414  09E3  0326               	decf	_flag_button_press_count+2,w
  4415  09E4  1D03               	btfss	3,2
  4416  09E5  29E7               	goto	u6751
  4417  09E6  29E8               	goto	u6750
  4418  09E7                     u6751:	
  4419  09E7  2A83               	goto	l8145
  4420  09E8                     u6750:	
  4421  09E8                     l8061:	
  4422                           
  4423                           ;main.c: 550:                 if(button_press_count[2] > 5 && button_press_count[2] < 10
      +                          0){
  4424  09E8  3006               	movlw	6
  4425  09E9  0222               	subwf	_button_press_count+2,w
  4426  09EA  1C03               	skipc
  4427  09EB  29ED               	goto	u6761
  4428  09EC  29EE               	goto	u6760
  4429  09ED                     u6761:	
  4430  09ED  2A81               	goto	l8141
  4431  09EE                     u6760:	
  4432  09EE                     l8063:	
  4433  09EE  3064               	movlw	100
  4434  09EF  0222               	subwf	_button_press_count+2,w
  4435  09F0  1803               	skipnc
  4436  09F1  29F3               	goto	u6771
  4437  09F2  29F4               	goto	u6770
  4438  09F3                     u6771:	
  4439  09F3  2A81               	goto	l8141
  4440  09F4                     u6770:	
  4441  09F4                     l8065:	
  4442                           
  4443                           ;main.c: 552:                     if(mode == MODE_SET_HOUR){
  4444  09F4  3003               	movlw	3
  4445  09F5  063F               	xorwf	_mode,w	;volatile
  4446  09F6  1D03               	btfss	3,2
  4447  09F7  29F9               	goto	u6781
  4448  09F8  29FA               	goto	u6780
  4449  09F9                     u6781:	
  4450  09F9  2A09               	goto	l8073
  4451  09FA                     u6780:	
  4452  09FA                     l8067:	
  4453                           
  4454                           ;main.c: 553:                         rtcData[0x02] = bcdHourDecr(rtcData[0x02]);
  4455  09FA  0844               	movf	_rtcData+2,w
  4456  09FB  3188  2026  3188   	fcall	_bcdHourDecr
  4457  09FE  0020               	movlb	0	; select bank0
  4458  09FF  00EB               	movwf	??_main
  4459  0A00  086B               	movf	??_main,w
  4460  0A01  00C4               	movwf	_rtcData+2
  4461  0A02                     l8069:	
  4462                           
  4463                           ;main.c: 554:                         mode_timeout_count = 18;
  4464  0A02  3012               	movlw	18
  4465  0A03  00EB               	movwf	??_main
  4466  0A04  086B               	movf	??_main,w
  4467  0A05  00BE               	movwf	_mode_timeout_count	;volatile
  4468  0A06                     l8071:	
  4469                           
  4470                           ;main.c: 555:                         flag_time_display_update = 1;
  4471  0A06  01C1               	clrf	_flag_time_display_update
  4472  0A07  0AC1               	incf	_flag_time_display_update,f
  4473                           
  4474                           ;main.c: 556:                     } else if(mode == MODE_SET_MINUTE){
  4475  0A08  2A80               	goto	l8139
  4476  0A09                     l8073:	
  4477  0A09  3004               	movlw	4
  4478  0A0A  063F               	xorwf	_mode,w	;volatile
  4479  0A0B  1D03               	btfss	3,2
  4480  0A0C  2A0E               	goto	u6791
  4481  0A0D  2A0F               	goto	u6790
  4482  0A0E                     u6791:	
  4483  0A0E  2A18               	goto	l8081
  4484  0A0F                     u6790:	
  4485  0A0F                     l8075:	
  4486                           
  4487                           ;main.c: 557:                         rtcData[0x01] = bcdMinuteDecr(rtcData[0x01]);
  4488  0A0F  0843               	movf	_rtcData+1,w
  4489  0A10  3184  2492  3188   	fcall	_bcdMinuteDecr
  4490  0A13  0020               	movlb	0	; select bank0
  4491  0A14  00EB               	movwf	??_main
  4492  0A15  086B               	movf	??_main,w
  4493  0A16  00C3               	movwf	_rtcData+1
  4494  0A17  2A02               	goto	l8069
  4495  0A18                     l8081:	
  4496  0A18  3005               	movlw	5
  4497  0A19  063F               	xorwf	_mode,w	;volatile
  4498  0A1A  1D03               	btfss	3,2
  4499  0A1B  2A1D               	goto	u6801
  4500  0A1C  2A1E               	goto	u6800
  4501  0A1D                     u6801:	
  4502  0A1D  2A27               	goto	l8089
  4503  0A1E                     u6800:	
  4504  0A1E                     l8083:	
  4505                           
  4506                           ;main.c: 561:                         rtcData[0x05] = bcdMonthDecr(rtcData[0x05]);
  4507  0A1E  0847               	movf	_rtcData+5,w
  4508  0A1F  3196  26D0  3188   	fcall	_bcdMonthDecr
  4509  0A22  0020               	movlb	0	; select bank0
  4510  0A23  00EB               	movwf	??_main
  4511  0A24  086B               	movf	??_main,w
  4512  0A25  00C7               	movwf	_rtcData+5
  4513  0A26  2A02               	goto	l8069
  4514  0A27                     l8089:	
  4515  0A27  3006               	movlw	6
  4516  0A28  063F               	xorwf	_mode,w	;volatile
  4517  0A29  1D03               	btfss	3,2
  4518  0A2A  2A2C               	goto	u6811
  4519  0A2B  2A2D               	goto	u6810
  4520  0A2C                     u6811:	
  4521  0A2C  2A36               	goto	l8097
  4522  0A2D                     u6810:	
  4523  0A2D                     l8091:	
  4524                           
  4525                           ;main.c: 565:                         rtcData[0x04] = bcdDateDecr(rtcData[0x04]);
  4526  0A2D  0846               	movf	_rtcData+4,w
  4527  0A2E  3187  2732  3188   	fcall	_bcdDateDecr
  4528  0A31  0020               	movlb	0	; select bank0
  4529  0A32  00EB               	movwf	??_main
  4530  0A33  086B               	movf	??_main,w
  4531  0A34  00C6               	movwf	_rtcData+4
  4532  0A35  2A02               	goto	l8069
  4533  0A36                     l8097:	
  4534  0A36  3007               	movlw	7
  4535  0A37  063F               	xorwf	_mode,w	;volatile
  4536  0A38  1D03               	btfss	3,2
  4537  0A39  2A3B               	goto	u6821
  4538  0A3A  2A3C               	goto	u6820
  4539  0A3B                     u6821:	
  4540  0A3B  2A45               	goto	l8105
  4541  0A3C                     u6820:	
  4542  0A3C                     l8099:	
  4543                           
  4544                           ;main.c: 569:                         rtcData[0x09] = bcdHourDecr(rtcData[0x09]);
  4545  0A3C  084B               	movf	_rtcData+9,w
  4546  0A3D  3188  2026  3188   	fcall	_bcdHourDecr
  4547  0A40  0020               	movlb	0	; select bank0
  4548  0A41  00EB               	movwf	??_main
  4549  0A42  086B               	movf	??_main,w
  4550  0A43  00CB               	movwf	_rtcData+9
  4551  0A44  2A02               	goto	l8069
  4552  0A45                     l8105:	
  4553  0A45  3008               	movlw	8
  4554  0A46  063F               	xorwf	_mode,w	;volatile
  4555  0A47  1D03               	btfss	3,2
  4556  0A48  2A4A               	goto	u6831
  4557  0A49  2A4B               	goto	u6830
  4558  0A4A                     u6831:	
  4559  0A4A  2A54               	goto	l8113
  4560  0A4B                     u6830:	
  4561  0A4B                     l8107:	
  4562                           
  4563                           ;main.c: 573:                         rtcData[0x08] = bcdMinuteDecr(rtcData[0x08]);
  4564  0A4B  084A               	movf	_rtcData+8,w
  4565  0A4C  3184  2492  3188   	fcall	_bcdMinuteDecr
  4566  0A4F  0020               	movlb	0	; select bank0
  4567  0A50  00EB               	movwf	??_main
  4568  0A51  086B               	movf	??_main,w
  4569  0A52  00CA               	movwf	_rtcData+8
  4570  0A53  2A02               	goto	l8069
  4571  0A54                     l8113:	
  4572  0A54  3009               	movlw	9
  4573  0A55  063F               	xorwf	_mode,w	;volatile
  4574  0A56  1D03               	btfss	3,2
  4575  0A57  2A59               	goto	u6841
  4576  0A58  2A5A               	goto	u6840
  4577  0A59                     u6841:	
  4578  0A59  2A63               	goto	l8121
  4579  0A5A                     u6840:	
  4580  0A5A                     l8115:	
  4581                           
  4582                           ;main.c: 577:                         rtcData[0x0C] = bcdHourDecr(rtcData[0x0C]);
  4583  0A5A  084E               	movf	_rtcData+12,w
  4584  0A5B  3188  2026  3188   	fcall	_bcdHourDecr
  4585  0A5E  0020               	movlb	0	; select bank0
  4586  0A5F  00EB               	movwf	??_main
  4587  0A60  086B               	movf	??_main,w
  4588  0A61  00CE               	movwf	_rtcData+12
  4589  0A62  2A02               	goto	l8069
  4590  0A63                     l8121:	
  4591  0A63  300A               	movlw	10
  4592  0A64  063F               	xorwf	_mode,w	;volatile
  4593  0A65  1D03               	btfss	3,2
  4594  0A66  2A68               	goto	u6851
  4595  0A67  2A69               	goto	u6850
  4596  0A68                     u6851:	
  4597  0A68  2A72               	goto	l8129
  4598  0A69                     u6850:	
  4599  0A69                     l8123:	
  4600                           
  4601                           ;main.c: 581:                         rtcData[0x0B] = bcdMinuteDecr(rtcData[0x0B]);
  4602  0A69  084D               	movf	_rtcData+11,w
  4603  0A6A  3184  2492  3188   	fcall	_bcdMinuteDecr
  4604  0A6D  0020               	movlb	0	; select bank0
  4605  0A6E  00EB               	movwf	??_main
  4606  0A6F  086B               	movf	??_main,w
  4607  0A70  00CD               	movwf	_rtcData+11
  4608  0A71  2A02               	goto	l8069
  4609  0A72                     l8129:	
  4610  0A72  300B               	movlw	11
  4611  0A73  063F               	xorwf	_mode,w	;volatile
  4612  0A74  1D03               	btfss	3,2
  4613  0A75  2A77               	goto	u6861
  4614  0A76  2A78               	goto	u6860
  4615  0A77                     u6861:	
  4616  0A77  2A80               	goto	l1094
  4617  0A78                     u6860:	
  4618  0A78                     l8131:	
  4619                           
  4620                           ;main.c: 585:                         if(temp_display_mode) temp_display_mode--;
  4621  0A78  0839               	movf	_temp_display_mode,w
  4622  0A79  1903               	btfsc	3,2
  4623  0A7A  2A7C               	goto	u6871
  4624  0A7B  2A7D               	goto	u6870
  4625  0A7C                     u6871:	
  4626  0A7C  2A02               	goto	l8069
  4627  0A7D                     u6870:	
  4628  0A7D                     l8133:	
  4629  0A7D  3001               	movlw	1
  4630  0A7E  02B9               	subwf	_temp_display_mode,f
  4631  0A7F  2A02               	goto	l8069
  4632  0A80                     l1094:	
  4633  0A80                     l8139:	
  4634                           
  4635                           ;main.c: 590:                     mode_flash_count = 0;
  4636  0A80  01BD               	clrf	_mode_flash_count	;volatile
  4637  0A81                     l8141:	
  4638                           
  4639                           ;main.c: 592:                 button_press_count[2] = 0;
  4640  0A81  01A2               	clrf	_button_press_count+2
  4641  0A82                     l8143:	
  4642                           
  4643                           ;main.c: 593:                 flag_button_press_count[2] = 0;
  4644  0A82  01A6               	clrf	_flag_button_press_count+2
  4645  0A83                     l8145:	
  4646                           
  4647                           ;main.c: 596:             if(flag_button_press_count[3] == 1){
  4648  0A83  0327               	decf	_flag_button_press_count+3,w
  4649  0A84  1D03               	btfss	3,2
  4650  0A85  2A87               	goto	u6881
  4651  0A86  2A88               	goto	u6880
  4652  0A87                     u6881:	
  4653  0A87  2B03               	goto	l1036
  4654  0A88                     u6880:	
  4655  0A88                     l8147:	
  4656                           
  4657                           ;main.c: 597:                 if(button_press_count[3] > 5 && button_press_count[3] < 10
      +                          0){
  4658  0A88  3006               	movlw	6
  4659  0A89  0223               	subwf	_button_press_count+3,w
  4660  0A8A  1C03               	skipc
  4661  0A8B  2A8D               	goto	u6891
  4662  0A8C  2A8E               	goto	u6890
  4663  0A8D                     u6891:	
  4664  0A8D  2B00               	goto	l8187
  4665  0A8E                     u6890:	
  4666  0A8E                     l8149:	
  4667  0A8E  3064               	movlw	100
  4668  0A8F  0223               	subwf	_button_press_count+3,w
  4669  0A90  1803               	skipnc
  4670  0A91  2A93               	goto	u6901
  4671  0A92  2A94               	goto	u6900
  4672  0A93                     u6901:	
  4673  0A93  2B00               	goto	l8187
  4674  0A94                     u6900:	
  4675  0A94                     l8151:	
  4676                           
  4677                           ;main.c: 599:                     if((mode == MODE_SET_HOUR) || (mode == MODE_SET_MINUTE
      +                          )){
  4678  0A94  3003               	movlw	3
  4679  0A95  063F               	xorwf	_mode,w	;volatile
  4680  0A96  1903               	btfsc	3,2
  4681  0A97  2A99               	goto	u6911
  4682  0A98  2A9A               	goto	u6910
  4683  0A99                     u6911:	
  4684  0A99  2AA0               	goto	l8155
  4685  0A9A                     u6910:	
  4686  0A9A                     l8153:	
  4687  0A9A  3004               	movlw	4
  4688  0A9B  063F               	xorwf	_mode,w	;volatile
  4689  0A9C  1D03               	btfss	3,2
  4690  0A9D  2A9F               	goto	u6921
  4691  0A9E  2AA0               	goto	u6920
  4692  0A9F                     u6921:	
  4693  0A9F  2AA9               	goto	l8157
  4694  0AA0                     u6920:	
  4695  0AA0                     l8155:	
  4696                           
  4697                           ;main.c: 600:                         updateRTC(rtcData[0x02],rtcData[0x01]);
  4698  0AA0  0843               	movf	_rtcData+1,w
  4699  0AA1  00EB               	movwf	??_main
  4700  0AA2  086B               	movf	??_main,w
  4701  0AA3  00E4               	movwf	updateRTC@bcdMinute
  4702  0AA4  0844               	movf	_rtcData+2,w
  4703  0AA5  3187  27E5  3188   	fcall	_updateRTC
  4704                           
  4705                           ;main.c: 601:                     } else if(mode == MODE_SET_MONTH){
  4706  0AA8  2AFC               	goto	l8183
  4707  0AA9                     l8157:	
  4708  0AA9  3005               	movlw	5
  4709  0AAA  063F               	xorwf	_mode,w	;volatile
  4710  0AAB  1D03               	btfss	3,2
  4711  0AAC  2AAE               	goto	u6931
  4712  0AAD  2AAF               	goto	u6930
  4713  0AAE                     u6931:	
  4714  0AAE  2AB4               	goto	l8161
  4715  0AAF                     u6930:	
  4716  0AAF                     l8159:	
  4717                           
  4718                           ;main.c: 602:                         updateMonth(rtcData[0x05]);
  4719  0AAF  0847               	movf	_rtcData+5,w
  4720  0AB0  3197  27B1  3188   	fcall	_updateMonth
  4721                           
  4722                           ;main.c: 603:                     } else if (mode == MODE_SET_DATE){
  4723  0AB3  2AFC               	goto	l8183
  4724  0AB4                     l8161:	
  4725  0AB4  3006               	movlw	6
  4726  0AB5  063F               	xorwf	_mode,w	;volatile
  4727  0AB6  1D03               	btfss	3,2
  4728  0AB7  2AB9               	goto	u6941
  4729  0AB8  2ABA               	goto	u6940
  4730  0AB9                     u6941:	
  4731  0AB9  2ABF               	goto	l8165
  4732  0ABA                     u6940:	
  4733  0ABA                     l8163:	
  4734                           
  4735                           ;main.c: 604:                         updateDate(rtcData[0x04]);
  4736  0ABA  0846               	movf	_rtcData+4,w
  4737  0ABB  3197  2799  3188   	fcall	_updateDate
  4738                           
  4739                           ;main.c: 605:                     } else if ((mode == MODE_SET_AL1_H) || (mode == MODE_S
      +                          ET_AL1_M)){
  4740  0ABE  2AFC               	goto	l8183
  4741  0ABF                     l8165:	
  4742  0ABF  3007               	movlw	7
  4743  0AC0  063F               	xorwf	_mode,w	;volatile
  4744  0AC1  1903               	btfsc	3,2
  4745  0AC2  2AC4               	goto	u6951
  4746  0AC3  2AC5               	goto	u6950
  4747  0AC4                     u6951:	
  4748  0AC4  2ACB               	goto	l8169
  4749  0AC5                     u6950:	
  4750  0AC5                     l8167:	
  4751  0AC5  3008               	movlw	8
  4752  0AC6  063F               	xorwf	_mode,w	;volatile
  4753  0AC7  1D03               	btfss	3,2
  4754  0AC8  2ACA               	goto	u6961
  4755  0AC9  2ACB               	goto	u6960
  4756  0ACA                     u6961:	
  4757  0ACA  2AD4               	goto	l8171
  4758  0ACB                     u6960:	
  4759  0ACB                     l8169:	
  4760                           
  4761                           ;main.c: 606:                         updateAlarm1(rtcData[0x09], rtcData[0x08]);
  4762  0ACB  084A               	movf	_rtcData+8,w
  4763  0ACC  00EB               	movwf	??_main
  4764  0ACD  086B               	movf	??_main,w
  4765  0ACE  00E4               	movwf	updateAlarm1@bcdMinute
  4766  0ACF  084B               	movf	_rtcData+9,w
  4767  0AD0  3186  2698  3188   	fcall	_updateAlarm1
  4768                           
  4769                           ;main.c: 607:                     } else if ((mode == MODE_SET_AL2_H) || (mode == MODE_S
      +                          ET_AL2_M)){
  4770  0AD3  2AFC               	goto	l8183
  4771  0AD4                     l8171:	
  4772  0AD4  3009               	movlw	9
  4773  0AD5  063F               	xorwf	_mode,w	;volatile
  4774  0AD6  1903               	btfsc	3,2
  4775  0AD7  2AD9               	goto	u6971
  4776  0AD8  2ADA               	goto	u6970
  4777  0AD9                     u6971:	
  4778  0AD9  2AE0               	goto	l8175
  4779  0ADA                     u6970:	
  4780  0ADA                     l8173:	
  4781  0ADA  300A               	movlw	10
  4782  0ADB  063F               	xorwf	_mode,w	;volatile
  4783  0ADC  1D03               	btfss	3,2
  4784  0ADD  2ADF               	goto	u6981
  4785  0ADE  2AE0               	goto	u6980
  4786  0ADF                     u6981:	
  4787  0ADF  2AE9               	goto	l8177
  4788  0AE0                     u6980:	
  4789  0AE0                     l8175:	
  4790                           
  4791                           ;main.c: 608:                         updateAlarm2(rtcData[0x0C], rtcData[0x0B]);
  4792  0AE0  084D               	movf	_rtcData+11,w
  4793  0AE1  00EB               	movwf	??_main
  4794  0AE2  086B               	movf	??_main,w
  4795  0AE3  00E4               	movwf	updateAlarm2@bcdMinute
  4796  0AE4  084E               	movf	_rtcData+12,w
  4797  0AE5  3186  2670  3188   	fcall	_updateAlarm2
  4798                           
  4799                           ;main.c: 609:                     } else if(mode == MODE_SET_DISPLAY_MODE){
  4800  0AE8  2AFC               	goto	l8183
  4801  0AE9                     l8177:	
  4802  0AE9  300B               	movlw	11
  4803  0AEA  063F               	xorwf	_mode,w	;volatile
  4804  0AEB  1D03               	btfss	3,2
  4805  0AEC  2AEE               	goto	u6991
  4806  0AED  2AEF               	goto	u6990
  4807  0AEE                     u6991:	
  4808  0AEE  2AFC               	goto	l1110
  4809  0AEF                     u6990:	
  4810  0AEF                     l8179:	
  4811                           
  4812                           ;main.c: 611:                         display_mode = temp_display_mode;
  4813  0AEF  0839               	movf	_temp_display_mode,w
  4814  0AF0  00EB               	movwf	??_main
  4815  0AF1  086B               	movf	??_main,w
  4816  0AF2  00BA               	movwf	_display_mode
  4817  0AF3                     l8181:	
  4818                           
  4819                           ;main.c: 612:                         DATAEE_WriteByte(0x01, temp_display_mode);
  4820  0AF3  0839               	movf	_temp_display_mode,w
  4821  0AF4  00EB               	movwf	??_main
  4822  0AF5  086B               	movf	??_main,w
  4823  0AF6  00D6               	movwf	DATAEE_WriteByte@bData
  4824  0AF7  3001               	movlw	1
  4825  0AF8  3187  277C  3188   	fcall	_DATAEE_WriteByte
  4826  0AFB  2AFC               	goto	l8183
  4827  0AFC                     l1110:	
  4828  0AFC                     l8183:	
  4829                           
  4830                           ;main.c: 615:                     mode = MODE_NORMAL;
  4831  0AFC  0020               	movlb	0	; select bank0
  4832  0AFD  01BF               	clrf	_mode	;volatile
  4833  0AFE                     l8185:	
  4834                           
  4835                           ;main.c: 616:                     flag_time_display_update = 1;
  4836  0AFE  01C1               	clrf	_flag_time_display_update
  4837  0AFF  0AC1               	incf	_flag_time_display_update,f
  4838  0B00                     l8187:	
  4839                           
  4840                           ;main.c: 618:                 button_press_count[3] = 0;
  4841  0B00  01A3               	clrf	_button_press_count+3
  4842  0B01                     l8189:	
  4843                           
  4844                           ;main.c: 619:                 flag_button_press_count[3] = 0;
  4845  0B01  01A7               	clrf	_flag_button_press_count+3
  4846  0B02  2B03               	goto	l8191
  4847  0B03                     l1036:	
  4848  0B03                     l8191:	
  4849                           
  4850                           ;main.c: 623:         if(mode == MODE_NORMAL){
  4851  0B03  083F               	movf	_mode,w	;volatile
  4852  0B04  1D03               	btfss	3,2
  4853  0B05  2B07               	goto	u7001
  4854  0B06  2B08               	goto	u7000
  4855  0B07                     u7001:	
  4856  0B07  2BEC               	goto	l8257
  4857  0B08                     u7000:	
  4858  0B08                     l8193:	
  4859                           
  4860                           ;main.c: 624:             if(flag_time_display_update == 1){
  4861  0B08  0341               	decf	_flag_time_display_update,w
  4862  0B09  1D03               	btfss	3,2
  4863  0B0A  2B0C               	goto	u7011
  4864  0B0B  2B0D               	goto	u7010
  4865  0B0C                     u7011:	
  4866  0B0C  2FB8               	goto	l8457
  4867  0B0D                     u7010:	
  4868  0B0D                     l8195:	
  4869                           
  4870                           ;main.c: 625:                 if(PORTBbits.RB4) {
  4871  0B0D  1E0D               	btfss	13,4	;volatile
  4872  0B0E  2B10               	goto	u7021
  4873  0B0F  2B11               	goto	u7020
  4874  0B10                     u7021:	
  4875  0B10  2B38               	goto	l8211
  4876  0B11                     u7020:	
  4877  0B11                     l8197:	
  4878                           
  4879                           ;main.c: 627:                     i2c_readDataBlock(0x68,0x00,rtcData,0x10);
  4880  0B11  01E0               	clrf	i2c_readDataBlock@reg
  4881  0B12  3042               	movlw	(low (_rtcData| 0))& (0+255)
  4882  0B13  00EB               	movwf	??_main
  4883  0B14  086B               	movf	??_main,w
  4884  0B15  00E1               	movwf	i2c_readDataBlock@data
  4885  0B16  3010               	movlw	16
  4886  0B17  00E2               	movwf	i2c_readDataBlock@len
  4887  0B18  3000               	movlw	0
  4888  0B19  00E3               	movwf	i2c_readDataBlock@len+1
  4889  0B1A  3068               	movlw	104
  4890  0B1B  3183  236A  3188   	fcall	_i2c_readDataBlock
  4891  0B1E                     l8199:	
  4892                           
  4893                           ;main.c: 629:                     if((rtcData[0x0F] & 0x01) != 0) {
  4894  0B1E  0020               	movlb	0	; select bank0
  4895  0B1F  1C51               	btfss	_rtcData+15,0
  4896  0B20  2B22               	goto	u7031
  4897  0B21  2B23               	goto	u7030
  4898  0B22                     u7031:	
  4899  0B22  2B25               	goto	l1123
  4900  0B23                     u7030:	
  4901  0B23                     l8201:	
  4902                           
  4903                           ;main.c: 630:                         flag_alarm1 = 1;
  4904  0B23  01BC               	clrf	_flag_alarm1
  4905  0B24  0ABC               	incf	_flag_alarm1,f
  4906  0B25                     l1123:	
  4907                           ;main.c: 631:                     }
  4908                           
  4909                           
  4910                           ;main.c: 632:                     if((rtcData[0x0F] & 0x02) != 0) {
  4911  0B25  1CD1               	btfss	_rtcData+15,1
  4912  0B26  2B28               	goto	u7041
  4913  0B27  2B29               	goto	u7040
  4914  0B28                     u7041:	
  4915  0B28  2B2B               	goto	l8205
  4916  0B29                     u7040:	
  4917  0B29                     l8203:	
  4918                           
  4919                           ;main.c: 633:                         flag_alarm2 = 1;
  4920  0B29  01BB               	clrf	_flag_alarm2
  4921  0B2A  0ABB               	incf	_flag_alarm2,f
  4922  0B2B                     l8205:	
  4923                           
  4924                           ;main.c: 636:                     if((flag_alarm1 == 1) || (flag_alarm1 == 1)){
  4925  0B2B  033C               	decf	_flag_alarm1,w
  4926  0B2C  1903               	btfsc	3,2
  4927  0B2D  2B2F               	goto	u7051
  4928  0B2E  2B30               	goto	u7050
  4929  0B2F                     u7051:	
  4930  0B2F  2B35               	goto	l8209
  4931  0B30                     u7050:	
  4932  0B30                     l8207:	
  4933  0B30  033C               	decf	_flag_alarm1,w
  4934  0B31  1D03               	btfss	3,2
  4935  0B32  2B34               	goto	u7061
  4936  0B33  2B35               	goto	u7060
  4937  0B34                     u7061:	
  4938  0B34  2B38               	goto	l8211
  4939  0B35                     u7060:	
  4940  0B35                     l8209:	
  4941                           
  4942                           ;main.c: 637:                         clearAlarmFlag();
  4943  0B35  3196  26BD  3188   	fcall	_clearAlarmFlag
  4944  0B38                     l8211:	
  4945                           
  4946                           ;main.c: 644:                 if((display_mode == DISPLAY_MODE_TIME_DATE_30S_3S)
  4947  0B38  0020               	movlb	0	; select bank0
  4948  0B39  033A               	decf	_display_mode,w
  4949  0B3A  1D03               	btfss	3,2
  4950  0B3B  2B3D               	goto	u7071
  4951  0B3C  2B3E               	goto	u7070
  4952  0B3D                     u7071:	
  4953  0B3D  2B53               	goto	l8219
  4954  0B3E                     u7070:	
  4955  0B3E                     l8213:	
  4956  0B3E  3027               	movlw	39
  4957  0B3F  0642               	xorwf	_rtcData,w
  4958  0B40  1903               	btfsc	3,2
  4959  0B41  2B43               	goto	u7081
  4960  0B42  2B44               	goto	u7080
  4961  0B43                     u7081:	
  4962  0B43  2B4A               	goto	l8217
  4963  0B44                     u7080:	
  4964  0B44                     l8215:	
  4965  0B44  3057               	movlw	87
  4966  0B45  0642               	xorwf	_rtcData,w
  4967  0B46  1D03               	btfss	3,2
  4968  0B47  2B49               	goto	u7091
  4969  0B48  2B4A               	goto	u7090
  4970  0B49                     u7091:	
  4971  0B49  2B53               	goto	l8219
  4972  0B4A                     u7090:	
  4973  0B4A                     l8217:	
  4974                           
  4975                           ;main.c: 645:                         && ((rtcData[0x00] == 0x27) || (rtcData[0x00] == 0
      +                          x57))){;main.c: 647:                     mode_flash_count = 6;
  4976  0B4A  3006               	movlw	6
  4977  0B4B  00EB               	movwf	??_main
  4978  0B4C  086B               	movf	??_main,w
  4979  0B4D  00BD               	movwf	_mode_flash_count	;volatile
  4980                           
  4981                           ;main.c: 648:                     mode = MODE_DATE;
  4982  0B4E  3002               	movlw	2
  4983  0B4F  00EB               	movwf	??_main
  4984  0B50  086B               	movf	??_main,w
  4985  0B51  00BF               	movwf	_mode	;volatile
  4986                           
  4987                           ;main.c: 649:                 } else if((display_mode == DISPLAY_MODE_TIME_TEMP_10S_3S)
  4988  0B52  2FB8               	goto	l8457
  4989  0B53                     l8219:	
  4990  0B53  3002               	movlw	2
  4991  0B54  063A               	xorwf	_display_mode,w
  4992  0B55  1D03               	btfss	3,2
  4993  0B56  2B58               	goto	u7101
  4994  0B57  2B59               	goto	u7100
  4995  0B58                     u7101:	
  4996  0B58  2B86               	goto	l8235
  4997  0B59                     u7100:	
  4998  0B59                     l8221:	
  4999  0B59  3007               	movlw	7
  5000  0B5A  0642               	xorwf	_rtcData,w
  5001  0B5B  1903               	btfsc	3,2
  5002  0B5C  2B5E               	goto	u7111
  5003  0B5D  2B5F               	goto	u7110
  5004  0B5E                     u7111:	
  5005  0B5E  2B7D               	goto	l8233
  5006  0B5F                     u7110:	
  5007  0B5F                     l8223:	
  5008  0B5F  3017               	movlw	23
  5009  0B60  0642               	xorwf	_rtcData,w
  5010  0B61  1903               	btfsc	3,2
  5011  0B62  2B64               	goto	u7121
  5012  0B63  2B65               	goto	u7120
  5013  0B64                     u7121:	
  5014  0B64  2B7D               	goto	l8233
  5015  0B65                     u7120:	
  5016  0B65                     l8225:	
  5017  0B65  3027               	movlw	39
  5018  0B66  0642               	xorwf	_rtcData,w
  5019  0B67  1903               	btfsc	3,2
  5020  0B68  2B6A               	goto	u7131
  5021  0B69  2B6B               	goto	u7130
  5022  0B6A                     u7131:	
  5023  0B6A  2B7D               	goto	l8233
  5024  0B6B                     u7130:	
  5025  0B6B                     l8227:	
  5026  0B6B  3037               	movlw	55
  5027  0B6C  0642               	xorwf	_rtcData,w
  5028  0B6D  1903               	btfsc	3,2
  5029  0B6E  2B70               	goto	u7141
  5030  0B6F  2B71               	goto	u7140
  5031  0B70                     u7141:	
  5032  0B70  2B7D               	goto	l8233
  5033  0B71                     u7140:	
  5034  0B71                     l8229:	
  5035  0B71  3047               	movlw	71
  5036  0B72  0642               	xorwf	_rtcData,w
  5037  0B73  1903               	btfsc	3,2
  5038  0B74  2B76               	goto	u7151
  5039  0B75  2B77               	goto	u7150
  5040  0B76                     u7151:	
  5041  0B76  2B7D               	goto	l8233
  5042  0B77                     u7150:	
  5043  0B77                     l8231:	
  5044  0B77  3057               	movlw	87
  5045  0B78  0642               	xorwf	_rtcData,w
  5046  0B79  1D03               	btfss	3,2
  5047  0B7A  2B7C               	goto	u7161
  5048  0B7B  2B7D               	goto	u7160
  5049  0B7C                     u7161:	
  5050  0B7C  2B86               	goto	l8235
  5051  0B7D                     u7160:	
  5052  0B7D                     l8233:	
  5053                           
  5054                           ;main.c: 652:                         || (rtcData[0x00] == 0x47) || (rtcData[0x00] == 0x
      +                          57))){;main.c: 654:                     mode_flash_count = 6;
  5055  0B7D  3006               	movlw	6
  5056  0B7E  00EB               	movwf	??_main
  5057  0B7F  086B               	movf	??_main,w
  5058  0B80  00BD               	movwf	_mode_flash_count	;volatile
  5059                           
  5060                           ;main.c: 655:                     mode = MODE_TEMPERATURE;
  5061  0B81  3001               	movlw	1
  5062  0B82  00EB               	movwf	??_main
  5063  0B83  086B               	movf	??_main,w
  5064  0B84  00BF               	movwf	_mode	;volatile
  5065                           
  5066                           ;main.c: 656:                 } else if((display_mode == DISPLAY_MODE_TIME_TEMP_30S_3S)
  5067  0B85  2FB8               	goto	l8457
  5068  0B86                     l8235:	
  5069  0B86  3003               	movlw	3
  5070  0B87  063A               	xorwf	_display_mode,w
  5071  0B88  1D03               	btfss	3,2
  5072  0B89  2B8B               	goto	u7171
  5073  0B8A  2B8C               	goto	u7170
  5074  0B8B                     u7171:	
  5075  0B8B  2B99               	goto	l8243
  5076  0B8C                     u7170:	
  5077  0B8C                     l8237:	
  5078  0B8C  3027               	movlw	39
  5079  0B8D  0642               	xorwf	_rtcData,w
  5080  0B8E  1903               	btfsc	3,2
  5081  0B8F  2B91               	goto	u7181
  5082  0B90  2B92               	goto	u7180
  5083  0B91                     u7181:	
  5084  0B91  2B7D               	goto	l8233
  5085  0B92                     u7180:	
  5086  0B92                     l8239:	
  5087  0B92  3057               	movlw	87
  5088  0B93  0642               	xorwf	_rtcData,w
  5089  0B94  1D03               	btfss	3,2
  5090  0B95  2B97               	goto	u7191
  5091  0B96  2B98               	goto	u7190
  5092  0B97                     u7191:	
  5093  0B97  2B99               	goto	l8243
  5094  0B98                     u7190:	
  5095  0B98  2B7D               	goto	l8233
  5096  0B99                     l8243:	
  5097  0B99  3004               	movlw	4
  5098  0B9A  063A               	xorwf	_display_mode,w
  5099  0B9B  1D03               	btfss	3,2
  5100  0B9C  2B9E               	goto	u7201
  5101  0B9D  2B9F               	goto	u7200
  5102  0B9E                     u7201:	
  5103  0B9E  2BAE               	goto	l8249
  5104  0B9F                     u7200:	
  5105  0B9F                     l8245:	
  5106  0B9F  3055               	movlw	85
  5107  0BA0  0642               	xorwf	_rtcData,w
  5108  0BA1  1D03               	btfss	3,2
  5109  0BA2  2BA4               	goto	u7211
  5110  0BA3  2BA5               	goto	u7210
  5111  0BA4                     u7211:	
  5112  0BA4  2BAE               	goto	l8249
  5113  0BA5                     u7210:	
  5114  0BA5                     l8247:	
  5115                           
  5116                           ;main.c: 663:                     mode_flash_count = 10;
  5117  0BA5  300A               	movlw	10
  5118  0BA6  00EB               	movwf	??_main
  5119  0BA7  086B               	movf	??_main,w
  5120  0BA8  00BD               	movwf	_mode_flash_count	;volatile
  5121                           
  5122                           ;main.c: 664:                     mode = MODE_TEMPERATURE;
  5123  0BA9  3001               	movlw	1
  5124  0BAA  00EB               	movwf	??_main
  5125  0BAB  086B               	movf	??_main,w
  5126  0BAC  00BF               	movwf	_mode	;volatile
  5127                           
  5128                           ;main.c: 665:                 } else {
  5129  0BAD  2FB8               	goto	l8457
  5130  0BAE                     l8249:	
  5131                           
  5132                           ;main.c: 667:                     displayBuff[0] = displayNum[((rtcData[0x02] >> 4) & 0x
      +                          03)];
  5133  0BAE  0844               	movf	_rtcData+2,w
  5134  0BAF  00EB               	movwf	??_main
  5135  0BB0  3004               	movlw	4
  5136  0BB1                     u7225:	
  5137  0BB1  36EB               	lsrf	??_main,f
  5138  0BB2  0B89               	decfsz	9,f
  5139  0BB3  2BB1               	goto	u7225
  5140  0BB4  086B               	movf	??_main,w
  5141  0BB5  3903               	andlw	3
  5142  0BB6  3E00               	addlw	low (_displayNum| (0+32768))
  5143  0BB7  0084               	movwf	4
  5144  0BB8  3098               	movlw	high (_displayNum| (0+32768))
  5145  0BB9  1803               	skipnc
  5146  0BBA  3E01               	addlw	1
  5147  0BBB  0085               	movwf	5
  5148  0BBC  0800               	movf	0,w	;code access
  5149  0BBD  00EC               	movwf	??_main+1
  5150  0BBE  086C               	movf	??_main+1,w
  5151  0BBF  00A8               	movwf	_displayBuff
  5152  0BC0                     l8251:	
  5153                           
  5154                           ;main.c: 668:                     displayBuff[1] = displayNum[(rtcData[0x02]& 0x0F)];
  5155  0BC0  0844               	movf	_rtcData+2,w
  5156  0BC1  390F               	andlw	15
  5157  0BC2  3E00               	addlw	low (_displayNum| (0+32768))
  5158  0BC3  0084               	movwf	4
  5159  0BC4  3098               	movlw	high (_displayNum| (0+32768))
  5160  0BC5  1803               	skipnc
  5161  0BC6  3E01               	addlw	1
  5162  0BC7  0085               	movwf	5
  5163  0BC8  0800               	movf	0,w	;code access
  5164  0BC9  00EB               	movwf	??_main
  5165  0BCA  086B               	movf	??_main,w
  5166  0BCB  00A9               	movwf	_displayBuff+1
  5167  0BCC                     l8253:	
  5168                           
  5169                           ;main.c: 669:                     displayBuff[2] = displayNum[((rtcData[0x01] >> 4) & 0x
      +                          07)];
  5170  0BCC  0843               	movf	_rtcData+1,w
  5171  0BCD  00EB               	movwf	??_main
  5172  0BCE  3004               	movlw	4
  5173  0BCF                     u7235:	
  5174  0BCF  36EB               	lsrf	??_main,f
  5175  0BD0  0B89               	decfsz	9,f
  5176  0BD1  2BCF               	goto	u7235
  5177  0BD2  086B               	movf	??_main,w
  5178  0BD3  3907               	andlw	7
  5179  0BD4  3E00               	addlw	low (_displayNum| (0+32768))
  5180  0BD5  0084               	movwf	4
  5181  0BD6  3098               	movlw	high (_displayNum| (0+32768))
  5182  0BD7  1803               	skipnc
  5183  0BD8  3E01               	addlw	1
  5184  0BD9  0085               	movwf	5
  5185  0BDA  0800               	movf	0,w	;code access
  5186  0BDB  00EC               	movwf	??_main+1
  5187  0BDC  086C               	movf	??_main+1,w
  5188  0BDD  00AA               	movwf	_displayBuff+2
  5189                           
  5190                           ;main.c: 670:                     displayBuff[3] = displayNum[(rtcData[0x01]& 0x0F)];
  5191  0BDE  0843               	movf	_rtcData+1,w
  5192  0BDF  390F               	andlw	15
  5193  0BE0  3E00               	addlw	low (_displayNum| (0+32768))
  5194  0BE1  0084               	movwf	4
  5195  0BE2  3098               	movlw	high (_displayNum| (0+32768))
  5196  0BE3  1803               	skipnc
  5197  0BE4  3E01               	addlw	1
  5198  0BE5  0085               	movwf	5
  5199  0BE6  0800               	movf	0,w	;code access
  5200  0BE7  00EB               	movwf	??_main
  5201  0BE8  086B               	movf	??_main,w
  5202  0BE9  00AB               	movwf	_displayBuff+3
  5203  0BEA                     l8255:	
  5204                           
  5205                           ;main.c: 672:                     flag_time_display_update = 0;
  5206  0BEA  01C1               	clrf	_flag_time_display_update
  5207  0BEB  2FB8               	goto	l8457
  5208  0BEC                     l8257:	
  5209  0BEC  033F               	decf	_mode,w	;volatile
  5210  0BED  1D03               	btfss	3,2
  5211  0BEE  2BF0               	goto	u7241
  5212  0BEF  2BF1               	goto	u7240
  5213  0BF0                     u7241:	
  5214  0BF0  2C52               	goto	l8277
  5215  0BF1                     u7240:	
  5216  0BF1                     l8259:	
  5217                           
  5218                           ;main.c: 676:             if(flag_time_display_update == 1){
  5219  0BF1  0341               	decf	_flag_time_display_update,w
  5220  0BF2  1D03               	btfss	3,2
  5221  0BF3  2BF5               	goto	u7251
  5222  0BF4  2BF6               	goto	u7250
  5223  0BF5                     u7251:	
  5224  0BF5  2FB8               	goto	l8457
  5225  0BF6                     u7250:	
  5226  0BF6                     l8261:	
  5227                           
  5228                           ;main.c: 677:                 if(mode_flash_count){
  5229  0BF6  083D               	movf	_mode_flash_count,w	;volatile
  5230  0BF7  1903               	btfsc	3,2
  5231  0BF8  2BFA               	goto	u7261
  5232  0BF9  2BFB               	goto	u7260
  5233  0BFA                     u7261:	
  5234  0BFA  2C50               	goto	l8275
  5235  0BFB                     u7260:	
  5236  0BFB                     l1146:	
  5237                           ;main.c: 678:                     do { LATAbits.LATA7 = 0; } while(0);
  5238                           
  5239  0BFB  0022               	movlb	2	; select bank2
  5240  0BFC  138C               	bcf	12,7	;volatile
  5241  0BFD                     l8263:	
  5242                           
  5243                           ;main.c: 680:                     bcd_temp = intToBCD(filter_temp);
  5244  0BFD  0020               	movlb	0	; select bank0
  5245  0BFE  082F               	movf	_filter_temp+1,w
  5246  0BFF  00DF               	movwf	intToBCD@binaryInput+1
  5247  0C00  082E               	movf	_filter_temp,w
  5248  0C01  00DE               	movwf	intToBCD@binaryInput
  5249  0C02  3183  2323  3188   	fcall	_intToBCD
  5250  0C05  0020               	movlb	0	; select bank0
  5251  0C06  085F               	movf	?_intToBCD+1,w
  5252  0C07  00B1               	movwf	_bcd_temp+1
  5253  0C08  085E               	movf	?_intToBCD,w
  5254  0C09  00B0               	movwf	_bcd_temp
  5255  0C0A                     l8265:	
  5256                           
  5257                           ;main.c: 682:                     displayBuff[0] = displayNum[((bcd_temp >> 8) & 0x0F)];
  5258  0C0A  0831               	movf	_bcd_temp+1,w
  5259  0C0B  00EC               	movwf	??_main+1
  5260  0C0C  0830               	movf	_bcd_temp,w
  5261  0C0D  00EB               	movwf	??_main
  5262  0C0E  086C               	movf	??_main+1,w
  5263  0C0F  00EB               	movwf	??_main
  5264  0C10  01EC               	clrf	??_main+1
  5265  0C11  300F               	movlw	15
  5266  0C12  056B               	andwf	??_main,w
  5267  0C13  00ED               	movwf	??_main+2
  5268  0C14  3000               	movlw	0
  5269  0C15  056C               	andwf	??_main+1,w
  5270  0C16  00EE               	movwf	??_main+3
  5271  0C17  3000               	movlw	low (_displayNum| (0+32768))
  5272  0C18  076D               	addwf	??_main+2,w
  5273  0C19  0084               	movwf	4
  5274  0C1A  3098               	movlw	high (_displayNum| (0+32768))
  5275  0C1B  3D6E               	addwfc	??_main+3,w
  5276  0C1C  0085               	movwf	5
  5277  0C1D  0800               	movf	0,w	;code access
  5278  0C1E  00EF               	movwf	??_main+4
  5279  0C1F  086F               	movf	??_main+4,w
  5280  0C20  00A8               	movwf	_displayBuff
  5281  0C21                     l8267:	
  5282                           
  5283                           ;main.c: 683:                     displayBuff[1] = displayNum[((bcd_temp >> 4) & 0x0F)] 
      +                          | (1 << 0);
  5284  0C21  0831               	movf	_bcd_temp+1,w
  5285  0C22  00EC               	movwf	??_main+1
  5286  0C23  0830               	movf	_bcd_temp,w
  5287  0C24  00EB               	movwf	??_main
  5288  0C25  3004               	movlw	4
  5289  0C26                     u7275:	
  5290  0C26  36EC               	lsrf	??_main+1,f
  5291  0C27  0CEB               	rrf	??_main,f
  5292  0C28  0B89               	decfsz	9,f
  5293  0C29  2C26               	goto	u7275
  5294  0C2A  300F               	movlw	15
  5295  0C2B  056B               	andwf	??_main,w
  5296  0C2C  00ED               	movwf	??_main+2
  5297  0C2D  3000               	movlw	0
  5298  0C2E  056C               	andwf	??_main+1,w
  5299  0C2F  00EE               	movwf	??_main+3
  5300  0C30  3000               	movlw	low (_displayNum| (0+32768))
  5301  0C31  076D               	addwf	??_main+2,w
  5302  0C32  0084               	movwf	4
  5303  0C33  3098               	movlw	high (_displayNum| (0+32768))
  5304  0C34  3D6E               	addwfc	??_main+3,w
  5305  0C35  0085               	movwf	5
  5306  0C36  0800               	movf	0,w	;code access
  5307  0C37  3801               	iorlw	1
  5308  0C38  00EF               	movwf	??_main+4
  5309  0C39  086F               	movf	??_main+4,w
  5310  0C3A  00A9               	movwf	_displayBuff+1
  5311  0C3B                     l8269:	
  5312                           
  5313                           ;main.c: 684:                     displayBuff[2] = displayNum[(bcd_temp & 0x0F)];
  5314  0C3B  300F               	movlw	15
  5315  0C3C  0530               	andwf	_bcd_temp,w
  5316  0C3D  00EB               	movwf	??_main
  5317  0C3E  3000               	movlw	0
  5318  0C3F  0531               	andwf	_bcd_temp+1,w
  5319  0C40  00EC               	movwf	??_main+1
  5320  0C41  3000               	movlw	low (_displayNum| (0+32768))
  5321  0C42  076B               	addwf	??_main,w
  5322  0C43  0084               	movwf	4
  5323  0C44  3098               	movlw	high (_displayNum| (0+32768))
  5324  0C45  3D6C               	addwfc	??_main+1,w
  5325  0C46  0085               	movwf	5
  5326  0C47  0800               	movf	0,w	;code access
  5327  0C48  00ED               	movwf	??_main+2
  5328  0C49  086D               	movf	??_main+2,w
  5329  0C4A  00AA               	movwf	_displayBuff+2
  5330  0C4B                     l8271:	
  5331                           
  5332                           ;main.c: 685:                     displayBuff[3] = ((1 << 7) | (1 << 4) | (1 << 3) | (1 
      +                          << 2));
  5333  0C4B  309C               	movlw	156
  5334  0C4C  00EB               	movwf	??_main
  5335  0C4D  086B               	movf	??_main,w
  5336  0C4E  00AB               	movwf	_displayBuff+3
  5337  0C4F  2BEA               	goto	l8255
  5338  0C50                     l8275:	
  5339                           
  5340                           ;main.c: 689:                     mode = MODE_NORMAL;
  5341  0C50  01BF               	clrf	_mode	;volatile
  5342  0C51  2FB8               	goto	l8457
  5343  0C52                     l8277:	
  5344  0C52  3002               	movlw	2
  5345  0C53  063F               	xorwf	_mode,w	;volatile
  5346  0C54  1D03               	btfss	3,2
  5347  0C55  2C57               	goto	u7281
  5348  0C56  2C58               	goto	u7280
  5349  0C57                     u7281:	
  5350  0C57  2CA2               	goto	l8293
  5351  0C58                     u7280:	
  5352  0C58                     l8279:	
  5353                           
  5354                           ;main.c: 693:             if(flag_time_display_update == 1){
  5355  0C58  0341               	decf	_flag_time_display_update,w
  5356  0C59  1D03               	btfss	3,2
  5357  0C5A  2C5C               	goto	u7291
  5358  0C5B  2C5D               	goto	u7290
  5359  0C5C                     u7291:	
  5360  0C5C  2FB8               	goto	l8457
  5361  0C5D                     u7290:	
  5362  0C5D                     l8281:	
  5363                           
  5364                           ;main.c: 694:                 if(mode_flash_count){
  5365  0C5D  083D               	movf	_mode_flash_count,w	;volatile
  5366  0C5E  1903               	btfsc	3,2
  5367  0C5F  2C61               	goto	u7301
  5368  0C60  2C62               	goto	u7300
  5369  0C61                     u7301:	
  5370  0C61  2C50               	goto	l8275
  5371  0C62                     u7300:	
  5372  0C62                     l1153:	
  5373                           ;main.c: 695:                     do { LATAbits.LATA7 = 0; } while(0);
  5374                           
  5375  0C62  0022               	movlb	2	; select bank2
  5376  0C63  138C               	bcf	12,7	;volatile
  5377  0C64                     l8283:	
  5378                           
  5379                           ;main.c: 696:                     displayBuff[0] = displayNum[((rtcData[0x04] >> 4) & 0x
      +                          03)];
  5380  0C64  0020               	movlb	0	; select bank0
  5381  0C65  0846               	movf	_rtcData+4,w
  5382  0C66  00EB               	movwf	??_main
  5383  0C67  3004               	movlw	4
  5384  0C68                     u7315:	
  5385  0C68  36EB               	lsrf	??_main,f
  5386  0C69  0B89               	decfsz	9,f
  5387  0C6A  2C68               	goto	u7315
  5388  0C6B  086B               	movf	??_main,w
  5389  0C6C  3903               	andlw	3
  5390  0C6D  3E00               	addlw	low (_displayNum| (0+32768))
  5391  0C6E  0084               	movwf	4
  5392  0C6F  3098               	movlw	high (_displayNum| (0+32768))
  5393  0C70  1803               	skipnc
  5394  0C71  3E01               	addlw	1
  5395  0C72  0085               	movwf	5
  5396  0C73  0800               	movf	0,w	;code access
  5397  0C74  00EC               	movwf	??_main+1
  5398  0C75  086C               	movf	??_main+1,w
  5399  0C76  00A8               	movwf	_displayBuff
  5400  0C77                     l8285:	
  5401                           
  5402                           ;main.c: 697:                     displayBuff[1] = displayNum[(rtcData[0x04]& 0x0F)];
  5403  0C77  0846               	movf	_rtcData+4,w
  5404  0C78  390F               	andlw	15
  5405  0C79  3E00               	addlw	low (_displayNum| (0+32768))
  5406  0C7A  0084               	movwf	4
  5407  0C7B  3098               	movlw	high (_displayNum| (0+32768))
  5408  0C7C  1803               	skipnc
  5409  0C7D  3E01               	addlw	1
  5410  0C7E  0085               	movwf	5
  5411  0C7F  0800               	movf	0,w	;code access
  5412  0C80  00EB               	movwf	??_main
  5413  0C81  086B               	movf	??_main,w
  5414  0C82  00A9               	movwf	_displayBuff+1
  5415  0C83                     l8287:	
  5416                           
  5417                           ;main.c: 698:                     displayBuff[2] = displayNum[((rtcData[0x05] >> 4) & 0x
      +                          01)];
  5418  0C83  0847               	movf	_rtcData+5,w
  5419  0C84  00EB               	movwf	??_main
  5420  0C85  3004               	movlw	4
  5421  0C86                     u7325:	
  5422  0C86  36EB               	lsrf	??_main,f
  5423  0C87  0B89               	decfsz	9,f
  5424  0C88  2C86               	goto	u7325
  5425  0C89  086B               	movf	??_main,w
  5426  0C8A  3901               	andlw	1
  5427  0C8B  3E00               	addlw	low (_displayNum| (0+32768))
  5428  0C8C  0084               	movwf	4
  5429  0C8D  3098               	movlw	high (_displayNum| (0+32768))
  5430  0C8E  1803               	skipnc
  5431  0C8F  3E01               	addlw	1
  5432  0C90  0085               	movwf	5
  5433  0C91  0800               	movf	0,w	;code access
  5434  0C92  00EC               	movwf	??_main+1
  5435  0C93  086C               	movf	??_main+1,w
  5436  0C94  00AA               	movwf	_displayBuff+2
  5437                           
  5438                           ;main.c: 699:                     displayBuff[3] = displayNum[(rtcData[0x05]& 0x0F)];
  5439  0C95  0847               	movf	_rtcData+5,w
  5440  0C96  390F               	andlw	15
  5441  0C97  3E00               	addlw	low (_displayNum| (0+32768))
  5442  0C98  0084               	movwf	4
  5443  0C99  3098               	movlw	high (_displayNum| (0+32768))
  5444  0C9A  1803               	skipnc
  5445  0C9B  3E01               	addlw	1
  5446  0C9C  0085               	movwf	5
  5447  0C9D  0800               	movf	0,w	;code access
  5448  0C9E  00EB               	movwf	??_main
  5449  0C9F  086B               	movf	??_main,w
  5450  0CA0  00AB               	movwf	_displayBuff+3
  5451  0CA1  2BEA               	goto	l8255
  5452  0CA2                     l8293:	
  5453  0CA2  3003               	movlw	3
  5454  0CA3  063F               	xorwf	_mode,w	;volatile
  5455  0CA4  1D03               	btfss	3,2
  5456  0CA5  2CA7               	goto	u7331
  5457  0CA6  2CA8               	goto	u7330
  5458  0CA7                     u7331:	
  5459  0CA7  2CF3               	goto	l8309
  5460  0CA8                     u7330:	
  5461  0CA8                     l8295:	
  5462                           
  5463                           ;main.c: 707:             if(flag_time_display_update == 1){
  5464  0CA8  0341               	decf	_flag_time_display_update,w
  5465  0CA9  1D03               	btfss	3,2
  5466  0CAA  2CAC               	goto	u7341
  5467  0CAB  2CAD               	goto	u7340
  5468  0CAC                     u7341:	
  5469  0CAC  2FB8               	goto	l8457
  5470  0CAD                     u7340:	
  5471  0CAD                     l1159:	
  5472                           ;main.c: 708:                 do { LATAbits.LATA7 = 1; } while(0);
  5473                           
  5474  0CAD  0022               	movlb	2	; select bank2
  5475  0CAE  178C               	bsf	12,7	;volatile
  5476  0CAF                     l8297:	
  5477                           
  5478                           ;main.c: 709:                 displayBuff[0] = displayNum[((rtcData[0x02] >> 4) & 0x03)]
      +                          ;
  5479  0CAF  0020               	movlb	0	; select bank0
  5480  0CB0  0844               	movf	_rtcData+2,w
  5481  0CB1  00EB               	movwf	??_main
  5482  0CB2  3004               	movlw	4
  5483  0CB3                     u7355:	
  5484  0CB3  36EB               	lsrf	??_main,f
  5485  0CB4  0B89               	decfsz	9,f
  5486  0CB5  2CB3               	goto	u7355
  5487  0CB6  086B               	movf	??_main,w
  5488  0CB7  3903               	andlw	3
  5489  0CB8  3E00               	addlw	low (_displayNum| (0+32768))
  5490  0CB9  0084               	movwf	4
  5491  0CBA  3098               	movlw	high (_displayNum| (0+32768))
  5492  0CBB  1803               	skipnc
  5493  0CBC  3E01               	addlw	1
  5494  0CBD  0085               	movwf	5
  5495  0CBE  0800               	movf	0,w	;code access
  5496  0CBF  00EC               	movwf	??_main+1
  5497  0CC0  086C               	movf	??_main+1,w
  5498  0CC1  00A8               	movwf	_displayBuff
  5499  0CC2                     l8299:	
  5500                           
  5501                           ;main.c: 710:                 displayBuff[1] = displayNum[(rtcData[0x02]& 0x0F)];
  5502  0CC2  0844               	movf	_rtcData+2,w
  5503  0CC3  390F               	andlw	15
  5504  0CC4  3E00               	addlw	low (_displayNum| (0+32768))
  5505  0CC5  0084               	movwf	4
  5506  0CC6  3098               	movlw	high (_displayNum| (0+32768))
  5507  0CC7  1803               	skipnc
  5508  0CC8  3E01               	addlw	1
  5509  0CC9  0085               	movwf	5
  5510  0CCA  0800               	movf	0,w	;code access
  5511  0CCB  00EB               	movwf	??_main
  5512  0CCC  086B               	movf	??_main,w
  5513  0CCD  00A9               	movwf	_displayBuff+1
  5514  0CCE                     l8301:	
  5515                           
  5516                           ;main.c: 711:                 displayBuff[2] = displayNum[((rtcData[0x01] >> 4) & 0x07)]
      +                          ;
  5517  0CCE  0843               	movf	_rtcData+1,w
  5518  0CCF  00EB               	movwf	??_main
  5519  0CD0  3004               	movlw	4
  5520  0CD1                     u7365:	
  5521  0CD1  36EB               	lsrf	??_main,f
  5522  0CD2  0B89               	decfsz	9,f
  5523  0CD3  2CD1               	goto	u7365
  5524  0CD4  086B               	movf	??_main,w
  5525  0CD5  3907               	andlw	7
  5526  0CD6  3E00               	addlw	low (_displayNum| (0+32768))
  5527  0CD7  0084               	movwf	4
  5528  0CD8  3098               	movlw	high (_displayNum| (0+32768))
  5529  0CD9  1803               	skipnc
  5530  0CDA  3E01               	addlw	1
  5531  0CDB  0085               	movwf	5
  5532  0CDC  0800               	movf	0,w	;code access
  5533  0CDD  00EC               	movwf	??_main+1
  5534  0CDE  086C               	movf	??_main+1,w
  5535  0CDF  00AA               	movwf	_displayBuff+2
  5536                           
  5537                           ;main.c: 712:                 displayBuff[3] = displayNum[(rtcData[0x01]& 0x0F)];
  5538  0CE0  0843               	movf	_rtcData+1,w
  5539  0CE1  390F               	andlw	15
  5540  0CE2  3E00               	addlw	low (_displayNum| (0+32768))
  5541  0CE3  0084               	movwf	4
  5542  0CE4  3098               	movlw	high (_displayNum| (0+32768))
  5543  0CE5  1803               	skipnc
  5544  0CE6  3E01               	addlw	1
  5545  0CE7  0085               	movwf	5
  5546  0CE8  0800               	movf	0,w	;code access
  5547  0CE9  00EB               	movwf	??_main
  5548  0CEA  086B               	movf	??_main,w
  5549  0CEB  00AB               	movwf	_displayBuff+3
  5550  0CEC                     l8303:	
  5551                           
  5552                           ;main.c: 713:                 if(flag_dot_blink){
  5553  0CEC  0840               	movf	_flag_dot_blink,w
  5554  0CED  1903               	btfsc	3,2
  5555  0CEE  2CF0               	goto	u7371
  5556  0CEF  2CF1               	goto	u7370
  5557  0CF0                     u7371:	
  5558  0CF0  2BEA               	goto	l8255
  5559  0CF1                     u7370:	
  5560  0CF1                     l8305:	
  5561                           
  5562                           ;main.c: 714:                     displayBuff[1] |= (1 << 0);
  5563  0CF1  1429               	bsf	_displayBuff+1,0
  5564  0CF2  2BEA               	goto	l8255
  5565  0CF3                     l8309:	
  5566  0CF3  3004               	movlw	4
  5567  0CF4  063F               	xorwf	_mode,w	;volatile
  5568  0CF5  1D03               	btfss	3,2
  5569  0CF6  2CF8               	goto	u7381
  5570  0CF7  2CF9               	goto	u7380
  5571  0CF8                     u7381:	
  5572  0CF8  2D44               	goto	l8325
  5573  0CF9                     u7380:	
  5574  0CF9                     l8311:	
  5575                           
  5576                           ;main.c: 719:             if(flag_time_display_update == 1){
  5577  0CF9  0341               	decf	_flag_time_display_update,w
  5578  0CFA  1D03               	btfss	3,2
  5579  0CFB  2CFD               	goto	u7391
  5580  0CFC  2CFE               	goto	u7390
  5581  0CFD                     u7391:	
  5582  0CFD  2FB8               	goto	l8457
  5583  0CFE                     u7390:	
  5584  0CFE                     l1165:	
  5585                           ;main.c: 720:                 do { LATAbits.LATA7 = 1; } while(0);
  5586                           
  5587  0CFE  0022               	movlb	2	; select bank2
  5588  0CFF  178C               	bsf	12,7	;volatile
  5589  0D00                     l8313:	
  5590                           
  5591                           ;main.c: 721:                 displayBuff[0] = displayNum[((rtcData[0x02] >> 4) & 0x03)]
      +                          ;
  5592  0D00  0020               	movlb	0	; select bank0
  5593  0D01  0844               	movf	_rtcData+2,w
  5594  0D02  00EB               	movwf	??_main
  5595  0D03  3004               	movlw	4
  5596  0D04                     u7405:	
  5597  0D04  36EB               	lsrf	??_main,f
  5598  0D05  0B89               	decfsz	9,f
  5599  0D06  2D04               	goto	u7405
  5600  0D07  086B               	movf	??_main,w
  5601  0D08  3903               	andlw	3
  5602  0D09  3E00               	addlw	low (_displayNum| (0+32768))
  5603  0D0A  0084               	movwf	4
  5604  0D0B  3098               	movlw	high (_displayNum| (0+32768))
  5605  0D0C  1803               	skipnc
  5606  0D0D  3E01               	addlw	1
  5607  0D0E  0085               	movwf	5
  5608  0D0F  0800               	movf	0,w	;code access
  5609  0D10  00EC               	movwf	??_main+1
  5610  0D11  086C               	movf	??_main+1,w
  5611  0D12  00A8               	movwf	_displayBuff
  5612  0D13                     l8315:	
  5613                           
  5614                           ;main.c: 722:                 displayBuff[1] = displayNum[(rtcData[0x02]& 0x0F)];
  5615  0D13  0844               	movf	_rtcData+2,w
  5616  0D14  390F               	andlw	15
  5617  0D15  3E00               	addlw	low (_displayNum| (0+32768))
  5618  0D16  0084               	movwf	4
  5619  0D17  3098               	movlw	high (_displayNum| (0+32768))
  5620  0D18  1803               	skipnc
  5621  0D19  3E01               	addlw	1
  5622  0D1A  0085               	movwf	5
  5623  0D1B  0800               	movf	0,w	;code access
  5624  0D1C  00EB               	movwf	??_main
  5625  0D1D  086B               	movf	??_main,w
  5626  0D1E  00A9               	movwf	_displayBuff+1
  5627  0D1F                     l8317:	
  5628                           
  5629                           ;main.c: 723:                 displayBuff[2] = displayNum[((rtcData[0x01] >> 4) & 0x07)]
      +                          ;
  5630  0D1F  0843               	movf	_rtcData+1,w
  5631  0D20  00EB               	movwf	??_main
  5632  0D21  3004               	movlw	4
  5633  0D22                     u7415:	
  5634  0D22  36EB               	lsrf	??_main,f
  5635  0D23  0B89               	decfsz	9,f
  5636  0D24  2D22               	goto	u7415
  5637  0D25  086B               	movf	??_main,w
  5638  0D26  3907               	andlw	7
  5639  0D27  3E00               	addlw	low (_displayNum| (0+32768))
  5640  0D28  0084               	movwf	4
  5641  0D29  3098               	movlw	high (_displayNum| (0+32768))
  5642  0D2A  1803               	skipnc
  5643  0D2B  3E01               	addlw	1
  5644  0D2C  0085               	movwf	5
  5645  0D2D  0800               	movf	0,w	;code access
  5646  0D2E  00EC               	movwf	??_main+1
  5647  0D2F  086C               	movf	??_main+1,w
  5648  0D30  00AA               	movwf	_displayBuff+2
  5649                           
  5650                           ;main.c: 724:                 displayBuff[3] = displayNum[(rtcData[0x01]& 0x0F)];
  5651  0D31  0843               	movf	_rtcData+1,w
  5652  0D32  390F               	andlw	15
  5653  0D33  3E00               	addlw	low (_displayNum| (0+32768))
  5654  0D34  0084               	movwf	4
  5655  0D35  3098               	movlw	high (_displayNum| (0+32768))
  5656  0D36  1803               	skipnc
  5657  0D37  3E01               	addlw	1
  5658  0D38  0085               	movwf	5
  5659  0D39  0800               	movf	0,w	;code access
  5660  0D3A  00EB               	movwf	??_main
  5661  0D3B  086B               	movf	??_main,w
  5662  0D3C  00AB               	movwf	_displayBuff+3
  5663  0D3D                     l8319:	
  5664                           
  5665                           ;main.c: 725:                 if(flag_dot_blink){
  5666  0D3D  0840               	movf	_flag_dot_blink,w
  5667  0D3E  1903               	btfsc	3,2
  5668  0D3F  2D41               	goto	u7421
  5669  0D40  2D42               	goto	u7420
  5670  0D41                     u7421:	
  5671  0D41  2BEA               	goto	l8255
  5672  0D42                     u7420:	
  5673  0D42                     l8321:	
  5674                           
  5675                           ;main.c: 726:                     displayBuff[3] |= (1 << 0);
  5676  0D42  142B               	bsf	_displayBuff+3,0
  5677  0D43  2BEA               	goto	l8255
  5678  0D44                     l8325:	
  5679  0D44  3005               	movlw	5
  5680  0D45  063F               	xorwf	_mode,w	;volatile
  5681  0D46  1D03               	btfss	3,2
  5682  0D47  2D49               	goto	u7431
  5683  0D48  2D4A               	goto	u7430
  5684  0D49                     u7431:	
  5685  0D49  2DAD               	goto	l8345
  5686  0D4A                     u7430:	
  5687  0D4A                     l8327:	
  5688                           
  5689                           ;main.c: 731:             if(flag_time_display_update == 1){
  5690  0D4A  0341               	decf	_flag_time_display_update,w
  5691  0D4B  1D03               	btfss	3,2
  5692  0D4C  2D4E               	goto	u7441
  5693  0D4D  2D4F               	goto	u7440
  5694  0D4E                     u7441:	
  5695  0D4E  2FB8               	goto	l8457
  5696  0D4F                     u7440:	
  5697  0D4F                     l8329:	
  5698                           
  5699                           ;main.c: 732:                 if(mode_flash_count){
  5700  0D4F  083D               	movf	_mode_flash_count,w	;volatile
  5701  0D50  1903               	btfsc	3,2
  5702  0D51  2D53               	goto	u7451
  5703  0D52  2D54               	goto	u7450
  5704  0D53                     u7451:	
  5705  0D53  2D68               	goto	l1175
  5706  0D54                     u7450:	
  5707  0D54                     l1172:	
  5708                           ;main.c: 734:                     do { LATAbits.LATA7 = 0; } while(0);
  5709                           
  5710  0D54  0022               	movlb	2	; select bank2
  5711  0D55  138C               	bcf	12,7	;volatile
  5712  0D56                     l8331:	
  5713                           
  5714                           ;main.c: 735:                     displayBuff[0] = ((1 << 6) | (1 << 5) | (1 << 4) | (1 
      +                          << 3) | (1 << 1));
  5715  0D56  307A               	movlw	122
  5716  0D57  0020               	movlb	0	; select bank0
  5717  0D58  00EB               	movwf	??_main
  5718  0D59  086B               	movf	??_main,w
  5719  0D5A  00A8               	movwf	_displayBuff
  5720                           
  5721                           ;main.c: 736:                     displayBuff[1] = ((1 << 6) | (1 << 5) | (1 << 4) | (1 
      +                          << 3) | (1 << 1));
  5722  0D5B  307A               	movlw	122
  5723  0D5C  00EB               	movwf	??_main
  5724  0D5D  086B               	movf	??_main,w
  5725  0D5E  00A9               	movwf	_displayBuff+1
  5726                           
  5727                           ;main.c: 737:                     displayBuff[2] = ((1 << 7) | (1 << 6) | (1 << 3) | (1 
      +                          << 2));
  5728  0D5F  30CC               	movlw	204
  5729  0D60  00EB               	movwf	??_main
  5730  0D61  086B               	movf	??_main,w
  5731  0D62  00AA               	movwf	_displayBuff+2
  5732                           
  5733                           ;main.c: 738:                     displayBuff[3] = ((1 << 7) | (1 << 6) | (1 << 5) | (1 
      +                          << 2));
  5734  0D63  30E4               	movlw	228
  5735  0D64  00EB               	movwf	??_main
  5736  0D65  086B               	movf	??_main,w
  5737  0D66  00AB               	movwf	_displayBuff+3
  5738                           
  5739                           ;main.c: 739:                 } else {
  5740  0D67  2BEA               	goto	l8255
  5741  0D68                     l1175:	
  5742                           ;main.c: 740:                     do { LATAbits.LATA7 = 0; } while(0);
  5743                           
  5744  0D68  0022               	movlb	2	; select bank2
  5745  0D69  138C               	bcf	12,7	;volatile
  5746  0D6A                     l8333:	
  5747                           
  5748                           ;main.c: 741:                     displayBuff[0] = displayNum[((rtcData[0x04] >> 4) & 0x
      +                          03)];
  5749  0D6A  0020               	movlb	0	; select bank0
  5750  0D6B  0846               	movf	_rtcData+4,w
  5751  0D6C  00EB               	movwf	??_main
  5752  0D6D  3004               	movlw	4
  5753  0D6E                     u7465:	
  5754  0D6E  36EB               	lsrf	??_main,f
  5755  0D6F  0B89               	decfsz	9,f
  5756  0D70  2D6E               	goto	u7465
  5757  0D71  086B               	movf	??_main,w
  5758  0D72  3903               	andlw	3
  5759  0D73  3E00               	addlw	low (_displayNum| (0+32768))
  5760  0D74  0084               	movwf	4
  5761  0D75  3098               	movlw	high (_displayNum| (0+32768))
  5762  0D76  1803               	skipnc
  5763  0D77  3E01               	addlw	1
  5764  0D78  0085               	movwf	5
  5765  0D79  0800               	movf	0,w	;code access
  5766  0D7A  00EC               	movwf	??_main+1
  5767  0D7B  086C               	movf	??_main+1,w
  5768  0D7C  00A8               	movwf	_displayBuff
  5769  0D7D                     l8335:	
  5770                           
  5771                           ;main.c: 742:                     displayBuff[1] = displayNum[(rtcData[0x04]& 0x0F)];
  5772  0D7D  0846               	movf	_rtcData+4,w
  5773  0D7E  390F               	andlw	15
  5774  0D7F  3E00               	addlw	low (_displayNum| (0+32768))
  5775  0D80  0084               	movwf	4
  5776  0D81  3098               	movlw	high (_displayNum| (0+32768))
  5777  0D82  1803               	skipnc
  5778  0D83  3E01               	addlw	1
  5779  0D84  0085               	movwf	5
  5780  0D85  0800               	movf	0,w	;code access
  5781  0D86  00EB               	movwf	??_main
  5782  0D87  086B               	movf	??_main,w
  5783  0D88  00A9               	movwf	_displayBuff+1
  5784  0D89                     l8337:	
  5785                           
  5786                           ;main.c: 743:                     displayBuff[2] = displayNum[((rtcData[0x05] >> 4) & 0x
      +                          01)];
  5787  0D89  0847               	movf	_rtcData+5,w
  5788  0D8A  00EB               	movwf	??_main
  5789  0D8B  3004               	movlw	4
  5790  0D8C                     u7475:	
  5791  0D8C  36EB               	lsrf	??_main,f
  5792  0D8D  0B89               	decfsz	9,f
  5793  0D8E  2D8C               	goto	u7475
  5794  0D8F  086B               	movf	??_main,w
  5795  0D90  3901               	andlw	1
  5796  0D91  3E00               	addlw	low (_displayNum| (0+32768))
  5797  0D92  0084               	movwf	4
  5798  0D93  3098               	movlw	high (_displayNum| (0+32768))
  5799  0D94  1803               	skipnc
  5800  0D95  3E01               	addlw	1
  5801  0D96  0085               	movwf	5
  5802  0D97  0800               	movf	0,w	;code access
  5803  0D98  00EC               	movwf	??_main+1
  5804  0D99  086C               	movf	??_main+1,w
  5805  0D9A  00AA               	movwf	_displayBuff+2
  5806                           
  5807                           ;main.c: 744:                     displayBuff[3] = displayNum[(rtcData[0x05]& 0x0F)];
  5808  0D9B  0847               	movf	_rtcData+5,w
  5809  0D9C  390F               	andlw	15
  5810  0D9D  3E00               	addlw	low (_displayNum| (0+32768))
  5811  0D9E  0084               	movwf	4
  5812  0D9F  3098               	movlw	high (_displayNum| (0+32768))
  5813  0DA0  1803               	skipnc
  5814  0DA1  3E01               	addlw	1
  5815  0DA2  0085               	movwf	5
  5816  0DA3  0800               	movf	0,w	;code access
  5817  0DA4  00EB               	movwf	??_main
  5818  0DA5  086B               	movf	??_main,w
  5819  0DA6  00AB               	movwf	_displayBuff+3
  5820  0DA7                     l8339:	
  5821                           
  5822                           ;main.c: 745:                     if(flag_dot_blink){
  5823  0DA7  0840               	movf	_flag_dot_blink,w
  5824  0DA8  1903               	btfsc	3,2
  5825  0DA9  2DAB               	goto	u7481
  5826  0DAA  2DAC               	goto	u7480
  5827  0DAB                     u7481:	
  5828  0DAB  2BEA               	goto	l8255
  5829  0DAC                     u7480:	
  5830  0DAC  2D42               	goto	l8321
  5831  0DAD                     l8345:	
  5832  0DAD  3006               	movlw	6
  5833  0DAE  063F               	xorwf	_mode,w	;volatile
  5834  0DAF  1D03               	btfss	3,2
  5835  0DB0  2DB2               	goto	u7491
  5836  0DB1  2DB3               	goto	u7490
  5837  0DB2                     u7491:	
  5838  0DB2  2DFD               	goto	l8361
  5839  0DB3                     u7490:	
  5840  0DB3                     l8347:	
  5841                           
  5842                           ;main.c: 752:             if(flag_time_display_update == 1){
  5843  0DB3  0341               	decf	_flag_time_display_update,w
  5844  0DB4  1D03               	btfss	3,2
  5845  0DB5  2DB7               	goto	u7501
  5846  0DB6  2DB8               	goto	u7500
  5847  0DB7                     u7501:	
  5848  0DB7  2FB8               	goto	l8457
  5849  0DB8                     u7500:	
  5850  0DB8                     l1181:	
  5851                           ;main.c: 753:                 do { LATAbits.LATA7 = 0; } while(0);
  5852                           
  5853  0DB8  0022               	movlb	2	; select bank2
  5854  0DB9  138C               	bcf	12,7	;volatile
  5855  0DBA                     l8349:	
  5856                           
  5857                           ;main.c: 754:                 displayBuff[0] = displayNum[((rtcData[0x04] >> 4) & 0x03)]
      +                          ;
  5858  0DBA  0020               	movlb	0	; select bank0
  5859  0DBB  0846               	movf	_rtcData+4,w
  5860  0DBC  00EB               	movwf	??_main
  5861  0DBD  3004               	movlw	4
  5862  0DBE                     u7515:	
  5863  0DBE  36EB               	lsrf	??_main,f
  5864  0DBF  0B89               	decfsz	9,f
  5865  0DC0  2DBE               	goto	u7515
  5866  0DC1  086B               	movf	??_main,w
  5867  0DC2  3903               	andlw	3
  5868  0DC3  3E00               	addlw	low (_displayNum| (0+32768))
  5869  0DC4  0084               	movwf	4
  5870  0DC5  3098               	movlw	high (_displayNum| (0+32768))
  5871  0DC6  1803               	skipnc
  5872  0DC7  3E01               	addlw	1
  5873  0DC8  0085               	movwf	5
  5874  0DC9  0800               	movf	0,w	;code access
  5875  0DCA  00EC               	movwf	??_main+1
  5876  0DCB  086C               	movf	??_main+1,w
  5877  0DCC  00A8               	movwf	_displayBuff
  5878  0DCD                     l8351:	
  5879                           
  5880                           ;main.c: 755:                 displayBuff[1] = displayNum[(rtcData[0x04]& 0x0F)];
  5881  0DCD  0846               	movf	_rtcData+4,w
  5882  0DCE  390F               	andlw	15
  5883  0DCF  3E00               	addlw	low (_displayNum| (0+32768))
  5884  0DD0  0084               	movwf	4
  5885  0DD1  3098               	movlw	high (_displayNum| (0+32768))
  5886  0DD2  1803               	skipnc
  5887  0DD3  3E01               	addlw	1
  5888  0DD4  0085               	movwf	5
  5889  0DD5  0800               	movf	0,w	;code access
  5890  0DD6  00EB               	movwf	??_main
  5891  0DD7  086B               	movf	??_main,w
  5892  0DD8  00A9               	movwf	_displayBuff+1
  5893  0DD9                     l8353:	
  5894                           
  5895                           ;main.c: 756:                 displayBuff[2] = displayNum[((rtcData[0x05] >> 4) & 0x01)]
      +                          ;
  5896  0DD9  0847               	movf	_rtcData+5,w
  5897  0DDA  00EB               	movwf	??_main
  5898  0DDB  3004               	movlw	4
  5899  0DDC                     u7525:	
  5900  0DDC  36EB               	lsrf	??_main,f
  5901  0DDD  0B89               	decfsz	9,f
  5902  0DDE  2DDC               	goto	u7525
  5903  0DDF  086B               	movf	??_main,w
  5904  0DE0  3901               	andlw	1
  5905  0DE1  3E00               	addlw	low (_displayNum| (0+32768))
  5906  0DE2  0084               	movwf	4
  5907  0DE3  3098               	movlw	high (_displayNum| (0+32768))
  5908  0DE4  1803               	skipnc
  5909  0DE5  3E01               	addlw	1
  5910  0DE6  0085               	movwf	5
  5911  0DE7  0800               	movf	0,w	;code access
  5912  0DE8  00EC               	movwf	??_main+1
  5913  0DE9  086C               	movf	??_main+1,w
  5914  0DEA  00AA               	movwf	_displayBuff+2
  5915                           
  5916                           ;main.c: 757:                 displayBuff[3] = displayNum[(rtcData[0x05]& 0x0F)];
  5917  0DEB  0847               	movf	_rtcData+5,w
  5918  0DEC  390F               	andlw	15
  5919  0DED  3E00               	addlw	low (_displayNum| (0+32768))
  5920  0DEE  0084               	movwf	4
  5921  0DEF  3098               	movlw	high (_displayNum| (0+32768))
  5922  0DF0  1803               	skipnc
  5923  0DF1  3E01               	addlw	1
  5924  0DF2  0085               	movwf	5
  5925  0DF3  0800               	movf	0,w	;code access
  5926  0DF4  00EB               	movwf	??_main
  5927  0DF5  086B               	movf	??_main,w
  5928  0DF6  00AB               	movwf	_displayBuff+3
  5929  0DF7                     l8355:	
  5930                           
  5931                           ;main.c: 758:                 if(flag_dot_blink){
  5932  0DF7  0840               	movf	_flag_dot_blink,w
  5933  0DF8  1903               	btfsc	3,2
  5934  0DF9  2DFB               	goto	u7531
  5935  0DFA  2DFC               	goto	u7530
  5936  0DFB                     u7531:	
  5937  0DFB  2BEA               	goto	l8255
  5938  0DFC                     u7530:	
  5939  0DFC  2CF1               	goto	l8305
  5940  0DFD                     l8361:	
  5941  0DFD  3007               	movlw	7
  5942  0DFE  063F               	xorwf	_mode,w	;volatile
  5943  0DFF  1D03               	btfss	3,2
  5944  0E00  2E02               	goto	u7541
  5945  0E01  2E03               	goto	u7540
  5946  0E02                     u7541:	
  5947  0E02  2E63               	goto	l8385
  5948  0E03                     u7540:	
  5949  0E03                     l8363:	
  5950                           
  5951                           ;main.c: 764:             if(flag_time_display_update == 1){
  5952  0E03  0341               	decf	_flag_time_display_update,w
  5953  0E04  1D03               	btfss	3,2
  5954  0E05  2E07               	goto	u7551
  5955  0E06  2E08               	goto	u7550
  5956  0E07                     u7551:	
  5957  0E07  2FB8               	goto	l8457
  5958  0E08                     u7550:	
  5959  0E08                     l8365:	
  5960                           
  5961                           ;main.c: 765:                 if(mode_flash_count){
  5962  0E08  083D               	movf	_mode_flash_count,w	;volatile
  5963  0E09  1903               	btfsc	3,2
  5964  0E0A  2E0C               	goto	u7561
  5965  0E0B  2E0D               	goto	u7560
  5966  0E0C                     u7561:	
  5967  0E0C  2E1E               	goto	l1191
  5968  0E0D                     u7560:	
  5969  0E0D                     l1188:	
  5970                           ;main.c: 767:                     do { LATAbits.LATA7 = 0; } while(0);
  5971                           
  5972  0E0D  0022               	movlb	2	; select bank2
  5973  0E0E  138C               	bcf	12,7	;volatile
  5974  0E0F                     l8367:	
  5975                           
  5976                           ;main.c: 768:                     displayBuff[0] = ((1 << 7) | (1 << 6) | (1 << 5) | (1 
      +                          << 3) | (1 << 2) | (1 << 1));
  5977  0E0F  30EE               	movlw	238
  5978  0E10  0020               	movlb	0	; select bank0
  5979  0E11  00EB               	movwf	??_main
  5980  0E12  086B               	movf	??_main,w
  5981  0E13  00A8               	movwf	_displayBuff
  5982                           
  5983                           ;main.c: 769:                     displayBuff[1] = ((1 << 4) | (1 << 3) | (1 << 2));
  5984  0E14  301C               	movlw	28
  5985  0E15  00EB               	movwf	??_main
  5986  0E16  086B               	movf	??_main,w
  5987  0E17  00A9               	movwf	_displayBuff+1
  5988  0E18                     l8369:	
  5989                           
  5990                           ;main.c: 770:                     displayBuff[2] = 0x00;
  5991  0E18  01AA               	clrf	_displayBuff+2
  5992  0E19                     l8371:	
  5993                           
  5994                           ;main.c: 771:                     displayBuff[3] = ((1 << 6) | (1 << 5));
  5995  0E19  3060               	movlw	96
  5996  0E1A  00EB               	movwf	??_main
  5997  0E1B  086B               	movf	??_main,w
  5998  0E1C  00AB               	movwf	_displayBuff+3
  5999                           
  6000                           ;main.c: 772:                 } else {
  6001  0E1D  2BEA               	goto	l8255
  6002  0E1E                     l1191:	
  6003                           ;main.c: 773:                     do { LATAbits.LATA7 = 1; } while(0);
  6004                           
  6005  0E1E  0022               	movlb	2	; select bank2
  6006  0E1F  178C               	bsf	12,7	;volatile
  6007  0E20                     l8373:	
  6008                           
  6009                           ;main.c: 774:                     displayBuff[0] = displayNum[((rtcData[0x09] >> 4) & 0x
      +                          03)];
  6010  0E20  0020               	movlb	0	; select bank0
  6011  0E21  084B               	movf	_rtcData+9,w
  6012  0E22  00EB               	movwf	??_main
  6013  0E23  3004               	movlw	4
  6014  0E24                     u7575:	
  6015  0E24  36EB               	lsrf	??_main,f
  6016  0E25  0B89               	decfsz	9,f
  6017  0E26  2E24               	goto	u7575
  6018  0E27  086B               	movf	??_main,w
  6019  0E28  3903               	andlw	3
  6020  0E29  3E00               	addlw	low (_displayNum| (0+32768))
  6021  0E2A  0084               	movwf	4
  6022  0E2B  3098               	movlw	high (_displayNum| (0+32768))
  6023  0E2C  1803               	skipnc
  6024  0E2D  3E01               	addlw	1
  6025  0E2E  0085               	movwf	5
  6026  0E2F  0800               	movf	0,w	;code access
  6027  0E30  00EC               	movwf	??_main+1
  6028  0E31  086C               	movf	??_main+1,w
  6029  0E32  00A8               	movwf	_displayBuff
  6030  0E33                     l8375:	
  6031                           
  6032                           ;main.c: 775:                     displayBuff[1] = displayNum[(rtcData[0x09]& 0x0F)];
  6033  0E33  084B               	movf	_rtcData+9,w
  6034  0E34  390F               	andlw	15
  6035  0E35  3E00               	addlw	low (_displayNum| (0+32768))
  6036  0E36  0084               	movwf	4
  6037  0E37  3098               	movlw	high (_displayNum| (0+32768))
  6038  0E38  1803               	skipnc
  6039  0E39  3E01               	addlw	1
  6040  0E3A  0085               	movwf	5
  6041  0E3B  0800               	movf	0,w	;code access
  6042  0E3C  00EB               	movwf	??_main
  6043  0E3D  086B               	movf	??_main,w
  6044  0E3E  00A9               	movwf	_displayBuff+1
  6045  0E3F                     l8377:	
  6046                           
  6047                           ;main.c: 776:                     displayBuff[2] = displayNum[((rtcData[0x08] >> 4) & 0x
      +                          07)];
  6048  0E3F  084A               	movf	_rtcData+8,w
  6049  0E40  00EB               	movwf	??_main
  6050  0E41  3004               	movlw	4
  6051  0E42                     u7585:	
  6052  0E42  36EB               	lsrf	??_main,f
  6053  0E43  0B89               	decfsz	9,f
  6054  0E44  2E42               	goto	u7585
  6055  0E45  086B               	movf	??_main,w
  6056  0E46  3907               	andlw	7
  6057  0E47  3E00               	addlw	low (_displayNum| (0+32768))
  6058  0E48  0084               	movwf	4
  6059  0E49  3098               	movlw	high (_displayNum| (0+32768))
  6060  0E4A  1803               	skipnc
  6061  0E4B  3E01               	addlw	1
  6062  0E4C  0085               	movwf	5
  6063  0E4D  0800               	movf	0,w	;code access
  6064  0E4E  00EC               	movwf	??_main+1
  6065  0E4F  086C               	movf	??_main+1,w
  6066  0E50  00AA               	movwf	_displayBuff+2
  6067                           
  6068                           ;main.c: 777:                     displayBuff[3] = displayNum[(rtcData[0x08]& 0x0F)];
  6069  0E51  084A               	movf	_rtcData+8,w
  6070  0E52  390F               	andlw	15
  6071  0E53  3E00               	addlw	low (_displayNum| (0+32768))
  6072  0E54  0084               	movwf	4
  6073  0E55  3098               	movlw	high (_displayNum| (0+32768))
  6074  0E56  1803               	skipnc
  6075  0E57  3E01               	addlw	1
  6076  0E58  0085               	movwf	5
  6077  0E59  0800               	movf	0,w	;code access
  6078  0E5A  00EB               	movwf	??_main
  6079  0E5B  086B               	movf	??_main,w
  6080  0E5C  00AB               	movwf	_displayBuff+3
  6081  0E5D                     l8379:	
  6082                           
  6083                           ;main.c: 778:                     if(flag_dot_blink){
  6084  0E5D  0840               	movf	_flag_dot_blink,w
  6085  0E5E  1903               	btfsc	3,2
  6086  0E5F  2E61               	goto	u7591
  6087  0E60  2E62               	goto	u7590
  6088  0E61                     u7591:	
  6089  0E61  2BEA               	goto	l8255
  6090  0E62                     u7590:	
  6091  0E62  2CF1               	goto	l8305
  6092  0E63                     l8385:	
  6093  0E63  3008               	movlw	8
  6094  0E64  063F               	xorwf	_mode,w	;volatile
  6095  0E65  1D03               	btfss	3,2
  6096  0E66  2E68               	goto	u7601
  6097  0E67  2E69               	goto	u7600
  6098  0E68                     u7601:	
  6099  0E68  2EB3               	goto	l8401
  6100  0E69                     u7600:	
  6101  0E69                     l8387:	
  6102                           
  6103                           ;main.c: 785:             if(flag_time_display_update == 1){
  6104  0E69  0341               	decf	_flag_time_display_update,w
  6105  0E6A  1D03               	btfss	3,2
  6106  0E6B  2E6D               	goto	u7611
  6107  0E6C  2E6E               	goto	u7610
  6108  0E6D                     u7611:	
  6109  0E6D  2FB8               	goto	l8457
  6110  0E6E                     u7610:	
  6111  0E6E                     l1197:	
  6112                           ;main.c: 786:                 do { LATAbits.LATA7 = 1; } while(0);
  6113                           
  6114  0E6E  0022               	movlb	2	; select bank2
  6115  0E6F  178C               	bsf	12,7	;volatile
  6116  0E70                     l8389:	
  6117                           
  6118                           ;main.c: 787:                 displayBuff[0] = displayNum[((rtcData[0x09] >> 4) & 0x03)]
      +                          ;
  6119  0E70  0020               	movlb	0	; select bank0
  6120  0E71  084B               	movf	_rtcData+9,w
  6121  0E72  00EB               	movwf	??_main
  6122  0E73  3004               	movlw	4
  6123  0E74                     u7625:	
  6124  0E74  36EB               	lsrf	??_main,f
  6125  0E75  0B89               	decfsz	9,f
  6126  0E76  2E74               	goto	u7625
  6127  0E77  086B               	movf	??_main,w
  6128  0E78  3903               	andlw	3
  6129  0E79  3E00               	addlw	low (_displayNum| (0+32768))
  6130  0E7A  0084               	movwf	4
  6131  0E7B  3098               	movlw	high (_displayNum| (0+32768))
  6132  0E7C  1803               	skipnc
  6133  0E7D  3E01               	addlw	1
  6134  0E7E  0085               	movwf	5
  6135  0E7F  0800               	movf	0,w	;code access
  6136  0E80  00EC               	movwf	??_main+1
  6137  0E81  086C               	movf	??_main+1,w
  6138  0E82  00A8               	movwf	_displayBuff
  6139  0E83                     l8391:	
  6140                           
  6141                           ;main.c: 788:                 displayBuff[1] = displayNum[(rtcData[0x09]& 0x0F)];
  6142  0E83  084B               	movf	_rtcData+9,w
  6143  0E84  390F               	andlw	15
  6144  0E85  3E00               	addlw	low (_displayNum| (0+32768))
  6145  0E86  0084               	movwf	4
  6146  0E87  3098               	movlw	high (_displayNum| (0+32768))
  6147  0E88  1803               	skipnc
  6148  0E89  3E01               	addlw	1
  6149  0E8A  0085               	movwf	5
  6150  0E8B  0800               	movf	0,w	;code access
  6151  0E8C  00EB               	movwf	??_main
  6152  0E8D  086B               	movf	??_main,w
  6153  0E8E  00A9               	movwf	_displayBuff+1
  6154  0E8F                     l8393:	
  6155                           
  6156                           ;main.c: 789:                 displayBuff[2] = displayNum[((rtcData[0x08] >> 4) & 0x07)]
      +                          ;
  6157  0E8F  084A               	movf	_rtcData+8,w
  6158  0E90  00EB               	movwf	??_main
  6159  0E91  3004               	movlw	4
  6160  0E92                     u7635:	
  6161  0E92  36EB               	lsrf	??_main,f
  6162  0E93  0B89               	decfsz	9,f
  6163  0E94  2E92               	goto	u7635
  6164  0E95  086B               	movf	??_main,w
  6165  0E96  3907               	andlw	7
  6166  0E97  3E00               	addlw	low (_displayNum| (0+32768))
  6167  0E98  0084               	movwf	4
  6168  0E99  3098               	movlw	high (_displayNum| (0+32768))
  6169  0E9A  1803               	skipnc
  6170  0E9B  3E01               	addlw	1
  6171  0E9C  0085               	movwf	5
  6172  0E9D  0800               	movf	0,w	;code access
  6173  0E9E  00EC               	movwf	??_main+1
  6174  0E9F  086C               	movf	??_main+1,w
  6175  0EA0  00AA               	movwf	_displayBuff+2
  6176                           
  6177                           ;main.c: 790:                 displayBuff[3] = displayNum[(rtcData[0x08]& 0x0F)];
  6178  0EA1  084A               	movf	_rtcData+8,w
  6179  0EA2  390F               	andlw	15
  6180  0EA3  3E00               	addlw	low (_displayNum| (0+32768))
  6181  0EA4  0084               	movwf	4
  6182  0EA5  3098               	movlw	high (_displayNum| (0+32768))
  6183  0EA6  1803               	skipnc
  6184  0EA7  3E01               	addlw	1
  6185  0EA8  0085               	movwf	5
  6186  0EA9  0800               	movf	0,w	;code access
  6187  0EAA  00EB               	movwf	??_main
  6188  0EAB  086B               	movf	??_main,w
  6189  0EAC  00AB               	movwf	_displayBuff+3
  6190  0EAD                     l8395:	
  6191                           
  6192                           ;main.c: 791:                 if(flag_dot_blink){
  6193  0EAD  0840               	movf	_flag_dot_blink,w
  6194  0EAE  1903               	btfsc	3,2
  6195  0EAF  2EB1               	goto	u7641
  6196  0EB0  2EB2               	goto	u7640
  6197  0EB1                     u7641:	
  6198  0EB1  2BEA               	goto	l8255
  6199  0EB2                     u7640:	
  6200  0EB2  2D42               	goto	l8321
  6201  0EB3                     l8401:	
  6202  0EB3  3009               	movlw	9
  6203  0EB4  063F               	xorwf	_mode,w	;volatile
  6204  0EB5  1D03               	btfss	3,2
  6205  0EB6  2EB8               	goto	u7651
  6206  0EB7  2EB9               	goto	u7650
  6207  0EB8                     u7651:	
  6208  0EB8  2F19               	goto	l8425
  6209  0EB9                     u7650:	
  6210  0EB9                     l8403:	
  6211                           
  6212                           ;main.c: 797:             if(flag_time_display_update == 1){
  6213  0EB9  0341               	decf	_flag_time_display_update,w
  6214  0EBA  1D03               	btfss	3,2
  6215  0EBB  2EBD               	goto	u7661
  6216  0EBC  2EBE               	goto	u7660
  6217  0EBD                     u7661:	
  6218  0EBD  2FB8               	goto	l8457
  6219  0EBE                     u7660:	
  6220  0EBE                     l8405:	
  6221                           
  6222                           ;main.c: 798:                 if(mode_flash_count){
  6223  0EBE  083D               	movf	_mode_flash_count,w	;volatile
  6224  0EBF  1903               	btfsc	3,2
  6225  0EC0  2EC2               	goto	u7671
  6226  0EC1  2EC3               	goto	u7670
  6227  0EC2                     u7671:	
  6228  0EC2  2ED4               	goto	l1207
  6229  0EC3                     u7670:	
  6230  0EC3                     l1204:	
  6231                           ;main.c: 800:                     do { LATAbits.LATA7 = 0; } while(0);
  6232                           
  6233  0EC3  0022               	movlb	2	; select bank2
  6234  0EC4  138C               	bcf	12,7	;volatile
  6235  0EC5                     l8407:	
  6236                           
  6237                           ;main.c: 801:                     displayBuff[0] = ((1 << 7) | (1 << 6) | (1 << 5) | (1 
      +                          << 3) | (1 << 2) | (1 << 1));
  6238  0EC5  30EE               	movlw	238
  6239  0EC6  0020               	movlb	0	; select bank0
  6240  0EC7  00EB               	movwf	??_main
  6241  0EC8  086B               	movf	??_main,w
  6242  0EC9  00A8               	movwf	_displayBuff
  6243                           
  6244                           ;main.c: 802:                     displayBuff[1] = ((1 << 4) | (1 << 3) | (1 << 2));
  6245  0ECA  301C               	movlw	28
  6246  0ECB  00EB               	movwf	??_main
  6247  0ECC  086B               	movf	??_main,w
  6248  0ECD  00A9               	movwf	_displayBuff+1
  6249  0ECE                     l8409:	
  6250                           
  6251                           ;main.c: 803:                     displayBuff[2] = 0x00;
  6252  0ECE  01AA               	clrf	_displayBuff+2
  6253  0ECF                     l8411:	
  6254                           
  6255                           ;main.c: 804:                     displayBuff[3] = ((1 << 7) | (1 << 6) | (1 << 4) | (1 
      +                          << 3) | (1 << 1));
  6256  0ECF  30DA               	movlw	218
  6257  0ED0  00EB               	movwf	??_main
  6258  0ED1  086B               	movf	??_main,w
  6259  0ED2  00AB               	movwf	_displayBuff+3
  6260                           
  6261                           ;main.c: 805:                 } else {
  6262  0ED3  2BEA               	goto	l8255
  6263  0ED4                     l1207:	
  6264                           ;main.c: 806:                     do { LATAbits.LATA7 = 1; } while(0);
  6265                           
  6266  0ED4  0022               	movlb	2	; select bank2
  6267  0ED5  178C               	bsf	12,7	;volatile
  6268  0ED6                     l8413:	
  6269                           
  6270                           ;main.c: 807:                     displayBuff[0] = displayNum[((rtcData[0x0C] >> 4) & 0x
      +                          03)];
  6271  0ED6  0020               	movlb	0	; select bank0
  6272  0ED7  084E               	movf	_rtcData+12,w
  6273  0ED8  00EB               	movwf	??_main
  6274  0ED9  3004               	movlw	4
  6275  0EDA                     u7685:	
  6276  0EDA  36EB               	lsrf	??_main,f
  6277  0EDB  0B89               	decfsz	9,f
  6278  0EDC  2EDA               	goto	u7685
  6279  0EDD  086B               	movf	??_main,w
  6280  0EDE  3903               	andlw	3
  6281  0EDF  3E00               	addlw	low (_displayNum| (0+32768))
  6282  0EE0  0084               	movwf	4
  6283  0EE1  3098               	movlw	high (_displayNum| (0+32768))
  6284  0EE2  1803               	skipnc
  6285  0EE3  3E01               	addlw	1
  6286  0EE4  0085               	movwf	5
  6287  0EE5  0800               	movf	0,w	;code access
  6288  0EE6  00EC               	movwf	??_main+1
  6289  0EE7  086C               	movf	??_main+1,w
  6290  0EE8  00A8               	movwf	_displayBuff
  6291  0EE9                     l8415:	
  6292                           
  6293                           ;main.c: 808:                     displayBuff[1] = displayNum[(rtcData[0x0C]& 0x0F)];
  6294  0EE9  084E               	movf	_rtcData+12,w
  6295  0EEA  390F               	andlw	15
  6296  0EEB  3E00               	addlw	low (_displayNum| (0+32768))
  6297  0EEC  0084               	movwf	4
  6298  0EED  3098               	movlw	high (_displayNum| (0+32768))
  6299  0EEE  1803               	skipnc
  6300  0EEF  3E01               	addlw	1
  6301  0EF0  0085               	movwf	5
  6302  0EF1  0800               	movf	0,w	;code access
  6303  0EF2  00EB               	movwf	??_main
  6304  0EF3  086B               	movf	??_main,w
  6305  0EF4  00A9               	movwf	_displayBuff+1
  6306  0EF5                     l8417:	
  6307                           
  6308                           ;main.c: 809:                     displayBuff[2] = displayNum[((rtcData[0x0B] >> 4) & 0x
      +                          07)];
  6309  0EF5  084D               	movf	_rtcData+11,w
  6310  0EF6  00EB               	movwf	??_main
  6311  0EF7  3004               	movlw	4
  6312  0EF8                     u7695:	
  6313  0EF8  36EB               	lsrf	??_main,f
  6314  0EF9  0B89               	decfsz	9,f
  6315  0EFA  2EF8               	goto	u7695
  6316  0EFB  086B               	movf	??_main,w
  6317  0EFC  3907               	andlw	7
  6318  0EFD  3E00               	addlw	low (_displayNum| (0+32768))
  6319  0EFE  0084               	movwf	4
  6320  0EFF  3098               	movlw	high (_displayNum| (0+32768))
  6321  0F00  1803               	skipnc
  6322  0F01  3E01               	addlw	1
  6323  0F02  0085               	movwf	5
  6324  0F03  0800               	movf	0,w	;code access
  6325  0F04  00EC               	movwf	??_main+1
  6326  0F05  086C               	movf	??_main+1,w
  6327  0F06  00AA               	movwf	_displayBuff+2
  6328                           
  6329                           ;main.c: 810:                     displayBuff[3] = displayNum[(rtcData[0x0B]& 0x0F)];
  6330  0F07  084D               	movf	_rtcData+11,w
  6331  0F08  390F               	andlw	15
  6332  0F09  3E00               	addlw	low (_displayNum| (0+32768))
  6333  0F0A  0084               	movwf	4
  6334  0F0B  3098               	movlw	high (_displayNum| (0+32768))
  6335  0F0C  1803               	skipnc
  6336  0F0D  3E01               	addlw	1
  6337  0F0E  0085               	movwf	5
  6338  0F0F  0800               	movf	0,w	;code access
  6339  0F10  00EB               	movwf	??_main
  6340  0F11  086B               	movf	??_main,w
  6341  0F12  00AB               	movwf	_displayBuff+3
  6342  0F13                     l8419:	
  6343                           
  6344                           ;main.c: 811:                     if(flag_dot_blink){
  6345  0F13  0840               	movf	_flag_dot_blink,w
  6346  0F14  1903               	btfsc	3,2
  6347  0F15  2F17               	goto	u7701
  6348  0F16  2F18               	goto	u7700
  6349  0F17                     u7701:	
  6350  0F17  2BEA               	goto	l8255
  6351  0F18                     u7700:	
  6352  0F18  2CF1               	goto	l8305
  6353  0F19                     l8425:	
  6354  0F19  300A               	movlw	10
  6355  0F1A  063F               	xorwf	_mode,w	;volatile
  6356  0F1B  1D03               	btfss	3,2
  6357  0F1C  2F1E               	goto	u7711
  6358  0F1D  2F1F               	goto	u7710
  6359  0F1E                     u7711:	
  6360  0F1E  2F69               	goto	l8441
  6361  0F1F                     u7710:	
  6362  0F1F                     l8427:	
  6363                           
  6364                           ;main.c: 818:             if(flag_time_display_update == 1){
  6365  0F1F  0341               	decf	_flag_time_display_update,w
  6366  0F20  1D03               	btfss	3,2
  6367  0F21  2F23               	goto	u7721
  6368  0F22  2F24               	goto	u7720
  6369  0F23                     u7721:	
  6370  0F23  2FB8               	goto	l8457
  6371  0F24                     u7720:	
  6372  0F24                     l1213:	
  6373                           ;main.c: 819:                 do { LATAbits.LATA7 = 1; } while(0);
  6374                           
  6375  0F24  0022               	movlb	2	; select bank2
  6376  0F25  178C               	bsf	12,7	;volatile
  6377  0F26                     l8429:	
  6378                           
  6379                           ;main.c: 820:                 displayBuff[0] = displayNum[((rtcData[0x0C] >> 4) & 0x03)]
      +                          ;
  6380  0F26  0020               	movlb	0	; select bank0
  6381  0F27  084E               	movf	_rtcData+12,w
  6382  0F28  00EB               	movwf	??_main
  6383  0F29  3004               	movlw	4
  6384  0F2A                     u7735:	
  6385  0F2A  36EB               	lsrf	??_main,f
  6386  0F2B  0B89               	decfsz	9,f
  6387  0F2C  2F2A               	goto	u7735
  6388  0F2D  086B               	movf	??_main,w
  6389  0F2E  3903               	andlw	3
  6390  0F2F  3E00               	addlw	low (_displayNum| (0+32768))
  6391  0F30  0084               	movwf	4
  6392  0F31  3098               	movlw	high (_displayNum| (0+32768))
  6393  0F32  1803               	skipnc
  6394  0F33  3E01               	addlw	1
  6395  0F34  0085               	movwf	5
  6396  0F35  0800               	movf	0,w	;code access
  6397  0F36  00EC               	movwf	??_main+1
  6398  0F37  086C               	movf	??_main+1,w
  6399  0F38  00A8               	movwf	_displayBuff
  6400  0F39                     l8431:	
  6401                           
  6402                           ;main.c: 821:                 displayBuff[1] = displayNum[(rtcData[0x0C]& 0x0F)];
  6403  0F39  084E               	movf	_rtcData+12,w
  6404  0F3A  390F               	andlw	15
  6405  0F3B  3E00               	addlw	low (_displayNum| (0+32768))
  6406  0F3C  0084               	movwf	4
  6407  0F3D  3098               	movlw	high (_displayNum| (0+32768))
  6408  0F3E  1803               	skipnc
  6409  0F3F  3E01               	addlw	1
  6410  0F40  0085               	movwf	5
  6411  0F41  0800               	movf	0,w	;code access
  6412  0F42  00EB               	movwf	??_main
  6413  0F43  086B               	movf	??_main,w
  6414  0F44  00A9               	movwf	_displayBuff+1
  6415  0F45                     l8433:	
  6416                           
  6417                           ;main.c: 822:                 displayBuff[2] = displayNum[((rtcData[0x0B] >> 4) & 0x07)]
      +                          ;
  6418  0F45  084D               	movf	_rtcData+11,w
  6419  0F46  00EB               	movwf	??_main
  6420  0F47  3004               	movlw	4
  6421  0F48                     u7745:	
  6422  0F48  36EB               	lsrf	??_main,f
  6423  0F49  0B89               	decfsz	9,f
  6424  0F4A  2F48               	goto	u7745
  6425  0F4B  086B               	movf	??_main,w
  6426  0F4C  3907               	andlw	7
  6427  0F4D  3E00               	addlw	low (_displayNum| (0+32768))
  6428  0F4E  0084               	movwf	4
  6429  0F4F  3098               	movlw	high (_displayNum| (0+32768))
  6430  0F50  1803               	skipnc
  6431  0F51  3E01               	addlw	1
  6432  0F52  0085               	movwf	5
  6433  0F53  0800               	movf	0,w	;code access
  6434  0F54  00EC               	movwf	??_main+1
  6435  0F55  086C               	movf	??_main+1,w
  6436  0F56  00AA               	movwf	_displayBuff+2
  6437                           
  6438                           ;main.c: 823:                 displayBuff[3] = displayNum[(rtcData[0x0B]& 0x0F)];
  6439  0F57  084D               	movf	_rtcData+11,w
  6440  0F58  390F               	andlw	15
  6441  0F59  3E00               	addlw	low (_displayNum| (0+32768))
  6442  0F5A  0084               	movwf	4
  6443  0F5B  3098               	movlw	high (_displayNum| (0+32768))
  6444  0F5C  1803               	skipnc
  6445  0F5D  3E01               	addlw	1
  6446  0F5E  0085               	movwf	5
  6447  0F5F  0800               	movf	0,w	;code access
  6448  0F60  00EB               	movwf	??_main
  6449  0F61  086B               	movf	??_main,w
  6450  0F62  00AB               	movwf	_displayBuff+3
  6451  0F63                     l8435:	
  6452                           
  6453                           ;main.c: 824:                 if(flag_dot_blink){
  6454  0F63  0840               	movf	_flag_dot_blink,w
  6455  0F64  1903               	btfsc	3,2
  6456  0F65  2F67               	goto	u7751
  6457  0F66  2F68               	goto	u7750
  6458  0F67                     u7751:	
  6459  0F67  2BEA               	goto	l8255
  6460  0F68                     u7750:	
  6461  0F68  2D42               	goto	l8321
  6462  0F69                     l8441:	
  6463  0F69  300B               	movlw	11
  6464  0F6A  063F               	xorwf	_mode,w	;volatile
  6465  0F6B  1D03               	btfss	3,2
  6466  0F6C  2F6E               	goto	u7761
  6467  0F6D  2F6F               	goto	u7760
  6468  0F6E                     u7761:	
  6469  0F6E  2FB8               	goto	l8457
  6470  0F6F                     u7760:	
  6471  0F6F                     l8443:	
  6472                           
  6473                           ;main.c: 830:             if(flag_time_display_update == 1){
  6474  0F6F  0341               	decf	_flag_time_display_update,w
  6475  0F70  1D03               	btfss	3,2
  6476  0F71  2F73               	goto	u7771
  6477  0F72  2F74               	goto	u7770
  6478  0F73                     u7771:	
  6479  0F73  2FB8               	goto	l8457
  6480  0F74                     u7770:	
  6481  0F74                     l1219:	
  6482                           ;main.c: 831:                 do { LATAbits.LATA7 = 0; } while(0);
  6483                           
  6484  0F74  0022               	movlb	2	; select bank2
  6485  0F75  138C               	bcf	12,7	;volatile
  6486  0F76                     l8445:	
  6487                           
  6488                           ;main.c: 832:                 bcd_temp = (uint8_t) intToBCD((uint16_t)temp_display_mode)
      +                          ;
  6489  0F76  0020               	movlb	0	; select bank0
  6490  0F77  0839               	movf	_temp_display_mode,w
  6491  0F78  00EB               	movwf	??_main
  6492  0F79  01EC               	clrf	??_main+1
  6493  0F7A  086B               	movf	??_main,w
  6494  0F7B  00DE               	movwf	intToBCD@binaryInput
  6495  0F7C  086C               	movf	??_main+1,w
  6496  0F7D  00DF               	movwf	intToBCD@binaryInput+1
  6497  0F7E  3183  2323  3188   	fcall	_intToBCD
  6498  0F81  0020               	movlb	0	; select bank0
  6499  0F82  085E               	movf	?_intToBCD,w
  6500  0F83  00ED               	movwf	??_main+2
  6501  0F84  01EE               	clrf	??_main+3
  6502  0F85  086D               	movf	??_main+2,w
  6503  0F86  00B0               	movwf	_bcd_temp
  6504  0F87  086E               	movf	??_main+3,w
  6505  0F88  00B1               	movwf	_bcd_temp+1
  6506  0F89                     l8447:	
  6507                           
  6508                           ;main.c: 833:                 displayBuff[0] = ((1 << 6) | (1 << 5) | (1 << 4) | (1 << 3
      +                          ) | (1 << 1));
  6509  0F89  307A               	movlw	122
  6510  0F8A  00EB               	movwf	??_main
  6511  0F8B  086B               	movf	??_main,w
  6512  0F8C  00A8               	movwf	_displayBuff
  6513  0F8D                     l8449:	
  6514                           
  6515                           ;main.c: 834:                 displayBuff[1] = 0x00;
  6516  0F8D  01A9               	clrf	_displayBuff+1
  6517  0F8E                     l8451:	
  6518                           
  6519                           ;main.c: 835:                 displayBuff[2] = displayNum[((bcd_temp >> 4) & 0x0F)];
  6520  0F8E  0831               	movf	_bcd_temp+1,w
  6521  0F8F  00EC               	movwf	??_main+1
  6522  0F90  0830               	movf	_bcd_temp,w
  6523  0F91  00EB               	movwf	??_main
  6524  0F92  3004               	movlw	4
  6525  0F93                     u7785:	
  6526  0F93  36EC               	lsrf	??_main+1,f
  6527  0F94  0CEB               	rrf	??_main,f
  6528  0F95  0B89               	decfsz	9,f
  6529  0F96  2F93               	goto	u7785
  6530  0F97  300F               	movlw	15
  6531  0F98  056B               	andwf	??_main,w
  6532  0F99  00ED               	movwf	??_main+2
  6533  0F9A  3000               	movlw	0
  6534  0F9B  056C               	andwf	??_main+1,w
  6535  0F9C  00EE               	movwf	??_main+3
  6536  0F9D  3000               	movlw	low (_displayNum| (0+32768))
  6537  0F9E  076D               	addwf	??_main+2,w
  6538  0F9F  0084               	movwf	4
  6539  0FA0  3098               	movlw	high (_displayNum| (0+32768))
  6540  0FA1  3D6E               	addwfc	??_main+3,w
  6541  0FA2  0085               	movwf	5
  6542  0FA3  0800               	movf	0,w	;code access
  6543  0FA4  00EF               	movwf	??_main+4
  6544  0FA5  086F               	movf	??_main+4,w
  6545  0FA6  00AA               	movwf	_displayBuff+2
  6546  0FA7                     l8453:	
  6547                           
  6548                           ;main.c: 836:                 displayBuff[3] = displayNum[(bcd_temp& 0x0F)];
  6549  0FA7  300F               	movlw	15
  6550  0FA8  0530               	andwf	_bcd_temp,w
  6551  0FA9  00EB               	movwf	??_main
  6552  0FAA  3000               	movlw	0
  6553  0FAB  0531               	andwf	_bcd_temp+1,w
  6554  0FAC  00EC               	movwf	??_main+1
  6555  0FAD  3000               	movlw	low (_displayNum| (0+32768))
  6556  0FAE  076B               	addwf	??_main,w
  6557  0FAF  0084               	movwf	4
  6558  0FB0  3098               	movlw	high (_displayNum| (0+32768))
  6559  0FB1  3D6C               	addwfc	??_main+1,w
  6560  0FB2  0085               	movwf	5
  6561  0FB3  0800               	movf	0,w	;code access
  6562  0FB4  00ED               	movwf	??_main+2
  6563  0FB5  086D               	movf	??_main+2,w
  6564  0FB6  00AB               	movwf	_displayBuff+3
  6565  0FB7  2BEA               	goto	l8255
  6566  0FB8                     l8457:	
  6567                           
  6568                           ;main.c: 843:         if(flag_alarm1){
  6569  0FB8  083C               	movf	_flag_alarm1,w
  6570  0FB9  1903               	btfsc	3,2
  6571  0FBA  2FBC               	goto	u7791
  6572  0FBB  2FBD               	goto	u7790
  6573  0FBC                     u7791:	
  6574  0FBC  2FC4               	goto	l8465
  6575  0FBD                     u7790:	
  6576  0FBD                     l8459:	
  6577                           
  6578                           ;main.c: 844:             flag_alarm1 = 0;
  6579  0FBD  01BC               	clrf	_flag_alarm1
  6580  0FBE                     l8461:	
  6581                           
  6582                           ;main.c: 846:             buzz_timeout = 30;
  6583  0FBE  301E               	movlw	30
  6584  0FBF  00EB               	movwf	??_main
  6585  0FC0  086B               	movf	??_main,w
  6586  0FC1  00B8               	movwf	_buzz_timeout
  6587  0FC2                     l8463:	
  6588  0FC2  0022               	movlb	2	; select bank2
  6589  0FC3  178D               	bsf	13,7	;volatile
  6590  0FC4                     l8465:	
  6591                           
  6592                           ;main.c: 850:         if(flag_alarm2){
  6593  0FC4  0020               	movlb	0	; select bank0
  6594  0FC5  083B               	movf	_flag_alarm2,w
  6595  0FC6  1903               	btfsc	3,2
  6596  0FC7  2FC9               	goto	u7801
  6597  0FC8  2FCA               	goto	u7800
  6598  0FC9                     u7801:	
  6599  0FC9  2FD1               	goto	l8473
  6600  0FCA                     u7800:	
  6601  0FCA                     l8467:	
  6602                           
  6603                           ;main.c: 851:             flag_alarm2 = 0;
  6604  0FCA  01BB               	clrf	_flag_alarm2
  6605  0FCB                     l8469:	
  6606                           
  6607                           ;main.c: 853:             buzz_timeout = 30;
  6608  0FCB  301E               	movlw	30
  6609  0FCC  00EB               	movwf	??_main
  6610  0FCD  086B               	movf	??_main,w
  6611  0FCE  00B8               	movwf	_buzz_timeout
  6612  0FCF                     l8471:	
  6613  0FCF  0022               	movlb	2	; select bank2
  6614  0FD0  178D               	bsf	13,7	;volatile
  6615  0FD1                     l8473:	
  6616                           
  6617                           ;main.c: 857:         if(buzz_timeout == 0) {
  6618  0FD1  0020               	movlb	0	; select bank0
  6619  0FD2  0838               	movf	_buzz_timeout,w
  6620  0FD3  1D03               	btfss	3,2
  6621  0FD4  2FD6               	goto	u7811
  6622  0FD5  2FD7               	goto	u7810
  6623  0FD6                     u7811:	
  6624  0FD6  2FD9               	goto	l8475
  6625  0FD7                     u7810:	
  6626  0FD7                     l1228:	
  6627                           ;main.c: 858:             do { LATBbits.LATB7 = 0; } while(0);
  6628                           
  6629  0FD7  0022               	movlb	2	; select bank2
  6630  0FD8  138D               	bcf	13,7	;volatile
  6631  0FD9                     l8475:	
  6632                           
  6633                           ;main.c: 864:         if((display_mode == DISPLAY_MODE_TIME_TEMP_10S_3S)
  6634  0FD9  3002               	movlw	2
  6635  0FDA  0020               	movlb	0	; select bank0
  6636  0FDB  063A               	xorwf	_display_mode,w
  6637  0FDC  1903               	btfsc	3,2
  6638  0FDD  2FDF               	goto	u7821
  6639  0FDE  2FE0               	goto	u7820
  6640  0FDF                     u7821:	
  6641  0FDF  2FEC               	goto	l8481
  6642  0FE0                     u7820:	
  6643  0FE0                     l8477:	
  6644  0FE0  3003               	movlw	3
  6645  0FE1  063A               	xorwf	_display_mode,w
  6646  0FE2  1903               	btfsc	3,2
  6647  0FE3  2FE5               	goto	u7831
  6648  0FE4  2FE6               	goto	u7830
  6649  0FE5                     u7831:	
  6650  0FE5  2FEC               	goto	l8481
  6651  0FE6                     u7830:	
  6652  0FE6                     l8479:	
  6653  0FE6  3004               	movlw	4
  6654  0FE7  063A               	xorwf	_display_mode,w
  6655  0FE8  1D03               	btfss	3,2
  6656  0FE9  2FEB               	goto	u7841
  6657  0FEA  2FEC               	goto	u7840
  6658  0FEB                     u7841:	
  6659  0FEB  2875               	goto	l1032
  6660  0FEC                     u7840:	
  6661  0FEC                     l8481:	
  6662                           
  6663                           ;main.c: 866:             || (display_mode == DISPLAY_MODE_TIME_TEMP_60S_5S)){;main.c: 8
      +                          68:             filter_temp = FIR_filter(ADC_GetConversion(channel_AN13));
  6664  0FEC  300D               	movlw	13
  6665  0FED  3187  27A0  3188   	fcall	_ADC_GetConversion
  6666  0FF0  0020               	movlb	0	; select bank0
  6667  0FF1  0857               	movf	?_ADC_GetConversion+1,w
  6668  0FF2  00DB               	movwf	FIR_filter@sample+1
  6669  0FF3  0856               	movf	?_ADC_GetConversion,w
  6670  0FF4  00DA               	movwf	FIR_filter@sample
  6671  0FF5  3180  20CF  3188   	fcall	_FIR_filter
  6672  0FF8  0020               	movlb	0	; select bank0
  6673  0FF9  085B               	movf	?_FIR_filter+1,w
  6674  0FFA  00AF               	movwf	_filter_temp+1
  6675  0FFB  085A               	movf	?_FIR_filter,w
  6676  0FFC  00AE               	movwf	_filter_temp
  6677  0FFD  2875               	goto	l1032
  6678  0FFE  3180  2844         	ljmp	start
  6679  1000                     __end_of_main:	
  6680                           
  6681                           	psect	text1
  6682  07E5                     __ptext1:	
  6683 ;; *************** function _updateRTC *****************
  6684 ;; Defined at:
  6685 ;;		line 213 in file "main.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  bcdHour         1    wreg     unsigned char 
  6688 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6700 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;Total ram usage:        3 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:   15
  6707 ;; This function calls:
  6708 ;;		_i2c_writeNBytes
  6709 ;; This function is called by:
  6710 ;;		_main
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           
  6715                           ;psect for function _updateRTC
  6716  07E5                     _updateRTC:	
  6717                           
  6718                           ;incstack = 0
  6719                           ; Regs used in _updateRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6720                           ;updateRTC@bcdHour stored from wreg
  6721  07E5  0020               	movlb	0	; select bank0
  6722  07E6  00E6               	movwf	updateRTC@bcdHour
  6723  07E7                     l7457:	
  6724                           
  6725                           ;main.c: 214:     rtcData[0] = 0x00;
  6726  07E7  01C2               	clrf	_rtcData
  6727                           
  6728                           ;main.c: 215:     rtcData[1] = 0x00;
  6729  07E8  01C3               	clrf	_rtcData+1
  6730  07E9                     l7459:	
  6731                           
  6732                           ;main.c: 216:     rtcData[2] = bcdMinute & 0x7F;
  6733  07E9  0864               	movf	updateRTC@bcdMinute,w
  6734  07EA  397F               	andlw	127
  6735  07EB  00E5               	movwf	??_updateRTC
  6736  07EC  0865               	movf	??_updateRTC,w
  6737  07ED  00C4               	movwf	_rtcData+2
  6738  07EE                     l7461:	
  6739                           
  6740                           ;main.c: 217:     rtcData[3] = bcdHour & 0x3F;
  6741  07EE  0866               	movf	updateRTC@bcdHour,w
  6742  07EF  393F               	andlw	63
  6743  07F0  00E5               	movwf	??_updateRTC
  6744  07F1  0865               	movf	??_updateRTC,w
  6745  07F2  00C5               	movwf	_rtcData+3
  6746  07F3                     l7463:	
  6747                           
  6748                           ;main.c: 218:     i2c_writeNBytes(0x68,rtcData,4);
  6749  07F3  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6750  07F4  00E5               	movwf	??_updateRTC
  6751  07F5  0865               	movf	??_updateRTC,w
  6752  07F6  00E0               	movwf	i2c_writeNBytes@data
  6753  07F7  3004               	movlw	4
  6754  07F8  00E1               	movwf	i2c_writeNBytes@len
  6755  07F9  3000               	movlw	0
  6756  07FA  00E2               	movwf	i2c_writeNBytes@len+1
  6757  07FB  3068               	movlw	104
  6758  07FC  3185  25F2  3187   	fcall	_i2c_writeNBytes
  6759  07FF                     l920:	
  6760  07FF  0008               	return
  6761  0800                     __end_of_updateRTC:	
  6762                           
  6763                           	psect	text2
  6764  17B1                     __ptext2:	
  6765 ;; *************** function _updateMonth *****************
  6766 ;; Defined at:
  6767 ;;		line 264 in file "main.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;  bcdMonth        1    wreg     unsigned char 
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;  bcdMonth        1   15[BANK0 ] unsigned char 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;Total ram usage:        2 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:   15
  6788 ;; This function calls:
  6789 ;;		_i2c_writeNBytes
  6790 ;; This function is called by:
  6791 ;;		_main
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function _updateMonth
  6797  17B1                     _updateMonth:	
  6798                           
  6799                           ;incstack = 0
  6800                           ; Regs used in _updateMonth: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6801                           ;updateMonth@bcdMonth stored from wreg
  6802  17B1  0020               	movlb	0	; select bank0
  6803  17B2  00E5               	movwf	updateMonth@bcdMonth
  6804  17B3                     l7497:	
  6805                           
  6806                           ;main.c: 265:     rtcData[0] = 0x05;
  6807  17B3  3005               	movlw	5
  6808  17B4  00E4               	movwf	??_updateMonth
  6809  17B5  0864               	movf	??_updateMonth,w
  6810  17B6  00C2               	movwf	_rtcData
  6811  17B7                     l7499:	
  6812                           
  6813                           ;main.c: 266:     rtcData[1] = bcdMonth & 0x9F;
  6814  17B7  0865               	movf	updateMonth@bcdMonth,w
  6815  17B8  399F               	andlw	159
  6816  17B9  00E4               	movwf	??_updateMonth
  6817  17BA  0864               	movf	??_updateMonth,w
  6818  17BB  00C3               	movwf	_rtcData+1
  6819  17BC                     l7501:	
  6820                           
  6821                           ;main.c: 267:     i2c_writeNBytes(0x68,rtcData,2);
  6822  17BC  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6823  17BD  00E4               	movwf	??_updateMonth
  6824  17BE  0864               	movf	??_updateMonth,w
  6825  17BF  00E0               	movwf	i2c_writeNBytes@data
  6826  17C0  3002               	movlw	2
  6827  17C1  00E1               	movwf	i2c_writeNBytes@len
  6828  17C2  3000               	movlw	0
  6829  17C3  00E2               	movwf	i2c_writeNBytes@len+1
  6830  17C4  3068               	movlw	104
  6831  17C5  3185  25F2  3197   	fcall	_i2c_writeNBytes
  6832  17C8                     l944:	
  6833  17C8  0008               	return
  6834  17C9                     __end_of_updateMonth:	
  6835                           
  6836                           	psect	text3
  6837  1799                     __ptext3:	
  6838 ;; *************** function _updateDate *****************
  6839 ;; Defined at:
  6840 ;;		line 258 in file "main.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  bcdDate         1    wreg     unsigned char 
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;  bcdDate         1   15[BANK0 ] unsigned char 
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;Total ram usage:        2 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:   15
  6861 ;; This function calls:
  6862 ;;		_i2c_writeNBytes
  6863 ;; This function is called by:
  6864 ;;		_main
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           
  6869                           ;psect for function _updateDate
  6870  1799                     _updateDate:	
  6871                           
  6872                           ;incstack = 0
  6873                           ; Regs used in _updateDate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6874                           ;updateDate@bcdDate stored from wreg
  6875  1799  0020               	movlb	0	; select bank0
  6876  179A  00E5               	movwf	updateDate@bcdDate
  6877  179B                     l7491:	
  6878                           
  6879                           ;main.c: 259:     rtcData[0] = 0x04;
  6880  179B  3004               	movlw	4
  6881  179C  00E4               	movwf	??_updateDate
  6882  179D  0864               	movf	??_updateDate,w
  6883  179E  00C2               	movwf	_rtcData
  6884  179F                     l7493:	
  6885                           
  6886                           ;main.c: 260:     rtcData[1] = bcdDate & 0x3F;
  6887  179F  0865               	movf	updateDate@bcdDate,w
  6888  17A0  393F               	andlw	63
  6889  17A1  00E4               	movwf	??_updateDate
  6890  17A2  0864               	movf	??_updateDate,w
  6891  17A3  00C3               	movwf	_rtcData+1
  6892  17A4                     l7495:	
  6893                           
  6894                           ;main.c: 261:     i2c_writeNBytes(0x68,rtcData,2);
  6895  17A4  3042               	movlw	(low (_rtcData| 0))& (0+255)
  6896  17A5  00E4               	movwf	??_updateDate
  6897  17A6  0864               	movf	??_updateDate,w
  6898  17A7  00E0               	movwf	i2c_writeNBytes@data
  6899  17A8  3002               	movlw	2
  6900  17A9  00E1               	movwf	i2c_writeNBytes@len
  6901  17AA  3000               	movlw	0
  6902  17AB  00E2               	movwf	i2c_writeNBytes@len+1
  6903  17AC  3068               	movlw	104
  6904  17AD  3185  25F2  3197   	fcall	_i2c_writeNBytes
  6905  17B0                     l941:	
  6906  17B0  0008               	return
  6907  17B1                     __end_of_updateDate:	
  6908                           
  6909                           	psect	text4
  6910  0670                     __ptext4:	
  6911 ;; *************** function _updateAlarm2 *****************
  6912 ;; Defined at:
  6913 ;;		line 233 in file "main.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  bcdHour         1    wreg     unsigned char 
  6916 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6928 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;Total ram usage:        3 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:   15
  6935 ;; This function calls:
  6936 ;;		_i2c_writeNBytes
  6937 ;; This function is called by:
  6938 ;;		_main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _updateAlarm2
  6944  0670                     _updateAlarm2:	
  6945                           
  6946                           ;incstack = 0
  6947                           ; Regs used in _updateAlarm2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6948                           ;updateAlarm2@bcdHour stored from wreg
  6949  0670  0020               	movlb	0	; select bank0
  6950  0671  00E6               	movwf	updateAlarm2@bcdHour
  6951  0672                     l7475:	
  6952                           
  6953                           ;main.c: 234:     rtcData[0] = 0x0B;
  6954  0672  300B               	movlw	11
  6955  0673  00E5               	movwf	??_updateAlarm2
  6956  0674  0865               	movf	??_updateAlarm2,w
  6957  0675  00C2               	movwf	_rtcData
  6958                           
  6959                           ;main.c: 235:     rtcData[1] = bcdMinute;
  6960  0676  0864               	movf	updateAlarm2@bcdMinute,w
  6961  0677  00E5               	movwf	??_updateAlarm2
  6962  0678  0865               	movf	??_updateAlarm2,w
  6963  0679  00C3               	movwf	_rtcData+1
  6964  067A                     l7477:	
  6965                           
  6966                           ;main.c: 236:     rtcData[2] = bcdHour & 0xBF;
  6967  067A  0866               	movf	updateAlarm2@bcdHour,w
  6968  067B  39BF               	andlw	191
  6969  067C  00E5               	movwf	??_updateAlarm2
  6970  067D  0865               	movf	??_updateAlarm2,w
  6971  067E  00C4               	movwf	_rtcData+2
  6972  067F                     l7479:	
  6973                           
  6974                           ;main.c: 237:     if((bcdMinute != 0) || (bcdHour != 0)){
  6975  067F  0864               	movf	updateAlarm2@bcdMinute,w
  6976  0680  1D03               	btfss	3,2
  6977  0681  2E83               	goto	u5861
  6978  0682  2E84               	goto	u5860
  6979  0683                     u5861:	
  6980  0683  2E89               	goto	l931
  6981  0684                     u5860:	
  6982  0684                     l7481:	
  6983  0684  0866               	movf	updateAlarm2@bcdHour,w
  6984  0685  1903               	btfsc	3,2
  6985  0686  2E88               	goto	u5871
  6986  0687  2E89               	goto	u5870
  6987  0688                     u5871:	
  6988  0688  2E8B               	goto	l7483
  6989  0689                     u5870:	
  6990  0689                     l931:	
  6991                           
  6992                           ;main.c: 239:         rtcData[1] |= 0x80;
  6993  0689  17C3               	bsf	_rtcData+1,7
  6994                           
  6995                           ;main.c: 240:         rtcData[2] |= 0x80;
  6996  068A  17C4               	bsf	_rtcData+2,7
  6997  068B                     l7483:	
  6998                           
  6999                           ;main.c: 242:     i2c_writeNBytes(0x68,rtcData,3);
  7000  068B  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7001  068C  00E5               	movwf	??_updateAlarm2
  7002  068D  0865               	movf	??_updateAlarm2,w
  7003  068E  00E0               	movwf	i2c_writeNBytes@data
  7004  068F  3003               	movlw	3
  7005  0690  00E1               	movwf	i2c_writeNBytes@len
  7006  0691  3000               	movlw	0
  7007  0692  00E2               	movwf	i2c_writeNBytes@len+1
  7008  0693  3068               	movlw	104
  7009  0694  3185  25F2  3186   	fcall	_i2c_writeNBytes
  7010  0697                     l932:	
  7011  0697  0008               	return
  7012  0698                     __end_of_updateAlarm2:	
  7013                           
  7014                           	psect	text5
  7015  0698                     __ptext5:	
  7016 ;; *************** function _updateAlarm1 *****************
  7017 ;; Defined at:
  7018 ;;		line 221 in file "main.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  bcdHour         1    wreg     unsigned char 
  7021 ;;  bcdMinute       1   14[BANK0 ] unsigned char 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  bcdHour         1   16[BANK0 ] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      void 
  7026 ;; Registers used:
  7027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7033 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;Total ram usage:        3 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:   15
  7040 ;; This function calls:
  7041 ;;		_i2c_writeNBytes
  7042 ;; This function is called by:
  7043 ;;		_main
  7044 ;; This function uses a non-reentrant model
  7045 ;;
  7046                           
  7047                           
  7048                           ;psect for function _updateAlarm1
  7049  0698                     _updateAlarm1:	
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _updateAlarm1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7053                           ;updateAlarm1@bcdHour stored from wreg
  7054  0698  0020               	movlb	0	; select bank0
  7055  0699  00E6               	movwf	updateAlarm1@bcdHour
  7056  069A                     l7465:	
  7057                           
  7058                           ;main.c: 222:     rtcData[0] = 0x08;
  7059  069A  3008               	movlw	8
  7060  069B  00E5               	movwf	??_updateAlarm1
  7061  069C  0865               	movf	??_updateAlarm1,w
  7062  069D  00C2               	movwf	_rtcData
  7063                           
  7064                           ;main.c: 223:     rtcData[1] = bcdMinute;
  7065  069E  0864               	movf	updateAlarm1@bcdMinute,w
  7066  069F  00E5               	movwf	??_updateAlarm1
  7067  06A0  0865               	movf	??_updateAlarm1,w
  7068  06A1  00C3               	movwf	_rtcData+1
  7069  06A2                     l7467:	
  7070                           
  7071                           ;main.c: 224:     rtcData[2] = (bcdHour & 0xBF) ;
  7072  06A2  0866               	movf	updateAlarm1@bcdHour,w
  7073  06A3  39BF               	andlw	191
  7074  06A4  00E5               	movwf	??_updateAlarm1
  7075  06A5  0865               	movf	??_updateAlarm1,w
  7076  06A6  00C4               	movwf	_rtcData+2
  7077  06A7                     l7469:	
  7078                           
  7079                           ;main.c: 225:     if((bcdMinute != 0) || (bcdHour != 0)){
  7080  06A7  0864               	movf	updateAlarm1@bcdMinute,w
  7081  06A8  1D03               	btfss	3,2
  7082  06A9  2EAB               	goto	u5841
  7083  06AA  2EAC               	goto	u5840
  7084  06AB                     u5841:	
  7085  06AB  2EB1               	goto	l925
  7086  06AC                     u5840:	
  7087  06AC                     l7471:	
  7088  06AC  0866               	movf	updateAlarm1@bcdHour,w
  7089  06AD  1903               	btfsc	3,2
  7090  06AE  2EB0               	goto	u5851
  7091  06AF  2EB1               	goto	u5850
  7092  06B0                     u5851:	
  7093  06B0  2EB3               	goto	l7473
  7094  06B1                     u5850:	
  7095  06B1                     l925:	
  7096                           
  7097                           ;main.c: 227:         rtcData[1] |= 0x80;
  7098  06B1  17C3               	bsf	_rtcData+1,7
  7099                           
  7100                           ;main.c: 228:         rtcData[2] |= 0x80;
  7101  06B2  17C4               	bsf	_rtcData+2,7
  7102  06B3                     l7473:	
  7103                           
  7104                           ;main.c: 230:     i2c_writeNBytes(0x68,rtcData,3);
  7105  06B3  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7106  06B4  00E5               	movwf	??_updateAlarm1
  7107  06B5  0865               	movf	??_updateAlarm1,w
  7108  06B6  00E0               	movwf	i2c_writeNBytes@data
  7109  06B7  3003               	movlw	3
  7110  06B8  00E1               	movwf	i2c_writeNBytes@len
  7111  06B9  3000               	movlw	0
  7112  06BA  00E2               	movwf	i2c_writeNBytes@len+1
  7113  06BB  3068               	movlw	104
  7114  06BC  3185  25F2  3186   	fcall	_i2c_writeNBytes
  7115  06BF                     l926:	
  7116  06BF  0008               	return
  7117  06C0                     __end_of_updateAlarm1:	
  7118                           
  7119                           	psect	text6
  7120  0323                     __ptext6:	
  7121 ;; *************** function _intToBCD *****************
  7122 ;; Defined at:
  7123 ;;		line 347 in file "main.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;  binaryInput     2    8[BANK0 ] unsigned short 
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;  shift           2   15[BANK0 ] unsigned short 
  7128 ;;  bcdResult       2   13[BANK0 ] unsigned short 
  7129 ;; Return value:  Size  Location     Type
  7130 ;;                  2    8[BANK0 ] unsigned short 
  7131 ;; Registers used:
  7132 ;;		wreg, status,2, status,0, pclath, cstack
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7138 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;Total ram usage:        9 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    7
  7145 ;; This function calls:
  7146 ;;		___lwdiv
  7147 ;;		___lwmod
  7148 ;; This function is called by:
  7149 ;;		_main
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           
  7154                           ;psect for function _intToBCD
  7155  0323                     _intToBCD:	
  7156  0323                     l7723:	
  7157                           ;incstack = 0
  7158                           ; Regs used in _intToBCD: [wreg+status,2+status,0+pclath+cstack]
  7159                           
  7160                           
  7161                           ;main.c: 348:     uint16_t bcdResult = 0;
  7162  0323  0020               	movlb	0	; select bank0
  7163  0324  01E3               	clrf	intToBCD@bcdResult
  7164  0325  01E4               	clrf	intToBCD@bcdResult+1
  7165                           
  7166                           ;main.c: 349:     uint16_t shift = 0;
  7167  0326  01E5               	clrf	intToBCD@shift
  7168  0327  01E6               	clrf	intToBCD@shift+1
  7169                           
  7170                           ;main.c: 351:     while (binaryInput > 0) {
  7171  0328  2B5F               	goto	l7731
  7172  0329                     l7725:	
  7173                           
  7174                           ;main.c: 352:       bcdResult |= (binaryInput % 10) << (shift++ << 2);
  7175  0329  300A               	movlw	10
  7176  032A  00D6               	movwf	___lwmod@divisor
  7177  032B  3000               	movlw	0
  7178  032C  00D7               	movwf	___lwmod@divisor+1
  7179  032D  085F               	movf	intToBCD@binaryInput+1,w
  7180  032E  00D9               	movwf	___lwmod@dividend+1
  7181  032F  085E               	movf	intToBCD@binaryInput,w
  7182  0330  00D8               	movwf	___lwmod@dividend
  7183  0331  3184  24CA  3183   	fcall	___lwmod
  7184  0334  0020               	movlb	0	; select bank0
  7185  0335  0856               	movf	?___lwmod,w
  7186  0336  00E0               	movwf	??_intToBCD
  7187  0337  0857               	movf	?___lwmod+1,w
  7188  0338  00E1               	movwf	??_intToBCD+1
  7189  0339  0865               	movf	intToBCD@shift,w
  7190  033A  00E2               	movwf	??_intToBCD+2
  7191  033B  3001               	movlw	1
  7192  033C                     u6185:	
  7193  033C  35E2               	lslf	??_intToBCD+2,f
  7194  033D  3EFF               	addlw	-1
  7195  033E  1D03               	skipz
  7196  033F  2B3C               	goto	u6185
  7197  0340  3562               	lslf	??_intToBCD+2,w
  7198  0341  0A89               	incf	9,f
  7199  0342  2B45               	goto	u6194
  7200  0343                     u6195:	
  7201  0343  35E0               	lslf	??_intToBCD,f
  7202  0344  0DE1               	rlf	??_intToBCD+1,f
  7203  0345                     u6194:	
  7204  0345  0B89               	decfsz	9,f
  7205  0346  2B43               	goto	u6195
  7206  0347  0860               	movf	??_intToBCD,w
  7207  0348  04E3               	iorwf	intToBCD@bcdResult,f
  7208  0349  0861               	movf	??_intToBCD+1,w
  7209  034A  04E4               	iorwf	intToBCD@bcdResult+1,f
  7210  034B                     l7727:	
  7211  034B  3001               	movlw	1
  7212  034C  07E5               	addwf	intToBCD@shift,f
  7213  034D  3000               	movlw	0
  7214  034E  3DE6               	addwfc	intToBCD@shift+1,f
  7215  034F                     l7729:	
  7216                           
  7217                           ;main.c: 353:       binaryInput /= 10;
  7218  034F  300A               	movlw	10
  7219  0350  00D6               	movwf	___lwdiv@divisor
  7220  0351  3000               	movlw	0
  7221  0352  00D7               	movwf	___lwdiv@divisor+1
  7222  0353  085F               	movf	intToBCD@binaryInput+1,w
  7223  0354  00D9               	movwf	___lwdiv@dividend+1
  7224  0355  085E               	movf	intToBCD@binaryInput,w
  7225  0356  00D8               	movwf	___lwdiv@dividend
  7226  0357  3183  23A8  3183   	fcall	___lwdiv
  7227  035A  0020               	movlb	0	; select bank0
  7228  035B  0857               	movf	?___lwdiv+1,w
  7229  035C  00DF               	movwf	intToBCD@binaryInput+1
  7230  035D  0856               	movf	?___lwdiv,w
  7231  035E  00DE               	movwf	intToBCD@binaryInput
  7232  035F                     l7731:	
  7233                           
  7234                           ;main.c: 351:     while (binaryInput > 0) {
  7235  035F  085E               	movf	intToBCD@binaryInput,w
  7236  0360  045F               	iorwf	intToBCD@binaryInput+1,w
  7237  0361  1D03               	btfss	3,2
  7238  0362  2B64               	goto	u6201
  7239  0363  2B65               	goto	u6200
  7240  0364                     u6201:	
  7241  0364  2B29               	goto	l7725
  7242  0365                     u6200:	
  7243  0365                     l7733:	
  7244                           
  7245                           ;main.c: 356:     return bcdResult;
  7246  0365  0864               	movf	intToBCD@bcdResult+1,w
  7247  0366  00DF               	movwf	?_intToBCD+1
  7248  0367  0863               	movf	intToBCD@bcdResult,w
  7249  0368  00DE               	movwf	?_intToBCD
  7250  0369                     l1008:	
  7251  0369  0008               	return
  7252  036A                     __end_of_intToBCD:	
  7253                           
  7254                           	psect	text7
  7255  04CA                     __ptext7:	
  7256 ;; *************** function ___lwmod *****************
  7257 ;; Defined at:
  7258 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lwmod.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;  divisor         2    0[BANK0 ] unsigned int 
  7261 ;;  dividend        2    2[BANK0 ] unsigned int 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;  counter         1    5[BANK0 ] unsigned char 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  2    0[BANK0 ] unsigned int 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;Total ram usage:        6 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    6
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_intToBCD
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function ___lwmod
  7289  04CA                     ___lwmod:	
  7290  04CA                     l7227:	
  7291                           ;incstack = 0
  7292                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7293                           
  7294  04CA  0020               	movlb	0	; select bank0
  7295  04CB  0856               	movf	___lwmod@divisor,w
  7296  04CC  0457               	iorwf	___lwmod@divisor+1,w
  7297  04CD  1903               	btfsc	3,2
  7298  04CE  2CD0               	goto	u5711
  7299  04CF  2CD1               	goto	u5710
  7300  04D0                     u5711:	
  7301  04D0  2CFA               	goto	l7245
  7302  04D1                     u5710:	
  7303  04D1                     l7229:	
  7304  04D1  01DB               	clrf	___lwmod@counter
  7305  04D2  0ADB               	incf	___lwmod@counter,f
  7306  04D3  2CDD               	goto	l7235
  7307  04D4                     l7231:	
  7308  04D4  3001               	movlw	1
  7309  04D5                     u5725:	
  7310  04D5  35D6               	lslf	___lwmod@divisor,f
  7311  04D6  0DD7               	rlf	___lwmod@divisor+1,f
  7312  04D7  0B89               	decfsz	9,f
  7313  04D8  2CD5               	goto	u5725
  7314  04D9                     l7233:	
  7315  04D9  3001               	movlw	1
  7316  04DA  00DA               	movwf	??___lwmod
  7317  04DB  085A               	movf	??___lwmod,w
  7318  04DC  07DB               	addwf	___lwmod@counter,f
  7319  04DD                     l7235:	
  7320  04DD  1FD7               	btfss	___lwmod@divisor+1,7
  7321  04DE  2CE0               	goto	u5731
  7322  04DF  2CE1               	goto	u5730
  7323  04E0                     u5731:	
  7324  04E0  2CD4               	goto	l7231
  7325  04E1                     u5730:	
  7326  04E1                     l7237:	
  7327  04E1  0857               	movf	___lwmod@divisor+1,w
  7328  04E2  0259               	subwf	___lwmod@dividend+1,w
  7329  04E3  1D03               	skipz
  7330  04E4  2CE7               	goto	u5745
  7331  04E5  0856               	movf	___lwmod@divisor,w
  7332  04E6  0258               	subwf	___lwmod@dividend,w
  7333  04E7                     u5745:	
  7334  04E7  1C03               	skipc
  7335  04E8  2CEA               	goto	u5741
  7336  04E9  2CEB               	goto	u5740
  7337  04EA                     u5741:	
  7338  04EA  2CEF               	goto	l7241
  7339  04EB                     u5740:	
  7340  04EB                     l7239:	
  7341  04EB  0856               	movf	___lwmod@divisor,w
  7342  04EC  02D8               	subwf	___lwmod@dividend,f
  7343  04ED  0857               	movf	___lwmod@divisor+1,w
  7344  04EE  3BD9               	subwfb	___lwmod@dividend+1,f
  7345  04EF                     l7241:	
  7346  04EF  3001               	movlw	1
  7347  04F0                     u5755:	
  7348  04F0  36D7               	lsrf	___lwmod@divisor+1,f
  7349  04F1  0CD6               	rrf	___lwmod@divisor,f
  7350  04F2  0B89               	decfsz	9,f
  7351  04F3  2CF0               	goto	u5755
  7352  04F4                     l7243:	
  7353  04F4  3001               	movlw	1
  7354  04F5  02DB               	subwf	___lwmod@counter,f
  7355  04F6  1D03               	btfss	3,2
  7356  04F7  2CF9               	goto	u5761
  7357  04F8  2CFA               	goto	u5760
  7358  04F9                     u5761:	
  7359  04F9  2CE1               	goto	l7237
  7360  04FA                     u5760:	
  7361  04FA                     l7245:	
  7362  04FA  0859               	movf	___lwmod@dividend+1,w
  7363  04FB  00D7               	movwf	?___lwmod+1
  7364  04FC  0858               	movf	___lwmod@dividend,w
  7365  04FD  00D6               	movwf	?___lwmod
  7366  04FE                     l1723:	
  7367  04FE  0008               	return
  7368  04FF                     __end_of___lwmod:	
  7369                           
  7370                           	psect	text8
  7371  03A8                     __ptext8:	
  7372 ;; *************** function ___lwdiv *****************
  7373 ;; Defined at:
  7374 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lwdiv.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;  divisor         2    0[BANK0 ] unsigned int 
  7377 ;;  dividend        2    2[BANK0 ] unsigned int 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  quotient        2    6[BANK0 ] unsigned int 
  7380 ;;  counter         1    5[BANK0 ] unsigned char 
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  2    0[BANK0 ] unsigned int 
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;Total ram usage:        8 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    6
  7397 ;; This function calls:
  7398 ;;		Nothing
  7399 ;; This function is called by:
  7400 ;;		_intToBCD
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function ___lwdiv
  7406  03A8                     ___lwdiv:	
  7407  03A8                     l7201:	
  7408                           ;incstack = 0
  7409                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7410                           
  7411  03A8  0020               	movlb	0	; select bank0
  7412  03A9  01DC               	clrf	___lwdiv@quotient
  7413  03AA  01DD               	clrf	___lwdiv@quotient+1
  7414  03AB                     l7203:	
  7415  03AB  0856               	movf	___lwdiv@divisor,w
  7416  03AC  0457               	iorwf	___lwdiv@divisor+1,w
  7417  03AD  1903               	btfsc	3,2
  7418  03AE  2BB0               	goto	u5641
  7419  03AF  2BB1               	goto	u5640
  7420  03B0                     u5641:	
  7421  03B0  2BE0               	goto	l7223
  7422  03B1                     u5640:	
  7423  03B1                     l7205:	
  7424  03B1  01DB               	clrf	___lwdiv@counter
  7425  03B2  0ADB               	incf	___lwdiv@counter,f
  7426  03B3  2BBD               	goto	l7211
  7427  03B4                     l7207:	
  7428  03B4  3001               	movlw	1
  7429  03B5                     u5655:	
  7430  03B5  35D6               	lslf	___lwdiv@divisor,f
  7431  03B6  0DD7               	rlf	___lwdiv@divisor+1,f
  7432  03B7  0B89               	decfsz	9,f
  7433  03B8  2BB5               	goto	u5655
  7434  03B9                     l7209:	
  7435  03B9  3001               	movlw	1
  7436  03BA  00DA               	movwf	??___lwdiv
  7437  03BB  085A               	movf	??___lwdiv,w
  7438  03BC  07DB               	addwf	___lwdiv@counter,f
  7439  03BD                     l7211:	
  7440  03BD  1FD7               	btfss	___lwdiv@divisor+1,7
  7441  03BE  2BC0               	goto	u5661
  7442  03BF  2BC1               	goto	u5660
  7443  03C0                     u5661:	
  7444  03C0  2BB4               	goto	l7207
  7445  03C1                     u5660:	
  7446  03C1                     l7213:	
  7447  03C1  3001               	movlw	1
  7448  03C2                     u5675:	
  7449  03C2  35DC               	lslf	___lwdiv@quotient,f
  7450  03C3  0DDD               	rlf	___lwdiv@quotient+1,f
  7451  03C4  0B89               	decfsz	9,f
  7452  03C5  2BC2               	goto	u5675
  7453  03C6  0857               	movf	___lwdiv@divisor+1,w
  7454  03C7  0259               	subwf	___lwdiv@dividend+1,w
  7455  03C8  1D03               	skipz
  7456  03C9  2BCC               	goto	u5685
  7457  03CA  0856               	movf	___lwdiv@divisor,w
  7458  03CB  0258               	subwf	___lwdiv@dividend,w
  7459  03CC                     u5685:	
  7460  03CC  1C03               	skipc
  7461  03CD  2BCF               	goto	u5681
  7462  03CE  2BD0               	goto	u5680
  7463  03CF                     u5681:	
  7464  03CF  2BD5               	goto	l7219
  7465  03D0                     u5680:	
  7466  03D0                     l7215:	
  7467  03D0  0856               	movf	___lwdiv@divisor,w
  7468  03D1  02D8               	subwf	___lwdiv@dividend,f
  7469  03D2  0857               	movf	___lwdiv@divisor+1,w
  7470  03D3  3BD9               	subwfb	___lwdiv@dividend+1,f
  7471  03D4                     l7217:	
  7472  03D4  145C               	bsf	___lwdiv@quotient,0
  7473  03D5                     l7219:	
  7474  03D5  3001               	movlw	1
  7475  03D6                     u5695:	
  7476  03D6  36D7               	lsrf	___lwdiv@divisor+1,f
  7477  03D7  0CD6               	rrf	___lwdiv@divisor,f
  7478  03D8  0B89               	decfsz	9,f
  7479  03D9  2BD6               	goto	u5695
  7480  03DA                     l7221:	
  7481  03DA  3001               	movlw	1
  7482  03DB  02DB               	subwf	___lwdiv@counter,f
  7483  03DC  1D03               	btfss	3,2
  7484  03DD  2BDF               	goto	u5701
  7485  03DE  2BE0               	goto	u5700
  7486  03DF                     u5701:	
  7487  03DF  2BC1               	goto	l7213
  7488  03E0                     u5700:	
  7489  03E0                     l7223:	
  7490  03E0  085D               	movf	___lwdiv@quotient+1,w
  7491  03E1  00D7               	movwf	?___lwdiv+1
  7492  03E2  085C               	movf	___lwdiv@quotient,w
  7493  03E3  00D6               	movwf	?___lwdiv
  7494  03E4                     l1713:	
  7495  03E4  0008               	return
  7496  03E5                     __end_of___lwdiv:	
  7497                           
  7498                           	psect	text9
  7499  0186                     __ptext9:	
  7500 ;; *************** function _initRTC *****************
  7501 ;; Defined at:
  7502 ;;		line 162 in file "main.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;		None
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;		None
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  1    wreg      void 
  7509 ;; Registers used:
  7510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;Total ram usage:        2 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:   15
  7523 ;; This function calls:
  7524 ;;		_i2c_readDataBlock
  7525 ;;		_i2c_writeNBytes
  7526 ;; This function is called by:
  7527 ;;		_main
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _initRTC
  7533  0186                     _initRTC:	
  7534  0186                     l7415:	
  7535                           ;incstack = 0
  7536                           ; Regs used in _initRTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7537                           
  7538                           
  7539                           ;main.c: 163:     _delay((unsigned long)((30)*(32000000/4000.0)));
  7540  0186  3002               	movlw	2
  7541  0187  0020               	movlb	0	; select bank0
  7542  0188  00EA               	movwf	??_initRTC+1
  7543  0189  3038               	movlw	56
  7544  018A  00E9               	movwf	??_initRTC
  7545  018B  30AD               	movlw	173
  7546  018C                     u7857:	
  7547  018C  0B89               	decfsz	9,f
  7548  018D  298C               	goto	u7857
  7549  018E  0BE9               	decfsz	??_initRTC,f
  7550  018F  298C               	goto	u7857
  7551  0190  0BEA               	decfsz	??_initRTC+1,f
  7552  0191  298C               	goto	u7857
  7553  0192                     l7417:	
  7554                           
  7555                           ;main.c: 167:     i2c_readDataBlock(0x68,0x00,rtcData,sizeof(rtcData));
  7556  0192  0020               	movlb	0	; select bank0
  7557  0193  01E0               	clrf	i2c_readDataBlock@reg
  7558  0194  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7559  0195  00E9               	movwf	??_initRTC
  7560  0196  0869               	movf	??_initRTC,w
  7561  0197  00E1               	movwf	i2c_readDataBlock@data
  7562  0198  3014               	movlw	20
  7563  0199  00E2               	movwf	i2c_readDataBlock@len
  7564  019A  3000               	movlw	0
  7565  019B  00E3               	movwf	i2c_readDataBlock@len+1
  7566  019C  3068               	movlw	104
  7567  019D  3183  236A  3181   	fcall	_i2c_readDataBlock
  7568  01A0                     l7419:	
  7569                           
  7570                           ;main.c: 170:     if((rtcData[0x0F] & 0x80) == 0x80){
  7571  01A0  0020               	movlb	0	; select bank0
  7572  01A1  1FD1               	btfss	_rtcData+15,7
  7573  01A2  29A4               	goto	u5821
  7574  01A3  29A5               	goto	u5820
  7575  01A4                     u5821:	
  7576  01A4  29C9               	goto	l914
  7577  01A5                     u5820:	
  7578  01A5                     l7421:	
  7579                           
  7580                           ;main.c: 171:         rtcData[0] = 0x00;
  7581  01A5  01C2               	clrf	_rtcData
  7582                           
  7583                           ;main.c: 172:         rtcData[0x00 +1] = 0x00;
  7584  01A6  01C3               	clrf	_rtcData+1
  7585                           
  7586                           ;main.c: 173:         rtcData[0x01 +1] = 0x00;
  7587  01A7  01C4               	clrf	_rtcData+2
  7588                           
  7589                           ;main.c: 174:         rtcData[0x02 +1] = 0x00;
  7590  01A8  01C5               	clrf	_rtcData+3
  7591  01A9                     l7423:	
  7592                           
  7593                           ;main.c: 175:         rtcData[0x03 +1] = 0x01;
  7594  01A9  01C6               	clrf	_rtcData+4
  7595  01AA  0AC6               	incf	_rtcData+4,f
  7596  01AB                     l7425:	
  7597                           
  7598                           ;main.c: 176:         rtcData[0x04 +1] = 0x01;
  7599  01AB  01C7               	clrf	_rtcData+5
  7600  01AC  0AC7               	incf	_rtcData+5,f
  7601  01AD                     l7427:	
  7602                           
  7603                           ;main.c: 177:         rtcData[0x05 +1] = 0x01;
  7604  01AD  01C8               	clrf	_rtcData+6
  7605  01AE  0AC8               	incf	_rtcData+6,f
  7606  01AF                     l7429:	
  7607                           
  7608                           ;main.c: 178:         rtcData[0x06 +1] = 0x20;
  7609  01AF  3020               	movlw	32
  7610  01B0  00E9               	movwf	??_initRTC
  7611  01B1  0869               	movf	??_initRTC,w
  7612  01B2  00C9               	movwf	_rtcData+7
  7613  01B3                     l7431:	
  7614                           
  7615                           ;main.c: 179:         rtcData[0x07 +1] = 0x00;
  7616  01B3  01CA               	clrf	_rtcData+8
  7617  01B4                     l7433:	
  7618                           
  7619                           ;main.c: 180:         rtcData[0x08 +1] = 0x00;
  7620  01B4  01CB               	clrf	_rtcData+9
  7621  01B5                     l7435:	
  7622                           
  7623                           ;main.c: 181:         rtcData[0x09 +1] = 0x00;
  7624  01B5  01CC               	clrf	_rtcData+10
  7625  01B6                     l7437:	
  7626                           
  7627                           ;main.c: 182:         rtcData[0x0A +1] = 0x00;
  7628  01B6  01CD               	clrf	_rtcData+11
  7629  01B7                     l7439:	
  7630                           
  7631                           ;main.c: 183:         rtcData[0x0B +1] = 0x00;
  7632  01B7  01CE               	clrf	_rtcData+12
  7633  01B8                     l7441:	
  7634                           
  7635                           ;main.c: 184:         rtcData[0x09 +1] = 0x00;
  7636  01B8  01CC               	clrf	_rtcData+10
  7637  01B9                     l7443:	
  7638                           
  7639                           ;main.c: 185:         rtcData[0x0A +1] = 0x00;
  7640  01B9  01CD               	clrf	_rtcData+11
  7641  01BA                     l7445:	
  7642                           
  7643                           ;main.c: 186:         rtcData[0x0E +1] = 0x00;
  7644  01BA  01D1               	clrf	_rtcData+15
  7645  01BB                     l7447:	
  7646                           
  7647                           ;main.c: 187:         rtcData[0x0F +1] = 0x00;
  7648  01BB  01D2               	clrf	_rtcData+16
  7649  01BC                     l7449:	
  7650                           
  7651                           ;main.c: 189:         i2c_writeNBytes(0x68,rtcData,sizeof(rtcData));
  7652  01BC  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7653  01BD  00E9               	movwf	??_initRTC
  7654  01BE  0869               	movf	??_initRTC,w
  7655  01BF  00E0               	movwf	i2c_writeNBytes@data
  7656  01C0  3014               	movlw	20
  7657  01C1  00E1               	movwf	i2c_writeNBytes@len
  7658  01C2  3000               	movlw	0
  7659  01C3  00E2               	movwf	i2c_writeNBytes@len+1
  7660  01C4  3068               	movlw	104
  7661  01C5  3185  25F2  3181   	fcall	_i2c_writeNBytes
  7662                           
  7663                           ;main.c: 190:     } else if((rtcData[0x0E] & 0x04) == 0x04){
  7664  01C8  29DE               	goto	l917
  7665  01C9                     l914:	
  7666  01C9  1D50               	btfss	_rtcData+14,2
  7667  01CA  29CC               	goto	u5831
  7668  01CB  29CD               	goto	u5830
  7669  01CC                     u5831:	
  7670  01CC  29DE               	goto	l917
  7671  01CD                     u5830:	
  7672  01CD                     l7451:	
  7673                           
  7674                           ;main.c: 191:         rtcData[0] = 0x0E;
  7675  01CD  300E               	movlw	14
  7676  01CE  00E9               	movwf	??_initRTC
  7677  01CF  0869               	movf	??_initRTC,w
  7678  01D0  00C2               	movwf	_rtcData
  7679  01D1                     l7453:	
  7680                           
  7681                           ;main.c: 192:         rtcData[1] = 0x00;
  7682  01D1  01C3               	clrf	_rtcData+1
  7683  01D2                     l7455:	
  7684                           
  7685                           ;main.c: 193:         i2c_writeNBytes(0x68,rtcData,2);
  7686  01D2  3042               	movlw	(low (_rtcData| 0))& (0+255)
  7687  01D3  00E9               	movwf	??_initRTC
  7688  01D4  0869               	movf	??_initRTC,w
  7689  01D5  00E0               	movwf	i2c_writeNBytes@data
  7690  01D6  3002               	movlw	2
  7691  01D7  00E1               	movwf	i2c_writeNBytes@len
  7692  01D8  3000               	movlw	0
  7693  01D9  00E2               	movwf	i2c_writeNBytes@len+1
  7694  01DA  3068               	movlw	104
  7695  01DB  3185  25F2  3181   	fcall	_i2c_writeNBytes
  7696  01DE                     l917:	
  7697  01DE  0008               	return
  7698  01DF                     __end_of_initRTC:	
  7699                           
  7700                           	psect	text10
  7701  036A                     __ptext10:	
  7702 ;; *************** function _i2c_readDataBlock *****************
  7703 ;; Defined at:
  7704 ;;		line 141 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  address         1    wreg     unsigned char 
  7707 ;;  reg             1   10[BANK0 ] unsigned char 
  7708 ;;  data            1   11[BANK0 ] PTR void 
  7709 ;;		 -> rtcData(20), 
  7710 ;;  len             2   12[BANK0 ] unsigned int 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  address         1   15[BANK0 ] unsigned char 
  7713 ;;  d               3   16[BANK0 ] struct .
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  1    wreg      void 
  7716 ;; Registers used:
  7717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7718 ;; Tracked objects:
  7719 ;;		On entry : 0/0
  7720 ;;		On exit  : 0/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7723 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;Total ram usage:        9 bytes
  7728 ;; Hardware stack levels used:    1
  7729 ;; Hardware stack levels required when called:   14
  7730 ;; This function calls:
  7731 ;;		_i2c_close
  7732 ;;		_i2c_masterWrite
  7733 ;;		_i2c_open
  7734 ;;		_i2c_setAddressNACKCallback
  7735 ;;		_i2c_setBuffer
  7736 ;;		_i2c_setDataCompleteCallback
  7737 ;; This function is called by:
  7738 ;;		_initRTC
  7739 ;;		_main
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function _i2c_readDataBlock
  7745  036A                     _i2c_readDataBlock:	
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _i2c_readDataBlock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7749                           ;i2c_readDataBlock@address stored from wreg
  7750  036A  0020               	movlb	0	; select bank0
  7751  036B  00E5               	movwf	i2c_readDataBlock@address
  7752  036C                     l7115:	
  7753                           
  7754                           ;mcc_generated_files/drivers/i2c_simple_master.c: 141: void i2c_readDataBlock(i2c_addres
      +                          s_t address, uint8_t reg, void *data, size_t len);mcc_generated_files/drivers/i2c_simple
      +                          _master.c: 142: {;mcc_generated_files/drivers/i2c_simple_master.c: 144:     buf_t d;;mcc
      +                          _generated_files/drivers/i2c_simple_master.c: 145:     d.data = data;
  7755  036C  0861               	movf	i2c_readDataBlock@data,w
  7756  036D  00E4               	movwf	??_i2c_readDataBlock
  7757  036E  0864               	movf	??_i2c_readDataBlock,w
  7758  036F  00E8               	movwf	low ((i2c_readDataBlock@d| 0+2))
  7759                           
  7760                           ;mcc_generated_files/drivers/i2c_simple_master.c: 146:     d.len = len;
  7761  0370  0863               	movf	i2c_readDataBlock@len+1,w
  7762  0371  00E7               	movwf	i2c_readDataBlock@d+1
  7763  0372  0862               	movf	i2c_readDataBlock@len,w
  7764  0373  00E6               	movwf	i2c_readDataBlock@d
  7765  0374                     l7117:	
  7766                           ;mcc_generated_files/drivers/i2c_simple_master.c: 148:     while(!i2c_open(address));
  7767                           
  7768  0374  0020               	movlb	0	; select bank0
  7769  0375  0865               	movf	i2c_readDataBlock@address,w
  7770  0376  3182  2287  3183   	fcall	_i2c_open
  7771  0379  3A00               	xorlw	0
  7772  037A  1903               	skipnz
  7773  037B  2B7D               	goto	u5611
  7774  037C  2B7E               	goto	u5610
  7775  037D                     u5611:	
  7776  037D  2B74               	goto	l7117
  7777  037E                     u5610:	
  7778  037E                     l7119:	
  7779                           
  7780                           ;mcc_generated_files/drivers/i2c_simple_master.c: 149:     i2c_setDataCompleteCallback(r
      +                          dBlkRegCompleteHandler,&d);
  7781  037E  3008               	movlw	low _rdBlkRegCompleteHandler
  7782  037F  0020               	movlb	0	; select bank0
  7783  0380  00DB               	movwf	i2c_setDataCompleteCallback@cb
  7784  0381  3008               	movlw	high _rdBlkRegCompleteHandler
  7785  0382  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
  7786  0383  3066               	movlw	(low (i2c_readDataBlock@d| 0))& (0+255)
  7787  0384  00E4               	movwf	??_i2c_readDataBlock
  7788  0385  0864               	movf	??_i2c_readDataBlock,w
  7789  0386  00DD               	movwf	i2c_setDataCompleteCallback@p
  7790  0387  3196  261B  3183   	fcall	_i2c_setDataCompleteCallback
  7791  038A                     l7121:	
  7792                           
  7793                           ;mcc_generated_files/drivers/i2c_simple_master.c: 150:     i2c_setBuffer(&reg,1);
  7794  038A  3001               	movlw	1
  7795  038B  0020               	movlb	0	; select bank0
  7796  038C  00D6               	movwf	i2c_setBuffer@bufferSize
  7797  038D  3000               	movlw	0
  7798  038E  00D7               	movwf	i2c_setBuffer@bufferSize+1
  7799  038F  3060               	movlw	(low (i2c_readDataBlock@reg| 0))& (0+255)
  7800  0390  3197  2726  3183   	fcall	_i2c_setBuffer
  7801  0393                     l7123:	
  7802                           
  7803                           ;mcc_generated_files/drivers/i2c_simple_master.c: 151:     i2c_setAddressNACKCallback(i2
      +                          c_restartWrite,((void*)0));
  7804  0393  30D7               	movlw	low _i2c_restartWrite
  7805  0394  0020               	movlb	0	; select bank0
  7806  0395  00DB               	movwf	i2c_setAddressNACKCallback@cb
  7807  0396  3014               	movlw	high _i2c_restartWrite
  7808  0397  00DC               	movwf	i2c_setAddressNACKCallback@cb+1
  7809  0398  01DD               	clrf	i2c_setAddressNACKCallback@p
  7810  0399  3196  2637  3183   	fcall	_i2c_setAddressNACKCallback
  7811  039C                     l7125:	
  7812                           
  7813                           ;mcc_generated_files/drivers/i2c_simple_master.c: 152:     i2c_masterWrite();
  7814  039C  3194  24C0  3183   	fcall	_i2c_masterWrite
  7815  039F                     l7127:	
  7816                           ;mcc_generated_files/drivers/i2c_simple_master.c: 153:     while(I2C_BUSY == i2c_close()
      +                          );
  7817                           
  7818  039F  3197  27E2  3183   	fcall	_i2c_close
  7819  03A2  3A01               	xorlw	1
  7820  03A3  1903               	skipnz
  7821  03A4  2BA6               	goto	u5621
  7822  03A5  2BA7               	goto	u5620
  7823  03A6                     u5621:	
  7824  03A6  2B9F               	goto	l7127
  7825  03A7                     u5620:	
  7826  03A7                     l300:	
  7827  03A7  0008               	return
  7828  03A8                     __end_of_i2c_readDataBlock:	
  7829                           
  7830                           	psect	text11
  7831  16BD                     __ptext11:	
  7832 ;; *************** function _clearAlarmFlag *****************
  7833 ;; Defined at:
  7834 ;;		line 245 in file "main.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  rData           2   15[BANK0 ] unsigned char [2]
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      void 
  7841 ;; Registers used:
  7842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7852 ;;Total ram usage:        3 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:   15
  7855 ;; This function calls:
  7856 ;;		_i2c_writeNBytes
  7857 ;; This function is called by:
  7858 ;;		_main
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           
  7863                           ;psect for function _clearAlarmFlag
  7864  16BD                     _clearAlarmFlag:	
  7865  16BD                     l7485:	
  7866                           ;incstack = 0
  7867                           ; Regs used in _clearAlarmFlag: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7868                           
  7869                           
  7870                           ;main.c: 246:     uint8_t rData[2];;main.c: 247:     rData[0] = 0x0F;
  7871  16BD  300F               	movlw	15
  7872  16BE  0020               	movlb	0	; select bank0
  7873  16BF  00E4               	movwf	??_clearAlarmFlag
  7874  16C0  0864               	movf	??_clearAlarmFlag,w
  7875  16C1  00E5               	movwf	clearAlarmFlag@rData
  7876  16C2                     l7487:	
  7877                           
  7878                           ;main.c: 248:     rData[1] = 0x00;
  7879  16C2  01E6               	clrf	clearAlarmFlag@rData+1
  7880  16C3                     l7489:	
  7881                           
  7882                           ;main.c: 249:     i2c_writeNBytes(0x68,rData,2);
  7883  16C3  3065               	movlw	(low (clearAlarmFlag@rData| 0))& (0+255)
  7884  16C4  00E4               	movwf	??_clearAlarmFlag
  7885  16C5  0864               	movf	??_clearAlarmFlag,w
  7886  16C6  00E0               	movwf	i2c_writeNBytes@data
  7887  16C7  3002               	movlw	2
  7888  16C8  00E1               	movwf	i2c_writeNBytes@len
  7889  16C9  3000               	movlw	0
  7890  16CA  00E2               	movwf	i2c_writeNBytes@len+1
  7891  16CB  3068               	movlw	104
  7892  16CC  3185  25F2  3196   	fcall	_i2c_writeNBytes
  7893  16CF                     l935:	
  7894  16CF  0008               	return
  7895  16D0                     __end_of_clearAlarmFlag:	
  7896                           
  7897                           	psect	text12
  7898  05F2                     __ptext12:	
  7899 ;; *************** function _i2c_writeNBytes *****************
  7900 ;; Defined at:
  7901 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  address         1    wreg     unsigned char 
  7904 ;;  data            1   10[BANK0 ] PTR void 
  7905 ;;		 -> clearAlarmFlag@rData(2), rtcData(20), 
  7906 ;;  len             2   11[BANK0 ] unsigned int 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  address         1   13[BANK0 ] unsigned char 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  1    wreg      void 
  7911 ;; Registers used:
  7912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7918 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;Total ram usage:        4 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:   14
  7925 ;; This function calls:
  7926 ;;		_i2c_close
  7927 ;;		_i2c_masterWrite
  7928 ;;		_i2c_open
  7929 ;;		_i2c_setAddressNACKCallback
  7930 ;;		_i2c_setBuffer
  7931 ;; This function is called by:
  7932 ;;		_initRTC
  7933 ;;		_updateRTC
  7934 ;;		_updateAlarm1
  7935 ;;		_updateAlarm2
  7936 ;;		_clearAlarmFlag
  7937 ;;		_updateDate
  7938 ;;		_updateMonth
  7939 ;;		_updateDay
  7940 ;;		_updateYear
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           
  7945                           ;psect for function _i2c_writeNBytes
  7946  05F2                     _i2c_writeNBytes:	
  7947                           
  7948                           ;incstack = 0
  7949                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7950                           ;i2c_writeNBytes@address stored from wreg
  7951  05F2  0020               	movlb	0	; select bank0
  7952  05F3  00E3               	movwf	i2c_writeNBytes@address
  7953  05F4                     l7103:	
  7954  05F4                     l7105:	
  7955                           ;mcc_generated_files/drivers/i2c_simple_master.c: 48: void i2c_writeNBytes(i2c_address_t
      +                           address, void* data, size_t len);mcc_generated_files/drivers/i2c_simple_master.c: 49: {
      +                          ;mcc_generated_files/drivers/i2c_simple_master.c: 50:     while(!i2c_open(address));
  7956                           
  7957  05F4  0020               	movlb	0	; select bank0
  7958  05F5  0863               	movf	i2c_writeNBytes@address,w
  7959  05F6  3182  2287  3185   	fcall	_i2c_open
  7960  05F9  3A00               	xorlw	0
  7961  05FA  1903               	skipnz
  7962  05FB  2DFD               	goto	u5591
  7963  05FC  2DFE               	goto	u5590
  7964  05FD                     u5591:	
  7965  05FD  2DF4               	goto	l7105
  7966  05FE                     u5590:	
  7967  05FE                     l7107:	
  7968                           
  7969                           ;mcc_generated_files/drivers/i2c_simple_master.c: 51:     i2c_setBuffer(data,len);
  7970  05FE  0020               	movlb	0	; select bank0
  7971  05FF  0862               	movf	i2c_writeNBytes@len+1,w
  7972  0600  00D7               	movwf	i2c_setBuffer@bufferSize+1
  7973  0601  0861               	movf	i2c_writeNBytes@len,w
  7974  0602  00D6               	movwf	i2c_setBuffer@bufferSize
  7975  0603  0860               	movf	i2c_writeNBytes@data,w
  7976  0604  3197  2726  3185   	fcall	_i2c_setBuffer
  7977  0607                     l7109:	
  7978                           
  7979                           ;mcc_generated_files/drivers/i2c_simple_master.c: 52:     i2c_setAddressNACKCallback(i2c
      +                          _restartWrite,((void*)0));
  7980  0607  30D7               	movlw	low _i2c_restartWrite
  7981  0608  0020               	movlb	0	; select bank0
  7982  0609  00DB               	movwf	i2c_setAddressNACKCallback@cb
  7983  060A  3014               	movlw	high _i2c_restartWrite
  7984  060B  00DC               	movwf	i2c_setAddressNACKCallback@cb+1
  7985  060C  01DD               	clrf	i2c_setAddressNACKCallback@p
  7986  060D  3196  2637  3185   	fcall	_i2c_setAddressNACKCallback
  7987  0610                     l7111:	
  7988                           
  7989                           ;mcc_generated_files/drivers/i2c_simple_master.c: 53:     i2c_masterWrite();
  7990  0610  3194  24C0  3185   	fcall	_i2c_masterWrite
  7991  0613                     l7113:	
  7992                           ;mcc_generated_files/drivers/i2c_simple_master.c: 54:     while(I2C_BUSY == i2c_close())
      +                          ;
  7993                           
  7994  0613  3197  27E2  3185   	fcall	_i2c_close
  7995  0616  3A01               	xorlw	1
  7996  0617  1903               	skipnz
  7997  0618  2E1A               	goto	u5601
  7998  0619  2E1B               	goto	u5600
  7999  061A                     u5601:	
  8000  061A  2E13               	goto	l7113
  8001  061B                     u5600:	
  8002  061B                     l249:	
  8003  061B  0008               	return
  8004  061C                     __end_of_i2c_writeNBytes:	
  8005                           
  8006                           	psect	text13
  8007  1637                     __ptext13:	
  8008 ;; *************** function _i2c_setAddressNACKCallback *****************
  8009 ;; Defined at:
  8010 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  8013 ;;		 -> i2c_restartWrite(1), 
  8014 ;;  p               1    7[BANK0 ] PTR void 
  8015 ;;		 -> NULL(0), 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;		None
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      void 
  8020 ;; Registers used:
  8021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8027 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;Total ram usage:        4 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    7
  8034 ;; This function calls:
  8035 ;;		_setCallBack
  8036 ;; This function is called by:
  8037 ;;		_i2c_writeNBytes
  8038 ;;		_i2c_readDataBlock
  8039 ;;		_i2c_write1ByteRegister
  8040 ;;		_i2c_read1ByteRegister
  8041 ;;		_i2c_read2ByteRegister
  8042 ;;		_i2c_write2ByteRegister
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           
  8047                           ;psect for function _i2c_setAddressNACKCallback
  8048  1637                     _i2c_setAddressNACKCallback:	
  8049  1637                     l6989:	
  8050                           ;incstack = 0
  8051                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8052                           
  8053                           
  8054                           ;mcc_generated_files/drivers/i2c_master.c: 99: void i2c_setAddressNACKCallback(i2c_callb
      +                          ack cb, void *p);mcc_generated_files/drivers/i2c_master.c: 100: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 101:     setCallBack(i2c_addressNACK,cb,p);
  8055  1637  0020               	movlb	0	; select bank0
  8056  1638  085C               	movf	i2c_setAddressNACKCallback@cb+1,w
  8057  1639  00D7               	movwf	setCallBack@cb+1
  8058  163A  085B               	movf	i2c_setAddressNACKCallback@cb,w
  8059  163B  00D6               	movwf	setCallBack@cb
  8060  163C  085D               	movf	i2c_setAddressNACKCallback@p,w
  8061  163D  00DE               	movwf	??_i2c_setAddressNACKCallback
  8062  163E  085E               	movf	??_i2c_setAddressNACKCallback,w
  8063  163F  00D8               	movwf	setCallBack@p
  8064  1640  3002               	movlw	2
  8065  1641  3186  26C0  3196   	fcall	_setCallBack
  8066  1644                     l67:	
  8067  1644  0008               	return
  8068  1645                     __end_of_i2c_setAddressNACKCallback:	
  8069                           
  8070                           	psect	text14
  8071  0287                     __ptext14:	
  8072 ;; *************** function _i2c_open *****************
  8073 ;; Defined at:
  8074 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  address         1    wreg     unsigned char 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  address         1    3[BANK0 ] unsigned char 
  8079 ;;  ret             1    4[BANK0 ] enum E3252
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  1    wreg      enum E3252
  8082 ;; Registers used:
  8083 ;;		wreg, status,2, status,0, pclath, cstack
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;Total ram usage:        3 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    7
  8096 ;; This function calls:
  8097 ;;		_i2c_driver_open
  8098 ;;		_i2c_driver_setBusCollisionISR
  8099 ;;		_i2c_driver_setI2cISR
  8100 ;;		_mssp_clearIRQ
  8101 ;; This function is called by:
  8102 ;;		_i2c_writeNBytes
  8103 ;;		_i2c_readDataBlock
  8104 ;;		_i2c_write1ByteRegister
  8105 ;;		_i2c_read1ByteRegister
  8106 ;;		_i2c_read2ByteRegister
  8107 ;;		_i2c_write2ByteRegister
  8108 ;;		_i2c_readNBytes
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _i2c_open
  8114  0287                     _i2c_open:	
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  8118                           ;i2c_open@address stored from wreg
  8119  0287  0020               	movlb	0	; select bank0
  8120  0288  00D9               	movwf	i2c_open@address
  8121  0289                     l6991:	
  8122                           
  8123                           ;mcc_generated_files/drivers/i2c_master.c: 116: i2c_error_t i2c_open(i2c_address_t addre
      +                          ss);mcc_generated_files/drivers/i2c_master.c: 117: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 118:     i2c_error_t ret = I2C_BUSY;
  8124  0289  01DA               	clrf	i2c_open@ret
  8125  028A  0ADA               	incf	i2c_open@ret,f
  8126                           
  8127                           ;mcc_generated_files/drivers/i2c_master.c: 120:     if(!i2c_status.inUse)
  8128  028B  0021               	movlb	1	; select bank1
  8129  028C  18A0               	btfsc	_i2c_status^(0+128),1
  8130  028D  2A8F               	goto	u5571
  8131  028E  2A90               	goto	u5570
  8132  028F                     u5571:	
  8133  028F  2AD5               	goto	l76
  8134  0290                     u5570:	
  8135  0290                     l6993:	
  8136                           
  8137                           ;mcc_generated_files/drivers/i2c_master.c: 121:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 122:         i2c_status.address = address;
  8138  0290  0020               	movlb	0	; select bank0
  8139  0291  0859               	movf	i2c_open@address,w
  8140  0292  00D8               	movwf	??_i2c_open
  8141  0293  0858               	movf	??_i2c_open,w
  8142  0294  0021               	movlb	1	; select bank1
  8143  0295  00A1               	movwf	(_i2c_status^(0+128)+1)
  8144  0296                     l6995:	
  8145                           
  8146                           ;mcc_generated_files/drivers/i2c_master.c: 123:         i2c_status.busy = 0;
  8147  0296  1020               	bcf	_i2c_status^(0+128),0
  8148  0297                     l6997:	
  8149                           
  8150                           ;mcc_generated_files/drivers/i2c_master.c: 124:         i2c_status.inUse = 1;
  8151  0297  14A0               	bsf	_i2c_status^(0+128),1
  8152  0298                     l6999:	
  8153                           
  8154                           ;mcc_generated_files/drivers/i2c_master.c: 125:         i2c_status.addressNACKCheck = 0;
  8155  0298  11A0               	bcf	_i2c_status^(0+128),3
  8156                           
  8157                           ;mcc_generated_files/drivers/i2c_master.c: 126:         i2c_status.state = I2C_RESET;
  8158  0299  300E               	movlw	14
  8159  029A  0020               	movlb	0	; select bank0
  8160  029B  00D8               	movwf	??_i2c_open
  8161  029C  0858               	movf	??_i2c_open,w
  8162  029D  0021               	movlb	1	; select bank1
  8163  029E  00A9               	movwf	(_i2c_status^(0+128)+9)
  8164                           
  8165                           ;mcc_generated_files/drivers/i2c_master.c: 127:         i2c_status.time_out_value = 500;
  8166  029F  30F4               	movlw	244
  8167  02A0  00A7               	movwf	(_i2c_status^(0+128)+7)
  8168  02A1  3001               	movlw	1
  8169  02A2  00A8               	movwf	(_i2c_status^(0+128)+8)
  8170  02A3                     l7001:	
  8171                           
  8172                           ;mcc_generated_files/drivers/i2c_master.c: 128:         i2c_status.bufferFree = 1;
  8173  02A3  1520               	bsf	_i2c_status^(0+128),2
  8174                           
  8175                           ;mcc_generated_files/drivers/i2c_master.c: 131:         i2c_status.callbackTable[i2c_dat
      +                          aComplete]=returnStop;
  8176  02A4  30CB               	movlw	low _returnStop
  8177  02A5  00AB               	movwf	(low ((_i2c_status| 0+11)))^(0+128)
  8178  02A6  3014               	movlw	high _returnStop
  8179  02A7  00AC               	movwf	((low ((_i2c_status| 0+11)))^(0+128)+1)
  8180  02A8                     l7003:	
  8181                           
  8182                           ;mcc_generated_files/drivers/i2c_master.c: 132:         i2c_status.callbackPayload[i2c_d
      +                          ataComplete] = ((void*)0);
  8183  02A8  01B7               	clrf	(low ((_i2c_status| 0+23)))^(0+128)
  8184  02A9                     l7005:	
  8185                           
  8186                           ;mcc_generated_files/drivers/i2c_master.c: 133:         i2c_status.callbackTable[i2c_wri
      +                          teCollision]=returnStop;
  8187  02A9  30CB               	movlw	low _returnStop
  8188  02AA  00AD               	movwf	(low ((_i2c_status| 0+13)))^(0+128)
  8189  02AB  3014               	movlw	high _returnStop
  8190  02AC  00AE               	movwf	((low ((_i2c_status| 0+13)))^(0+128)+1)
  8191                           
  8192                           ;mcc_generated_files/drivers/i2c_master.c: 134:         i2c_status.callbackPayload[i2c_w
      +                          riteCollision] = ((void*)0);
  8193  02AD  01B8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  8194  02AE                     l7007:	
  8195                           
  8196                           ;mcc_generated_files/drivers/i2c_master.c: 135:         i2c_status.callbackTable[i2c_add
      +                          ressNACK]=returnStop;
  8197  02AE  30CB               	movlw	low _returnStop
  8198  02AF  00AF               	movwf	(low ((_i2c_status| 0+15)))^(0+128)
  8199  02B0  3014               	movlw	high _returnStop
  8200  02B1  00B0               	movwf	((low ((_i2c_status| 0+15)))^(0+128)+1)
  8201  02B2                     l7009:	
  8202                           
  8203                           ;mcc_generated_files/drivers/i2c_master.c: 136:         i2c_status.callbackPayload[i2c_a
      +                          ddressNACK] = ((void*)0);
  8204  02B2  01B9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  8205                           
  8206                           ;mcc_generated_files/drivers/i2c_master.c: 137:         i2c_status.callbackTable[i2c_dat
      +                          aNACK]=returnStop;
  8207  02B3  30CB               	movlw	low _returnStop
  8208  02B4  00B1               	movwf	(low ((_i2c_status| 0+17)))^(0+128)
  8209  02B5  3014               	movlw	high _returnStop
  8210  02B6  00B2               	movwf	((low ((_i2c_status| 0+17)))^(0+128)+1)
  8211  02B7                     l7011:	
  8212                           
  8213                           ;mcc_generated_files/drivers/i2c_master.c: 138:         i2c_status.callbackPayload[i2c_d
      +                          ataNACK] = ((void*)0);
  8214  02B7  01BA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  8215  02B8                     l7013:	
  8216                           
  8217                           ;mcc_generated_files/drivers/i2c_master.c: 139:         i2c_status.callbackTable[i2c_tim
      +                          eOut]=returnReset;
  8218  02B8  30D1               	movlw	low _returnReset
  8219  02B9  00B3               	movwf	(low ((_i2c_status| 0+19)))^(0+128)
  8220  02BA  3014               	movlw	high _returnReset
  8221  02BB  00B4               	movwf	((low ((_i2c_status| 0+19)))^(0+128)+1)
  8222                           
  8223                           ;mcc_generated_files/drivers/i2c_master.c: 140:         i2c_status.callbackPayload[i2c_t
      +                          imeOut] = ((void*)0);
  8224  02BC  01BB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  8225  02BD                     l7015:	
  8226                           
  8227                           ;mcc_generated_files/drivers/i2c_master.c: 142:         i2c_driver_open();
  8228  02BD  3195  25E8  3182   	fcall	_i2c_driver_open
  8229  02C0                     l7017:	
  8230                           
  8231                           ;mcc_generated_files/drivers/i2c_master.c: 143:         mssp_clearIRQ();
  8232  02C0  3194  245F  3182   	fcall	_mssp_clearIRQ
  8233  02C3                     l7019:	
  8234                           
  8235                           ;mcc_generated_files/drivers/i2c_master.c: 145:         i2c_driver_setBusCollisionISR(i2
      +                          c_busCollisionISR);
  8236  02C3  3077               	movlw	low _i2c_busCollisionISR
  8237  02C4  0020               	movlb	0	; select bank0
  8238  02C5  00D6               	movwf	i2c_driver_setBusCollisionISR@handler
  8239  02C6  3014               	movlw	high _i2c_busCollisionISR
  8240  02C7  00D7               	movwf	i2c_driver_setBusCollisionISR@handler+1
  8241  02C8  3194  24E3  3182   	fcall	_i2c_driver_setBusCollisionISR
  8242  02CB                     l7021:	
  8243                           
  8244                           ;mcc_generated_files/drivers/i2c_master.c: 146:         i2c_driver_setI2cISR(i2c_ISR);
  8245  02CB  3067               	movlw	low _i2c_ISR
  8246  02CC  0020               	movlb	0	; select bank0
  8247  02CD  00D6               	movwf	i2c_driver_setI2cISR@handler
  8248  02CE  3005               	movlw	high _i2c_ISR
  8249  02CF  00D7               	movwf	i2c_driver_setI2cISR@handler+1
  8250  02D0  3194  24E9  3182   	fcall	_i2c_driver_setI2cISR
  8251  02D3                     l7023:	
  8252                           
  8253                           ;mcc_generated_files/drivers/i2c_master.c: 151:         ret = I2C_NOERR;
  8254  02D3  0020               	movlb	0	; select bank0
  8255  02D4  01DA               	clrf	i2c_open@ret
  8256  02D5                     l76:	
  8257                           ;mcc_generated_files/drivers/i2c_master.c: 152:     }
  8258                           
  8259                           
  8260                           ;mcc_generated_files/drivers/i2c_master.c: 153:     return ret;
  8261  02D5  0020               	movlb	0	; select bank0
  8262  02D6  085A               	movf	i2c_open@ret,w
  8263  02D7                     l77:	
  8264  02D7  0008               	return
  8265  02D8                     __end_of_i2c_open:	
  8266                           
  8267                           	psect	text15
  8268  14E9                     __ptext15:	
  8269 ;; *************** function _i2c_driver_setI2cISR *****************
  8270 ;; Defined at:
  8271 ;;		line 263 in file "mcc_generated_files/i2c_driver.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  8274 ;;		 -> i2c_ISR(1), 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  1    wreg      void 
  8279 ;; Registers used:
  8280 ;;		wreg
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8286 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;Total ram usage:        2 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    6
  8293 ;; This function calls:
  8294 ;;		Nothing
  8295 ;; This function is called by:
  8296 ;;		_i2c_open
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _i2c_driver_setI2cISR
  8302  14E9                     _i2c_driver_setI2cISR:	
  8303  14E9                     l6963:	
  8304                           ;incstack = 0
  8305                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  8306                           
  8307                           
  8308                           ;mcc_generated_files/i2c_driver.c: 264:     i2c_driver_i2cISR = handler;
  8309  14E9  0020               	movlb	0	; select bank0
  8310  14EA  0857               	movf	i2c_driver_setI2cISR@handler+1,w
  8311  14EB  00B5               	movwf	_i2c_driver_i2cISR+1
  8312  14EC  0856               	movf	i2c_driver_setI2cISR@handler,w
  8313  14ED  00B4               	movwf	_i2c_driver_i2cISR
  8314  14EE                     l701:	
  8315  14EE  0008               	return
  8316  14EF                     __end_of_i2c_driver_setI2cISR:	
  8317                           
  8318                           	psect	text16
  8319  14E3                     __ptext16:	
  8320 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  8321 ;; Defined at:
  8322 ;;		line 259 in file "mcc_generated_files/i2c_driver.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  8325 ;;		 -> i2c_busCollisionISR(1), 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;		None
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  1    wreg      void 
  8330 ;; Registers used:
  8331 ;;		wreg
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8337 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;Total ram usage:        2 bytes
  8342 ;; Hardware stack levels used:    1
  8343 ;; Hardware stack levels required when called:    6
  8344 ;; This function calls:
  8345 ;;		Nothing
  8346 ;; This function is called by:
  8347 ;;		_i2c_open
  8348 ;; This function uses a non-reentrant model
  8349 ;;
  8350                           
  8351                           
  8352                           ;psect for function _i2c_driver_setBusCollisionISR
  8353  14E3                     _i2c_driver_setBusCollisionISR:	
  8354  14E3                     l6961:	
  8355                           ;incstack = 0
  8356                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  8357                           
  8358                           
  8359                           ;mcc_generated_files/i2c_driver.c: 260:     i2c_driver_busCollisionISR = handler;
  8360  14E3  0020               	movlb	0	; select bank0
  8361  14E4  0857               	movf	i2c_driver_setBusCollisionISR@handler+1,w
  8362  14E5  00B7               	movwf	_i2c_driver_busCollisionISR+1
  8363  14E6  0856               	movf	i2c_driver_setBusCollisionISR@handler,w
  8364  14E7  00B6               	movwf	_i2c_driver_busCollisionISR
  8365  14E8                     l698:	
  8366  14E8  0008               	return
  8367  14E9                     __end_of_i2c_driver_setBusCollisionISR:	
  8368                           
  8369                           	psect	text17
  8370  15E8                     __ptext17:	
  8371 ;; *************** function _i2c_driver_open *****************
  8372 ;; Defined at:
  8373 ;;		line 84 in file "mcc_generated_files/i2c_driver.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;		None
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;		None
  8378 ;; Return value:  Size  Location     Type
  8379 ;;		None               void
  8380 ;; Registers used:
  8381 ;;		wreg, status,2
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;Total ram usage:        0 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    6
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_i2c_open
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           
  8402                           ;psect for function _i2c_driver_open
  8403  15E8                     _i2c_driver_open:	
  8404  15E8                     l6949:	
  8405                           ;incstack = 0
  8406                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  8407                           
  8408  15E8  0024               	movlb	4	; select bank4
  8409  15E9  1A95               	btfsc	21,5	;volatile
  8410  15EA  2DEC               	goto	u5531
  8411  15EB  2DED               	goto	u5530
  8412  15EC                     u5531:	
  8413  15EC  2DF3               	goto	l617
  8414  15ED                     u5530:	
  8415  15ED                     l6951:	
  8416  15ED  0194               	clrf	20	;volatile
  8417  15EE                     l6953:	
  8418  15EE  3028               	movlw	40
  8419  15EF  0095               	movwf	21	;volatile
  8420  15F0                     l6955:	
  8421  15F0  0196               	clrf	22	;volatile
  8422  15F1  304F               	movlw	79
  8423  15F2  0092               	movwf	18	;volatile
  8424  15F3                     l617:	
  8425  15F3  0008               	return
  8426  15F4                     __end_of_i2c_driver_open:	
  8427                           
  8428                           	psect	text18
  8429  14C0                     __ptext18:	
  8430 ;; *************** function _i2c_masterWrite *****************
  8431 ;; Defined at:
  8432 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;		None
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  1    wreg      enum E3252
  8439 ;; Registers used:
  8440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;Total ram usage:        0 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:   13
  8453 ;; This function calls:
  8454 ;;		_i2c_masterOperation
  8455 ;; This function is called by:
  8456 ;;		_i2c_writeNBytes
  8457 ;;		_i2c_readDataBlock
  8458 ;;		_i2c_write1ByteRegister
  8459 ;;		_i2c_read1ByteRegister
  8460 ;;		_i2c_read2ByteRegister
  8461 ;;		_i2c_write2ByteRegister
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           
  8466                           ;psect for function _i2c_masterWrite
  8467  14C0                     _i2c_masterWrite:	
  8468  14C0                     l7039:	
  8469                           ;incstack = 0
  8470                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8471                           
  8472                           
  8473                           ;mcc_generated_files/drivers/i2c_master.c: 224:     return i2c_masterOperation(0);;	Retu
      +                          rn value of _i2c_masterWrite is never used
  8474  14C0  3000               	movlw	0
  8475  14C1  3186  261C  3194   	fcall	_i2c_masterOperation
  8476  14C4                     l104:	
  8477  14C4  0008               	return
  8478  14C5                     __end_of_i2c_masterWrite:	
  8479                           
  8480                           	psect	text19
  8481  061C                     __ptext19:	
  8482 ;; *************** function _i2c_masterOperation *****************
  8483 ;; Defined at:
  8484 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  read            1    wreg     _Bool 
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;  read            1    8[BANK0 ] _Bool 
  8489 ;;  ret             1    9[BANK0 ] enum E3252
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  1    wreg      enum E3252
  8492 ;; Registers used:
  8493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8500 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;Total ram usage:        3 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:   12
  8506 ;; This function calls:
  8507 ;;		_i2c_driver_start
  8508 ;;		_i2c_poller
  8509 ;;		_mssp_IRQisEnabled
  8510 ;; This function is called by:
  8511 ;;		_i2c_masterWrite
  8512 ;;		_i2c_masterRead
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           
  8517                           ;psect for function _i2c_masterOperation
  8518  061C                     _i2c_masterOperation:	
  8519                           
  8520                           ;incstack = 0
  8521                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8522                           ;i2c_masterOperation@read stored from wreg
  8523  061C  0020               	movlb	0	; select bank0
  8524  061D  00DE               	movwf	i2c_masterOperation@read
  8525  061E                     l6967:	
  8526                           
  8527                           ;mcc_generated_files/drivers/i2c_master.c: 193: i2c_error_t i2c_masterOperation(_Bool re
      +                          ad);mcc_generated_files/drivers/i2c_master.c: 194: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 195:     i2c_error_t ret = I2C_BUSY;
  8528  061E  01DF               	clrf	i2c_masterOperation@ret
  8529  061F  0ADF               	incf	i2c_masterOperation@ret,f
  8530                           
  8531                           ;mcc_generated_files/drivers/i2c_master.c: 196:     if(!i2c_status.busy)
  8532  0620  0021               	movlb	1	; select bank1
  8533  0621  1820               	btfsc	_i2c_status^(0+128),0
  8534  0622  2E24               	goto	u5541
  8535  0623  2E25               	goto	u5540
  8536  0624                     u5541:	
  8537  0624  2E43               	goto	l6983
  8538  0625                     u5540:	
  8539  0625                     l6969:	
  8540                           
  8541                           ;mcc_generated_files/drivers/i2c_master.c: 197:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 198:         i2c_status.busy = 1;
  8542  0625  1420               	bsf	_i2c_status^(0+128),0
  8543  0626                     l6971:	
  8544                           
  8545                           ;mcc_generated_files/drivers/i2c_master.c: 199:         ret = I2C_NOERR;
  8546  0626  0020               	movlb	0	; select bank0
  8547  0627  01DF               	clrf	i2c_masterOperation@ret
  8548  0628                     l6973:	
  8549                           
  8550                           ;mcc_generated_files/drivers/i2c_master.c: 201:         if(read)
  8551  0628  085E               	movf	i2c_masterOperation@read,w
  8552  0629  1903               	btfsc	3,2
  8553  062A  2E2C               	goto	u5551
  8554  062B  2E2D               	goto	u5550
  8555  062C                     u5551:	
  8556  062C  2E31               	goto	l6977
  8557  062D                     u5550:	
  8558  062D                     l6975:	
  8559                           
  8560                           ;mcc_generated_files/drivers/i2c_master.c: 202:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 203:             i2c_status.state = I2C_SEND_ADR_READ;
  8561  062D  0021               	movlb	1	; select bank1
  8562  062E  01A9               	clrf	(_i2c_status^(0+128)+9)
  8563  062F  0AA9               	incf	(_i2c_status^(0+128)+9),f
  8564                           
  8565                           ;mcc_generated_files/drivers/i2c_master.c: 204:         }
  8566  0630  2E36               	goto	l6979
  8567  0631                     l6977:	
  8568                           
  8569                           ;mcc_generated_files/drivers/i2c_master.c: 206:         {;mcc_generated_files/drivers/i2
      +                          c_master.c: 207:             i2c_status.state = I2C_SEND_ADR_WRITE;
  8570  0631  3002               	movlw	2
  8571  0632  00DD               	movwf	??_i2c_masterOperation
  8572  0633  085D               	movf	??_i2c_masterOperation,w
  8573  0634  0021               	movlb	1	; select bank1
  8574  0635  00A9               	movwf	(_i2c_status^(0+128)+9)
  8575  0636                     l6979:	
  8576                           
  8577                           ;mcc_generated_files/drivers/i2c_master.c: 209:         i2c_driver_start();
  8578  0636  3194  2465  3186   	fcall	_i2c_driver_start
  8579                           
  8580                           ;mcc_generated_files/drivers/i2c_master.c: 211:         if(! mssp_IRQisEnabled())
  8581  0639  3195  25A3  3186   	fcall	_mssp_IRQisEnabled
  8582  063C  1803               	btfsc	3,0
  8583  063D  2E3F               	goto	u5561
  8584  063E  2E40               	goto	u5560
  8585  063F                     u5561:	
  8586  063F  2E43               	goto	l6983
  8587  0640                     u5560:	
  8588  0640                     l6981:	
  8589                           
  8590                           ;mcc_generated_files/drivers/i2c_master.c: 212:             i2c_poller();
  8591  0640  3196  2629  3186   	fcall	_i2c_poller
  8592  0643                     l6983:	
  8593                           
  8594                           ;mcc_generated_files/drivers/i2c_master.c: 214:     return ret;
  8595  0643  0020               	movlb	0	; select bank0
  8596  0644  085F               	movf	i2c_masterOperation@ret,w
  8597  0645                     l98:	
  8598  0645  0008               	return
  8599  0646                     __end_of_i2c_masterOperation:	
  8600                           
  8601                           	psect	text20
  8602  15A3                     __ptext20:	
  8603 ;; *************** function _mssp_IRQisEnabled *****************
  8604 ;; Defined at:
  8605 ;;		line 44 in file "mcc_generated_files/i2c_driver.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;		None
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;		None
  8610 ;; Return value:  Size  Location     Type
  8611 ;;		None               void
  8612 ;; Registers used:
  8613 ;;		wreg, status,2, status,0
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;Total ram usage:        2 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    6
  8626 ;; This function calls:
  8627 ;;		Nothing
  8628 ;; This function is called by:
  8629 ;;		_i2c_masterOperation
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _mssp_IRQisEnabled
  8635  15A3                     _mssp_IRQisEnabled:	
  8636  15A3                     l6931:	
  8637                           ;incstack = 0
  8638                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  8639                           
  8640                           
  8641                           ;mcc_generated_files/i2c_driver.c: 46:             _delay((unsigned long)((100)*(3200000
      +                          0/4000000.0)));
  8642  15A3  0021               	movlb	1	; select bank1
  8643  15A4  0C11               	rrf	17,w	;volatile
  8644  15A5  0020               	movlb	0	; select bank0
  8645  15A6  00D6               	movwf	??_mssp_IRQisEnabled
  8646  15A7  0CD6               	rrf	??_mssp_IRQisEnabled,f
  8647  15A8  0C56               	rrf	??_mssp_IRQisEnabled,w
  8648  15A9  3901               	andlw	1
  8649  15AA  00D7               	movwf	??_mssp_IRQisEnabled+1
  8650  15AB  0C57               	rrf	??_mssp_IRQisEnabled+1,w
  8651  15AC                     l593:	
  8652  15AC  0008               	return
  8653  15AD                     __end_of_mssp_IRQisEnabled:	
  8654                           
  8655                           	psect	text21
  8656  1629                     __ptext21:	
  8657 ;; *************** function _i2c_poller *****************
  8658 ;; Defined at:
  8659 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;		None
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;		None
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      void 
  8666 ;; Registers used:
  8667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;Total ram usage:        0 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:   11
  8680 ;; This function calls:
  8681 ;;		_i2c_ISR
  8682 ;;		_mssp_waitForEvent
  8683 ;; This function is called by:
  8684 ;;		_i2c_masterOperation
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           
  8689                           ;psect for function _i2c_poller
  8690  1629                     _i2c_poller:	
  8691  1629                     l6935:	
  8692                           ;incstack = 0
  8693                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8694                           
  8695                           
  8696                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  8697  1629  2E31               	goto	l6941
  8698  162A                     l6937:	
  8699                           
  8700                           ;mcc_generated_files/drivers/i2c_master.c: 233:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 234:         mssp_waitForEvent(((void*)0));
  8701  162A  3000               	movlw	0
  8702  162B  3196  2664  3196   	fcall	_mssp_waitForEvent
  8703  162E                     l6939:	
  8704                           
  8705                           ;mcc_generated_files/drivers/i2c_master.c: 235:         i2c_ISR();
  8706  162E  3185  2567  3196   	fcall	_i2c_ISR
  8707  1631                     l6941:	
  8708                           
  8709                           ;mcc_generated_files/drivers/i2c_master.c: 232:     while(i2c_status.busy)
  8710  1631  0021               	movlb	1	; select bank1
  8711  1632  1820               	btfsc	_i2c_status^(0+128),0
  8712  1633  2E35               	goto	u5511
  8713  1634  2E36               	goto	u5510
  8714  1635                     u5511:	
  8715  1635  2E2A               	goto	l6937
  8716  1636                     u5510:	
  8717  1636                     l110:	
  8718  1636  0008               	return
  8719  1637                     __end_of_i2c_poller:	
  8720                           
  8721                           	psect	text22
  8722  1664                     __ptext22:	
  8723 ;; *************** function _mssp_waitForEvent *****************
  8724 ;; Defined at:
  8725 ;;		line 69 in file "mcc_generated_files/i2c_driver.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;  timeout         1    wreg     PTR unsigned short 
  8728 ;;		 -> NULL(0), 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  timeout         1    0[BANK0 ] PTR unsigned short 
  8731 ;;		 -> NULL(0), 
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  1    wreg      void 
  8734 ;; Registers used:
  8735 ;;		wreg
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;Total ram usage:        1 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    6
  8748 ;; This function calls:
  8749 ;;		Nothing
  8750 ;; This function is called by:
  8751 ;;		_i2c_poller
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           
  8756                           ;psect for function _mssp_waitForEvent
  8757  1664                     _mssp_waitForEvent:	
  8758  1664                     l6913:	
  8759                           ;incstack = 0
  8760                           ; Regs used in _mssp_waitForEvent: [wreg]
  8761                           
  8762  1664  0020               	movlb	0	; select bank0
  8763  1665  1991               	btfsc	17,3	;volatile
  8764  1666  2E68               	goto	u5471
  8765  1667  2E69               	goto	u5470
  8766  1668                     u5471:	
  8767  1668  2E74               	goto	l613
  8768  1669                     u5470:	
  8769  1669                     l609:	
  8770  1669  0020               	movlb	0	; select bank0
  8771  166A  1D91               	btfss	17,3	;volatile
  8772  166B  2E6D               	goto	u5481
  8773  166C  2E6E               	goto	u5480
  8774  166D                     u5481:	
  8775  166D  2E6F               	goto	l6917
  8776  166E                     u5480:	
  8777  166E  2E74               	goto	l613
  8778  166F                     l6917:	
  8779  166F  30A0               	movlw	160
  8780  1670                     u7867:	
  8781  1670  3200               	nop2
  8782  1671  0B89               	decfsz	9,f
  8783  1672  2E70               	goto	u7867
  8784  1673  2E69               	goto	l609
  8785  1674                     l613:	
  8786  1674  0008               	return
  8787  1675                     __end_of_mssp_waitForEvent:	
  8788                           
  8789                           	psect	text23
  8790  0567                     __ptext23:	
  8791 ;; *************** function _i2c_ISR *****************
  8792 ;; Defined at:
  8793 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;Total ram usage:        3 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:   10
  8814 ;; This function calls:
  8815 ;;		_do_I2C_DO_ACK
  8816 ;;		_do_I2C_DO_ADDRESS_NACK
  8817 ;;		_do_I2C_DO_NACK_RESTART
  8818 ;;		_do_I2C_DO_NACK_STOP
  8819 ;;		_do_I2C_IDLE
  8820 ;;		_do_I2C_RCEN
  8821 ;;		_do_I2C_RESET
  8822 ;;		_do_I2C_RX
  8823 ;;		_do_I2C_SEND_ADR_READ
  8824 ;;		_do_I2C_SEND_ADR_WRITE
  8825 ;;		_do_I2C_SEND_RESTART
  8826 ;;		_do_I2C_SEND_RESTART_READ
  8827 ;;		_do_I2C_SEND_RESTART_WRITE
  8828 ;;		_do_I2C_SEND_STOP
  8829 ;;		_do_I2C_TX
  8830 ;;		_do_I2C_TX_EMPTY
  8831 ;;		_i2c_driver_isNACK
  8832 ;;		_mssp_clearIRQ
  8833 ;; This function is called by:
  8834 ;;		_i2c_open
  8835 ;;		_i2c_poller
  8836 ;;		_INTERRUPT_InterruptManager
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           
  8841                           ;psect for function _i2c_ISR
  8842  0567                     _i2c_ISR:	
  8843                           
  8844                           ;Skip over the trampoline to the duplicate function for level 1
  8845  0567  1C7E               	btfss	int$flags,0
  8846  0568  2D6B               	goto	_i2c_ISR$intlevel0
  8847  0569  3186  2E46         	ljmp	i1_i2c_ISR
  8848  056B                     _i2c_ISR$intlevel0:	
  8849  056B                     l6919:	
  8850                           ;incstack = 0
  8851                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8852                           
  8853                           
  8854                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
  8855  056B  3194  245F  3185   	fcall	_mssp_clearIRQ
  8856  056E                     l6921:	
  8857                           
  8858                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
  8859  056E  0021               	movlb	1	; select bank1
  8860  056F  1DA0               	btfss	_i2c_status^(0+128),3
  8861  0570  2D72               	goto	u5491
  8862  0571  2D73               	goto	u5490
  8863  0572                     u5491:	
  8864  0572  2D80               	goto	l6927
  8865  0573                     u5490:	
  8866  0573                     l6923:	
  8867  0573  3195  2552  3185   	fcall	_i2c_driver_isNACK
  8868  0576  1C03               	btfss	3,0
  8869  0577  2D79               	goto	u5501
  8870  0578  2D7A               	goto	u5500
  8871  0579                     u5501:	
  8872  0579  2D80               	goto	l6927
  8873  057A                     u5500:	
  8874  057A                     l6925:	
  8875                           
  8876                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
  8877  057A  300F               	movlw	15
  8878  057B  0020               	movlb	0	; select bank0
  8879  057C  00DA               	movwf	??_i2c_ISR
  8880  057D  085A               	movf	??_i2c_ISR,w
  8881  057E  0021               	movlb	1	; select bank1
  8882  057F  00A9               	movwf	(_i2c_status^(0+128)+9)
  8883  0580                     l6927:	
  8884                           
  8885                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
  8886  0580  0021               	movlb	1	; select bank1
  8887  0581  0829               	movf	(_i2c_status^(0+128)+9),w
  8888  0582  0020               	movlb	0	; select bank0
  8889  0583  00DA               	movwf	??_i2c_ISR
  8890  0584  01DB               	clrf	??_i2c_ISR+1
  8891  0585  35DA               	lslf	??_i2c_ISR,f
  8892  0586  0DDB               	rlf	??_i2c_ISR+1,f
  8893  0587  3000               	movlw	low (_fsmStateTable| (0+32768))
  8894  0588  075A               	addwf	??_i2c_ISR,w
  8895  0589  0084               	movwf	4
  8896  058A  3090               	movlw	high (_fsmStateTable| (0+32768))
  8897  058B  3D5B               	addwfc	??_i2c_ISR+1,w
  8898  058C  0085               	movwf	5
  8899  058D  3F01               	moviw [1]fsr0
  8900  058E  008A               	movwf	10
  8901  058F  3F00               	moviw [0]fsr0
  8902  0590  000A               	callw
  8903  0591  3185               	pagesel	$
  8904  0592  0020               	movlb	0	; select bank0
  8905  0593  00DC               	movwf	??_i2c_ISR+2
  8906  0594  085C               	movf	??_i2c_ISR+2,w
  8907  0595  0021               	movlb	1	; select bank1
  8908  0596  00A9               	movwf	(_i2c_status^(0+128)+9)
  8909  0597                     l198:	
  8910  0597  0008               	return
  8911  0598                     __end_of_i2c_ISR:	
  8912                           
  8913                           	psect	text24
  8914  0234                     __ptext24:	
  8915 ;; *************** function _do_I2C_RX *****************
  8916 ;; Defined at:
  8917 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8918 ;; Parameters:    Size  Location     Type
  8919 ;;		None
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;		None
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  1    wreg      enum E3411
  8924 ;; Registers used:
  8925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;Total ram usage:        3 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:    9
  8938 ;; This function calls:
  8939 ;;		Absolute function
  8940 ;;		_do_I2C_DO_NACK_RESTART
  8941 ;;		_do_I2C_DO_NACK_STOP
  8942 ;;		_i2c_driver_getRXData
  8943 ;;		_i2c_driver_sendACK
  8944 ;;		_i2c_restartWrite
  8945 ;;		_rd1RegCompleteHandler
  8946 ;;		_rd2RegCompleteHandler
  8947 ;;		_rdBlkRegCompleteHandler
  8948 ;;		_returnReset
  8949 ;;		_returnStop
  8950 ;;		_wr1RegCompleteHandler
  8951 ;;		_wr2RegCompleteHandler
  8952 ;; This function is called by:
  8953 ;;		_i2c_ISR
  8954 ;;		i1_i2c_ISR
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _do_I2C_RX
  8960  0234                     _do_I2C_RX:	
  8961                           
  8962                           ;Skip over the trampoline to the duplicate function for level 1
  8963  0234  1C7E               	btfss	int$flags,0
  8964  0235  2A38               	goto	_do_I2C_RX$intlevel0
  8965  0236  3182  2AD8         	ljmp	i1_do_I2C_RX
  8966  0238                     _do_I2C_RX$intlevel0:	
  8967  0238                     l6859:	
  8968                           ;incstack = 0
  8969                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8970                           
  8971                           
  8972                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
  8973  0238  3194  2471  3182   	fcall	_i2c_driver_getRXData
  8974  023B  0020               	movlb	0	; select bank0
  8975  023C  00D6               	movwf	??_do_I2C_RX
  8976  023D  0021               	movlb	1	; select bank1
  8977  023E  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  8978  023F  0086               	movwf	6
  8979  0240  0187               	clrf	7
  8980  0241  0020               	movlb	0	; select bank0
  8981  0242  0856               	movf	??_do_I2C_RX,w
  8982  0243  0081               	movwf	1
  8983  0244                     l6861:	
  8984  0244  3001               	movlw	1
  8985  0245  00D6               	movwf	??_do_I2C_RX
  8986  0246  0856               	movf	??_do_I2C_RX,w
  8987  0247  0021               	movlb	1	; select bank1
  8988  0248  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  8989  0249                     l6863:	
  8990                           
  8991                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
  8992  0249  3001               	movlw	1
  8993  024A  02A3               	subwf	(_i2c_status^(0+128)+3),f
  8994  024B  3000               	movlw	0
  8995  024C  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  8996  024D  0823               	movf	(_i2c_status^(0+128)+3),w
  8997  024E  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  8998  024F  1903               	btfsc	3,2
  8999  0250  2A52               	goto	u5461
  9000  0251  2A53               	goto	u5460
  9001  0252                     u5461:	
  9002  0252  2A58               	goto	l173
  9003  0253                     u5460:	
  9004  0253                     l6865:	
  9005                           
  9006                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
  9007  0253  3194  248B  3182   	fcall	_i2c_driver_sendACK
  9008  0256                     l6867:	
  9009                           
  9010                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
  9011  0256  3005               	movlw	5
  9012  0257  2A86               	goto	l174
  9013  0258                     l173:	
  9014                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
  9015                           
  9016                           
  9017                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
  9018  0258  1520               	bsf	_i2c_status^(0+128),2
  9019                           
  9020                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
  9021  0259  2A62               	goto	l6883
  9022  025A                     l6873:	
  9023                           
  9024                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
  9025  025A  3195  259A  3182   	fcall	_do_I2C_DO_NACK_RESTART
  9026  025D  2A86               	goto	l174
  9027  025E                     l6877:	
  9028                           
  9029                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
  9030  025E  3195  2591  3182   	fcall	_do_I2C_DO_NACK_STOP
  9031  0261  2A86               	goto	l174
  9032  0262                     l6883:	
  9033  0262  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  9034  0263  0020               	movlb	0	; select bank0
  9035  0264  00D6               	movwf	??_do_I2C_RX
  9036  0265  0856               	movf	??_do_I2C_RX,w
  9037  0266  00DF               	movwf	wr1RegCompleteHandler@p
  9038  0267  300B               	movlw	11
  9039  0268  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  9040  0269  0086               	movwf	6
  9041  026A  0187               	clrf	7
  9042  026B  3F41               	moviw [1]fsr1
  9043  026C  008A               	movwf	10
  9044  026D  3F40               	moviw [0]fsr1
  9045  026E  000A               	callw
  9046  026F  3182               	pagesel	$
  9047  0270  0020               	movlb	0	; select bank0
  9048  0271  00D7               	movwf	??_do_I2C_RX+1
  9049  0272  01D8               	clrf	??_do_I2C_RX+2
  9050                           
  9051                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9052                           ; Switch size 1, requested type "simple"
  9053                           ; Number of cases is 1, Range of values is 0 to 0
  9054                           ; switch strategies available:
  9055                           ; Name         Instructions Cycles
  9056                           ; simple_byte            4     3 (average)
  9057                           ; direct_byte            8     6 (fixed)
  9058                           ; jumptable            260     6 (fixed)
  9059                           ;	Chosen strategy is simple_byte
  9060  0273  0858               	movf	??_do_I2C_RX+2,w
  9061  0274  3A00               	xorlw	0	; case 0
  9062  0275  1903               	skipnz
  9063  0276  2A78               	goto	l8693
  9064  0277  2A5E               	goto	l6877
  9065  0278                     l8693:	
  9066                           
  9067                           ; Switch size 1, requested type "simple"
  9068                           ; Number of cases is 4, Range of values is 1 to 4
  9069                           ; switch strategies available:
  9070                           ; Name         Instructions Cycles
  9071                           ; simple_byte           13     7 (average)
  9072                           ; direct_byte           17     9 (fixed)
  9073                           ; jumptable            263     9 (fixed)
  9074                           ;	Chosen strategy is simple_byte
  9075  0278  0857               	movf	??_do_I2C_RX+1,w
  9076  0279  3A01               	xorlw	1	; case 1
  9077  027A  1903               	skipnz
  9078  027B  2A5E               	goto	l6877
  9079  027C  3A03               	xorlw	3	; case 2
  9080  027D  1903               	skipnz
  9081  027E  2A5A               	goto	l6873
  9082  027F  3A01               	xorlw	1	; case 3
  9083  0280  1903               	skipnz
  9084  0281  2A5A               	goto	l6873
  9085  0282  3A07               	xorlw	7	; case 4
  9086  0283  1903               	skipnz
  9087  0284  2A5E               	goto	l6877
  9088  0285  2A5E               	goto	l6877
  9089  0286                     l174:	
  9090  0286  0008               	return
  9091  0287                     __end_of_do_I2C_RX:	
  9092                           
  9093                           	psect	text25
  9094  012C                     __ptext25:	
  9095 ;; *************** function _do_I2C_TX *****************
  9096 ;; Defined at:
  9097 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;		None
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;		None
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  1    wreg      enum E3411
  9104 ;; Registers used:
  9105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;Total ram usage:        3 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    9
  9118 ;; This function calls:
  9119 ;;		Absolute function
  9120 ;;		_do_I2C_SEND_RESTART_READ
  9121 ;;		_do_I2C_SEND_RESTART_WRITE
  9122 ;;		_do_I2C_SEND_STOP
  9123 ;;		_i2c_driver_TXData
  9124 ;;		_i2c_driver_isNACK
  9125 ;;		_i2c_restartWrite
  9126 ;;		_rd1RegCompleteHandler
  9127 ;;		_rd2RegCompleteHandler
  9128 ;;		_rdBlkRegCompleteHandler
  9129 ;;		_returnReset
  9130 ;;		_returnStop
  9131 ;;		_wr1RegCompleteHandler
  9132 ;;		_wr2RegCompleteHandler
  9133 ;; This function is called by:
  9134 ;;		_i2c_ISR
  9135 ;;		i1_i2c_ISR
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           
  9140                           ;psect for function _do_I2C_TX
  9141  012C                     _do_I2C_TX:	
  9142                           
  9143                           ;Skip over the trampoline to the duplicate function for level 1
  9144  012C  1C7E               	btfss	int$flags,0
  9145  012D  2930               	goto	_do_I2C_TX$intlevel0
  9146  012E  3181  29DF         	ljmp	i1_do_I2C_TX
  9147  0130                     _do_I2C_TX$intlevel0:	
  9148  0130                     l6825:	
  9149                           ;incstack = 0
  9150                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9151                           
  9152                           
  9153                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
  9154  0130  3195  2552  3181   	fcall	_i2c_driver_isNACK
  9155  0133  1C03               	btfss	3,0
  9156  0134  2936               	goto	u5441
  9157  0135  2937               	goto	u5440
  9158  0136                     u5441:	
  9159  0136  2969               	goto	l157
  9160  0137                     u5440:	
  9161  0137  2944               	goto	l6843
  9162  0138                     l6829:	
  9163                           
  9164                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
  9165  0138  3195  2564  3181   	fcall	_do_I2C_SEND_RESTART_READ
  9166  013B  2985               	goto	l160
  9167  013C                     l6833:	
  9168                           
  9169                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
  9170  013C  3195  256D  3181   	fcall	_do_I2C_SEND_RESTART_WRITE
  9171  013F  2985               	goto	l160
  9172  0140                     l6837:	
  9173                           
  9174                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
  9175  0140  3195  257F  3181   	fcall	_do_I2C_SEND_STOP
  9176  0143  2985               	goto	l160
  9177  0144                     l6843:	
  9178  0144  0021               	movlb	1	; select bank1
  9179  0145  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  9180  0146  0020               	movlb	0	; select bank0
  9181  0147  00D7               	movwf	??_do_I2C_TX
  9182  0148  0857               	movf	??_do_I2C_TX,w
  9183  0149  00DF               	movwf	wr1RegCompleteHandler@p
  9184  014A  3011               	movlw	17
  9185  014B  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  9186  014C  0086               	movwf	6
  9187  014D  0187               	clrf	7
  9188  014E  3F41               	moviw [1]fsr1
  9189  014F  008A               	movwf	10
  9190  0150  3F40               	moviw [0]fsr1
  9191  0151  000A               	callw
  9192  0152  3181               	pagesel	$
  9193  0153  0020               	movlb	0	; select bank0
  9194  0154  00D8               	movwf	??_do_I2C_TX+1
  9195  0155  01D9               	clrf	??_do_I2C_TX+2
  9196                           
  9197                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9198                           ; Switch size 1, requested type "simple"
  9199                           ; Number of cases is 1, Range of values is 0 to 0
  9200                           ; switch strategies available:
  9201                           ; Name         Instructions Cycles
  9202                           ; simple_byte            4     3 (average)
  9203                           ; direct_byte            8     6 (fixed)
  9204                           ; jumptable            260     6 (fixed)
  9205                           ;	Chosen strategy is simple_byte
  9206  0156  0859               	movf	??_do_I2C_TX+2,w
  9207  0157  3A00               	xorlw	0	; case 0
  9208  0158  1903               	skipnz
  9209  0159  295B               	goto	l8695
  9210  015A  2940               	goto	l6837
  9211  015B                     l8695:	
  9212                           
  9213                           ; Switch size 1, requested type "simple"
  9214                           ; Number of cases is 4, Range of values is 1 to 4
  9215                           ; switch strategies available:
  9216                           ; Name         Instructions Cycles
  9217                           ; simple_byte           13     7 (average)
  9218                           ; direct_byte           17     9 (fixed)
  9219                           ; jumptable            263     9 (fixed)
  9220                           ;	Chosen strategy is simple_byte
  9221  015B  0858               	movf	??_do_I2C_TX+1,w
  9222  015C  3A01               	xorlw	1	; case 1
  9223  015D  1903               	skipnz
  9224  015E  2940               	goto	l6837
  9225  015F  3A03               	xorlw	3	; case 2
  9226  0160  1903               	skipnz
  9227  0161  2938               	goto	l6829
  9228  0162  3A01               	xorlw	1	; case 3
  9229  0163  1903               	skipnz
  9230  0164  293C               	goto	l6833
  9231  0165  3A07               	xorlw	7	; case 4
  9232  0166  1903               	skipnz
  9233  0167  2940               	goto	l6837
  9234  0168  2940               	goto	l6837
  9235  0169                     l157:	
  9236                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
  9237                           
  9238                           
  9239                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
  9240  0169  0021               	movlb	1	; select bank1
  9241  016A  11A0               	bcf	_i2c_status^(0+128),3
  9242  016B                     l6845:	
  9243                           
  9244                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
  9245  016B  3002               	movlw	2
  9246  016C  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  9247  016D  0086               	movwf	6
  9248  016E  0187               	clrf	7
  9249  016F  3F40               	moviw [0]fsr1
  9250  0170  0084               	movwf	4
  9251  0171  0185               	clrf	5
  9252  0172  0A81               	incf	1,f
  9253  0173  0800               	movf	0,w
  9254  0174  3194  24DD  3181   	fcall	_i2c_driver_TXData
  9255  0177                     l6847:	
  9256                           
  9257                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
  9258  0177  3001               	movlw	1
  9259  0178  0021               	movlb	1	; select bank1
  9260  0179  02A3               	subwf	(_i2c_status^(0+128)+3),f
  9261  017A  3000               	movlw	0
  9262  017B  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  9263  017C  0823               	movf	(_i2c_status^(0+128)+3),w
  9264  017D  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  9265  017E  1D03               	btfss	3,2
  9266  017F  2981               	goto	u5451
  9267  0180  2982               	goto	u5450
  9268  0181                     u5451:	
  9269  0181  2984               	goto	l6851
  9270  0182                     u5450:	
  9271  0182                     l6849:	
  9272  0182  3006               	movlw	6
  9273  0183  2985               	goto	l160
  9274  0184                     l6851:	
  9275  0184  3003               	movlw	3
  9276  0185                     l160:	
  9277  0185  0008               	return
  9278  0186                     __end_of_do_I2C_TX:	
  9279                           
  9280                           	psect	text26
  9281  04FF                     __ptext26:	
  9282 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  9283 ;; Defined at:
  9284 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  1    wreg      enum E3411
  9291 ;; Registers used:
  9292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;Total ram usage:        3 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    9
  9305 ;; This function calls:
  9306 ;;		Absolute function
  9307 ;;		_do_I2C_SEND_RESTART
  9308 ;;		_do_I2C_SEND_STOP
  9309 ;;		_i2c_restartWrite
  9310 ;;		_rd1RegCompleteHandler
  9311 ;;		_rd2RegCompleteHandler
  9312 ;;		_rdBlkRegCompleteHandler
  9313 ;;		_returnReset
  9314 ;;		_returnStop
  9315 ;;		_wr1RegCompleteHandler
  9316 ;;		_wr2RegCompleteHandler
  9317 ;; This function is called by:
  9318 ;;		_i2c_ISR
  9319 ;;		i1_i2c_ISR
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           
  9324                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  9325  04FF                     _do_I2C_DO_ADDRESS_NACK:	
  9326                           
  9327                           ;Skip over the trampoline to the duplicate function for level 1
  9328  04FF  1C7E               	btfss	int$flags,0
  9329  0500  2D03               	goto	_do_I2C_DO_ADDRESS_NACK$intlevel0
  9330  0501  3185  2DC5         	ljmp	i1_do_I2C_DO_ADDRESS_NACK
  9331  0503                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  9332  0503                     l6805:	
  9333                           ;incstack = 0
  9334                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9335                           
  9336                           
  9337                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
  9338  0503  0021               	movlb	1	; select bank1
  9339  0504  11A0               	bcf	_i2c_status^(0+128),3
  9340  0505                     l6807:	
  9341                           
  9342                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
  9343  0505  3002               	movlw	2
  9344  0506  0020               	movlb	0	; select bank0
  9345  0507  00D6               	movwf	??_do_I2C_DO_ADDRESS_NACK
  9346  0508  0856               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  9347  0509  0021               	movlb	1	; select bank1
  9348  050A  00AA               	movwf	(_i2c_status^(0+128)+10)
  9349                           
  9350                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
  9351  050B  2D14               	goto	l6819
  9352  050C                     l6809:	
  9353                           
  9354                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
  9355  050C  3195  2576  3184   	fcall	_do_I2C_SEND_RESTART
  9356  050F  2D32               	goto	l152
  9357  0510                     l6813:	
  9358                           
  9359                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
  9360  0510  3195  257F  3184   	fcall	_do_I2C_SEND_STOP
  9361  0513  2D32               	goto	l152
  9362  0514                     l6819:	
  9363  0514  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
  9364  0515  0020               	movlb	0	; select bank0
  9365  0516  00D6               	movwf	??_do_I2C_DO_ADDRESS_NACK
  9366  0517  0856               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  9367  0518  00DF               	movwf	wr1RegCompleteHandler@p
  9368  0519  300F               	movlw	15
  9369  051A  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  9370  051B  0086               	movwf	6
  9371  051C  0187               	clrf	7
  9372  051D  3F41               	moviw [1]fsr1
  9373  051E  008A               	movwf	10
  9374  051F  3F40               	moviw [0]fsr1
  9375  0520  000A               	callw
  9376  0521  3184               	pagesel	$
  9377  0522  0020               	movlb	0	; select bank0
  9378  0523  00D7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
  9379  0524  01D8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
  9380                           
  9381                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9382                           ; Switch size 1, requested type "simple"
  9383                           ; Number of cases is 1, Range of values is 0 to 0
  9384                           ; switch strategies available:
  9385                           ; Name         Instructions Cycles
  9386                           ; simple_byte            4     3 (average)
  9387                           ; direct_byte            8     6 (fixed)
  9388                           ; jumptable            260     6 (fixed)
  9389                           ;	Chosen strategy is simple_byte
  9390  0525  0858               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
  9391  0526  3A00               	xorlw	0	; case 0
  9392  0527  1903               	skipnz
  9393  0528  2D2A               	goto	l8697
  9394  0529  2D10               	goto	l6813
  9395  052A                     l8697:	
  9396                           
  9397                           ; Switch size 1, requested type "simple"
  9398                           ; Number of cases is 2, Range of values is 2 to 3
  9399                           ; switch strategies available:
  9400                           ; Name         Instructions Cycles
  9401                           ; simple_byte            7     4 (average)
  9402                           ; direct_byte           13     9 (fixed)
  9403                           ; jumptable            263     9 (fixed)
  9404                           ;	Chosen strategy is simple_byte
  9405  052A  0857               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
  9406  052B  3A02               	xorlw	2	; case 2
  9407  052C  1903               	skipnz
  9408  052D  2D0C               	goto	l6809
  9409  052E  3A01               	xorlw	1	; case 3
  9410  052F  1903               	skipnz
  9411  0530  2D0C               	goto	l6809
  9412  0531  2D10               	goto	l6813
  9413  0532                     l152:	
  9414  0532  0008               	return
  9415  0533                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  9416                           
  9417                           	psect	text27
  9418  159A                     __ptext27:	
  9419 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  9420 ;; Defined at:
  9421 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;		None
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;		None
  9426 ;; Return value:  Size  Location     Type
  9427 ;;                  1    wreg      enum E3411
  9428 ;; Registers used:
  9429 ;;		wreg, status,2, status,0, pclath, cstack
  9430 ;; Tracked objects:
  9431 ;;		On entry : 0/0
  9432 ;;		On exit  : 0/0
  9433 ;;		Unchanged: 0/0
  9434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;Total ram usage:        0 bytes
  9440 ;; Hardware stack levels used:    1
  9441 ;; Hardware stack levels required when called:    7
  9442 ;; This function calls:
  9443 ;;		_i2c_driver_sendNACK
  9444 ;; This function is called by:
  9445 ;;		_do_I2C_RX
  9446 ;;		_i2c_ISR
  9447 ;;		i1_i2c_ISR
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           
  9452                           ;psect for function _do_I2C_DO_NACK_RESTART
  9453  159A                     _do_I2C_DO_NACK_RESTART:	
  9454                           
  9455                           ;Skip over the trampoline to the duplicate function for level 1
  9456  159A  1C7E               	btfss	int$flags,0
  9457  159B  2D9E               	goto	_do_I2C_DO_NACK_RESTART$intlevel0
  9458  159C  3194  2CBB         	ljmp	i1_do_I2C_DO_NACK_RESTART
  9459  159E                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  9460  159E                     l6689:	
  9461                           ;incstack = 0
  9462                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9463                           
  9464                           
  9465                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
  9466  159E  3194  248F  3195   	fcall	_i2c_driver_sendNACK
  9467  15A1                     l6691:	
  9468                           
  9469                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
  9470  15A1  3009               	movlw	9
  9471  15A2                     l146:	
  9472  15A2  0008               	return
  9473  15A3                     __end_of_do_I2C_DO_NACK_RESTART:	
  9474                           
  9475                           	psect	text28
  9476  1591                     __ptext28:	
  9477 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  9478 ;; Defined at:
  9479 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      enum E3411
  9486 ;; Registers used:
  9487 ;;		wreg, status,2, status,0, pclath, cstack
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        0 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    7
  9500 ;; This function calls:
  9501 ;;		_i2c_driver_sendNACK
  9502 ;; This function is called by:
  9503 ;;		_do_I2C_RX
  9504 ;;		_i2c_ISR
  9505 ;;		i1_i2c_ISR
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           
  9510                           ;psect for function _do_I2C_DO_NACK_STOP
  9511  1591                     _do_I2C_DO_NACK_STOP:	
  9512                           
  9513                           ;Skip over the trampoline to the duplicate function for level 1
  9514  1591  1C7E               	btfss	int$flags,0
  9515  1592  2D95               	goto	_do_I2C_DO_NACK_STOP$intlevel0
  9516  1593  3194  2CB6         	ljmp	i1_do_I2C_DO_NACK_STOP
  9517  1595                     _do_I2C_DO_NACK_STOP$intlevel0:	
  9518  1595                     l6683:	
  9519                           ;incstack = 0
  9520                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9521                           
  9522                           
  9523                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
  9524  1595  3194  248F  3195   	fcall	_i2c_driver_sendNACK
  9525  1598                     l6685:	
  9526                           
  9527                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
  9528  1598  300A               	movlw	10
  9529  1599                     l143:	
  9530  1599  0008               	return
  9531  159A                     __end_of_do_I2C_DO_NACK_STOP:	
  9532                           
  9533                           	psect	text29
  9534  1588                     __ptext29:	
  9535 ;; *************** function _do_I2C_DO_ACK *****************
  9536 ;; Defined at:
  9537 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;		None
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;		None
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  1    wreg      enum E3411
  9544 ;; Registers used:
  9545 ;;		wreg, status,2, status,0, pclath, cstack
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;Total ram usage:        0 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:    7
  9558 ;; This function calls:
  9559 ;;		_i2c_driver_sendACK
  9560 ;; This function is called by:
  9561 ;;		_i2c_ISR
  9562 ;;		i1_i2c_ISR
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           
  9567                           ;psect for function _do_I2C_DO_ACK
  9568  1588                     _do_I2C_DO_ACK:	
  9569                           
  9570                           ;Skip over the trampoline to the duplicate function for level 1
  9571  1588  1C7E               	btfss	int$flags,0
  9572  1589  2D8C               	goto	_do_I2C_DO_ACK$intlevel0
  9573  158A  3194  2CB1         	ljmp	i1_do_I2C_DO_ACK
  9574  158C                     _do_I2C_DO_ACK$intlevel0:	
  9575  158C                     l6799:	
  9576                           ;incstack = 0
  9577                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  9578                           
  9579                           
  9580                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
  9581  158C  3194  248B  3195   	fcall	_i2c_driver_sendACK
  9582  158F                     l6801:	
  9583                           
  9584                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
  9585  158F  3005               	movlw	5
  9586  1590                     l140:	
  9587  1590  0008               	return
  9588  1591                     __end_of_do_I2C_DO_ACK:	
  9589                           
  9590                           	psect	text30
  9591  15AD                     __ptext30:	
  9592 ;; *************** function _do_I2C_RCEN *****************
  9593 ;; Defined at:
  9594 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;		None
  9597 ;; Auto vars:     Size  Location     Type
  9598 ;;		None
  9599 ;; Return value:  Size  Location     Type
  9600 ;;                  1    wreg      enum E3411
  9601 ;; Registers used:
  9602 ;;		wreg, status,2, status,0, pclath, cstack
  9603 ;; Tracked objects:
  9604 ;;		On entry : 0/0
  9605 ;;		On exit  : 0/0
  9606 ;;		Unchanged: 0/0
  9607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;Total ram usage:        0 bytes
  9613 ;; Hardware stack levels used:    1
  9614 ;; Hardware stack levels required when called:    7
  9615 ;; This function calls:
  9616 ;;		_i2c_driver_startRX
  9617 ;; This function is called by:
  9618 ;;		_i2c_ISR
  9619 ;;		i1_i2c_ISR
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function _do_I2C_RCEN
  9625  15AD                     _do_I2C_RCEN:	
  9626                           
  9627                           ;Skip over the trampoline to the duplicate function for level 1
  9628  15AD  1C7E               	btfss	int$flags,0
  9629  15AE  2DB1               	goto	_do_I2C_RCEN$intlevel0
  9630  15AF  3194  2CF5         	ljmp	i1_do_I2C_RCEN
  9631  15B1                     _do_I2C_RCEN$intlevel0:	
  9632  15B1                     l6791:	
  9633                           ;incstack = 0
  9634                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9635                           
  9636                           
  9637                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
  9638  15B1  0021               	movlb	1	; select bank1
  9639  15B2  11A0               	bcf	_i2c_status^(0+128),3
  9640  15B3                     l6793:	
  9641                           
  9642                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
  9643  15B3  3194  246E  3195   	fcall	_i2c_driver_startRX
  9644  15B6                     l6795:	
  9645                           
  9646                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
  9647  15B6  3004               	movlw	4
  9648  15B7                     l137:	
  9649  15B7  0008               	return
  9650  15B8                     __end_of_do_I2C_RCEN:	
  9651                           
  9652                           	psect	text31
  9653  15DC                     __ptext31:	
  9654 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  9655 ;; Defined at:
  9656 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;		None
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;		None
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      enum E3411
  9663 ;; Registers used:
  9664 ;;		wreg, status,2, status,0, pclath, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;Total ram usage:        0 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    7
  9677 ;; This function calls:
  9678 ;;		_i2c_driver_TXData
  9679 ;; This function is called by:
  9680 ;;		_i2c_ISR
  9681 ;;		i1_i2c_ISR
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           
  9686                           ;psect for function _do_I2C_SEND_ADR_WRITE
  9687  15DC                     _do_I2C_SEND_ADR_WRITE:	
  9688                           
  9689                           ;Skip over the trampoline to the duplicate function for level 1
  9690  15DC  1C7E               	btfss	int$flags,0
  9691  15DD  2DE0               	goto	_do_I2C_SEND_ADR_WRITE$intlevel0
  9692  15DE  3195  2D14         	ljmp	i1_do_I2C_SEND_ADR_WRITE
  9693  15E0                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  9694  15E0                     l6783:	
  9695                           ;incstack = 0
  9696                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9697                           
  9698                           
  9699                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
  9700  15E0  0021               	movlb	1	; select bank1
  9701  15E1  15A0               	bsf	_i2c_status^(0+128),3
  9702  15E2                     l6785:	
  9703                           
  9704                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
  9705  15E2  3521               	lslf	(_i2c_status^(0+128)+1),w
  9706  15E3  3194  24DD  3195   	fcall	_i2c_driver_TXData
  9707  15E6                     l6787:	
  9708                           
  9709                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
  9710  15E6  3003               	movlw	3
  9711  15E7                     l134:	
  9712  15E7  0008               	return
  9713  15E8                     __end_of_do_I2C_SEND_ADR_WRITE:	
  9714                           
  9715                           	psect	text32
  9716  160E                     __ptext32:	
  9717 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  9718 ;; Defined at:
  9719 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;		None
  9724 ;; Return value:  Size  Location     Type
  9725 ;;                  1    wreg      enum E3411
  9726 ;; Registers used:
  9727 ;;		wreg, status,2, status,0, pclath, cstack
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        0 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    7
  9740 ;; This function calls:
  9741 ;;		_i2c_driver_TXData
  9742 ;; This function is called by:
  9743 ;;		_i2c_ISR
  9744 ;;		i1_i2c_ISR
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           
  9749                           ;psect for function _do_I2C_SEND_ADR_READ
  9750  160E                     _do_I2C_SEND_ADR_READ:	
  9751                           
  9752                           ;Skip over the trampoline to the duplicate function for level 1
  9753  160E  1C7E               	btfss	int$flags,0
  9754  160F  2E12               	goto	_do_I2C_SEND_ADR_READ$intlevel0
  9755  1610  3195  2D25         	ljmp	i1_do_I2C_SEND_ADR_READ
  9756  1612                     _do_I2C_SEND_ADR_READ$intlevel0:	
  9757  1612                     l6775:	
  9758                           ;incstack = 0
  9759                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  9760                           
  9761                           
  9762                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
  9763  1612  0021               	movlb	1	; select bank1
  9764  1613  15A0               	bsf	_i2c_status^(0+128),3
  9765  1614                     l6777:	
  9766                           
  9767                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
  9768  1614  1403               	setc
  9769  1615  0D21               	rlf	(_i2c_status^(0+128)+1),w
  9770  1616  3194  24DD  3196   	fcall	_i2c_driver_TXData
  9771  1619                     l6779:	
  9772                           
  9773                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
  9774  1619  3005               	movlw	5
  9775  161A                     l131:	
  9776  161A  0008               	return
  9777  161B                     __end_of_do_I2C_SEND_ADR_READ:	
  9778                           
  9779                           	psect	text33
  9780  157F                     __ptext33:	
  9781 ;; *************** function _do_I2C_SEND_STOP *****************
  9782 ;; Defined at:
  9783 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;		None
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;		None
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      enum E3411
  9790 ;; Registers used:
  9791 ;;		wreg, status,2, status,0, pclath, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;Total ram usage:        0 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    7
  9804 ;; This function calls:
  9805 ;;		_i2c_driver_stop
  9806 ;; This function is called by:
  9807 ;;		_do_I2C_DO_ADDRESS_NACK
  9808 ;;		_do_I2C_TX
  9809 ;;		_do_I2C_TX_EMPTY
  9810 ;;		_i2c_ISR
  9811 ;;		i1_i2c_ISR
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           
  9816                           ;psect for function _do_I2C_SEND_STOP
  9817  157F                     _do_I2C_SEND_STOP:	
  9818                           
  9819                           ;Skip over the trampoline to the duplicate function for level 1
  9820  157F  1C7E               	btfss	int$flags,0
  9821  1580  2D83               	goto	_do_I2C_SEND_STOP$intlevel0
  9822  1581  3194  2CAC         	ljmp	i1_do_I2C_SEND_STOP
  9823  1583                     _do_I2C_SEND_STOP$intlevel0:	
  9824  1583                     l6671:	
  9825                           ;incstack = 0
  9826                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9827                           
  9828                           
  9829                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
  9830  1583  3194  246B  3195   	fcall	_i2c_driver_stop
  9831  1586                     l6673:	
  9832                           
  9833                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
  9834  1586  3000               	movlw	0
  9835  1587                     l128:	
  9836  1587  0008               	return
  9837  1588                     __end_of_do_I2C_SEND_STOP:	
  9838                           
  9839                           	psect	text34
  9840  1576                     __ptext34:	
  9841 ;; *************** function _do_I2C_SEND_RESTART *****************
  9842 ;; Defined at:
  9843 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;		None
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;		None
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  1    wreg      enum E3411
  9850 ;; Registers used:
  9851 ;;		wreg, status,2, status,0, pclath, cstack
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;Total ram usage:        0 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    7
  9864 ;; This function calls:
  9865 ;;		_i2c_driver_restart
  9866 ;; This function is called by:
  9867 ;;		_do_I2C_DO_ADDRESS_NACK
  9868 ;;		_do_I2C_TX_EMPTY
  9869 ;;		_i2c_ISR
  9870 ;;		i1_i2c_ISR
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           
  9875                           ;psect for function _do_I2C_SEND_RESTART
  9876  1576                     _do_I2C_SEND_RESTART:	
  9877                           
  9878                           ;Skip over the trampoline to the duplicate function for level 1
  9879  1576  1C7E               	btfss	int$flags,0
  9880  1577  2D7A               	goto	_do_I2C_SEND_RESTART$intlevel0
  9881  1578  3194  2CA7         	ljmp	i1_do_I2C_SEND_RESTART
  9882  157A                     _do_I2C_SEND_RESTART$intlevel0:	
  9883  157A                     l6665:	
  9884                           ;incstack = 0
  9885                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9886                           
  9887                           
  9888                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
  9889  157A  3194  2468  3195   	fcall	_i2c_driver_restart
  9890  157D                     l6667:	
  9891                           
  9892                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
  9893  157D  3001               	movlw	1
  9894  157E                     l125:	
  9895  157E  0008               	return
  9896  157F                     __end_of_do_I2C_SEND_RESTART:	
  9897                           
  9898                           	psect	text35
  9899  156D                     __ptext35:	
  9900 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  9901 ;; Defined at:
  9902 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;		None
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;		None
  9907 ;; Return value:  Size  Location     Type
  9908 ;;                  1    wreg      enum E3411
  9909 ;; Registers used:
  9910 ;;		wreg, status,2, status,0, pclath, cstack
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;Total ram usage:        0 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    7
  9923 ;; This function calls:
  9924 ;;		_i2c_driver_restart
  9925 ;; This function is called by:
  9926 ;;		_do_I2C_TX
  9927 ;;		_i2c_ISR
  9928 ;;		i1_i2c_ISR
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932                           
  9933                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  9934  156D                     _do_I2C_SEND_RESTART_WRITE:	
  9935                           
  9936                           ;Skip over the trampoline to the duplicate function for level 1
  9937  156D  1C7E               	btfss	int$flags,0
  9938  156E  2D71               	goto	_do_I2C_SEND_RESTART_WRITE$intlevel0
  9939  156F  3194  2CA2         	ljmp	i1_do_I2C_SEND_RESTART_WRITE
  9940  1571                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  9941  1571                     l6659:	
  9942                           ;incstack = 0
  9943                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9944                           
  9945                           
  9946                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
  9947  1571  3194  2468  3195   	fcall	_i2c_driver_restart
  9948  1574                     l6661:	
  9949                           
  9950                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
  9951  1574  3002               	movlw	2
  9952  1575                     l122:	
  9953  1575  0008               	return
  9954  1576                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  9955                           
  9956                           	psect	text36
  9957  1564                     __ptext36:	
  9958 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  9959 ;; Defined at:
  9960 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;		None
  9963 ;; Auto vars:     Size  Location     Type
  9964 ;;		None
  9965 ;; Return value:  Size  Location     Type
  9966 ;;                  1    wreg      enum E3411
  9967 ;; Registers used:
  9968 ;;		wreg, status,2, status,0, pclath, cstack
  9969 ;; Tracked objects:
  9970 ;;		On entry : 0/0
  9971 ;;		On exit  : 0/0
  9972 ;;		Unchanged: 0/0
  9973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;Total ram usage:        0 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:    7
  9981 ;; This function calls:
  9982 ;;		_i2c_driver_restart
  9983 ;; This function is called by:
  9984 ;;		_do_I2C_TX
  9985 ;;		_i2c_ISR
  9986 ;;		i1_i2c_ISR
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           
  9991                           ;psect for function _do_I2C_SEND_RESTART_READ
  9992  1564                     _do_I2C_SEND_RESTART_READ:	
  9993                           
  9994                           ;Skip over the trampoline to the duplicate function for level 1
  9995  1564  1C7E               	btfss	int$flags,0
  9996  1565  2D68               	goto	_do_I2C_SEND_RESTART_READ$intlevel0
  9997  1566  3194  2C9D         	ljmp	i1_do_I2C_SEND_RESTART_READ
  9998  1568                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  9999  1568                     l6653:	
 10000                           ;incstack = 0
 10001                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 10002                           
 10003                           
 10004                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
 10005  1568  3194  2468  3195   	fcall	_i2c_driver_restart
 10006  156B                     l6655:	
 10007                           
 10008                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 10009  156B  3001               	movlw	1
 10010  156C                     l119:	
 10011  156C  0008               	return
 10012  156D                     __end_of_do_I2C_SEND_RESTART_READ:	
 10013                           
 10014                           	psect	text37
 10015  155B                     __ptext37:	
 10016 ;; *************** function _do_I2C_IDLE *****************
 10017 ;; Defined at:
 10018 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;		None
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      enum E3411
 10025 ;; Registers used:
 10026 ;;		wreg, status,2
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;Total ram usage:        0 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    6
 10039 ;; This function calls:
 10040 ;;		Nothing
 10041 ;; This function is called by:
 10042 ;;		_i2c_ISR
 10043 ;;		i1_i2c_ISR
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           
 10048                           ;psect for function _do_I2C_IDLE
 10049  155B                     _do_I2C_IDLE:	
 10050                           
 10051                           ;Skip over the trampoline to the duplicate function for level 1
 10052  155B  1C7E               	btfss	int$flags,0
 10053  155C  2D5F               	goto	_do_I2C_IDLE$intlevel0
 10054  155D  3194  2C98         	ljmp	i1_do_I2C_IDLE
 10055  155F                     _do_I2C_IDLE$intlevel0:	
 10056  155F                     l6767:	
 10057                           ;incstack = 0
 10058                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 10059                           
 10060                           
 10061                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 10062  155F  0021               	movlb	1	; select bank1
 10063  1560  1020               	bcf	_i2c_status^(0+128),0
 10064  1561                     l6769:	
 10065                           
 10066                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 10067  1561  01AA               	clrf	(_i2c_status^(0+128)+10)
 10068  1562                     l6771:	
 10069                           
 10070                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 10071  1562  300E               	movlw	14
 10072  1563                     l116:	
 10073  1563  0008               	return
 10074  1564                     __end_of_do_I2C_IDLE:	
 10075                           
 10076                           	psect	text38
 10077  15D0                     __ptext38:	
 10078 ;; *************** function _do_I2C_RESET *****************
 10079 ;; Defined at:
 10080 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;		None
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;		None
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  1    wreg      enum E3411
 10087 ;; Registers used:
 10088 ;;		wreg, status,2, status,0, pclath, cstack
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;Total ram usage:        0 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; Hardware stack levels required when called:    7
 10101 ;; This function calls:
 10102 ;;		_i2c_driver_resetBus
 10103 ;; This function is called by:
 10104 ;;		_i2c_ISR
 10105 ;;		i1_i2c_ISR
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           
 10110                           ;psect for function _do_I2C_RESET
 10111  15D0                     _do_I2C_RESET:	
 10112                           
 10113                           ;Skip over the trampoline to the duplicate function for level 1
 10114  15D0  1C7E               	btfss	int$flags,0
 10115  15D1  2DD4               	goto	_do_I2C_RESET$intlevel0
 10116  15D2  3195  2D0C         	ljmp	i1_do_I2C_RESET
 10117  15D4                     _do_I2C_RESET$intlevel0:	
 10118  15D4                     l6757:	
 10119                           ;incstack = 0
 10120                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 10121                           
 10122                           
 10123                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
 10124  15D4  3194  2445  3195   	fcall	_i2c_driver_resetBus
 10125  15D7                     l6759:	
 10126                           
 10127                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 10128  15D7  0021               	movlb	1	; select bank1
 10129  15D8  1020               	bcf	_i2c_status^(0+128),0
 10130  15D9                     l6761:	
 10131                           
 10132                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 10133  15D9  01AA               	clrf	(_i2c_status^(0+128)+10)
 10134  15DA                     l6763:	
 10135                           
 10136                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 10137  15DA  300E               	movlw	14
 10138  15DB                     l113:	
 10139  15DB  0008               	return
 10140  15DC                     __end_of_do_I2C_RESET:	
 10141                           
 10142                           	psect	text39
 10143  0420                     __ptext39:	
 10144 ;; *************** function _do_I2C_TX_EMPTY *****************
 10145 ;; Defined at:
 10146 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;		None
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  1    wreg      enum E3411
 10153 ;; Registers used:
 10154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;Total ram usage:        3 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    9
 10167 ;; This function calls:
 10168 ;;		Absolute function
 10169 ;;		_do_I2C_SEND_RESTART
 10170 ;;		_do_I2C_SEND_STOP
 10171 ;;		_i2c_restartWrite
 10172 ;;		_mssp_setIRQ
 10173 ;;		_rd1RegCompleteHandler
 10174 ;;		_rd2RegCompleteHandler
 10175 ;;		_rdBlkRegCompleteHandler
 10176 ;;		_returnReset
 10177 ;;		_returnStop
 10178 ;;		_wr1RegCompleteHandler
 10179 ;;		_wr2RegCompleteHandler
 10180 ;; This function is called by:
 10181 ;;		_i2c_ISR
 10182 ;;		i1_i2c_ISR
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function _do_I2C_TX_EMPTY
 10188  0420                     _do_I2C_TX_EMPTY:	
 10189                           
 10190                           ;Skip over the trampoline to the duplicate function for level 1
 10191  0420  1C7E               	btfss	int$flags,0
 10192  0421  2C24               	goto	_do_I2C_TX_EMPTY$intlevel0
 10193  0422  3185  2D33         	ljmp	i1_do_I2C_TX_EMPTY
 10194  0424                     _do_I2C_TX_EMPTY$intlevel0:	
 10195  0424                     l6889:	
 10196                           ;incstack = 0
 10197                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10198                           
 10199                           
 10200                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 10201  0424  0021               	movlb	1	; select bank1
 10202  0425  1520               	bsf	_i2c_status^(0+128),2
 10203                           
 10204                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 10205  0426  2C34               	goto	l6907
 10206  0427                     l6891:	
 10207                           
 10208                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 10209  0427  3195  2576  3184   	fcall	_do_I2C_SEND_RESTART
 10210  042A  2C58               	goto	l188
 10211  042B                     l6895:	
 10212                           
 10213                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
 10214  042B  3194  2474  3184   	fcall	_mssp_setIRQ
 10215  042E                     l6897:	
 10216                           
 10217                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 10218  042E  3003               	movlw	3
 10219  042F  2C58               	goto	l188
 10220  0430                     l6901:	
 10221                           
 10222                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 10223  0430  3195  257F  3184   	fcall	_do_I2C_SEND_STOP
 10224  0433  2C58               	goto	l188
 10225  0434                     l6907:	
 10226  0434  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 10227  0435  0020               	movlb	0	; select bank0
 10228  0436  00D6               	movwf	??_do_I2C_TX_EMPTY
 10229  0437  0856               	movf	??_do_I2C_TX_EMPTY,w
 10230  0438  00DF               	movwf	wr1RegCompleteHandler@p
 10231  0439  300B               	movlw	11
 10232  043A  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10233  043B  0086               	movwf	6
 10234  043C  0187               	clrf	7
 10235  043D  3F41               	moviw [1]fsr1
 10236  043E  008A               	movwf	10
 10237  043F  3F40               	moviw [0]fsr1
 10238  0440  000A               	callw
 10239  0441  3184               	pagesel	$
 10240  0442  0020               	movlb	0	; select bank0
 10241  0443  00D7               	movwf	??_do_I2C_TX_EMPTY+1
 10242  0444  01D8               	clrf	??_do_I2C_TX_EMPTY+2
 10243                           
 10244                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10245                           ; Switch size 1, requested type "simple"
 10246                           ; Number of cases is 1, Range of values is 0 to 0
 10247                           ; switch strategies available:
 10248                           ; Name         Instructions Cycles
 10249                           ; simple_byte            4     3 (average)
 10250                           ; direct_byte            8     6 (fixed)
 10251                           ; jumptable            260     6 (fixed)
 10252                           ;	Chosen strategy is simple_byte
 10253  0445  0858               	movf	??_do_I2C_TX_EMPTY+2,w
 10254  0446  3A00               	xorlw	0	; case 0
 10255  0447  1903               	skipnz
 10256  0448  2C4A               	goto	l8699
 10257  0449  2C30               	goto	l6901
 10258  044A                     l8699:	
 10259                           
 10260                           ; Switch size 1, requested type "simple"
 10261                           ; Number of cases is 4, Range of values is 1 to 4
 10262                           ; switch strategies available:
 10263                           ; Name         Instructions Cycles
 10264                           ; simple_byte           13     7 (average)
 10265                           ; direct_byte           17     9 (fixed)
 10266                           ; jumptable            263     9 (fixed)
 10267                           ;	Chosen strategy is simple_byte
 10268  044A  0857               	movf	??_do_I2C_TX_EMPTY+1,w
 10269  044B  3A01               	xorlw	1	; case 1
 10270  044C  1903               	skipnz
 10271  044D  2C30               	goto	l6901
 10272  044E  3A03               	xorlw	3	; case 2
 10273  044F  1903               	skipnz
 10274  0450  2C27               	goto	l6891
 10275  0451  3A01               	xorlw	1	; case 3
 10276  0452  1903               	skipnz
 10277  0453  2C27               	goto	l6891
 10278  0454  3A07               	xorlw	7	; case 4
 10279  0455  1903               	skipnz
 10280  0456  2C2B               	goto	l6895
 10281  0457  2C30               	goto	l6901
 10282  0458                     l188:	
 10283  0458  0008               	return
 10284  0459                     __end_of_do_I2C_TX_EMPTY:	
 10285                           
 10286                           	psect	text40
 10287  1474                     __ptext40:	
 10288 ;; *************** function _mssp_setIRQ *****************
 10289 ;; Defined at:
 10290 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;		None
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;		None
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      void 
 10297 ;; Registers used:
 10298 ;;		None
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;Total ram usage:        0 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    6
 10311 ;; This function calls:
 10312 ;;		Nothing
 10313 ;; This function is called by:
 10314 ;;		_do_I2C_TX_EMPTY
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function _mssp_setIRQ
 10320  1474                     _mssp_setIRQ:	
 10321  1474                     l6703:	
 10322                           ;incstack = 0
 10323                           ; Regs used in _mssp_setIRQ: []
 10324                           
 10325                           
 10326                           ;mcc_generated_files/i2c_driver.c: 61:     else
 10327  1474  0020               	movlb	0	; select bank0
 10328  1475  1591               	bsf	17,3	;volatile
 10329  1476                     l602:	
 10330  1476  0008               	return
 10331  1477                     __end_of_mssp_setIRQ:	
 10332                           
 10333                           	psect	text41
 10334  1552                     __ptext41:	
 10335 ;; *************** function _i2c_driver_isNACK *****************
 10336 ;; Defined at:
 10337 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;		None
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;		None
 10342 ;; Return value:  Size  Location     Type
 10343 ;;		None               void
 10344 ;; Registers used:
 10345 ;;		wreg, status,2, status,0
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;Total ram usage:        1 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    6
 10358 ;; This function calls:
 10359 ;;		Nothing
 10360 ;; This function is called by:
 10361 ;;		_do_I2C_TX
 10362 ;;		_i2c_ISR
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           
 10367                           ;psect for function _i2c_driver_isNACK
 10368  1552                     _i2c_driver_isNACK:	
 10369  1552                     l6695:	
 10370                           ;incstack = 0
 10371                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
 10372                           
 10373                           
 10374                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
 10375  1552  0024               	movlb	4	; select bank4
 10376  1553  0E16               	swapf	22,w	;volatile
 10377  1554  0C89               	rrf	9,f
 10378  1555  0C89               	rrf	9,f
 10379  1556  3901               	andlw	1
 10380  1557  0020               	movlb	0	; select bank0
 10381  1558  00D6               	movwf	??_i2c_driver_isNACK
 10382  1559  0C56               	rrf	??_i2c_driver_isNACK,w
 10383  155A                     l637:	
 10384  155A  0008               	return
 10385  155B                     __end_of_i2c_driver_isNACK:	
 10386                           
 10387                           	psect	text42
 10388  14DD                     __ptext42:	
 10389 ;; *************** function _i2c_driver_TXData *****************
 10390 ;; Defined at:
 10391 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;  d               1    wreg     unsigned char 
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;  d               1    0[BANK0 ] unsigned char 
 10396 ;; Return value:  Size  Location     Type
 10397 ;;                  1    wreg      void 
 10398 ;; Registers used:
 10399 ;;		wreg
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;Total ram usage:        1 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    6
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_do_I2C_SEND_ADR_READ
 10416 ;;		_do_I2C_SEND_ADR_WRITE
 10417 ;;		_do_I2C_TX
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function _i2c_driver_TXData
 10423  14DD                     _i2c_driver_TXData:	
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in _i2c_driver_TXData: [wreg]
 10427                           ;i2c_driver_TXData@d stored from wreg
 10428  14DD  0020               	movlb	0	; select bank0
 10429  14DE  00D6               	movwf	i2c_driver_TXData@d
 10430  14DF                     l6677:	
 10431                           
 10432                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
 10433  14DF  0856               	movf	i2c_driver_TXData@d,w
 10434  14E0  0024               	movlb	4	; select bank4
 10435  14E1  0091               	movwf	17	;volatile
 10436  14E2                     l652:	
 10437  14E2  0008               	return
 10438  14E3                     __end_of_i2c_driver_TXData:	
 10439                           
 10440                           	psect	text43
 10441  1471                     __ptext43:	
 10442 ;; *************** function _i2c_driver_getRXData *****************
 10443 ;; Defined at:
 10444 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;		None
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;		None
 10449 ;; Return value:  Size  Location     Type
 10450 ;;                  1    wreg      unsigned char 
 10451 ;; Registers used:
 10452 ;;		wreg
 10453 ;; Tracked objects:
 10454 ;;		On entry : 0/0
 10455 ;;		On exit  : 0/0
 10456 ;;		Unchanged: 0/0
 10457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;Total ram usage:        0 bytes
 10463 ;; Hardware stack levels used:    1
 10464 ;; Hardware stack levels required when called:    6
 10465 ;; This function calls:
 10466 ;;		Nothing
 10467 ;; This function is called by:
 10468 ;;		_do_I2C_RX
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           
 10473                           ;psect for function _i2c_driver_getRXData
 10474  1471                     _i2c_driver_getRXData:	
 10475  1471                     l6699:	
 10476                           ;incstack = 0
 10477                           ; Regs used in _i2c_driver_getRXData: [wreg]
 10478                           
 10479                           
 10480                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
 10481  1471  0024               	movlb	4	; select bank4
 10482  1472  0811               	movf	17,w	;volatile
 10483  1473                     l643:	
 10484  1473  0008               	return
 10485  1474                     __end_of_i2c_driver_getRXData:	
 10486                           
 10487                           	psect	text44
 10488  148F                     __ptext44:	
 10489 ;; *************** function _i2c_driver_sendNACK *****************
 10490 ;; Defined at:
 10491 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
 10492 ;; Parameters:    Size  Location     Type
 10493 ;;		None
 10494 ;; Auto vars:     Size  Location     Type
 10495 ;;		None
 10496 ;; Return value:  Size  Location     Type
 10497 ;;                  1    wreg      void 
 10498 ;; Registers used:
 10499 ;;		None
 10500 ;; Tracked objects:
 10501 ;;		On entry : 0/0
 10502 ;;		On exit  : 0/0
 10503 ;;		Unchanged: 0/0
 10504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;Total ram usage:        0 bytes
 10510 ;; Hardware stack levels used:    1
 10511 ;; Hardware stack levels required when called:    6
 10512 ;; This function calls:
 10513 ;;		Nothing
 10514 ;; This function is called by:
 10515 ;;		_do_I2C_DO_NACK_STOP
 10516 ;;		_do_I2C_DO_NACK_RESTART
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           
 10521                           ;psect for function _i2c_driver_sendNACK
 10522  148F                     _i2c_driver_sendNACK:	
 10523  148F                     l6651:	
 10524                           ;incstack = 0
 10525                           ; Regs used in _i2c_driver_sendNACK: []
 10526                           
 10527                           
 10528                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
 10529  148F  0024               	movlb	4	; select bank4
 10530  1490  1696               	bsf	22,5	;volatile
 10531                           
 10532                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
 10533  1491  1616               	bsf	22,4	;volatile
 10534  1492                     l661:	
 10535  1492  0008               	return
 10536  1493                     __end_of_i2c_driver_sendNACK:	
 10537                           
 10538                           	psect	text45
 10539  1445                     __ptext45:	
 10540 ;; *************** function _i2c_driver_resetBus *****************
 10541 ;; Defined at:
 10542 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;		None
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;		None
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  1    wreg      void 
 10549 ;; Registers used:
 10550 ;;		None
 10551 ;; Tracked objects:
 10552 ;;		On entry : 0/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;Total ram usage:        0 bytes
 10561 ;; Hardware stack levels used:    1
 10562 ;; Hardware stack levels required when called:    6
 10563 ;; This function calls:
 10564 ;;		Nothing
 10565 ;; This function is called by:
 10566 ;;		_do_I2C_RESET
 10567 ;; This function uses a non-reentrant model
 10568 ;;
 10569                           
 10570                           
 10571                           ;psect for function _i2c_driver_resetBus
 10572  1445                     _i2c_driver_resetBus:	
 10573  1445                     l625:	
 10574                           ;incstack = 0
 10575                           ; Regs used in _i2c_driver_resetBus: []
 10576                           
 10577  1445  0008               	return
 10578  1446                     __end_of_i2c_driver_resetBus:	
 10579                           
 10580                           	psect	text46
 10581  146E                     __ptext46:	
 10582 ;; *************** function _i2c_driver_startRX *****************
 10583 ;; Defined at:
 10584 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;		None
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;		None
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  1    wreg      void 
 10591 ;; Registers used:
 10592 ;;		None
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;Total ram usage:        0 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    6
 10605 ;; This function calls:
 10606 ;;		Nothing
 10607 ;; This function is called by:
 10608 ;;		_do_I2C_RCEN
 10609 ;; This function uses a non-reentrant model
 10610 ;;
 10611                           
 10612                           
 10613                           ;psect for function _i2c_driver_startRX
 10614  146E                     _i2c_driver_startRX:	
 10615  146E                     l6679:	
 10616                           ;incstack = 0
 10617                           ; Regs used in _i2c_driver_startRX: []
 10618                           
 10619                           
 10620                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
 10621  146E  0024               	movlb	4	; select bank4
 10622  146F  1596               	bsf	22,3	;volatile
 10623  1470                     l640:	
 10624  1470  0008               	return
 10625  1471                     __end_of_i2c_driver_startRX:	
 10626                           
 10627                           	psect	text47
 10628  0808                     __ptext47:	
 10629 ;; *************** function _rdBlkRegCompleteHandler *****************
 10630 ;; Defined at:
 10631 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;  p               1    9[BANK0 ] PTR void 
 10634 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10635 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;		None
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  1    wreg      enum E358
 10640 ;; Registers used:
 10641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10647 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;Total ram usage:        1 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:    8
 10654 ;; This function calls:
 10655 ;;		_i2c_setBuffer
 10656 ;;		_i2c_setDataCompleteCallback
 10657 ;; This function is called by:
 10658 ;;		_i2c_readDataBlock
 10659 ;;		_do_I2C_DO_ADDRESS_NACK
 10660 ;;		_do_I2C_TX
 10661 ;;		_do_I2C_RX
 10662 ;;		_do_I2C_TX_EMPTY
 10663 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10664 ;;		i1_do_I2C_TX
 10665 ;;		i1_do_I2C_RX
 10666 ;;		i1_do_I2C_TX_EMPTY
 10667 ;; This function uses a non-reentrant model
 10668 ;;
 10669                           
 10670                           
 10671                           ;psect for function _rdBlkRegCompleteHandler
 10672  0808                     _rdBlkRegCompleteHandler:	
 10673                           
 10674                           ;Skip over the trampoline to the duplicate function for level 1
 10675  0808  1C7E               	btfss	int$flags,0
 10676  0809  280C               	goto	_rdBlkRegCompleteHandler$intlevel0
 10677  080A  3197  2FC9         	ljmp	i1_rdBlkRegCompleteHandler
 10678  080C                     _rdBlkRegCompleteHandler$intlevel0:	
 10679  080C                     l6745:	
 10680                           ;incstack = 0
 10681                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10682                           
 10683                           
 10684                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 10685  080C  0020               	movlb	0	; select bank0
 10686  080D  085F               	movf	rdBlkRegCompleteHandler@p,w
 10687  080E  0086               	movwf	6
 10688  080F  0187               	clrf	7
 10689  0810  3F40               	moviw [0]fsr1
 10690  0811  00D6               	movwf	i2c_setBuffer@bufferSize
 10691  0812  3F41               	moviw [1]fsr1
 10692  0813  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10693  0814  085F               	movf	rdBlkRegCompleteHandler@p,w
 10694  0815  3E02               	addlw	2
 10695  0816  0086               	movwf	6
 10696  0817  0187               	clrf	7
 10697  0818  0801               	movf	1,w
 10698  0819  3197  2726  3188   	fcall	_i2c_setBuffer
 10699                           
 10700                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 10701  081C  3000               	movlw	0
 10702  081D  0020               	movlb	0	; select bank0
 10703  081E  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10704  081F  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10705  0820  01DD               	clrf	i2c_setDataCompleteCallback@p
 10706  0821  3196  261B  3188   	fcall	_i2c_setDataCompleteCallback
 10707  0824                     l6747:	
 10708                           
 10709                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
 10710  0824  3002               	movlw	2
 10711  0825                     l291:	
 10712  0825  0008               	return
 10713  0826                     __end_of_rdBlkRegCompleteHandler:	
 10714                           
 10715                           	psect	text48
 10716  1782                     __ptext48:	
 10717 ;; *************** function _rd2RegCompleteHandler *****************
 10718 ;; Defined at:
 10719 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  p               1    9[BANK0 ] PTR void 
 10722 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10723 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10724 ;; Auto vars:     Size  Location     Type
 10725 ;;		None
 10726 ;; Return value:  Size  Location     Type
 10727 ;;                  1    wreg      enum E358
 10728 ;; Registers used:
 10729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10730 ;; Tracked objects:
 10731 ;;		On entry : 0/0
 10732 ;;		On exit  : 0/0
 10733 ;;		Unchanged: 0/0
 10734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10735 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;Total ram usage:        1 bytes
 10740 ;; Hardware stack levels used:    1
 10741 ;; Hardware stack levels required when called:    8
 10742 ;; This function calls:
 10743 ;;		_i2c_setBuffer
 10744 ;;		_i2c_setDataCompleteCallback
 10745 ;; This function is called by:
 10746 ;;		_i2c_read2ByteRegister
 10747 ;;		_do_I2C_DO_ADDRESS_NACK
 10748 ;;		_do_I2C_TX
 10749 ;;		_do_I2C_RX
 10750 ;;		_do_I2C_TX_EMPTY
 10751 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10752 ;;		i1_do_I2C_TX
 10753 ;;		i1_do_I2C_RX
 10754 ;;		i1_do_I2C_TX_EMPTY
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           
 10759                           ;psect for function _rd2RegCompleteHandler
 10760  1782                     _rd2RegCompleteHandler:	
 10761                           
 10762                           ;Skip over the trampoline to the duplicate function for level 1
 10763  1782  1C7E               	btfss	int$flags,0
 10764  1783  2F86               	goto	_rd2RegCompleteHandler$intlevel0
 10765  1784  3196  2EAB         	ljmp	i1_rd2RegCompleteHandler
 10766  1786                     _rd2RegCompleteHandler$intlevel0:	
 10767  1786                     l6729:	
 10768                           ;incstack = 0
 10769                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10770                           
 10771                           
 10772                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
 10773  1786  3002               	movlw	2
 10774  1787  0020               	movlb	0	; select bank0
 10775  1788  00D6               	movwf	i2c_setBuffer@bufferSize
 10776  1789  3000               	movlw	0
 10777  178A  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10778  178B  085F               	movf	rd2RegCompleteHandler@p,w
 10779  178C  3197  2726  3197   	fcall	_i2c_setBuffer
 10780  178F                     l6731:	
 10781                           
 10782                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10783  178F  3000               	movlw	0
 10784  1790  0020               	movlb	0	; select bank0
 10785  1791  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10786  1792  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10787  1793  01DD               	clrf	i2c_setDataCompleteCallback@p
 10788  1794  3196  261B  3197   	fcall	_i2c_setDataCompleteCallback
 10789  1797                     l6733:	
 10790                           
 10791                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
 10792  1797  3002               	movlw	2
 10793  1798                     l267:	
 10794  1798  0008               	return
 10795  1799                     __end_of_rd2RegCompleteHandler:	
 10796                           
 10797                           	psect	text49
 10798  176B                     __ptext49:	
 10799 ;; *************** function _rd1RegCompleteHandler *****************
 10800 ;; Defined at:
 10801 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;  p               1    9[BANK0 ] PTR void 
 10804 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10805 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;		None
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      enum E358
 10810 ;; Registers used:
 10811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10817 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;Total ram usage:        1 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    8
 10824 ;; This function calls:
 10825 ;;		_i2c_setBuffer
 10826 ;;		_i2c_setDataCompleteCallback
 10827 ;; This function is called by:
 10828 ;;		_i2c_read1ByteRegister
 10829 ;;		_do_I2C_DO_ADDRESS_NACK
 10830 ;;		_do_I2C_TX
 10831 ;;		_do_I2C_RX
 10832 ;;		_do_I2C_TX_EMPTY
 10833 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10834 ;;		i1_do_I2C_TX
 10835 ;;		i1_do_I2C_RX
 10836 ;;		i1_do_I2C_TX_EMPTY
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           
 10841                           ;psect for function _rd1RegCompleteHandler
 10842  176B                     _rd1RegCompleteHandler:	
 10843                           
 10844                           ;Skip over the trampoline to the duplicate function for level 1
 10845  176B  1C7E               	btfss	int$flags,0
 10846  176C  2F6F               	goto	_rd1RegCompleteHandler$intlevel0
 10847  176D  3196  2E99         	ljmp	i1_rd1RegCompleteHandler
 10848  176F                     _rd1RegCompleteHandler$intlevel0:	
 10849  176F                     l6721:	
 10850                           ;incstack = 0
 10851                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10852                           
 10853                           
 10854                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
 10855  176F  3001               	movlw	1
 10856  1770  0020               	movlb	0	; select bank0
 10857  1771  00D6               	movwf	i2c_setBuffer@bufferSize
 10858  1772  3000               	movlw	0
 10859  1773  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10860  1774  085F               	movf	rd1RegCompleteHandler@p,w
 10861  1775  3197  2726  3197   	fcall	_i2c_setBuffer
 10862  1778                     l6723:	
 10863                           
 10864                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10865  1778  3000               	movlw	0
 10866  1779  0020               	movlb	0	; select bank0
 10867  177A  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10868  177B  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10869  177C  01DD               	clrf	i2c_setDataCompleteCallback@p
 10870  177D  3196  261B  3197   	fcall	_i2c_setDataCompleteCallback
 10871  1780                     l6725:	
 10872                           
 10873                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
 10874  1780  3002               	movlw	2
 10875  1781                     l252:	
 10876  1781  0008               	return
 10877  1782                     __end_of_rd1RegCompleteHandler:	
 10878                           
 10879                           	psect	text50
 10880  1754                     __ptext50:	
 10881 ;; *************** function _wr1RegCompleteHandler *****************
 10882 ;; Defined at:
 10883 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10884 ;; Parameters:    Size  Location     Type
 10885 ;;  p               1    9[BANK0 ] PTR void 
 10886 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10887 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      enum E358
 10892 ;; Registers used:
 10893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10899 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;Total ram usage:        1 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    8
 10906 ;; This function calls:
 10907 ;;		_i2c_setBuffer
 10908 ;;		_i2c_setDataCompleteCallback
 10909 ;; This function is called by:
 10910 ;;		_i2c_write1ByteRegister
 10911 ;;		_do_I2C_DO_ADDRESS_NACK
 10912 ;;		_do_I2C_TX
 10913 ;;		_do_I2C_RX
 10914 ;;		_do_I2C_TX_EMPTY
 10915 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10916 ;;		i1_do_I2C_TX
 10917 ;;		i1_do_I2C_RX
 10918 ;;		i1_do_I2C_TX_EMPTY
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           
 10923                           ;psect for function _wr1RegCompleteHandler
 10924  1754                     _wr1RegCompleteHandler:	
 10925                           
 10926                           ;Skip over the trampoline to the duplicate function for level 1
 10927  1754  1C7E               	btfss	int$flags,0
 10928  1755  2F58               	goto	_wr1RegCompleteHandler$intlevel0
 10929  1756  3196  2E87         	ljmp	i1_wr1RegCompleteHandler
 10930  1758                     _wr1RegCompleteHandler$intlevel0:	
 10931  1758                     l6713:	
 10932                           ;incstack = 0
 10933                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10934                           
 10935                           
 10936                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
 10937  1758  3001               	movlw	1
 10938  1759  0020               	movlb	0	; select bank0
 10939  175A  00D6               	movwf	i2c_setBuffer@bufferSize
 10940  175B  3000               	movlw	0
 10941  175C  00D7               	movwf	i2c_setBuffer@bufferSize+1
 10942  175D  085F               	movf	wr1RegCompleteHandler@p,w
 10943  175E  3197  2726  3197   	fcall	_i2c_setBuffer
 10944  1761                     l6715:	
 10945                           
 10946                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 10947  1761  3000               	movlw	0
 10948  1762  0020               	movlb	0	; select bank0
 10949  1763  00DB               	movwf	i2c_setDataCompleteCallback@cb
 10950  1764  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 10951  1765  01DD               	clrf	i2c_setDataCompleteCallback@p
 10952  1766  3196  261B  3197   	fcall	_i2c_setDataCompleteCallback
 10953  1769                     l6717:	
 10954                           
 10955                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
 10956  1769  3004               	movlw	4
 10957  176A                     l231:	
 10958  176A  0008               	return
 10959  176B                     __end_of_wr1RegCompleteHandler:	
 10960                           
 10961                           	psect	text51
 10962  14D7                     __ptext51:	
 10963 ;; *************** function _i2c_restartWrite *****************
 10964 ;; Defined at:
 10965 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  p               1    9[BANK0 ] PTR void 
 10968 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10969 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      enum E358
 10974 ;; Registers used:
 10975 ;;		wreg
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10981 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;Total ram usage:        1 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    6
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_i2c_writeNBytes
 10992 ;;		_i2c_readDataBlock
 10993 ;;		_i2c_write1ByteRegister
 10994 ;;		_i2c_read1ByteRegister
 10995 ;;		_i2c_read2ByteRegister
 10996 ;;		_i2c_write2ByteRegister
 10997 ;;		_do_I2C_DO_ADDRESS_NACK
 10998 ;;		_do_I2C_TX
 10999 ;;		_do_I2C_RX
 11000 ;;		_do_I2C_TX_EMPTY
 11001 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11002 ;;		i1_do_I2C_TX
 11003 ;;		i1_do_I2C_RX
 11004 ;;		i1_do_I2C_TX_EMPTY
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           
 11009                           ;psect for function _i2c_restartWrite
 11010  14D7                     _i2c_restartWrite:	
 11011                           
 11012                           ;Skip over the trampoline to the duplicate function for level 1
 11013  14D7  1C7E               	btfss	int$flags,0
 11014  14D8  2CDB               	goto	_i2c_restartWrite$intlevel0
 11015  14D9  3180  2802         	ljmp	i1_i2c_restartWrite
 11016  14DB                     _i2c_restartWrite$intlevel0:	
 11017  14DB                     l6751:	
 11018                           ;incstack = 0
 11019                           ; Regs used in _i2c_restartWrite: [wreg]
 11020                           
 11021                           
 11022                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
 11023  14DB  3003               	movlw	3
 11024  14DC                     l318:	
 11025  14DC  0008               	return
 11026  14DD                     __end_of_i2c_restartWrite:	
 11027                           
 11028                           	psect	text52
 11029  14D1                     __ptext52:	
 11030 ;; *************** function _returnReset *****************
 11031 ;; Defined at:
 11032 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;  p               1    9[BANK0 ] PTR void 
 11035 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11036 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;		None
 11039 ;; Return value:  Size  Location     Type
 11040 ;;                  1    wreg      enum E3257
 11041 ;; Registers used:
 11042 ;;		wreg
 11043 ;; Tracked objects:
 11044 ;;		On entry : 0/0
 11045 ;;		On exit  : 0/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11048 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;Total ram usage:        1 bytes
 11053 ;; Hardware stack levels used:    1
 11054 ;; Hardware stack levels required when called:    6
 11055 ;; This function calls:
 11056 ;;		Nothing
 11057 ;; This function is called by:
 11058 ;;		_i2c_open
 11059 ;;		_do_I2C_DO_ADDRESS_NACK
 11060 ;;		_do_I2C_TX
 11061 ;;		_do_I2C_RX
 11062 ;;		_do_I2C_TX_EMPTY
 11063 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11064 ;;		i1_do_I2C_TX
 11065 ;;		i1_do_I2C_RX
 11066 ;;		i1_do_I2C_TX_EMPTY
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           
 11071                           ;psect for function _returnReset
 11072  14D1                     _returnReset:	
 11073                           
 11074                           ;Skip over the trampoline to the duplicate function for level 1
 11075  14D1  1C7E               	btfss	int$flags,0
 11076  14D2  2CD5               	goto	_returnReset$intlevel0
 11077  14D3  3194  2C48         	ljmp	i1_returnReset
 11078  14D5                     _returnReset$intlevel0:	
 11079  14D5                     l6709:	
 11080                           ;incstack = 0
 11081                           ; Regs used in _returnReset: [wreg]
 11082                           
 11083                           
 11084                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 11085  14D5  3005               	movlw	5
 11086  14D6                     l207:	
 11087  14D6  0008               	return
 11088  14D7                     __end_of_returnReset:	
 11089                           
 11090                           	psect	text53
 11091  14CB                     __ptext53:	
 11092 ;; *************** function _returnStop *****************
 11093 ;; Defined at:
 11094 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;  p               1    9[BANK0 ] PTR void 
 11097 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11098 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      enum E3257
 11103 ;; Registers used:
 11104 ;;		wreg
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11110 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;Total ram usage:        1 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    6
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_i2c_open
 11121 ;;		_setCallBack
 11122 ;;		_do_I2C_DO_ADDRESS_NACK
 11123 ;;		_do_I2C_TX
 11124 ;;		_do_I2C_RX
 11125 ;;		_do_I2C_TX_EMPTY
 11126 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11127 ;;		i1_do_I2C_TX
 11128 ;;		i1_do_I2C_RX
 11129 ;;		i1_do_I2C_TX_EMPTY
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           
 11134                           ;psect for function _returnStop
 11135  14CB                     _returnStop:	
 11136                           
 11137                           ;Skip over the trampoline to the duplicate function for level 1
 11138  14CB  1C7E               	btfss	int$flags,0
 11139  14CC  2CCF               	goto	_returnStop$intlevel0
 11140  14CD  3194  2C46         	ljmp	i1_returnStop
 11141  14CF                     _returnStop$intlevel0:	
 11142  14CF                     l6705:	
 11143                           ;incstack = 0
 11144                           ; Regs used in _returnStop: [wreg]
 11145                           
 11146                           
 11147                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 11148  14CF  3001               	movlw	1
 11149  14D0                     l204:	
 11150  14D0  0008               	return
 11151  14D1                     __end_of_returnStop:	
 11152                           
 11153                           	psect	text54
 11154  173D                     __ptext54:	
 11155 ;; *************** function _wr2RegCompleteHandler *****************
 11156 ;; Defined at:
 11157 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;  p               1    9[BANK0 ] PTR void 
 11160 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11161 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  1    wreg      enum E358
 11166 ;; Registers used:
 11167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11173 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;Total ram usage:        1 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; Hardware stack levels required when called:    8
 11180 ;; This function calls:
 11181 ;;		_i2c_setBuffer
 11182 ;;		_i2c_setDataCompleteCallback
 11183 ;; This function is called by:
 11184 ;;		_i2c_write2ByteRegister
 11185 ;;		_do_I2C_DO_ADDRESS_NACK
 11186 ;;		_do_I2C_TX
 11187 ;;		_do_I2C_RX
 11188 ;;		_do_I2C_TX_EMPTY
 11189 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11190 ;;		i1_do_I2C_TX
 11191 ;;		i1_do_I2C_RX
 11192 ;;		i1_do_I2C_TX_EMPTY
 11193 ;; This function uses a non-reentrant model
 11194 ;;
 11195                           
 11196                           
 11197                           ;psect for function _wr2RegCompleteHandler
 11198  173D                     _wr2RegCompleteHandler:	
 11199                           
 11200                           ;Skip over the trampoline to the duplicate function for level 1
 11201  173D  1C7E               	btfss	int$flags,0
 11202  173E  2F41               	goto	_wr2RegCompleteHandler$intlevel0
 11203  173F  3196  2E75         	ljmp	i1_wr2RegCompleteHandler
 11204  1741                     _wr2RegCompleteHandler$intlevel0:	
 11205  1741                     l6737:	
 11206                           ;incstack = 0
 11207                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11208                           
 11209                           
 11210                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
 11211  1741  3002               	movlw	2
 11212  1742  0020               	movlb	0	; select bank0
 11213  1743  00D6               	movwf	i2c_setBuffer@bufferSize
 11214  1744  3000               	movlw	0
 11215  1745  00D7               	movwf	i2c_setBuffer@bufferSize+1
 11216  1746  085F               	movf	wr2RegCompleteHandler@p,w
 11217  1747  3197  2726  3197   	fcall	_i2c_setBuffer
 11218  174A                     l6739:	
 11219                           
 11220                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 11221  174A  3000               	movlw	0
 11222  174B  0020               	movlb	0	; select bank0
 11223  174C  00DB               	movwf	i2c_setDataCompleteCallback@cb
 11224  174D  00DC               	movwf	i2c_setDataCompleteCallback@cb+1
 11225  174E  01DD               	clrf	i2c_setDataCompleteCallback@p
 11226  174F  3196  261B  3197   	fcall	_i2c_setDataCompleteCallback
 11227  1752                     l6741:	
 11228                           
 11229                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
 11230  1752  3004               	movlw	4
 11231  1753                     l279:	
 11232  1753  0008               	return
 11233  1754                     __end_of_wr2RegCompleteHandler:	
 11234                           
 11235                           	psect	text55
 11236  161B                     __ptext55:	
 11237 ;; *************** function _i2c_setDataCompleteCallback *****************
 11238 ;; Defined at:
 11239 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 11240 ;; Parameters:    Size  Location     Type
 11241 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
 11242 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11243 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 11244 ;;  p               1    7[BANK0 ] PTR void 
 11245 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11246 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;		None
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  1    wreg      void 
 11251 ;; Registers used:
 11252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/0
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11258 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;Total ram usage:        4 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; Hardware stack levels required when called:    7
 11265 ;; This function calls:
 11266 ;;		_setCallBack
 11267 ;; This function is called by:
 11268 ;;		_wr1RegCompleteHandler
 11269 ;;		_rd1RegCompleteHandler
 11270 ;;		_rd2RegCompleteHandler
 11271 ;;		_wr2RegCompleteHandler
 11272 ;;		_rdBlkRegCompleteHandler
 11273 ;;		_i2c_readDataBlock
 11274 ;;		_i2c_write1ByteRegister
 11275 ;;		_i2c_read1ByteRegister
 11276 ;;		_i2c_read2ByteRegister
 11277 ;;		_i2c_write2ByteRegister
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function _i2c_setDataCompleteCallback
 11283  161B                     _i2c_setDataCompleteCallback:	
 11284  161B                     l6639:	
 11285                           ;incstack = 0
 11286                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11287                           
 11288                           
 11289                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
 11290  161B  0020               	movlb	0	; select bank0
 11291  161C  085C               	movf	i2c_setDataCompleteCallback@cb+1,w
 11292  161D  00D7               	movwf	setCallBack@cb+1
 11293  161E  085B               	movf	i2c_setDataCompleteCallback@cb,w
 11294  161F  00D6               	movwf	setCallBack@cb
 11295  1620  085D               	movf	i2c_setDataCompleteCallback@p,w
 11296  1621  00DE               	movwf	??_i2c_setDataCompleteCallback
 11297  1622  085E               	movf	??_i2c_setDataCompleteCallback,w
 11298  1623  00D8               	movwf	setCallBack@p
 11299  1624  3000               	movlw	0
 11300  1625  3186  26C0  3196   	fcall	_setCallBack
 11301  1628                     l61:	
 11302  1628  0008               	return
 11303  1629                     __end_of_i2c_setDataCompleteCallback:	
 11304                           
 11305                           	psect	text56
 11306  06C0                     __ptext56:	
 11307 ;; *************** function _setCallBack *****************
 11308 ;; Defined at:
 11309 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 11310 ;; Parameters:    Size  Location     Type
 11311 ;;  idx             1    wreg     enum E3429
 11312 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
 11313 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11314 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 11315 ;;  p               1    2[BANK0 ] PTR void 
 11316 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11317 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;  idx             1    4[BANK0 ] enum E3429
 11320 ;; Return value:  Size  Location     Type
 11321 ;;                  1    wreg      void 
 11322 ;; Registers used:
 11323 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11329 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;Total ram usage:        5 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    6
 11336 ;; This function calls:
 11337 ;;		Nothing
 11338 ;; This function is called by:
 11339 ;;		_i2c_setDataCompleteCallback
 11340 ;;		_i2c_setAddressNACKCallback
 11341 ;;		_i2c_setWriteCollisionCallback
 11342 ;;		_i2c_setDataNACKCallback
 11343 ;;		_i2c_setTimeOutCallback
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           
 11348                           ;psect for function _setCallBack
 11349  06C0                     _setCallBack:	
 11350                           
 11351                           ;incstack = 0
 11352                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 11353                           ;setCallBack@idx stored from wreg
 11354  06C0  0020               	movlb	0	; select bank0
 11355  06C1  00DA               	movwf	setCallBack@idx
 11356  06C2                     l6633:	
 11357                           
 11358                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
 11359  06C2  0856               	movf	setCallBack@cb,w
 11360  06C3  0457               	iorwf	setCallBack@cb+1,w
 11361  06C4  1903               	btfsc	3,2
 11362  06C5  2EC7               	goto	u5421
 11363  06C6  2EC8               	goto	u5420
 11364  06C7                     u5421:	
 11365  06C7  2ED9               	goto	l6637
 11366  06C8                     u5420:	
 11367  06C8                     l6635:	
 11368                           
 11369                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
 11370  06C8  355A               	lslf	setCallBack@idx,w
 11371  06C9  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 11372  06CA  0086               	movwf	6
 11373  06CB  0187               	clrf	7
 11374  06CC  0856               	movf	setCallBack@cb,w
 11375  06CD  3FC0               	movwi [0]fsr1
 11376  06CE  0857               	movf	setCallBack@cb+1,w
 11377  06CF  3FC1               	movwi [1]fsr1
 11378                           
 11379                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
 11380  06D0  0858               	movf	setCallBack@p,w
 11381  06D1  00D9               	movwf	??_setCallBack
 11382  06D2  085A               	movf	setCallBack@idx,w
 11383  06D3  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 11384  06D4  0086               	movwf	6
 11385  06D5  0187               	clrf	7
 11386  06D6  0859               	movf	??_setCallBack,w
 11387  06D7  0081               	movwf	1
 11388                           
 11389                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
 11390  06D8  2EE6               	goto	l212
 11391  06D9                     l6637:	
 11392                           
 11393                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
 11394  06D9  355A               	lslf	setCallBack@idx,w
 11395  06DA  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 11396  06DB  0086               	movwf	6
 11397  06DC  0187               	clrf	7
 11398  06DD  30CB               	movlw	low _returnStop
 11399  06DE  3FC0               	movwi [0]fsr1
 11400  06DF  3014               	movlw	high _returnStop
 11401  06E0  3FC1               	movwi [1]fsr1
 11402                           
 11403                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
 11404  06E1  085A               	movf	setCallBack@idx,w
 11405  06E2  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 11406  06E3  0086               	movwf	6
 11407  06E4  0187               	clrf	7
 11408  06E5  0181               	clrf	1
 11409  06E6                     l212:	
 11410  06E6  0008               	return
 11411  06E7                     __end_of_setCallBack:	
 11412                           
 11413                           	psect	text57
 11414  1726                     __ptext57:	
 11415 ;; *************** function _i2c_setBuffer *****************
 11416 ;; Defined at:
 11417 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;  buffer          1    wreg     PTR void 
 11420 ;;		 -> clearAlarmFlag@rData(2), rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), 
 11421 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
 11422 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
 11423 ;;		 -> NULL(0), 
 11424 ;;  bufferSize      2    0[BANK0 ] unsigned int 
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;  buffer          1    3[BANK0 ] PTR void 
 11427 ;;		 -> clearAlarmFlag@rData(2), rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), 
 11428 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
 11429 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
 11430 ;;		 -> NULL(0), 
 11431 ;; Return value:  Size  Location     Type
 11432 ;;                  1    wreg      void 
 11433 ;; Registers used:
 11434 ;;		wreg
 11435 ;; Tracked objects:
 11436 ;;		On entry : 0/0
 11437 ;;		On exit  : 0/0
 11438 ;;		Unchanged: 0/0
 11439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11440 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;Total ram usage:        4 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    6
 11447 ;; This function calls:
 11448 ;;		Nothing
 11449 ;; This function is called by:
 11450 ;;		_wr1RegCompleteHandler
 11451 ;;		_i2c_writeNBytes
 11452 ;;		_rd1RegCompleteHandler
 11453 ;;		_rd2RegCompleteHandler
 11454 ;;		_wr2RegCompleteHandler
 11455 ;;		_rdBlkRegCompleteHandler
 11456 ;;		_i2c_readDataBlock
 11457 ;;		_i2c_write1ByteRegister
 11458 ;;		_i2c_read1ByteRegister
 11459 ;;		_i2c_read2ByteRegister
 11460 ;;		_i2c_write2ByteRegister
 11461 ;;		_i2c_readNBytes
 11462 ;; This function uses a non-reentrant model
 11463 ;;
 11464                           
 11465                           
 11466                           ;psect for function _i2c_setBuffer
 11467  1726                     _i2c_setBuffer:	
 11468                           
 11469                           ;incstack = 0
 11470                           ; Regs used in _i2c_setBuffer: [wreg]
 11471                           ;i2c_setBuffer@buffer stored from wreg
 11472  1726  0020               	movlb	0	; select bank0
 11473  1727  00D9               	movwf	i2c_setBuffer@buffer
 11474  1728                     l6641:	
 11475                           
 11476                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
 11477  1728  0021               	movlb	1	; select bank1
 11478  1729  1D20               	btfss	_i2c_status^(0+128),2
 11479  172A  2F2C               	goto	u5431
 11480  172B  2F2D               	goto	u5430
 11481  172C                     u5431:	
 11482  172C  2F3C               	goto	l91
 11483  172D                     u5430:	
 11484  172D                     l6643:	
 11485                           
 11486                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
 11487  172D  0020               	movlb	0	; select bank0
 11488  172E  0859               	movf	i2c_setBuffer@buffer,w
 11489  172F  00D8               	movwf	??_i2c_setBuffer
 11490  1730  0858               	movf	??_i2c_setBuffer,w
 11491  1731  0021               	movlb	1	; select bank1
 11492  1732  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 11493                           
 11494                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
 11495  1733  0020               	movlb	0	; select bank0
 11496  1734  0857               	movf	i2c_setBuffer@bufferSize+1,w
 11497  1735  0021               	movlb	1	; select bank1
 11498  1736  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
 11499  1737  0020               	movlb	0	; select bank0
 11500  1738  0856               	movf	i2c_setBuffer@bufferSize,w
 11501  1739  0021               	movlb	1	; select bank1
 11502  173A  00A3               	movwf	(_i2c_status^(0+128)+3)
 11503  173B                     l6645:	
 11504                           
 11505                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
 11506  173B  1120               	bcf	_i2c_status^(0+128),2
 11507  173C                     l91:	
 11508  173C  0008               	return
 11509  173D                     __end_of_i2c_setBuffer:	
 11510                           
 11511                           	psect	text58
 11512  146B                     __ptext58:	
 11513 ;; *************** function _i2c_driver_stop *****************
 11514 ;; Defined at:
 11515 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
 11516 ;; Parameters:    Size  Location     Type
 11517 ;;		None
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;		None
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  1    wreg      void 
 11522 ;; Registers used:
 11523 ;;		None
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;Total ram usage:        0 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; Hardware stack levels required when called:    6
 11536 ;; This function calls:
 11537 ;;		Nothing
 11538 ;; This function is called by:
 11539 ;;		_do_I2C_SEND_STOP
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           
 11544                           ;psect for function _i2c_driver_stop
 11545  146B                     _i2c_driver_stop:	
 11546  146B                     l6649:	
 11547                           ;incstack = 0
 11548                           ; Regs used in _i2c_driver_stop: []
 11549                           
 11550                           
 11551                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
 11552  146B  0024               	movlb	4	; select bank4
 11553  146C  1516               	bsf	22,2	;volatile
 11554  146D                     l634:	
 11555  146D  0008               	return
 11556  146E                     __end_of_i2c_driver_stop:	
 11557                           
 11558                           	psect	text59
 11559  1468                     __ptext59:	
 11560 ;; *************** function _i2c_driver_restart *****************
 11561 ;; Defined at:
 11562 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;		None
 11567 ;; Return value:  Size  Location     Type
 11568 ;;                  1    wreg      void 
 11569 ;; Registers used:
 11570 ;;		None
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;Total ram usage:        0 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    6
 11583 ;; This function calls:
 11584 ;;		Nothing
 11585 ;; This function is called by:
 11586 ;;		_do_I2C_SEND_RESTART_READ
 11587 ;;		_do_I2C_SEND_RESTART_WRITE
 11588 ;;		_do_I2C_SEND_RESTART
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           
 11593                           ;psect for function _i2c_driver_restart
 11594  1468                     _i2c_driver_restart:	
 11595  1468                     l6647:	
 11596                           ;incstack = 0
 11597                           ; Regs used in _i2c_driver_restart: []
 11598                           
 11599                           
 11600                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
 11601  1468  0024               	movlb	4	; select bank4
 11602  1469  1496               	bsf	22,1	;volatile
 11603  146A                     l631:	
 11604  146A  0008               	return
 11605  146B                     __end_of_i2c_driver_restart:	
 11606                           
 11607                           	psect	text60
 11608  148B                     __ptext60:	
 11609 ;; *************** function _i2c_driver_sendACK *****************
 11610 ;; Defined at:
 11611 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
 11612 ;; Parameters:    Size  Location     Type
 11613 ;;		None
 11614 ;; Auto vars:     Size  Location     Type
 11615 ;;		None
 11616 ;; Return value:  Size  Location     Type
 11617 ;;                  1    wreg      void 
 11618 ;; Registers used:
 11619 ;;		None
 11620 ;; Tracked objects:
 11621 ;;		On entry : 0/0
 11622 ;;		On exit  : 0/0
 11623 ;;		Unchanged: 0/0
 11624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;Total ram usage:        0 bytes
 11630 ;; Hardware stack levels used:    1
 11631 ;; Hardware stack levels required when called:    6
 11632 ;; This function calls:
 11633 ;;		Nothing
 11634 ;; This function is called by:
 11635 ;;		_do_I2C_DO_ACK
 11636 ;;		_do_I2C_RX
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           
 11641                           ;psect for function _i2c_driver_sendACK
 11642  148B                     _i2c_driver_sendACK:	
 11643  148B                     l6681:	
 11644                           ;incstack = 0
 11645                           ; Regs used in _i2c_driver_sendACK: []
 11646                           
 11647                           
 11648                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
 11649  148B  0024               	movlb	4	; select bank4
 11650  148C  1296               	bcf	22,5	;volatile
 11651                           
 11652                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
 11653  148D  1616               	bsf	22,4	;volatile
 11654  148E                     l658:	
 11655  148E  0008               	return
 11656  148F                     __end_of_i2c_driver_sendACK:	
 11657                           
 11658                           	psect	text61
 11659  1465                     __ptext61:	
 11660 ;; *************** function _i2c_driver_start *****************
 11661 ;; Defined at:
 11662 ;;		line 147 in file "mcc_generated_files/i2c_driver.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      void 
 11669 ;; Registers used:
 11670 ;;		None
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;Total ram usage:        0 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    6
 11683 ;; This function calls:
 11684 ;;		Nothing
 11685 ;; This function is called by:
 11686 ;;		_i2c_masterOperation
 11687 ;; This function uses a non-reentrant model
 11688 ;;
 11689                           
 11690                           
 11691                           ;psect for function _i2c_driver_start
 11692  1465                     _i2c_driver_start:	
 11693  1465                     l6929:	
 11694                           ;incstack = 0
 11695                           ; Regs used in _i2c_driver_start: []
 11696                           
 11697                           
 11698                           ;mcc_generated_files/i2c_driver.c: 149:     SSPCON2bits.SEN = 1;
 11699  1465  0024               	movlb	4	; select bank4
 11700  1466  1416               	bsf	22,0	;volatile
 11701  1467                     l628:	
 11702  1467  0008               	return
 11703  1468                     __end_of_i2c_driver_start:	
 11704                           
 11705                           	psect	text62
 11706  17E2                     __ptext62:	
 11707 ;; *************** function _i2c_close *****************
 11708 ;; Defined at:
 11709 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;		None
 11712 ;; Auto vars:     Size  Location     Type
 11713 ;;  ret             1    1[BANK0 ] enum E3252
 11714 ;; Return value:  Size  Location     Type
 11715 ;;                  1    wreg      enum E3252
 11716 ;; Registers used:
 11717 ;;		wreg, status,2, status,0, pclath, cstack
 11718 ;; Tracked objects:
 11719 ;;		On entry : 0/0
 11720 ;;		On exit  : 0/0
 11721 ;;		Unchanged: 0/0
 11722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;Total ram usage:        2 bytes
 11728 ;; Hardware stack levels used:    1
 11729 ;; Hardware stack levels required when called:    7
 11730 ;; This function calls:
 11731 ;;		_mssp_clearIRQ
 11732 ;;		_mssp_disableIRQ
 11733 ;; This function is called by:
 11734 ;;		_i2c_writeNBytes
 11735 ;;		_i2c_readDataBlock
 11736 ;;		_i2c_write1ByteRegister
 11737 ;;		_i2c_read1ByteRegister
 11738 ;;		_i2c_read2ByteRegister
 11739 ;;		_i2c_write2ByteRegister
 11740 ;;		_i2c_readNBytes
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           
 11745                           ;psect for function _i2c_close
 11746  17E2                     _i2c_close:	
 11747  17E2                     l7027:	
 11748                           ;incstack = 0
 11749                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
 11750                           
 11751                           
 11752                           ;mcc_generated_files/drivers/i2c_master.c: 164:     i2c_error_t ret = I2C_BUSY;
 11753  17E2  0020               	movlb	0	; select bank0
 11754  17E3  01D7               	clrf	i2c_close@ret
 11755  17E4  0AD7               	incf	i2c_close@ret,f
 11756                           
 11757                           ;mcc_generated_files/drivers/i2c_master.c: 165:     if(!i2c_status.busy)
 11758  17E5  0021               	movlb	1	; select bank1
 11759  17E6  1820               	btfsc	_i2c_status^(0+128),0
 11760  17E7  2FE9               	goto	u5581
 11761  17E8  2FEA               	goto	u5580
 11762  17E9                     u5581:	
 11763  17E9  2FFD               	goto	l83
 11764  17EA                     u5580:	
 11765  17EA                     l7029:	
 11766                           
 11767                           ;mcc_generated_files/drivers/i2c_master.c: 166:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 167:         i2c_status.inUse = 0;
 11768  17EA  10A0               	bcf	_i2c_status^(0+128),1
 11769  17EB                     l7031:	
 11770                           
 11771                           ;mcc_generated_files/drivers/i2c_master.c: 169:         i2c_status.address = 0xff;
 11772  17EB  30FF               	movlw	255
 11773  17EC  0020               	movlb	0	; select bank0
 11774  17ED  00D6               	movwf	??_i2c_close
 11775  17EE  0856               	movf	??_i2c_close,w
 11776  17EF  0021               	movlb	1	; select bank1
 11777  17F0  00A1               	movwf	(_i2c_status^(0+128)+1)
 11778  17F1                     l7033:	
 11779                           
 11780                           ;mcc_generated_files/drivers/i2c_master.c: 170:         mssp_clearIRQ();
 11781  17F1  3194  245F  3197   	fcall	_mssp_clearIRQ
 11782  17F4                     l7035:	
 11783                           
 11784                           ;mcc_generated_files/drivers/i2c_master.c: 171:         mssp_disableIRQ();
 11785  17F4  3194  2462  3197   	fcall	_mssp_disableIRQ
 11786                           
 11787                           ;mcc_generated_files/drivers/i2c_master.c: 172:         ret = i2c_status.error;
 11788  17F7  0021               	movlb	1	; select bank1
 11789  17F8  082A               	movf	(_i2c_status^(0+128)+10),w
 11790  17F9  0020               	movlb	0	; select bank0
 11791  17FA  00D6               	movwf	??_i2c_close
 11792  17FB  0856               	movf	??_i2c_close,w
 11793  17FC  00D7               	movwf	i2c_close@ret
 11794  17FD                     l83:	
 11795                           ;mcc_generated_files/drivers/i2c_master.c: 173:     }
 11796                           
 11797                           
 11798                           ;mcc_generated_files/drivers/i2c_master.c: 174:     return ret;
 11799  17FD  0020               	movlb	0	; select bank0
 11800  17FE  0857               	movf	i2c_close@ret,w
 11801  17FF                     l84:	
 11802  17FF  0008               	return
 11803  1800                     __end_of_i2c_close:	
 11804                           
 11805                           	psect	text63
 11806  1462                     __ptext63:	
 11807 ;; *************** function _mssp_disableIRQ *****************
 11808 ;; Defined at:
 11809 ;;		line 49 in file "mcc_generated_files/i2c_driver.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;		None
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;		None
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  1    wreg      void 
 11816 ;; Registers used:
 11817 ;;		None
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;Total ram usage:        0 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    6
 11830 ;; This function calls:
 11831 ;;		Nothing
 11832 ;; This function is called by:
 11833 ;;		_i2c_close
 11834 ;;		_i2c_setTimeOut
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           
 11839                           ;psect for function _mssp_disableIRQ
 11840  1462                     _mssp_disableIRQ:	
 11841  1462                     l6965:	
 11842                           ;incstack = 0
 11843                           ; Regs used in _mssp_disableIRQ: []
 11844                           
 11845                           
 11846                           ;mcc_generated_files/i2c_driver.c: 51: __bit i2c_driver_open(void)
 11847  1462  0021               	movlb	1	; select bank1
 11848  1463  1191               	bcf	17,3	;volatile
 11849  1464                     l596:	
 11850  1464  0008               	return
 11851  1465                     __end_of_mssp_disableIRQ:	
 11852                           
 11853                           	psect	text64
 11854  145F                     __ptext64:	
 11855 ;; *************** function _mssp_clearIRQ *****************
 11856 ;; Defined at:
 11857 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
 11858 ;; Parameters:    Size  Location     Type
 11859 ;;		None
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;		None
 11862 ;; Return value:  Size  Location     Type
 11863 ;;                  1    wreg      void 
 11864 ;; Registers used:
 11865 ;;		None
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;Total ram usage:        0 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    6
 11878 ;; This function calls:
 11879 ;;		Nothing
 11880 ;; This function is called by:
 11881 ;;		_i2c_open
 11882 ;;		_i2c_close
 11883 ;;		_i2c_ISR
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function _mssp_clearIRQ
 11889  145F                     _mssp_clearIRQ:	
 11890  145F                     l6755:	
 11891                           ;incstack = 0
 11892                           ; Regs used in _mssp_clearIRQ: []
 11893                           
 11894                           
 11895                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
 11896  145F  0020               	movlb	0	; select bank0
 11897  1460  1191               	bcf	17,3	;volatile
 11898  1461                     l599:	
 11899  1461  0008               	return
 11900  1462                     __end_of_mssp_clearIRQ:	
 11901                           
 11902                           	psect	text65
 11903  16E5                     __ptext65:	
 11904 ;; *************** function _bcdMonthIncr *****************
 11905 ;; Defined at:
 11906 ;;		line 318 in file "main.c"
 11907 ;; Parameters:    Size  Location     Type
 11908 ;;  mo              1    wreg     unsigned char 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  mo              1    0[BANK0 ] unsigned char 
 11911 ;; Return value:  Size  Location     Type
 11912 ;;                  1    wreg      unsigned char 
 11913 ;; Registers used:
 11914 ;;		wreg, status,2, status,0
 11915 ;; Tracked objects:
 11916 ;;		On entry : 0/0
 11917 ;;		On exit  : 0/0
 11918 ;;		Unchanged: 0/0
 11919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;Total ram usage:        1 bytes
 11925 ;; Hardware stack levels used:    1
 11926 ;; Hardware stack levels required when called:    6
 11927 ;; This function calls:
 11928 ;;		Nothing
 11929 ;; This function is called by:
 11930 ;;		_main
 11931 ;; This function uses a non-reentrant model
 11932 ;;
 11933                           
 11934                           
 11935                           ;psect for function _bcdMonthIncr
 11936  16E5                     _bcdMonthIncr:	
 11937                           
 11938                           ;incstack = 0
 11939                           ; Regs used in _bcdMonthIncr: [wreg+status,2+status,0]
 11940                           ;bcdMonthIncr@mo stored from wreg
 11941  16E5  0020               	movlb	0	; select bank0
 11942  16E6  00D6               	movwf	bcdMonthIncr@mo
 11943  16E7                     l7635:	
 11944                           
 11945                           ;main.c: 320:     if(mo == 0x09) return 0x10;
 11946  16E7  3009               	movlw	9
 11947  16E8  0656               	xorwf	bcdMonthIncr@mo,w
 11948  16E9  1D03               	btfss	3,2
 11949  16EA  2EEC               	goto	u6061
 11950  16EB  2EED               	goto	u6060
 11951  16EC                     u6061:	
 11952  16EC  2EEF               	goto	l7641
 11953  16ED                     u6060:	
 11954  16ED                     l7637:	
 11955  16ED  3010               	movlw	16
 11956  16EE  2EF9               	goto	l982
 11957  16EF                     l7641:	
 11958                           
 11959                           ;main.c: 321:     if(mo == 0x12) return 0x01;
 11960  16EF  3012               	movlw	18
 11961  16F0  0656               	xorwf	bcdMonthIncr@mo,w
 11962  16F1  1D03               	btfss	3,2
 11963  16F2  2EF4               	goto	u6071
 11964  16F3  2EF5               	goto	u6070
 11965  16F4                     u6071:	
 11966  16F4  2EF7               	goto	l7647
 11967  16F5                     u6070:	
 11968  16F5                     l7643:	
 11969  16F5  3001               	movlw	1
 11970  16F6  2EF9               	goto	l982
 11971  16F7                     l7647:	
 11972                           
 11973                           ;main.c: 322:     return (mo + 1);
 11974  16F7  0856               	movf	bcdMonthIncr@mo,w
 11975  16F8  3E01               	addlw	1
 11976  16F9                     l982:	
 11977  16F9  0008               	return
 11978  16FA                     __end_of_bcdMonthIncr:	
 11979                           
 11980                           	psect	text66
 11981  16D0                     __ptext66:	
 11982 ;; *************** function _bcdMonthDecr *****************
 11983 ;; Defined at:
 11984 ;;		line 325 in file "main.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;  mo              1    wreg     unsigned char 
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;  mo              1    0[BANK0 ] unsigned char 
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      unsigned char 
 11991 ;; Registers used:
 11992 ;;		wreg, status,2, status,0
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;Total ram usage:        1 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    6
 12005 ;; This function calls:
 12006 ;;		Nothing
 12007 ;; This function is called by:
 12008 ;;		_main
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           
 12013                           ;psect for function _bcdMonthDecr
 12014  16D0                     _bcdMonthDecr:	
 12015                           
 12016                           ;incstack = 0
 12017                           ; Regs used in _bcdMonthDecr: [wreg+status,2+status,0]
 12018                           ;bcdMonthDecr@mo stored from wreg
 12019  16D0  0020               	movlb	0	; select bank0
 12020  16D1  00D6               	movwf	bcdMonthDecr@mo
 12021  16D2                     l7651:	
 12022                           
 12023                           ;main.c: 326:     if(mo <= 0x01) return 0x12;
 12024  16D2  3002               	movlw	2
 12025  16D3  0256               	subwf	bcdMonthDecr@mo,w
 12026  16D4  1803               	skipnc
 12027  16D5  2ED7               	goto	u6081
 12028  16D6  2ED8               	goto	u6080
 12029  16D7                     u6081:	
 12030  16D7  2EDA               	goto	l7657
 12031  16D8                     u6080:	
 12032  16D8                     l7653:	
 12033  16D8  3012               	movlw	18
 12034  16D9  2EE4               	goto	l987
 12035  16DA                     l7657:	
 12036                           
 12037                           ;main.c: 327:     if(mo == 0x10) return 0x09;
 12038  16DA  3010               	movlw	16
 12039  16DB  0656               	xorwf	bcdMonthDecr@mo,w
 12040  16DC  1D03               	btfss	3,2
 12041  16DD  2EDF               	goto	u6091
 12042  16DE  2EE0               	goto	u6090
 12043  16DF                     u6091:	
 12044  16DF  2EE2               	goto	l7663
 12045  16E0                     u6090:	
 12046  16E0                     l7659:	
 12047  16E0  3009               	movlw	9
 12048  16E1  2EE4               	goto	l987
 12049  16E2                     l7663:	
 12050                           
 12051                           ;main.c: 328:     return (mo - 1);
 12052  16E2  0856               	movf	bcdMonthDecr@mo,w
 12053  16E3  3EFF               	addlw	255
 12054  16E4                     l987:	
 12055  16E4  0008               	return
 12056  16E5                     __end_of_bcdMonthDecr:	
 12057                           
 12058                           	psect	text67
 12059  0459                     __ptext67:	
 12060 ;; *************** function _bcdMinuteIncr *****************
 12061 ;; Defined at:
 12062 ;;		line 296 in file "main.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;  mn              1    wreg     unsigned char 
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;  mn              1    1[BANK0 ] unsigned char 
 12067 ;; Return value:  Size  Location     Type
 12068 ;;                  1    wreg      unsigned char 
 12069 ;; Registers used:
 12070 ;;		wreg, status,2, status,0
 12071 ;; Tracked objects:
 12072 ;;		On entry : 0/0
 12073 ;;		On exit  : 0/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;Total ram usage:        2 bytes
 12081 ;; Hardware stack levels used:    1
 12082 ;; Hardware stack levels required when called:    6
 12083 ;; This function calls:
 12084 ;;		Nothing
 12085 ;; This function is called by:
 12086 ;;		_main
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           
 12091                           ;psect for function _bcdMinuteIncr
 12092  0459                     _bcdMinuteIncr:	
 12093                           
 12094                           ;incstack = 0
 12095                           ; Regs used in _bcdMinuteIncr: [wreg+status,2+status,0]
 12096                           ;bcdMinuteIncr@mn stored from wreg
 12097  0459  0020               	movlb	0	; select bank0
 12098  045A  00D7               	movwf	bcdMinuteIncr@mn
 12099  045B                     l7551:	
 12100                           
 12101                           ;main.c: 297:     mn &= 0x7F;
 12102  045B  307F               	movlw	127
 12103  045C  00D6               	movwf	??_bcdMinuteIncr
 12104  045D  0856               	movf	??_bcdMinuteIncr,w
 12105  045E  05D7               	andwf	bcdMinuteIncr@mn,f
 12106  045F                     l7553:	
 12107                           
 12108                           ;main.c: 298:     if(mn == 0x09) return 0x10;
 12109  045F  3009               	movlw	9
 12110  0460  0657               	xorwf	bcdMinuteIncr@mn,w
 12111  0461  1D03               	btfss	3,2
 12112  0462  2C64               	goto	u5941
 12113  0463  2C65               	goto	u5940
 12114  0464                     u5941:	
 12115  0464  2C67               	goto	l7559
 12116  0465                     u5940:	
 12117  0465                     l7555:	
 12118  0465  3010               	movlw	16
 12119  0466  2C91               	goto	l964
 12120  0467                     l7559:	
 12121                           
 12122                           ;main.c: 299:     if(mn == 0x19) return 0x20;
 12123  0467  3019               	movlw	25
 12124  0468  0657               	xorwf	bcdMinuteIncr@mn,w
 12125  0469  1D03               	btfss	3,2
 12126  046A  2C6C               	goto	u5951
 12127  046B  2C6D               	goto	u5950
 12128  046C                     u5951:	
 12129  046C  2C6F               	goto	l7565
 12130  046D                     u5950:	
 12131  046D                     l7561:	
 12132  046D  3020               	movlw	32
 12133  046E  2C91               	goto	l964
 12134  046F                     l7565:	
 12135                           
 12136                           ;main.c: 300:     if(mn == 0x29) return 0x30;
 12137  046F  3029               	movlw	41
 12138  0470  0657               	xorwf	bcdMinuteIncr@mn,w
 12139  0471  1D03               	btfss	3,2
 12140  0472  2C74               	goto	u5961
 12141  0473  2C75               	goto	u5960
 12142  0474                     u5961:	
 12143  0474  2C77               	goto	l7571
 12144  0475                     u5960:	
 12145  0475                     l7567:	
 12146  0475  3030               	movlw	48
 12147  0476  2C91               	goto	l964
 12148  0477                     l7571:	
 12149                           
 12150                           ;main.c: 301:     if(mn == 0x39) return 0x40;
 12151  0477  3039               	movlw	57
 12152  0478  0657               	xorwf	bcdMinuteIncr@mn,w
 12153  0479  1D03               	btfss	3,2
 12154  047A  2C7C               	goto	u5971
 12155  047B  2C7D               	goto	u5970
 12156  047C                     u5971:	
 12157  047C  2C7F               	goto	l7577
 12158  047D                     u5970:	
 12159  047D                     l7573:	
 12160  047D  3040               	movlw	64
 12161  047E  2C91               	goto	l964
 12162  047F                     l7577:	
 12163                           
 12164                           ;main.c: 302:     if(mn == 0x49) return 0x50;
 12165  047F  3049               	movlw	73
 12166  0480  0657               	xorwf	bcdMinuteIncr@mn,w
 12167  0481  1D03               	btfss	3,2
 12168  0482  2C84               	goto	u5981
 12169  0483  2C85               	goto	u5980
 12170  0484                     u5981:	
 12171  0484  2C87               	goto	l7583
 12172  0485                     u5980:	
 12173  0485                     l7579:	
 12174  0485  3050               	movlw	80
 12175  0486  2C91               	goto	l964
 12176  0487                     l7583:	
 12177                           
 12178                           ;main.c: 303:     if(mn == 0x59) return 0x00;
 12179  0487  3059               	movlw	89
 12180  0488  0657               	xorwf	bcdMinuteIncr@mn,w
 12181  0489  1D03               	btfss	3,2
 12182  048A  2C8C               	goto	u5991
 12183  048B  2C8D               	goto	u5990
 12184  048C                     u5991:	
 12185  048C  2C8F               	goto	l7589
 12186  048D                     u5990:	
 12187  048D                     l7585:	
 12188  048D  3000               	movlw	0
 12189  048E  2C91               	goto	l964
 12190  048F                     l7589:	
 12191                           
 12192                           ;main.c: 304:     return (mn + 1);
 12193  048F  0857               	movf	bcdMinuteIncr@mn,w
 12194  0490  3E01               	addlw	1
 12195  0491                     l964:	
 12196  0491  0008               	return
 12197  0492                     __end_of_bcdMinuteIncr:	
 12198                           
 12199                           	psect	text68
 12200  0492                     __ptext68:	
 12201 ;; *************** function _bcdMinuteDecr *****************
 12202 ;; Defined at:
 12203 ;;		line 307 in file "main.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;  mn              1    wreg     unsigned char 
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  mn              1    1[BANK0 ] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;                  1    wreg      unsigned char 
 12210 ;; Registers used:
 12211 ;;		wreg, status,2, status,0
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;Total ram usage:        2 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    6
 12224 ;; This function calls:
 12225 ;;		Nothing
 12226 ;; This function is called by:
 12227 ;;		_main
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _bcdMinuteDecr
 12233  0492                     _bcdMinuteDecr:	
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in _bcdMinuteDecr: [wreg+status,2+status,0]
 12237                           ;bcdMinuteDecr@mn stored from wreg
 12238  0492  0020               	movlb	0	; select bank0
 12239  0493  00D7               	movwf	bcdMinuteDecr@mn
 12240  0494                     l7593:	
 12241                           
 12242                           ;main.c: 308:     mn &= 0x7F;
 12243  0494  307F               	movlw	127
 12244  0495  00D6               	movwf	??_bcdMinuteDecr
 12245  0496  0856               	movf	??_bcdMinuteDecr,w
 12246  0497  05D7               	andwf	bcdMinuteDecr@mn,f
 12247  0498                     l7595:	
 12248                           
 12249                           ;main.c: 309:     if(mn == 0x00) return 0x59;
 12250  0498  0857               	movf	bcdMinuteDecr@mn,w
 12251  0499  1D03               	btfss	3,2
 12252  049A  2C9C               	goto	u6001
 12253  049B  2C9D               	goto	u6000
 12254  049C                     u6001:	
 12255  049C  2C9F               	goto	l7601
 12256  049D                     u6000:	
 12257  049D                     l7597:	
 12258  049D  3059               	movlw	89
 12259  049E  2CC9               	goto	l973
 12260  049F                     l7601:	
 12261                           
 12262                           ;main.c: 310:     if(mn == 0x10) return 0x09;
 12263  049F  3010               	movlw	16
 12264  04A0  0657               	xorwf	bcdMinuteDecr@mn,w
 12265  04A1  1D03               	btfss	3,2
 12266  04A2  2CA4               	goto	u6011
 12267  04A3  2CA5               	goto	u6010
 12268  04A4                     u6011:	
 12269  04A4  2CA7               	goto	l7607
 12270  04A5                     u6010:	
 12271  04A5                     l7603:	
 12272  04A5  3009               	movlw	9
 12273  04A6  2CC9               	goto	l973
 12274  04A7                     l7607:	
 12275                           
 12276                           ;main.c: 311:     if(mn == 0x20) return 0x19;
 12277  04A7  3020               	movlw	32
 12278  04A8  0657               	xorwf	bcdMinuteDecr@mn,w
 12279  04A9  1D03               	btfss	3,2
 12280  04AA  2CAC               	goto	u6021
 12281  04AB  2CAD               	goto	u6020
 12282  04AC                     u6021:	
 12283  04AC  2CAF               	goto	l7613
 12284  04AD                     u6020:	
 12285  04AD                     l7609:	
 12286  04AD  3019               	movlw	25
 12287  04AE  2CC9               	goto	l973
 12288  04AF                     l7613:	
 12289                           
 12290                           ;main.c: 312:     if(mn == 0x30) return 0x29;
 12291  04AF  3030               	movlw	48
 12292  04B0  0657               	xorwf	bcdMinuteDecr@mn,w
 12293  04B1  1D03               	btfss	3,2
 12294  04B2  2CB4               	goto	u6031
 12295  04B3  2CB5               	goto	u6030
 12296  04B4                     u6031:	
 12297  04B4  2CB7               	goto	l7619
 12298  04B5                     u6030:	
 12299  04B5                     l7615:	
 12300  04B5  3029               	movlw	41
 12301  04B6  2CC9               	goto	l973
 12302  04B7                     l7619:	
 12303                           
 12304                           ;main.c: 313:     if(mn == 0x40) return 0x39;
 12305  04B7  3040               	movlw	64
 12306  04B8  0657               	xorwf	bcdMinuteDecr@mn,w
 12307  04B9  1D03               	btfss	3,2
 12308  04BA  2CBC               	goto	u6041
 12309  04BB  2CBD               	goto	u6040
 12310  04BC                     u6041:	
 12311  04BC  2CBF               	goto	l7625
 12312  04BD                     u6040:	
 12313  04BD                     l7621:	
 12314  04BD  3039               	movlw	57
 12315  04BE  2CC9               	goto	l973
 12316  04BF                     l7625:	
 12317                           
 12318                           ;main.c: 314:     if(mn == 0x50) return 0x49;
 12319  04BF  3050               	movlw	80
 12320  04C0  0657               	xorwf	bcdMinuteDecr@mn,w
 12321  04C1  1D03               	btfss	3,2
 12322  04C2  2CC4               	goto	u6051
 12323  04C3  2CC5               	goto	u6050
 12324  04C4                     u6051:	
 12325  04C4  2CC7               	goto	l7631
 12326  04C5                     u6050:	
 12327  04C5                     l7627:	
 12328  04C5  3049               	movlw	73
 12329  04C6  2CC9               	goto	l973
 12330  04C7                     l7631:	
 12331                           
 12332                           ;main.c: 315:     return (mn - 1);
 12333  04C7  0857               	movf	bcdMinuteDecr@mn,w
 12334  04C8  3EFF               	addlw	255
 12335  04C9                     l973:	
 12336  04C9  0008               	return
 12337  04CA                     __end_of_bcdMinuteDecr:	
 12338                           
 12339                           	psect	text69
 12340  07C4                     __ptext69:	
 12341 ;; *************** function _bcdHourIncr *****************
 12342 ;; Defined at:
 12343 ;;		line 280 in file "main.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;  hr              1    wreg     unsigned char 
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;  hr              1    1[BANK0 ] unsigned char 
 12348 ;; Return value:  Size  Location     Type
 12349 ;;                  1    wreg      unsigned char 
 12350 ;; Registers used:
 12351 ;;		wreg, status,2, status,0
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : 0/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;Total ram usage:        2 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; Hardware stack levels required when called:    6
 12364 ;; This function calls:
 12365 ;;		Nothing
 12366 ;; This function is called by:
 12367 ;;		_main
 12368 ;; This function uses a non-reentrant model
 12369 ;;
 12370                           
 12371                           
 12372                           ;psect for function _bcdHourIncr
 12373  07C4                     _bcdHourIncr:	
 12374                           
 12375                           ;incstack = 0
 12376                           ; Regs used in _bcdHourIncr: [wreg+status,2+status,0]
 12377                           ;bcdHourIncr@hr stored from wreg
 12378  07C4  0020               	movlb	0	; select bank0
 12379  07C5  00D7               	movwf	bcdHourIncr@hr
 12380  07C6                     l7503:	
 12381                           
 12382                           ;main.c: 281:     hr &= 0x7F;
 12383  07C6  307F               	movlw	127
 12384  07C7  00D6               	movwf	??_bcdHourIncr
 12385  07C8  0856               	movf	??_bcdHourIncr,w
 12386  07C9  05D7               	andwf	bcdHourIncr@hr,f
 12387  07CA                     l7505:	
 12388                           
 12389                           ;main.c: 282:     if(hr == 0x09) return 0x10;
 12390  07CA  3009               	movlw	9
 12391  07CB  0657               	xorwf	bcdHourIncr@hr,w
 12392  07CC  1D03               	btfss	3,2
 12393  07CD  2FCF               	goto	u5881
 12394  07CE  2FD0               	goto	u5880
 12395  07CF                     u5881:	
 12396  07CF  2FD2               	goto	l7511
 12397  07D0                     u5880:	
 12398  07D0                     l7507:	
 12399  07D0  3010               	movlw	16
 12400  07D1  2FE4               	goto	l952
 12401  07D2                     l7511:	
 12402                           
 12403                           ;main.c: 283:     if(hr == 0x19) return 0x20;
 12404  07D2  3019               	movlw	25
 12405  07D3  0657               	xorwf	bcdHourIncr@hr,w
 12406  07D4  1D03               	btfss	3,2
 12407  07D5  2FD7               	goto	u5891
 12408  07D6  2FD8               	goto	u5890
 12409  07D7                     u5891:	
 12410  07D7  2FDA               	goto	l7517
 12411  07D8                     u5890:	
 12412  07D8                     l7513:	
 12413  07D8  3020               	movlw	32
 12414  07D9  2FE4               	goto	l952
 12415  07DA                     l7517:	
 12416                           
 12417                           ;main.c: 284:     if(hr == 0x23) return 0x00;
 12418  07DA  3023               	movlw	35
 12419  07DB  0657               	xorwf	bcdHourIncr@hr,w
 12420  07DC  1D03               	btfss	3,2
 12421  07DD  2FDF               	goto	u5901
 12422  07DE  2FE0               	goto	u5900
 12423  07DF                     u5901:	
 12424  07DF  2FE2               	goto	l7523
 12425  07E0                     u5900:	
 12426  07E0                     l7519:	
 12427  07E0  3000               	movlw	0
 12428  07E1  2FE4               	goto	l952
 12429  07E2                     l7523:	
 12430                           
 12431                           ;main.c: 285:     return (hr + 1);
 12432  07E2  0857               	movf	bcdHourIncr@hr,w
 12433  07E3  3E01               	addlw	1
 12434  07E4                     l952:	
 12435  07E4  0008               	return
 12436  07E5                     __end_of_bcdHourIncr:	
 12437                           
 12438                           	psect	text70
 12439  0826                     __ptext70:	
 12440 ;; *************** function _bcdHourDecr *****************
 12441 ;; Defined at:
 12442 ;;		line 288 in file "main.c"
 12443 ;; Parameters:    Size  Location     Type
 12444 ;;  hr              1    wreg     unsigned char 
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;  hr              1    1[BANK0 ] unsigned char 
 12447 ;; Return value:  Size  Location     Type
 12448 ;;                  1    wreg      unsigned char 
 12449 ;; Registers used:
 12450 ;;		wreg, status,2, status,0
 12451 ;; Tracked objects:
 12452 ;;		On entry : 0/0
 12453 ;;		On exit  : 0/0
 12454 ;;		Unchanged: 0/0
 12455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;Total ram usage:        2 bytes
 12461 ;; Hardware stack levels used:    1
 12462 ;; Hardware stack levels required when called:    6
 12463 ;; This function calls:
 12464 ;;		Nothing
 12465 ;; This function is called by:
 12466 ;;		_main
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470                           
 12471                           ;psect for function _bcdHourDecr
 12472  0826                     _bcdHourDecr:	
 12473                           
 12474                           ;incstack = 0
 12475                           ; Regs used in _bcdHourDecr: [wreg+status,2+status,0]
 12476                           ;bcdHourDecr@hr stored from wreg
 12477  0826  0020               	movlb	0	; select bank0
 12478  0827  00D7               	movwf	bcdHourDecr@hr
 12479  0828                     l7527:	
 12480                           
 12481                           ;main.c: 289:     hr &= 0x7F;
 12482  0828  307F               	movlw	127
 12483  0829  00D6               	movwf	??_bcdHourDecr
 12484  082A  0856               	movf	??_bcdHourDecr,w
 12485  082B  05D7               	andwf	bcdHourDecr@hr,f
 12486  082C                     l7529:	
 12487                           
 12488                           ;main.c: 290:     if(hr == 0x00) return 0x23;
 12489  082C  0857               	movf	bcdHourDecr@hr,w
 12490  082D  1D03               	btfss	3,2
 12491  082E  2830               	goto	u5911
 12492  082F  2831               	goto	u5910
 12493  0830                     u5911:	
 12494  0830  2833               	goto	l7535
 12495  0831                     u5910:	
 12496  0831                     l7531:	
 12497  0831  3023               	movlw	35
 12498  0832  2845               	goto	l958
 12499  0833                     l7535:	
 12500                           
 12501                           ;main.c: 291:     if(hr == 0x10) return 0x09;
 12502  0833  3010               	movlw	16
 12503  0834  0657               	xorwf	bcdHourDecr@hr,w
 12504  0835  1D03               	btfss	3,2
 12505  0836  2838               	goto	u5921
 12506  0837  2839               	goto	u5920
 12507  0838                     u5921:	
 12508  0838  283B               	goto	l7541
 12509  0839                     u5920:	
 12510  0839                     l7537:	
 12511  0839  3009               	movlw	9
 12512  083A  2845               	goto	l958
 12513  083B                     l7541:	
 12514                           
 12515                           ;main.c: 292:     if(hr == 0x20) return 0x19;
 12516  083B  3020               	movlw	32
 12517  083C  0657               	xorwf	bcdHourDecr@hr,w
 12518  083D  1D03               	btfss	3,2
 12519  083E  2840               	goto	u5931
 12520  083F  2841               	goto	u5930
 12521  0840                     u5931:	
 12522  0840  2843               	goto	l7547
 12523  0841                     u5930:	
 12524  0841                     l7543:	
 12525  0841  3019               	movlw	25
 12526  0842  2845               	goto	l958
 12527  0843                     l7547:	
 12528                           
 12529                           ;main.c: 293:     return (hr - 1);
 12530  0843  0857               	movf	bcdHourDecr@hr,w
 12531  0844  3EFF               	addlw	255
 12532  0845                     l958:	
 12533  0845  0008               	return
 12534  0846                     __end_of_bcdHourDecr:	
 12535                           
 12536                           	psect	text71
 12537  070D                     __ptext71:	
 12538 ;; *************** function _bcdDateIncr *****************
 12539 ;; Defined at:
 12540 ;;		line 331 in file "main.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  dt              1    wreg     unsigned char 
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  dt              1    0[BANK0 ] unsigned char 
 12545 ;; Return value:  Size  Location     Type
 12546 ;;                  1    wreg      unsigned char 
 12547 ;; Registers used:
 12548 ;;		wreg, status,2, status,0
 12549 ;; Tracked objects:
 12550 ;;		On entry : 0/0
 12551 ;;		On exit  : 0/0
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;Total ram usage:        1 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; Hardware stack levels required when called:    6
 12561 ;; This function calls:
 12562 ;;		Nothing
 12563 ;; This function is called by:
 12564 ;;		_main
 12565 ;; This function uses a non-reentrant model
 12566 ;;
 12567                           
 12568                           
 12569                           ;psect for function _bcdDateIncr
 12570  070D                     _bcdDateIncr:	
 12571                           
 12572                           ;incstack = 0
 12573                           ; Regs used in _bcdDateIncr: [wreg+status,2+status,0]
 12574                           ;bcdDateIncr@dt stored from wreg
 12575  070D  0020               	movlb	0	; select bank0
 12576  070E  00D6               	movwf	bcdDateIncr@dt
 12577  070F                     l7667:	
 12578                           
 12579                           ;main.c: 332:     if(dt >= 0x31) return 0x01;
 12580  070F  3031               	movlw	49
 12581  0710  0256               	subwf	bcdDateIncr@dt,w
 12582  0711  1C03               	skipc
 12583  0712  2F14               	goto	u6101
 12584  0713  2F15               	goto	u6100
 12585  0714                     u6101:	
 12586  0714  2F17               	goto	l7673
 12587  0715                     u6100:	
 12588  0715                     l7669:	
 12589  0715  3001               	movlw	1
 12590  0716  2F31               	goto	l992
 12591  0717                     l7673:	
 12592                           
 12593                           ;main.c: 333:     if(dt == 0x09) return 0x10;
 12594  0717  3009               	movlw	9
 12595  0718  0656               	xorwf	bcdDateIncr@dt,w
 12596  0719  1D03               	btfss	3,2
 12597  071A  2F1C               	goto	u6111
 12598  071B  2F1D               	goto	u6110
 12599  071C                     u6111:	
 12600  071C  2F1F               	goto	l7679
 12601  071D                     u6110:	
 12602  071D                     l7675:	
 12603  071D  3010               	movlw	16
 12604  071E  2F31               	goto	l992
 12605  071F                     l7679:	
 12606                           
 12607                           ;main.c: 334:     if(dt == 0x19) return 0x20;
 12608  071F  3019               	movlw	25
 12609  0720  0656               	xorwf	bcdDateIncr@dt,w
 12610  0721  1D03               	btfss	3,2
 12611  0722  2F24               	goto	u6121
 12612  0723  2F25               	goto	u6120
 12613  0724                     u6121:	
 12614  0724  2F27               	goto	l7685
 12615  0725                     u6120:	
 12616  0725                     l7681:	
 12617  0725  3020               	movlw	32
 12618  0726  2F31               	goto	l992
 12619  0727                     l7685:	
 12620                           
 12621                           ;main.c: 335:     if(dt == 0x29) return 0x30;
 12622  0727  3029               	movlw	41
 12623  0728  0656               	xorwf	bcdDateIncr@dt,w
 12624  0729  1D03               	btfss	3,2
 12625  072A  2F2C               	goto	u6131
 12626  072B  2F2D               	goto	u6130
 12627  072C                     u6131:	
 12628  072C  2F2F               	goto	l7691
 12629  072D                     u6130:	
 12630  072D                     l7687:	
 12631  072D  3030               	movlw	48
 12632  072E  2F31               	goto	l992
 12633  072F                     l7691:	
 12634                           
 12635                           ;main.c: 336:     return (dt + 1);
 12636  072F  0856               	movf	bcdDateIncr@dt,w
 12637  0730  3E01               	addlw	1
 12638  0731                     l992:	
 12639  0731  0008               	return
 12640  0732                     __end_of_bcdDateIncr:	
 12641                           
 12642                           	psect	text72
 12643  0732                     __ptext72:	
 12644 ;; *************** function _bcdDateDecr *****************
 12645 ;; Defined at:
 12646 ;;		line 339 in file "main.c"
 12647 ;; Parameters:    Size  Location     Type
 12648 ;;  dt              1    wreg     unsigned char 
 12649 ;; Auto vars:     Size  Location     Type
 12650 ;;  dt              1    0[BANK0 ] unsigned char 
 12651 ;; Return value:  Size  Location     Type
 12652 ;;                  1    wreg      unsigned char 
 12653 ;; Registers used:
 12654 ;;		wreg, status,2, status,0
 12655 ;; Tracked objects:
 12656 ;;		On entry : 0/0
 12657 ;;		On exit  : 0/0
 12658 ;;		Unchanged: 0/0
 12659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12664 ;;Total ram usage:        1 bytes
 12665 ;; Hardware stack levels used:    1
 12666 ;; Hardware stack levels required when called:    6
 12667 ;; This function calls:
 12668 ;;		Nothing
 12669 ;; This function is called by:
 12670 ;;		_main
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           
 12675                           ;psect for function _bcdDateDecr
 12676  0732                     _bcdDateDecr:	
 12677                           
 12678                           ;incstack = 0
 12679                           ; Regs used in _bcdDateDecr: [wreg+status,2+status,0]
 12680                           ;bcdDateDecr@dt stored from wreg
 12681  0732  0020               	movlb	0	; select bank0
 12682  0733  00D6               	movwf	bcdDateDecr@dt
 12683  0734                     l7695:	
 12684                           
 12685                           ;main.c: 340:     if(dt <= 0x01) return 0x31;
 12686  0734  3002               	movlw	2
 12687  0735  0256               	subwf	bcdDateDecr@dt,w
 12688  0736  1803               	skipnc
 12689  0737  2F39               	goto	u6141
 12690  0738  2F3A               	goto	u6140
 12691  0739                     u6141:	
 12692  0739  2F3C               	goto	l7701
 12693  073A                     u6140:	
 12694  073A                     l7697:	
 12695  073A  3031               	movlw	49
 12696  073B  2F56               	goto	l999
 12697  073C                     l7701:	
 12698                           
 12699                           ;main.c: 341:     if(dt == 0x10) return 0x09;
 12700  073C  3010               	movlw	16
 12701  073D  0656               	xorwf	bcdDateDecr@dt,w
 12702  073E  1D03               	btfss	3,2
 12703  073F  2F41               	goto	u6151
 12704  0740  2F42               	goto	u6150
 12705  0741                     u6151:	
 12706  0741  2F44               	goto	l7707
 12707  0742                     u6150:	
 12708  0742                     l7703:	
 12709  0742  3009               	movlw	9
 12710  0743  2F56               	goto	l999
 12711  0744                     l7707:	
 12712                           
 12713                           ;main.c: 342:     if(dt == 0x20) return 0x19;
 12714  0744  3020               	movlw	32
 12715  0745  0656               	xorwf	bcdDateDecr@dt,w
 12716  0746  1D03               	btfss	3,2
 12717  0747  2F49               	goto	u6161
 12718  0748  2F4A               	goto	u6160
 12719  0749                     u6161:	
 12720  0749  2F4C               	goto	l7713
 12721  074A                     u6160:	
 12722  074A                     l7709:	
 12723  074A  3019               	movlw	25
 12724  074B  2F56               	goto	l999
 12725  074C                     l7713:	
 12726                           
 12727                           ;main.c: 343:     if(dt == 0x30) return 0x29;
 12728  074C  3030               	movlw	48
 12729  074D  0656               	xorwf	bcdDateDecr@dt,w
 12730  074E  1D03               	btfss	3,2
 12731  074F  2F51               	goto	u6171
 12732  0750  2F52               	goto	u6170
 12733  0751                     u6171:	
 12734  0751  2F54               	goto	l7719
 12735  0752                     u6170:	
 12736  0752                     l7715:	
 12737  0752  3029               	movlw	41
 12738  0753  2F56               	goto	l999
 12739  0754                     l7719:	
 12740                           
 12741                           ;main.c: 344:     return (dt - 1);
 12742  0754  0856               	movf	bcdDateDecr@dt,w
 12743  0755  3EFF               	addlw	255
 12744  0756                     l999:	
 12745  0756  0008               	return
 12746  0757                     __end_of_bcdDateDecr:	
 12747                           
 12748                           	psect	text73
 12749  1710                     __ptext73:	
 12750 ;; *************** function _SYSTEM_Initialize *****************
 12751 ;; Defined at:
 12752 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12753 ;; Parameters:    Size  Location     Type
 12754 ;;		None
 12755 ;; Auto vars:     Size  Location     Type
 12756 ;;		None
 12757 ;; Return value:  Size  Location     Type
 12758 ;;                  1    wreg      void 
 12759 ;; Registers used:
 12760 ;;		wreg, status,2, status,0, pclath, cstack
 12761 ;; Tracked objects:
 12762 ;;		On entry : 0/0
 12763 ;;		On exit  : 0/0
 12764 ;;		Unchanged: 0/0
 12765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;Total ram usage:        0 bytes
 12771 ;; Hardware stack levels used:    1
 12772 ;; Hardware stack levels required when called:    8
 12773 ;; This function calls:
 12774 ;;		_ADC_Initialize
 12775 ;;		_EUSART_Initialize
 12776 ;;		_FVR_Initialize
 12777 ;;		_OSCILLATOR_Initialize
 12778 ;;		_PIN_MANAGER_Initialize
 12779 ;;		_TMR0_Initialize
 12780 ;;		_WDT_Initialize
 12781 ;; This function is called by:
 12782 ;;		_main
 12783 ;; This function uses a non-reentrant model
 12784 ;;
 12785                           
 12786                           
 12787                           ;psect for function _SYSTEM_Initialize
 12788  1710                     _SYSTEM_Initialize:	
 12789  1710                     l7401:	
 12790                           ;incstack = 0
 12791                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12792                           
 12793                           
 12794                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
 12795  1710  3185  2598  3197   	fcall	_PIN_MANAGER_Initialize
 12796                           
 12797                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
 12798  1713  3195  25C4  3197   	fcall	_OSCILLATOR_Initialize
 12799                           
 12800                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
 12801  1716  3194  2487  3197   	fcall	_WDT_Initialize
 12802                           
 12803                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
 12804  1719  3194  2483  3197   	fcall	_FVR_Initialize
 12805                           
 12806                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
 12807  171C  3188  2000  3197   	fcall	_ADC_Initialize
 12808                           
 12809                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
 12810  171F  3196  26FA  3197   	fcall	_TMR0_Initialize
 12811                           
 12812                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
 12813  1722  3187  2757  3197   	fcall	_EUSART_Initialize
 12814  1725                     l435:	
 12815  1725  0008               	return
 12816  1726                     __end_of_SYSTEM_Initialize:	
 12817                           
 12818                           	psect	text74
 12819  1487                     __ptext74:	
 12820 ;; *************** function _WDT_Initialize *****************
 12821 ;; Defined at:
 12822 ;;		line 76 in file "mcc_generated_files/mcc.c"
 12823 ;; Parameters:    Size  Location     Type
 12824 ;;		None
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;		None
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      void 
 12829 ;; Registers used:
 12830 ;;		wreg
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;Total ram usage:        0 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    6
 12843 ;; This function calls:
 12844 ;;		Nothing
 12845 ;; This function is called by:
 12846 ;;		_SYSTEM_Initialize
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           
 12851                           ;psect for function _WDT_Initialize
 12852  1487                     _WDT_Initialize:	
 12853  1487                     l7169:	
 12854                           ;incstack = 0
 12855                           ; Regs used in _WDT_Initialize: [wreg]
 12856                           
 12857                           
 12858                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x14;
 12859  1487  3014               	movlw	20
 12860  1488  0021               	movlb	1	; select bank1
 12861  1489  0097               	movwf	23	;volatile
 12862  148A                     l444:	
 12863  148A  0008               	return
 12864  148B                     __end_of_WDT_Initialize:	
 12865                           
 12866                           	psect	text75
 12867  16FA                     __ptext75:	
 12868 ;; *************** function _TMR0_Initialize *****************
 12869 ;; Defined at:
 12870 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;		None
 12873 ;; Auto vars:     Size  Location     Type
 12874 ;;		None
 12875 ;; Return value:  Size  Location     Type
 12876 ;;                  1    wreg      void 
 12877 ;; Registers used:
 12878 ;;		wreg, status,2, status,0, pclath, cstack
 12879 ;; Tracked objects:
 12880 ;;		On entry : 0/0
 12881 ;;		On exit  : 0/0
 12882 ;;		Unchanged: 0/0
 12883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12886 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12887 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;Total ram usage:        1 bytes
 12889 ;; Hardware stack levels used:    1
 12890 ;; Hardware stack levels required when called:    7
 12891 ;; This function calls:
 12892 ;;		_TMR0_SetInterruptHandler
 12893 ;; This function is called by:
 12894 ;;		_SYSTEM_Initialize
 12895 ;; This function uses a non-reentrant model
 12896 ;;
 12897                           
 12898                           
 12899                           ;psect for function _TMR0_Initialize
 12900  16FA                     _TMR0_Initialize:	
 12901  16FA                     l7179:	
 12902                           ;incstack = 0
 12903                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12904                           
 12905                           
 12906                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
 12907  16FA  0021               	movlb	1	; select bank1
 12908  16FB  0815               	movf	21,w	;volatile
 12909  16FC  39C0               	andlw	192
 12910  16FD  3817               	iorlw	23
 12911  16FE  0095               	movwf	21	;volatile
 12912  16FF                     l7181:	
 12913                           
 12914                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
 12915  16FF  3083               	movlw	131
 12916  1700  0020               	movlb	0	; select bank0
 12917  1701  0095               	movwf	21	;volatile
 12918  1702                     l7183:	
 12919                           
 12920                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
 12921  1702  3083               	movlw	131
 12922  1703  00D8               	movwf	??_TMR0_Initialize
 12923  1704  0858               	movf	??_TMR0_Initialize,w
 12924  1705  00FD               	movwf	_timer0ReloadVal	;volatile
 12925  1706                     l7185:	
 12926                           
 12927                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
 12928  1706  110B               	bcf	11,2	;volatile
 12929  1707                     l7187:	
 12930                           
 12931                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
 12932  1707  168B               	bsf	11,5	;volatile
 12933  1708                     l7189:	
 12934                           
 12935                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 12936  1708  3043               	movlw	low _TMR0_DefaultInterruptHandler
 12937  1709  00D6               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 12938  170A  3014               	movlw	high _TMR0_DefaultInterruptHandler
 12939  170B  00D7               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 12940  170C  3194  24C5  3196   	fcall	_TMR0_SetInterruptHandler
 12941  170F                     l532:	
 12942  170F  0008               	return
 12943  1710                     __end_of_TMR0_Initialize:	
 12944                           
 12945                           	psect	text76
 12946  14C5                     __ptext76:	
 12947 ;; *************** function _TMR0_SetInterruptHandler *****************
 12948 ;; Defined at:
 12949 ;;		line 133 in file "mcc_generated_files/tmr0.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 12952 ;;		 -> displayRefreshISR(1), TMR0_DefaultInterruptHandler(1), 
 12953 ;; Auto vars:     Size  Location     Type
 12954 ;;		None
 12955 ;; Return value:  Size  Location     Type
 12956 ;;                  1    wreg      void 
 12957 ;; Registers used:
 12958 ;;		wreg
 12959 ;; Tracked objects:
 12960 ;;		On entry : 0/0
 12961 ;;		On exit  : 0/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12964 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;Total ram usage:        2 bytes
 12969 ;; Hardware stack levels used:    1
 12970 ;; Hardware stack levels required when called:    6
 12971 ;; This function calls:
 12972 ;;		Nothing
 12973 ;; This function is called by:
 12974 ;;		_TMR0_Initialize
 12975 ;;		_main
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           
 12980                           ;psect for function _TMR0_SetInterruptHandler
 12981  14C5                     _TMR0_SetInterruptHandler:	
 12982  14C5                     l7045:	
 12983                           ;incstack = 0
 12984                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 12985                           
 12986                           
 12987                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
 12988  14C5  0020               	movlb	0	; select bank0
 12989  14C6  0857               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 12990  14C7  00FA               	movwf	_TMR0_InterruptHandler+1
 12991  14C8  0856               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 12992  14C9  00F9               	movwf	_TMR0_InterruptHandler
 12993  14CA                     l551:	
 12994  14CA  0008               	return
 12995  14CB                     __end_of_TMR0_SetInterruptHandler:	
 12996                           
 12997                           	psect	text77
 12998  0598                     __ptext77:	
 12999 ;; *************** function _PIN_MANAGER_Initialize *****************
 13000 ;; Defined at:
 13001 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 13002 ;; Parameters:    Size  Location     Type
 13003 ;;		None
 13004 ;; Auto vars:     Size  Location     Type
 13005 ;;		None
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  1    wreg      void 
 13008 ;; Registers used:
 13009 ;;		wreg, status,2, status,0, pclath, cstack
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;Total ram usage:        0 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    7
 13022 ;; This function calls:
 13023 ;;		_IOCBF4_SetInterruptHandler
 13024 ;; This function is called by:
 13025 ;;		_SYSTEM_Initialize
 13026 ;; This function uses a non-reentrant model
 13027 ;;
 13028                           
 13029                           
 13030                           ;psect for function _PIN_MANAGER_Initialize
 13031  0598                     _PIN_MANAGER_Initialize:	
 13032  0598                     l7129:	
 13033                           ;incstack = 0
 13034                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13035                           
 13036                           
 13037                           ;mcc_generated_files/pin_manager.c: 62:     LATE = 0x00;
 13038  0598  0022               	movlb	2	; select bank2
 13039  0599  0190               	clrf	16	;volatile
 13040                           
 13041                           ;mcc_generated_files/pin_manager.c: 63:     LATD = 0x00;
 13042  059A  018F               	clrf	15	;volatile
 13043                           
 13044                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
 13045  059B  018C               	clrf	12	;volatile
 13046                           
 13047                           ;mcc_generated_files/pin_manager.c: 65:     LATB = 0x00;
 13048  059C  018D               	clrf	13	;volatile
 13049                           
 13050                           ;mcc_generated_files/pin_manager.c: 66:     LATC = 0x00;
 13051  059D  018E               	clrf	14	;volatile
 13052  059E                     l7131:	
 13053                           
 13054                           ;mcc_generated_files/pin_manager.c: 71:     TRISE = 0x0D;
 13055  059E  300D               	movlw	13
 13056  059F  0021               	movlb	1	; select bank1
 13057  05A0  0090               	movwf	16	;volatile
 13058  05A1                     l7133:	
 13059                           
 13060                           ;mcc_generated_files/pin_manager.c: 72:     TRISA = 0x67;
 13061  05A1  3067               	movlw	103
 13062  05A2  008C               	movwf	12	;volatile
 13063  05A3                     l7135:	
 13064                           
 13065                           ;mcc_generated_files/pin_manager.c: 73:     TRISB = 0x7F;
 13066  05A3  307F               	movlw	127
 13067  05A4  008D               	movwf	13	;volatile
 13068  05A5                     l7137:	
 13069                           
 13070                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xBD;
 13071  05A5  30BD               	movlw	189
 13072  05A6  008E               	movwf	14	;volatile
 13073                           
 13074                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0x00;
 13075  05A7  018F               	clrf	15	;volatile
 13076                           
 13077                           ;mcc_generated_files/pin_manager.c: 80:     ANSELD = 0x00;
 13078  05A8  0023               	movlb	3	; select bank3
 13079  05A9  018F               	clrf	15	;volatile
 13080  05AA                     l7139:	
 13081                           
 13082                           ;mcc_generated_files/pin_manager.c: 81:     ANSELB = 0x20;
 13083  05AA  3020               	movlw	32
 13084  05AB  008D               	movwf	13	;volatile
 13085  05AC                     l7141:	
 13086                           
 13087                           ;mcc_generated_files/pin_manager.c: 82:     ANSELE = 0x05;
 13088  05AC  3005               	movlw	5
 13089  05AD  0090               	movwf	16	;volatile
 13090  05AE                     l7143:	
 13091                           
 13092                           ;mcc_generated_files/pin_manager.c: 83:     ANSELA = 0x27;
 13093  05AE  3027               	movlw	39
 13094  05AF  008C               	movwf	12	;volatile
 13095  05B0                     l7145:	
 13096                           
 13097                           ;mcc_generated_files/pin_manager.c: 88:     WPUE = 0x00;
 13098  05B0  0024               	movlb	4	; select bank4
 13099  05B1  0190               	clrf	16	;volatile
 13100  05B2                     l7147:	
 13101                           
 13102                           ;mcc_generated_files/pin_manager.c: 89:     WPUB = 0x00;
 13103  05B2  018D               	clrf	13	;volatile
 13104  05B3                     l7149:	
 13105                           
 13106                           ;mcc_generated_files/pin_manager.c: 90:     OPTION_REGbits.nWPUEN = 1;
 13107  05B3  0021               	movlb	1	; select bank1
 13108  05B4  1795               	bsf	21,7	;volatile
 13109  05B5                     l7151:	
 13110                           
 13111                           ;mcc_generated_files/pin_manager.c: 96:     APFCON = 0x00;
 13112  05B5  0022               	movlb	2	; select bank2
 13113  05B6  019D               	clrf	29	;volatile
 13114  05B7                     l7153:	
 13115                           
 13116                           ;mcc_generated_files/pin_manager.c: 102:     IOCBFbits.IOCBF4 = 0;
 13117  05B7  0027               	movlb	7	; select bank7
 13118  05B8  1216               	bcf	22,4	;volatile
 13119  05B9                     l7155:	
 13120                           
 13121                           ;mcc_generated_files/pin_manager.c: 104:     IOCBNbits.IOCBN4 = 1;
 13122  05B9  1615               	bsf	21,4	;volatile
 13123  05BA                     l7157:	
 13124                           
 13125                           ;mcc_generated_files/pin_manager.c: 106:     IOCBPbits.IOCBP4 = 1;
 13126  05BA  1614               	bsf	20,4	;volatile
 13127  05BB                     l7159:	
 13128                           
 13129                           ;mcc_generated_files/pin_manager.c: 111:     IOCBF4_SetInterruptHandler(IOCBF4_DefaultIn
      +                          terruptHandler);
 13130  05BB  3042               	movlw	low _IOCBF4_DefaultInterruptHandler
 13131  05BC  0020               	movlb	0	; select bank0
 13132  05BD  00D6               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler
 13133  05BE  3014               	movlw	high _IOCBF4_DefaultInterruptHandler
 13134  05BF  00D7               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler+1
 13135  05C0  3195  2549  3185   	fcall	_IOCBF4_SetInterruptHandler
 13136  05C3                     l7161:	
 13137                           
 13138                           ;mcc_generated_files/pin_manager.c: 114:     INTCONbits.IOCIE = 1;
 13139  05C3  158B               	bsf	11,3	;volatile
 13140  05C4                     l499:	
 13141  05C4  0008               	return
 13142  05C5                     __end_of_PIN_MANAGER_Initialize:	
 13143                           
 13144                           	psect	text78
 13145  1549                     __ptext78:	
 13146 ;; *************** function _IOCBF4_SetInterruptHandler *****************
 13147 ;; Defined at:
 13148 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 13151 ;;		 -> secondISR(1), IOCBF4_DefaultInterruptHandler(1), 
 13152 ;; Auto vars:     Size  Location     Type
 13153 ;;		None
 13154 ;; Return value:  Size  Location     Type
 13155 ;;                  1    wreg      void 
 13156 ;; Registers used:
 13157 ;;		wreg
 13158 ;; Tracked objects:
 13159 ;;		On entry : 0/0
 13160 ;;		On exit  : 0/0
 13161 ;;		Unchanged: 0/0
 13162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13163 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13167 ;;Total ram usage:        2 bytes
 13168 ;; Hardware stack levels used:    1
 13169 ;; Hardware stack levels required when called:    6
 13170 ;; This function calls:
 13171 ;;		Nothing
 13172 ;; This function is called by:
 13173 ;;		_PIN_MANAGER_Initialize
 13174 ;;		_main
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           
 13179                           ;psect for function _IOCBF4_SetInterruptHandler
 13180  1549                     _IOCBF4_SetInterruptHandler:	
 13181  1549                     l7043:	
 13182                           ;incstack = 0
 13183                           ; Regs used in _IOCBF4_SetInterruptHandler: [wreg]
 13184                           
 13185                           
 13186                           ;mcc_generated_files/pin_manager.c: 146:     IOCBF4_InterruptHandler = InterruptHandler;
 13187  1549  0020               	movlb	0	; select bank0
 13188  154A  0857               	movf	IOCBF4_SetInterruptHandler@InterruptHandler+1,w
 13189  154B  0021               	movlb	1	; select bank1
 13190  154C  00D8               	movwf	(_IOCBF4_InterruptHandler+1)^(0+128)
 13191  154D  0020               	movlb	0	; select bank0
 13192  154E  0856               	movf	IOCBF4_SetInterruptHandler@InterruptHandler,w
 13193  154F  0021               	movlb	1	; select bank1
 13194  1550  00D7               	movwf	_IOCBF4_InterruptHandler^(0+128)
 13195  1551                     l510:	
 13196  1551  0008               	return
 13197  1552                     __end_of_IOCBF4_SetInterruptHandler:	
 13198                           
 13199                           	psect	text79
 13200  15C4                     __ptext79:	
 13201 ;; *************** function _OSCILLATOR_Initialize *****************
 13202 ;; Defined at:
 13203 ;;		line 62 in file "mcc_generated_files/mcc.c"
 13204 ;; Parameters:    Size  Location     Type
 13205 ;;		None
 13206 ;; Auto vars:     Size  Location     Type
 13207 ;;		None
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  1    wreg      void 
 13210 ;; Registers used:
 13211 ;;		wreg, status,2
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;Total ram usage:        0 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; Hardware stack levels required when called:    6
 13224 ;; This function calls:
 13225 ;;		Nothing
 13226 ;; This function is called by:
 13227 ;;		_SYSTEM_Initialize
 13228 ;; This function uses a non-reentrant model
 13229 ;;
 13230                           
 13231                           
 13232                           ;psect for function _OSCILLATOR_Initialize
 13233  15C4                     _OSCILLATOR_Initialize:	
 13234  15C4                     l7163:	
 13235                           ;incstack = 0
 13236                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 13237                           
 13238                           
 13239                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x70;
 13240  15C4  3070               	movlw	112
 13241  15C5  0021               	movlb	1	; select bank1
 13242  15C6  0099               	movwf	25	;volatile
 13243  15C7                     l7165:	
 13244                           
 13245                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
 13246  15C7  0198               	clrf	24	;volatile
 13247  15C8                     l7167:	
 13248                           
 13249                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
 13250  15C8  0022               	movlb	2	; select bank2
 13251  15C9  0196               	clrf	22	;volatile
 13252  15CA                     l438:	
 13253                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
 13254                           
 13255                           
 13256                           ;mcc_generated_files/mcc.c: 71:     while(PLLR == 0)
 13257  15CA  0021               	movlb	1	; select bank1
 13258  15CB  1F1A               	btfss	26,6	;volatile
 13259  15CC  2DCE               	goto	u5631
 13260  15CD  2DCF               	goto	u5630
 13261  15CE                     u5631:	
 13262  15CE  2DCA               	goto	l438
 13263  15CF                     u5630:	
 13264  15CF                     l441:	
 13265  15CF  0008               	return
 13266  15D0                     __end_of_OSCILLATOR_Initialize:	
 13267                           
 13268                           	psect	text80
 13269  1483                     __ptext80:	
 13270 ;; *************** function _FVR_Initialize *****************
 13271 ;; Defined at:
 13272 ;;		line 58 in file "mcc_generated_files/fvr.c"
 13273 ;; Parameters:    Size  Location     Type
 13274 ;;		None
 13275 ;; Auto vars:     Size  Location     Type
 13276 ;;		None
 13277 ;; Return value:  Size  Location     Type
 13278 ;;                  1    wreg      void 
 13279 ;; Registers used:
 13280 ;;		wreg
 13281 ;; Tracked objects:
 13282 ;;		On entry : 0/0
 13283 ;;		On exit  : 0/0
 13284 ;;		Unchanged: 0/0
 13285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;Total ram usage:        0 bytes
 13291 ;; Hardware stack levels used:    1
 13292 ;; Hardware stack levels required when called:    6
 13293 ;; This function calls:
 13294 ;;		Nothing
 13295 ;; This function is called by:
 13296 ;;		_SYSTEM_Initialize
 13297 ;; This function uses a non-reentrant model
 13298 ;;
 13299                           
 13300                           
 13301                           ;psect for function _FVR_Initialize
 13302  1483                     _FVR_Initialize:	
 13303  1483                     l7171:	
 13304                           ;incstack = 0
 13305                           ; Regs used in _FVR_Initialize: [wreg]
 13306                           
 13307                           
 13308                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x81;
 13309  1483  3081               	movlw	129
 13310  1484  0022               	movlb	2	; select bank2
 13311  1485  0097               	movwf	23	;volatile
 13312  1486                     l708:	
 13313  1486  0008               	return
 13314  1487                     __end_of_FVR_Initialize:	
 13315                           
 13316                           	psect	text81
 13317  0757                     __ptext81:	
 13318 ;; *************** function _EUSART_Initialize *****************
 13319 ;; Defined at:
 13320 ;;		line 66 in file "mcc_generated_files/eusart.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;		None
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;		None
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      void 
 13327 ;; Registers used:
 13328 ;;		wreg, status,2, status,0, pclath, cstack
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;Total ram usage:        0 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    7
 13341 ;; This function calls:
 13342 ;;		_EUSART_SetErrorHandler
 13343 ;;		_EUSART_SetFramingErrorHandler
 13344 ;;		_EUSART_SetOverrunErrorHandler
 13345 ;; This function is called by:
 13346 ;;		_SYSTEM_Initialize
 13347 ;; This function uses a non-reentrant model
 13348 ;;
 13349                           
 13350                           
 13351                           ;psect for function _EUSART_Initialize
 13352  0757                     _EUSART_Initialize:	
 13353  0757                     l7191:	
 13354                           ;incstack = 0
 13355                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13356                           
 13357                           
 13358                           ;mcc_generated_files/eusart.c: 71:     BAUDCON = 0x08;
 13359  0757  3008               	movlw	8
 13360  0758  0023               	movlb	3	; select bank3
 13361  0759  009F               	movwf	31	;volatile
 13362                           
 13363                           ;mcc_generated_files/eusart.c: 74:     RCSTA = 0x90;
 13364  075A  3090               	movlw	144
 13365  075B  009D               	movwf	29	;volatile
 13366                           
 13367                           ;mcc_generated_files/eusart.c: 77:     TXSTA = 0x24;
 13368  075C  3024               	movlw	36
 13369  075D  009E               	movwf	30	;volatile
 13370                           
 13371                           ;mcc_generated_files/eusart.c: 80:     SPBRGL = 0x40;
 13372  075E  3040               	movlw	64
 13373  075F  009B               	movwf	27	;volatile
 13374                           
 13375                           ;mcc_generated_files/eusart.c: 83:     SPBRGH = 0x03;
 13376  0760  3003               	movlw	3
 13377  0761  009C               	movwf	28	;volatile
 13378  0762                     l7193:	
 13379                           
 13380                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 13381  0762  3000               	movlw	0
 13382  0763  0020               	movlb	0	; select bank0
 13383  0764  00D6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 13384  0765  3000               	movlw	0
 13385  0766  00D7               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 13386  0767  3195  2537  3187   	fcall	_EUSART_SetFramingErrorHandler
 13387  076A                     l7195:	
 13388                           
 13389                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 13390  076A  3000               	movlw	0
 13391  076B  0020               	movlb	0	; select bank0
 13392  076C  00D6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 13393  076D  3000               	movlw	0
 13394  076E  00D7               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 13395  076F  3195  2540  3187   	fcall	_EUSART_SetOverrunErrorHandler
 13396  0772                     l7197:	
 13397                           
 13398                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 13399  0772  3000               	movlw	0
 13400  0773  0020               	movlb	0	; select bank0
 13401  0774  00D6               	movwf	EUSART_SetErrorHandler@interruptHandler
 13402  0775  3000               	movlw	0
 13403  0776  00D7               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 13404  0777  3195  252E  3187   	fcall	_EUSART_SetErrorHandler
 13405  077A                     l7199:	
 13406                           
 13407                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 13408  077A  01FC               	clrf	_eusartRxLastError	;volatile
 13409  077B                     l792:	
 13410  077B  0008               	return
 13411  077C                     __end_of_EUSART_Initialize:	
 13412                           
 13413                           	psect	text82
 13414  1540                     __ptext82:	
 13415 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 13416 ;; Defined at:
 13417 ;;		line 163 in file "mcc_generated_files/eusart.c"
 13418 ;; Parameters:    Size  Location     Type
 13419 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13420 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;		None
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  1    wreg      void 
 13425 ;; Registers used:
 13426 ;;		wreg
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;Total ram usage:        2 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    6
 13439 ;; This function calls:
 13440 ;;		Nothing
 13441 ;; This function is called by:
 13442 ;;		_EUSART_Initialize
 13443 ;; This function uses a non-reentrant model
 13444 ;;
 13445                           
 13446                           
 13447                           ;psect for function _EUSART_SetOverrunErrorHandler
 13448  1540                     _EUSART_SetOverrunErrorHandler:	
 13449  1540                     l7049:	
 13450                           ;incstack = 0
 13451                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 13452                           
 13453                           
 13454                           ;mcc_generated_files/eusart.c: 164:     EUSART_OverrunErrorHandler = interruptHandler;
 13455  1540  0020               	movlb	0	; select bank0
 13456  1541  0857               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 13457  1542  0021               	movlb	1	; select bank1
 13458  1543  00D4               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
 13459  1544  0020               	movlb	0	; select bank0
 13460  1545  0856               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 13461  1546  0021               	movlb	1	; select bank1
 13462  1547  00D3               	movwf	_EUSART_OverrunErrorHandler^(0+128)
 13463  1548                     l834:	
 13464  1548  0008               	return
 13465  1549                     __end_of_EUSART_SetOverrunErrorHandler:	
 13466                           
 13467                           	psect	text83
 13468  1537                     __ptext83:	
 13469 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 13470 ;; Defined at:
 13471 ;;		line 159 in file "mcc_generated_files/eusart.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13474 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;		None
 13477 ;; Return value:  Size  Location     Type
 13478 ;;                  1    wreg      void 
 13479 ;; Registers used:
 13480 ;;		wreg
 13481 ;; Tracked objects:
 13482 ;;		On entry : 0/0
 13483 ;;		On exit  : 0/0
 13484 ;;		Unchanged: 0/0
 13485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;Total ram usage:        2 bytes
 13491 ;; Hardware stack levels used:    1
 13492 ;; Hardware stack levels required when called:    6
 13493 ;; This function calls:
 13494 ;;		Nothing
 13495 ;; This function is called by:
 13496 ;;		_EUSART_Initialize
 13497 ;; This function uses a non-reentrant model
 13498 ;;
 13499                           
 13500                           
 13501                           ;psect for function _EUSART_SetFramingErrorHandler
 13502  1537                     _EUSART_SetFramingErrorHandler:	
 13503  1537                     l7047:	
 13504                           ;incstack = 0
 13505                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 13506                           
 13507                           
 13508                           ;mcc_generated_files/eusart.c: 160:     EUSART_FramingErrorHandler = interruptHandler;
 13509  1537  0020               	movlb	0	; select bank0
 13510  1538  0857               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 13511  1539  0021               	movlb	1	; select bank1
 13512  153A  00D6               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
 13513  153B  0020               	movlb	0	; select bank0
 13514  153C  0856               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 13515  153D  0021               	movlb	1	; select bank1
 13516  153E  00D5               	movwf	_EUSART_FramingErrorHandler^(0+128)
 13517  153F                     l831:	
 13518  153F  0008               	return
 13519  1540                     __end_of_EUSART_SetFramingErrorHandler:	
 13520                           
 13521                           	psect	text84
 13522  152E                     __ptext84:	
 13523 ;; *************** function _EUSART_SetErrorHandler *****************
 13524 ;; Defined at:
 13525 ;;		line 167 in file "mcc_generated_files/eusart.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13528 ;;		 -> EUSART_DefaultErrorHandler(1), 
 13529 ;; Auto vars:     Size  Location     Type
 13530 ;;		None
 13531 ;; Return value:  Size  Location     Type
 13532 ;;                  1    wreg      void 
 13533 ;; Registers used:
 13534 ;;		wreg
 13535 ;; Tracked objects:
 13536 ;;		On entry : 0/0
 13537 ;;		On exit  : 0/0
 13538 ;;		Unchanged: 0/0
 13539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13540 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13544 ;;Total ram usage:        2 bytes
 13545 ;; Hardware stack levels used:    1
 13546 ;; Hardware stack levels required when called:    6
 13547 ;; This function calls:
 13548 ;;		Nothing
 13549 ;; This function is called by:
 13550 ;;		_EUSART_Initialize
 13551 ;; This function uses a non-reentrant model
 13552 ;;
 13553                           
 13554                           
 13555                           ;psect for function _EUSART_SetErrorHandler
 13556  152E                     _EUSART_SetErrorHandler:	
 13557  152E                     l7051:	
 13558                           ;incstack = 0
 13559                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 13560                           
 13561                           
 13562                           ;mcc_generated_files/eusart.c: 168:     EUSART_ErrorHandler = interruptHandler;
 13563  152E  0020               	movlb	0	; select bank0
 13564  152F  0857               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 13565  1530  0021               	movlb	1	; select bank1
 13566  1531  00D2               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
 13567  1532  0020               	movlb	0	; select bank0
 13568  1533  0856               	movf	EUSART_SetErrorHandler@interruptHandler,w
 13569  1534  0021               	movlb	1	; select bank1
 13570  1535  00D1               	movwf	_EUSART_ErrorHandler^(0+128)
 13571  1536                     l837:	
 13572  1536  0008               	return
 13573  1537                     __end_of_EUSART_SetErrorHandler:	
 13574                           
 13575                           	psect	text85
 13576  0800                     __ptext85:	
 13577 ;; *************** function _ADC_Initialize *****************
 13578 ;; Defined at:
 13579 ;;		line 67 in file "mcc_generated_files/adc.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;		None
 13582 ;; Auto vars:     Size  Location     Type
 13583 ;;		None
 13584 ;; Return value:  Size  Location     Type
 13585 ;;                  1    wreg      void 
 13586 ;; Registers used:
 13587 ;;		wreg, status,2
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;Total ram usage:        0 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    6
 13600 ;; This function calls:
 13601 ;;		Nothing
 13602 ;; This function is called by:
 13603 ;;		_SYSTEM_Initialize
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           
 13608                           ;psect for function _ADC_Initialize
 13609  0800                     _ADC_Initialize:	
 13610  0800                     l7173:	
 13611                           ;incstack = 0
 13612                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13613                           
 13614                           
 13615                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
 13616  0800  3001               	movlw	1
 13617  0801  0021               	movlb	1	; select bank1
 13618  0802  009D               	movwf	29	;volatile
 13619                           
 13620                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xE3;
 13621  0803  30E3               	movlw	227
 13622  0804  009E               	movwf	30	;volatile
 13623  0805                     l7175:	
 13624                           
 13625                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
 13626  0805  019B               	clrf	27	;volatile
 13627  0806                     l7177:	
 13628                           
 13629                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
 13630  0806  019C               	clrf	28	;volatile
 13631  0807                     l728:	
 13632  0807  0008               	return
 13633  0808                     __end_of_ADC_Initialize:	
 13634                           
 13635                           	psect	text86
 13636  00CF                     __ptext86:	
 13637 ;; *************** function _FIR_filter *****************
 13638 ;; Defined at:
 13639 ;;		line 375 in file "main.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;  sample          2    4[BANK0 ] unsigned short 
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;		None
 13644 ;; Return value:  Size  Location     Type
 13645 ;;                  2    4[BANK0 ] unsigned short 
 13646 ;; Registers used:
 13647 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13648 ;; Tracked objects:
 13649 ;;		On entry : 0/0
 13650 ;;		On exit  : 0/0
 13651 ;;		Unchanged: 0/0
 13652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13653 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;Total ram usage:        8 bytes
 13658 ;; Hardware stack levels used:    1
 13659 ;; Hardware stack levels required when called:    6
 13660 ;; This function calls:
 13661 ;;		Nothing
 13662 ;; This function is called by:
 13663 ;;		_main
 13664 ;; This function uses a non-reentrant model
 13665 ;;
 13666                           
 13667                           
 13668                           ;psect for function _FIR_filter
 13669  00CF                     _FIR_filter:	
 13670  00CF                     l5661:	
 13671                           ;incstack = 0
 13672                           ; Regs used in _FIR_filter: [wreg+fsr1l+fsr1h+status,2+status,0]
 13673                           
 13674                           
 13675                           ;main.c: 376:     static adc_result_t buffer[8] = {0,0,0,0,0,0,0,0};;main.c: 377:     st
      +                          atic adc_result_t oldest = 0;;main.c: 378:     static uint32_t sum;;main.c: 380:     sum
      +                           -= buffer[oldest];
 13676  00CF  0020               	movlb	0	; select bank0
 13677  00D0  352C               	lslf	FIR_filter@oldest,w
 13678  00D1  3EBD               	addlw	(low (FIR_filter@buffer| 0))& (0+255)
 13679  00D2  0086               	movwf	6
 13680  00D3  0187               	clrf	7
 13681  00D4  3F40               	moviw [0]fsr1
 13682  00D5  00DC               	movwf	??_FIR_filter
 13683  00D6  3F41               	moviw [1]fsr1
 13684  00D7  00DD               	movwf	??_FIR_filter+1
 13685  00D8  085C               	movf	??_FIR_filter,w
 13686  00D9  00DE               	movwf	??_FIR_filter+2
 13687  00DA  085D               	movf	??_FIR_filter+1,w
 13688  00DB  00DF               	movwf	??_FIR_filter+3
 13689  00DC  01E0               	clrf	??_FIR_filter+4
 13690  00DD  01E1               	clrf	??_FIR_filter+5
 13691  00DE  085E               	movf	??_FIR_filter+2,w
 13692  00DF  0021               	movlb	1	; select bank1
 13693  00E0  02CD               	subwf	FIR_filter@sum^(0+128),f
 13694  00E1  0020               	movlb	0	; select bank0
 13695  00E2  085F               	movf	??_FIR_filter+3,w
 13696  00E3  0021               	movlb	1	; select bank1
 13697  00E4  3BCE               	subwfb	(FIR_filter@sum+1)^(0+128),f
 13698  00E5  0020               	movlb	0	; select bank0
 13699  00E6  0860               	movf	??_FIR_filter+4,w
 13700  00E7  0021               	movlb	1	; select bank1
 13701  00E8  3BCF               	subwfb	(FIR_filter@sum+2)^(0+128),f
 13702  00E9  0020               	movlb	0	; select bank0
 13703  00EA  0861               	movf	??_FIR_filter+5,w
 13704  00EB  0021               	movlb	1	; select bank1
 13705  00EC  3BD0               	subwfb	(FIR_filter@sum+3)^(0+128),f
 13706  00ED                     l5663:	
 13707                           
 13708                           ;main.c: 381:     sum += sample;
 13709  00ED  0020               	movlb	0	; select bank0
 13710  00EE  085A               	movf	FIR_filter@sample,w
 13711  00EF  0021               	movlb	1	; select bank1
 13712  00F0  07CD               	addwf	FIR_filter@sum^(0+128),f
 13713  00F1  0020               	movlb	0	; select bank0
 13714  00F2  085B               	movf	FIR_filter@sample+1,w
 13715  00F3  0021               	movlb	1	; select bank1
 13716  00F4  3DCE               	addwfc	(FIR_filter@sum+1)^(0+128),f
 13717  00F5  3000               	movlw	0
 13718  00F6  3DCF               	addwfc	(FIR_filter@sum+2)^(0+128),f
 13719  00F7  3DD0               	addwfc	(FIR_filter@sum+3)^(0+128),f
 13720  00F8                     l5665:	
 13721                           
 13722                           ;main.c: 382:     buffer[oldest] = sample;
 13723  00F8  0020               	movlb	0	; select bank0
 13724  00F9  352C               	lslf	FIR_filter@oldest,w
 13725  00FA  3EBD               	addlw	(low (FIR_filter@buffer| 0))& (0+255)
 13726  00FB  0086               	movwf	6
 13727  00FC  0187               	clrf	7
 13728  00FD  085A               	movf	FIR_filter@sample,w
 13729  00FE  3FC0               	movwi [0]fsr1
 13730  00FF  085B               	movf	FIR_filter@sample+1,w
 13731  0100  3FC1               	movwi [1]fsr1
 13732                           
 13733                           ;main.c: 383:     oldest += 1;
 13734  0101  3001               	movlw	1
 13735  0102  07AC               	addwf	FIR_filter@oldest,f
 13736  0103  3000               	movlw	0
 13737  0104  3DAD               	addwfc	FIR_filter@oldest+1,f
 13738                           
 13739                           ;main.c: 384:     if (oldest >= 8) oldest = 0;
 13740  0105  3000               	movlw	0
 13741  0106  022D               	subwf	FIR_filter@oldest+1,w
 13742  0107  3008               	movlw	8
 13743  0108  1903               	skipnz
 13744  0109  022C               	subwf	FIR_filter@oldest,w
 13745  010A  1C03               	skipc
 13746  010B  290D               	goto	u3761
 13747  010C  290E               	goto	u3760
 13748  010D                     u3761:	
 13749  010D  2910               	goto	l5669
 13750  010E                     u3760:	
 13751  010E                     l5667:	
 13752  010E  01AC               	clrf	FIR_filter@oldest
 13753  010F  01AD               	clrf	FIR_filter@oldest+1
 13754  0110                     l5669:	
 13755                           
 13756                           ;main.c: 386:     return (sum >> 3);
 13757  0110  0021               	movlb	1	; select bank1
 13758  0111  084D               	movf	FIR_filter@sum^(0+128),w
 13759  0112  0020               	movlb	0	; select bank0
 13760  0113  00DC               	movwf	??_FIR_filter
 13761  0114  0021               	movlb	1	; select bank1
 13762  0115  084E               	movf	(FIR_filter@sum+1)^(0+128),w
 13763  0116  0020               	movlb	0	; select bank0
 13764  0117  00DD               	movwf	??_FIR_filter+1
 13765  0118  0021               	movlb	1	; select bank1
 13766  0119  084F               	movf	(FIR_filter@sum+2)^(0+128),w
 13767  011A  0020               	movlb	0	; select bank0
 13768  011B  00DE               	movwf	??_FIR_filter+2
 13769  011C  0021               	movlb	1	; select bank1
 13770  011D  0850               	movf	(FIR_filter@sum+3)^(0+128),w
 13771  011E  0020               	movlb	0	; select bank0
 13772  011F  00DF               	movwf	??_FIR_filter+3
 13773  0120  3003               	movlw	3
 13774  0121                     u3775:	
 13775  0121  36DF               	lsrf	??_FIR_filter+3,f
 13776  0122  0CDE               	rrf	??_FIR_filter+2,f
 13777  0123  0CDD               	rrf	??_FIR_filter+1,f
 13778  0124  0CDC               	rrf	??_FIR_filter,f
 13779  0125                     u3770:	
 13780  0125  0B89               	decfsz	9,f
 13781  0126  2921               	goto	u3775
 13782  0127  085D               	movf	??_FIR_filter+1,w
 13783  0128  00DB               	movwf	?_FIR_filter+1
 13784  0129  085C               	movf	??_FIR_filter,w
 13785  012A  00DA               	movwf	?_FIR_filter
 13786  012B                     l1018:	
 13787  012B  0008               	return
 13788  012C                     __end_of_FIR_filter:	
 13789                           
 13790                           	psect	text87
 13791  077C                     __ptext87:	
 13792 ;; *************** function _DATAEE_WriteByte *****************
 13793 ;; Defined at:
 13794 ;;		line 189 in file "mcc_generated_files/memory.c"
 13795 ;; Parameters:    Size  Location     Type
 13796 ;;  bAdd            1    wreg     unsigned char 
 13797 ;;  bData           1    0[BANK0 ] unsigned char 
 13798 ;; Auto vars:     Size  Location     Type
 13799 ;;  bAdd            1    1[BANK0 ] unsigned char 
 13800 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  1    wreg      void 
 13803 ;; Registers used:
 13804 ;;		wreg, status,2, status,0
 13805 ;; Tracked objects:
 13806 ;;		On entry : 0/0
 13807 ;;		On exit  : 0/0
 13808 ;;		Unchanged: 0/0
 13809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13810 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;Total ram usage:        3 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; Hardware stack levels required when called:    6
 13817 ;; This function calls:
 13818 ;;		Nothing
 13819 ;; This function is called by:
 13820 ;;		_main
 13821 ;; This function uses a non-reentrant model
 13822 ;;
 13823                           
 13824                           
 13825                           ;psect for function _DATAEE_WriteByte
 13826  077C                     _DATAEE_WriteByte:	
 13827                           
 13828                           ;incstack = 0
 13829                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 13830                           ;DATAEE_WriteByte@bAdd stored from wreg
 13831  077C  0020               	movlb	0	; select bank0
 13832  077D  00D7               	movwf	DATAEE_WriteByte@bAdd
 13833  077E                     l7367:	
 13834  077E                     l7369:	
 13835                           
 13836                           ;mcc_generated_files/memory.c: 193:     EEADRL = (uint8_t)(bAdd & 0x0ff);
 13837  077E  0857               	movf	DATAEE_WriteByte@bAdd,w
 13838  077F  0023               	movlb	3	; select bank3
 13839  0780  0091               	movwf	17	;volatile
 13840  0781                     l7371:	
 13841                           
 13842                           ;mcc_generated_files/memory.c: 194:     EEDATL = bData;
 13843  0781  0020               	movlb	0	; select bank0
 13844  0782  0856               	movf	DATAEE_WriteByte@bData,w
 13845  0783  0023               	movlb	3	; select bank3
 13846  0784  0093               	movwf	19	;volatile
 13847  0785                     l7373:	
 13848                           
 13849                           ;mcc_generated_files/memory.c: 195:     EECON1bits.EEPGD = 0;
 13850  0785  1395               	bcf	21,7	;volsfr
 13851  0786                     l7375:	
 13852                           
 13853                           ;mcc_generated_files/memory.c: 196:     EECON1bits.CFGS = 0;
 13854  0786  1315               	bcf	21,6	;volsfr
 13855  0787                     l7377:	
 13856                           
 13857                           ;mcc_generated_files/memory.c: 197:     EECON1bits.WREN = 1;
 13858  0787  1515               	bsf	21,2	;volsfr
 13859  0788                     l7379:	
 13860                           
 13861                           ;mcc_generated_files/memory.c: 199:     GIEBitValue = INTCONbits.GIE;
 13862  0788  3000               	movlw	0
 13863  0789  1B8B               	btfsc	11,7	;volatile
 13864  078A  3001               	movlw	1
 13865  078B  0020               	movlb	0	; select bank0
 13866  078C  00D8               	movwf	DATAEE_WriteByte@GIEBitValue
 13867  078D                     l7381:	
 13868                           
 13869                           ;mcc_generated_files/memory.c: 200:     INTCONbits.GIE = 0;
 13870  078D  138B               	bcf	11,7	;volatile
 13871                           
 13872                           ;mcc_generated_files/memory.c: 201:     EECON2 = 0x55;
 13873  078E  3055               	movlw	85
 13874  078F  0023               	movlb	3	; select bank3
 13875  0790  0096               	movwf	22	;volsfr
 13876                           
 13877                           ;mcc_generated_files/memory.c: 202:     EECON2 = 0xAA;
 13878  0791  30AA               	movlw	170
 13879  0792  0096               	movwf	22	;volsfr
 13880  0793                     l7383:	
 13881                           
 13882                           ;mcc_generated_files/memory.c: 203:     EECON1bits.WR = 1;
 13883  0793  1495               	bsf	21,1	;volsfr
 13884  0794                     l365:	
 13885                           ;mcc_generated_files/memory.c: 206:     {;mcc_generated_files/memory.c: 207:     }
 13886                           
 13887                           
 13888                           ;mcc_generated_files/memory.c: 205:     while (EECON1bits.WR)
 13889  0794  1895               	btfsc	21,1	;volsfr
 13890  0795  2F97               	goto	u5801
 13891  0796  2F98               	goto	u5800
 13892  0797                     u5801:	
 13893  0797  2F94               	goto	l365
 13894  0798                     u5800:	
 13895  0798                     l367:	
 13896                           
 13897                           ;mcc_generated_files/memory.c: 209:     EECON1bits.WREN = 0;
 13898  0798  1115               	bcf	21,2	;volsfr
 13899  0799                     l7385:	
 13900                           
 13901                           ;mcc_generated_files/memory.c: 210:     INTCONbits.GIE = GIEBitValue;
 13902  0799  0020               	movlb	0	; select bank0
 13903  079A  0C58               	rrf	DATAEE_WriteByte@GIEBitValue,w
 13904  079B  1C03               	skipc
 13905  079C  138B               	bcf	11,7	;volatile
 13906  079D  1803               	skipnc
 13907  079E  178B               	bsf	11,7	;volatile
 13908  079F                     l368:	
 13909  079F  0008               	return
 13910  07A0                     __end_of_DATAEE_WriteByte:	
 13911                           
 13912                           	psect	text88
 13913  1601                     __ptext88:	
 13914 ;; *************** function _DATAEE_ReadByte *****************
 13915 ;; Defined at:
 13916 ;;		line 213 in file "mcc_generated_files/memory.c"
 13917 ;; Parameters:    Size  Location     Type
 13918 ;;  bAdd            1    wreg     unsigned char 
 13919 ;; Auto vars:     Size  Location     Type
 13920 ;;  bAdd            1    0[BANK0 ] unsigned char 
 13921 ;; Return value:  Size  Location     Type
 13922 ;;                  1    wreg      unsigned char 
 13923 ;; Registers used:
 13924 ;;		wreg
 13925 ;; Tracked objects:
 13926 ;;		On entry : 0/0
 13927 ;;		On exit  : 0/0
 13928 ;;		Unchanged: 0/0
 13929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;Total ram usage:        1 bytes
 13935 ;; Hardware stack levels used:    1
 13936 ;; Hardware stack levels required when called:    6
 13937 ;; This function calls:
 13938 ;;		Nothing
 13939 ;; This function is called by:
 13940 ;;		_main
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           
 13945                           ;psect for function _DATAEE_ReadByte
 13946  1601                     _DATAEE_ReadByte:	
 13947                           
 13948                           ;incstack = 0
 13949                           ; Regs used in _DATAEE_ReadByte: [wreg]
 13950                           ;DATAEE_ReadByte@bAdd stored from wreg
 13951  1601  0020               	movlb	0	; select bank0
 13952  1602  00D6               	movwf	DATAEE_ReadByte@bAdd
 13953  1603                     l7387:	
 13954                           
 13955                           ;mcc_generated_files/memory.c: 213: uint8_t DATAEE_ReadByte(uint8_t bAdd);mcc_generated_
      +                          files/memory.c: 214: {;mcc_generated_files/memory.c: 215:     EEADRL = (uint8_t)(bAdd & 
      +                          0x0ff);
 13956  1603  0856               	movf	DATAEE_ReadByte@bAdd,w
 13957  1604  0023               	movlb	3	; select bank3
 13958  1605  0091               	movwf	17	;volatile
 13959  1606                     l7389:	
 13960                           
 13961                           ;mcc_generated_files/memory.c: 216:     EECON1bits.CFGS = 0;
 13962  1606  1315               	bcf	21,6	;volsfr
 13963  1607                     l7391:	
 13964                           
 13965                           ;mcc_generated_files/memory.c: 217:     EECON1bits.EEPGD = 0;
 13966  1607  1395               	bcf	21,7	;volsfr
 13967  1608                     l7393:	
 13968                           
 13969                           ;mcc_generated_files/memory.c: 218:     EECON1bits.RD = 1;
 13970  1608  1415               	bsf	21,0	;volsfr
 13971  1609                     l7395:	
 13972                           
 13973                           ;mcc_generated_files/memory.c: 219:     __nop();
 13974  1609  0000               	nop
 13975  160A                     l7397:	
 13976                           
 13977                           ;mcc_generated_files/memory.c: 220:     __nop();
 13978  160A  0000               	nop
 13979                           
 13980                           ;mcc_generated_files/memory.c: 222:     return (EEDATL);
 13981  160B  0023               	movlb	3	; select bank3
 13982  160C  0813               	movf	19,w	;volatile
 13983  160D                     l371:	
 13984  160D  0008               	return
 13985  160E                     __end_of_DATAEE_ReadByte:	
 13986                           
 13987                           	psect	text89
 13988  07A0                     __ptext89:	
 13989 ;; *************** function _ADC_GetConversion *****************
 13990 ;; Defined at:
 13991 ;;		line 112 in file "mcc_generated_files/adc.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;  channel         1    wreg     enum E2939
 13994 ;; Auto vars:     Size  Location     Type
 13995 ;;  channel         1    3[BANK0 ] enum E2939
 13996 ;; Return value:  Size  Location     Type
 13997 ;;                  2    0[BANK0 ] unsigned short 
 13998 ;; Registers used:
 13999 ;;		wreg, status,2, status,0
 14000 ;; Tracked objects:
 14001 ;;		On entry : 0/0
 14002 ;;		On exit  : 0/0
 14003 ;;		Unchanged: 0/0
 14004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14005 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;Total ram usage:        4 bytes
 14010 ;; Hardware stack levels used:    1
 14011 ;; Hardware stack levels required when called:    6
 14012 ;; This function calls:
 14013 ;;		Nothing
 14014 ;; This function is called by:
 14015 ;;		_main
 14016 ;; This function uses a non-reentrant model
 14017 ;;
 14018                           
 14019                           
 14020                           ;psect for function _ADC_GetConversion
 14021  07A0                     _ADC_GetConversion:	
 14022                           
 14023                           ;incstack = 0
 14024                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 14025                           ;ADC_GetConversion@channel stored from wreg
 14026  07A0  0020               	movlb	0	; select bank0
 14027  07A1  00D9               	movwf	ADC_GetConversion@channel
 14028  07A2                     l7403:	
 14029                           
 14030                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
 14031  07A2  0859               	movf	ADC_GetConversion@channel,w
 14032  07A3  00D8               	movwf	??_ADC_GetConversion
 14033  07A4  0DD8               	rlf	??_ADC_GetConversion,f
 14034  07A5  0DD8               	rlf	??_ADC_GetConversion,f
 14035  07A6  0021               	movlb	1	; select bank1
 14036  07A7  081D               	movf	29,w	;volatile
 14037  07A8  0020               	movlb	0	; select bank0
 14038  07A9  0658               	xorwf	??_ADC_GetConversion,w
 14039  07AA  3983               	andlw	-125
 14040  07AB  0658               	xorwf	??_ADC_GetConversion,w
 14041  07AC  0021               	movlb	1	; select bank1
 14042  07AD  009D               	movwf	29	;volatile
 14043  07AE                     l7405:	
 14044                           
 14045                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
 14046  07AE  141D               	bsf	29,0	;volatile
 14047  07AF                     l7407:	
 14048                           
 14049                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(32000000/4000000.0)));
 14050  07AF  300D               	movlw	13
 14051  07B0                     u7877:	
 14052  07B0  0B89               	decfsz	9,f
 14053  07B1  2FB0               	goto	u7877
 14054  07B2  0000               	nop
 14055  07B3                     l7409:	
 14056                           
 14057                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
 14058  07B3  0021               	movlb	1	; select bank1
 14059  07B4  149D               	bsf	29,1	;volatile
 14060                           
 14061                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
 14062  07B5  2FB7               	goto	l743
 14063  07B6                     l744:	
 14064  07B6  0064               	clrwdt	;# 
 14065  07B7                     l743:	
 14066                           ;mcc_generated_files/adc.c: 130:     }
 14067                           
 14068                           
 14069                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
 14070  07B7  0021               	movlb	1	; select bank1
 14071  07B8  189D               	btfsc	29,1	;volatile
 14072  07B9  2FBB               	goto	u5811
 14073  07BA  2FBC               	goto	u5810
 14074  07BB                     u5811:	
 14075  07BB  2FB6               	goto	l744
 14076  07BC                     u5810:	
 14077  07BC                     l7411:	
 14078                           
 14079                           ;mcc_generated_files/adc.c: 133:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14080  07BC  081C               	movf	28,w	;volatile
 14081  07BD  0020               	movlb	0	; select bank0
 14082  07BE  00D7               	movwf	?_ADC_GetConversion+1
 14083  07BF  0021               	movlb	1	; select bank1
 14084  07C0  081B               	movf	27,w	;volatile
 14085  07C1  0020               	movlb	0	; select bank0
 14086  07C2  00D6               	movwf	?_ADC_GetConversion
 14087  07C3                     l746:	
 14088  07C3  0008               	return
 14089  07C4                     __end_of_ADC_GetConversion:	
 14090                           
 14091                           	psect	intentry
 14092  0004                     __pintentry:	
 14093 ;; *************** function _INTERRUPT_InterruptManager *****************
 14094 ;; Defined at:
 14095 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14096 ;; Parameters:    Size  Location     Type
 14097 ;;		None
 14098 ;; Auto vars:     Size  Location     Type
 14099 ;;		None
 14100 ;; Return value:  Size  Location     Type
 14101 ;;                  1    wreg      void 
 14102 ;; Registers used:
 14103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14104 ;; Tracked objects:
 14105 ;;		On entry : 0/0
 14106 ;;		On exit  : 0/0
 14107 ;;		Unchanged: 0/0
 14108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;Total ram usage:        0 bytes
 14114 ;; Hardware stack levels used:    1
 14115 ;; Hardware stack levels required when called:    5
 14116 ;; This function calls:
 14117 ;;		Absolute function
 14118 ;;		_PIN_MANAGER_IOC
 14119 ;;		_TMR0_ISR
 14120 ;;		_i2c_busCollisionISR
 14121 ;;		i1_i2c_ISR
 14122 ;; This function is called by:
 14123 ;;		Interrupt level 1
 14124 ;; This function uses a non-reentrant model
 14125 ;;
 14126                           
 14127  0004                     _INTERRUPT_InterruptManager:	
 14128                           
 14129                           ;incstack = 0
 14130  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 14131                           
 14132                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14133  0005  3180               	pagesel	$
 14134  0006                     i1l7837:	
 14135                           
 14136                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 14137  0006  1E8B               	btfss	11,5	;volatile
 14138  0007  2809               	goto	u635_21
 14139  0008  280A               	goto	u635_20
 14140  0009                     u635_21:	
 14141  0009  2812               	goto	i1l394
 14142  000A                     u635_20:	
 14143  000A                     i1l7839:	
 14144  000A  1D0B               	btfss	11,2	;volatile
 14145  000B  280D               	goto	u636_21
 14146  000C  280E               	goto	u636_20
 14147  000D                     u636_21:	
 14148  000D  2812               	goto	i1l394
 14149  000E                     u636_20:	
 14150  000E                     i1l7841:	
 14151                           
 14152                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 14153  000E  3194  24FC  3180   	fcall	_TMR0_ISR
 14154                           
 14155                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 14156  0011  2842               	goto	i1l404
 14157  0012                     i1l394:	
 14158                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
 14159                           
 14160  0012  1D8B               	btfss	11,3	;volatile
 14161  0013  2815               	goto	u637_21
 14162  0014  2816               	goto	u637_20
 14163  0015                     u637_21:	
 14164  0015  281E               	goto	i1l396
 14165  0016                     u637_20:	
 14166  0016                     i1l7843:	
 14167  0016  1C0B               	btfss	11,0	;volatile
 14168  0017  2819               	goto	u638_21
 14169  0018  281A               	goto	u638_20
 14170  0019                     u638_21:	
 14171  0019  281E               	goto	i1l396
 14172  001A                     u638_20:	
 14173  001A                     i1l7845:	
 14174                           
 14175                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         PIN_MANAGER_IOC();
 14176  001A  3195  251C  3180   	fcall	_PIN_MANAGER_IOC
 14177                           
 14178                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 14179  001D  2842               	goto	i1l404
 14180  001E                     i1l396:	
 14181                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.PEIE == 1)
 14182                           
 14183  001E  1F0B               	btfss	11,6	;volatile
 14184  001F  2821               	goto	u639_21
 14185  0020  2822               	goto	u639_20
 14186  0021                     u639_21:	
 14187  0021  2842               	goto	i1l403
 14188  0022                     u639_20:	
 14189  0022                     i1l7847:	
 14190                           
 14191                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         if(PIE2bits.BCLIE == 1 && PIR2bits.BCLIF == 1)
 14192  0022  0021               	movlb	1	; select bank1
 14193  0023  1D92               	btfss	18,3	;volatile
 14194  0024  2826               	goto	u640_21
 14195  0025  2827               	goto	u640_20
 14196  0026                     u640_21:	
 14197  0026  2832               	goto	i1l399
 14198  0027                     u640_20:	
 14199  0027                     i1l7849:	
 14200  0027  0020               	movlb	0	; select bank0
 14201  0028  1D92               	btfss	18,3	;volatile
 14202  0029  282B               	goto	u641_21
 14203  002A  282C               	goto	u641_20
 14204  002B                     u641_21:	
 14205  002B  2832               	goto	i1l399
 14206  002C                     u641_20:	
 14207  002C                     i1l7851:	
 14208                           
 14209                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c_driver_busCollisionISR();
 14210  002C  0837               	movf	_i2c_driver_busCollisionISR+1,w
 14211  002D  008A               	movwf	10
 14212  002E  0836               	movf	_i2c_driver_busCollisionISR,w
 14213  002F  000A               	callw
 14214  0030  3180               	pagesel	$
 14215                           
 14216                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 14217  0031  2842               	goto	i1l404
 14218  0032                     i1l399:	
 14219                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
 14220                           
 14221  0032  0021               	movlb	1	; select bank1
 14222  0033  1D91               	btfss	17,3	;volatile
 14223  0034  2836               	goto	u642_21
 14224  0035  2837               	goto	u642_20
 14225  0036                     u642_21:	
 14226  0036  2842               	goto	i1l403
 14227  0037                     u642_20:	
 14228  0037                     i1l7853:	
 14229  0037  0020               	movlb	0	; select bank0
 14230  0038  1D91               	btfss	17,3	;volatile
 14231  0039  283B               	goto	u643_21
 14232  003A  283C               	goto	u643_20
 14233  003B                     u643_21:	
 14234  003B  2842               	goto	i1l403
 14235  003C                     u643_20:	
 14236  003C                     i1l7855:	
 14237                           
 14238                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c_driver_i2cISR();
 14239  003C  0835               	movf	_i2c_driver_i2cISR+1,w
 14240  003D  008A               	movwf	10
 14241  003E  0834               	movf	_i2c_driver_i2cISR,w
 14242  003F  000A               	callw
 14243  0040  3180               	pagesel	$
 14244                           
 14245                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 14246  0041  2842               	goto	i1l404
 14247  0042                     i1l403:	
 14248                           ;mcc_generated_files/interrupt_manager.c: 79:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 81:     }
 14249                           
 14250  0042                     i1l404:	
 14251  0042  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 14252  0043  0009               	retfie
 14253  0044                     __end_of_INTERRUPT_InterruptManager:	
 14254                           
 14255                           	psect	text91
 14256  0646                     __ptext91:	
 14257 ;; *************** function i1_i2c_ISR *****************
 14258 ;; Defined at:
 14259 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 14260 ;; Parameters:    Size  Location     Type
 14261 ;;		None
 14262 ;; Auto vars:     Size  Location     Type
 14263 ;;		None
 14264 ;; Return value:  Size  Location     Type
 14265 ;;                  1    wreg      void 
 14266 ;; Registers used:
 14267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14268 ;; Tracked objects:
 14269 ;;		On entry : 0/0
 14270 ;;		On exit  : 0/0
 14271 ;;		Unchanged: 0/0
 14272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;Total ram usage:        3 bytes
 14278 ;; Hardware stack levels used:    1
 14279 ;; Hardware stack levels required when called:    4
 14280 ;; This function calls:
 14281 ;;		i1_do_I2C_DO_ACK
 14282 ;;		i1_do_I2C_DO_ADDRESS_NACK
 14283 ;;		i1_do_I2C_DO_NACK_RESTART
 14284 ;;		i1_do_I2C_DO_NACK_STOP
 14285 ;;		i1_do_I2C_IDLE
 14286 ;;		i1_do_I2C_RCEN
 14287 ;;		i1_do_I2C_RESET
 14288 ;;		i1_do_I2C_RX
 14289 ;;		i1_do_I2C_SEND_ADR_READ
 14290 ;;		i1_do_I2C_SEND_ADR_WRITE
 14291 ;;		i1_do_I2C_SEND_RESTART
 14292 ;;		i1_do_I2C_SEND_RESTART_READ
 14293 ;;		i1_do_I2C_SEND_RESTART_WRITE
 14294 ;;		i1_do_I2C_SEND_STOP
 14295 ;;		i1_do_I2C_TX
 14296 ;;		i1_do_I2C_TX_EMPTY
 14297 ;;		i1_i2c_driver_isNACK
 14298 ;;		i1_mssp_clearIRQ
 14299 ;; This function is called by:
 14300 ;;		_INTERRUPT_InterruptManager
 14301 ;; This function uses a non-reentrant model
 14302 ;;
 14303                           
 14304                           
 14305                           ;psect for function i1_i2c_ISR
 14306  0646                     i1_i2c_ISR:	
 14307  0646                     i1l7737:	
 14308                           ;incstack = 0
 14309                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14310                           
 14311                           
 14312                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp_clearIRQ();
 14313  0646  3194  245C  3186   	fcall	i1_mssp_clearIRQ
 14314  0649                     i1l7739:	
 14315                           
 14316                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c_driver_isNACK())
 14317  0649  0021               	movlb	1	; select bank1
 14318  064A  1DA0               	btfss	_i2c_status^(0+128),3
 14319  064B  2E4D               	goto	u621_21
 14320  064C  2E4E               	goto	u621_20
 14321  064D                     u621_21:	
 14322  064D  2E5A               	goto	i1l7745
 14323  064E                     u621_20:	
 14324  064E                     i1l7741:	
 14325  064E  3195  2504  3186   	fcall	i1_i2c_driver_isNACK
 14326  0651  1C03               	btfss	3,0
 14327  0652  2E54               	goto	u622_21
 14328  0653  2E55               	goto	u622_20
 14329  0654                     u622_21:	
 14330  0654  2E5A               	goto	i1l7745
 14331  0655                     u622_20:	
 14332  0655                     i1l7743:	
 14333                           
 14334                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 14335  0655  300F               	movlw	15
 14336  0656  00F3               	movwf	??i1_i2c_ISR
 14337  0657  0873               	movf	??i1_i2c_ISR,w
 14338  0658  0021               	movlb	1	; select bank1
 14339  0659  00A9               	movwf	(_i2c_status^(0+128)+9)
 14340  065A                     i1l7745:	
 14341                           
 14342                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 14343  065A  0021               	movlb	1	; select bank1
 14344  065B  0829               	movf	(_i2c_status^(0+128)+9),w
 14345  065C  00F3               	movwf	??i1_i2c_ISR
 14346  065D  01F4               	clrf	??i1_i2c_ISR+1
 14347  065E  35F3               	lslf	??i1_i2c_ISR,f
 14348  065F  0DF4               	rlf	??i1_i2c_ISR+1,f
 14349  0660  3000               	movlw	low (_fsmStateTable| (0+32768))
 14350  0661  0773               	addwf	??i1_i2c_ISR,w
 14351  0662  0084               	movwf	4
 14352  0663  3090               	movlw	high (_fsmStateTable| (0+32768))
 14353  0664  3D74               	addwfc	??i1_i2c_ISR+1,w
 14354  0665  0085               	movwf	5
 14355  0666  3F01               	moviw [1]fsr0
 14356  0667  008A               	movwf	10
 14357  0668  3F00               	moviw [0]fsr0
 14358  0669  000A               	callw
 14359  066A  3186               	pagesel	$
 14360  066B  00F5               	movwf	??i1_i2c_ISR+2
 14361  066C  0875               	movf	??i1_i2c_ISR+2,w
 14362  066D  0021               	movlb	1	; select bank1
 14363  066E  00A9               	movwf	(_i2c_status^(0+128)+9)
 14364  066F                     i1l198:	
 14365  066F  0008               	return
 14366  0670                     __end_ofi1_i2c_ISR:	
 14367                           
 14368                           	psect	text92
 14369  145C                     __ptext92:	
 14370 ;; *************** function i1_mssp_clearIRQ *****************
 14371 ;; Defined at:
 14372 ;;		line 54 in file "mcc_generated_files/i2c_driver.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;		None
 14375 ;; Auto vars:     Size  Location     Type
 14376 ;;		None
 14377 ;; Return value:  Size  Location     Type
 14378 ;;                  1    wreg      void 
 14379 ;; Registers used:
 14380 ;;		None
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14390 ;;Total ram usage:        0 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; This function calls:
 14393 ;;		Nothing
 14394 ;; This function is called by:
 14395 ;;		i1_i2c_ISR
 14396 ;; This function uses a non-reentrant model
 14397 ;;
 14398                           
 14399                           
 14400                           ;psect for function i1_mssp_clearIRQ
 14401  145C                     i1_mssp_clearIRQ:	
 14402  145C                     i1l5273:	
 14403                           ;incstack = 0
 14404                           ; Regs used in i1_mssp_clearIRQ: []
 14405                           
 14406                           
 14407                           ;mcc_generated_files/i2c_driver.c: 56:         SSPCON1 = 0x28;
 14408  145C  0020               	movlb	0	; select bank0
 14409  145D  1191               	bcf	17,3	;volatile
 14410  145E                     i1l599:	
 14411  145E  0008               	return
 14412  145F                     __end_ofi1_mssp_clearIRQ:	
 14413                           
 14414                           	psect	text93
 14415  02D8                     __ptext93:	
 14416 ;; *************** function i1_do_I2C_RX *****************
 14417 ;; Defined at:
 14418 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 14419 ;; Parameters:    Size  Location     Type
 14420 ;;		None
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;		None
 14423 ;; Return value:  Size  Location     Type
 14424 ;;                  1    wreg      enum E3411
 14425 ;; Registers used:
 14426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14427 ;; Tracked objects:
 14428 ;;		On entry : 0/0
 14429 ;;		On exit  : 0/0
 14430 ;;		Unchanged: 0/0
 14431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;Total ram usage:        3 bytes
 14437 ;; Hardware stack levels used:    1
 14438 ;; Hardware stack levels required when called:    3
 14439 ;; This function calls:
 14440 ;;		Absolute function
 14441 ;;		i1_do_I2C_DO_NACK_RESTART
 14442 ;;		i1_do_I2C_DO_NACK_STOP
 14443 ;;		i1_i2c_driver_getRXData
 14444 ;;		i1_i2c_driver_sendACK
 14445 ;;		i1_i2c_restartWrite
 14446 ;;		i1_rd1RegCompleteHandler
 14447 ;;		i1_rd2RegCompleteHandler
 14448 ;;		i1_rdBlkRegCompleteHandler
 14449 ;;		i1_returnReset
 14450 ;;		i1_returnStop
 14451 ;;		i1_wr1RegCompleteHandler
 14452 ;;		i1_wr2RegCompleteHandler
 14453 ;; This function is called by:
 14454 ;; This function uses a non-reentrant model
 14455 ;;
 14456                           
 14457                           
 14458                           ;psect for function i1_do_I2C_RX
 14459  02D8                     i1_do_I2C_RX:	
 14460  02D8                     i1l7305:	
 14461                           ;incstack = 0
 14462                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14463                           
 14464                           
 14465                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c_driver_
      +                          getRXData();
 14466  02D8  3194  2456  3182   	fcall	i1_i2c_driver_getRXData
 14467  02DB  00F0               	movwf	??i1_do_I2C_RX
 14468  02DC  0021               	movlb	1	; select bank1
 14469  02DD  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 14470  02DE  0086               	movwf	6
 14471  02DF  0187               	clrf	7
 14472  02E0  0870               	movf	??i1_do_I2C_RX,w
 14473  02E1  0081               	movwf	1
 14474  02E2                     i1l7307:	
 14475  02E2  3001               	movlw	1
 14476  02E3  00F0               	movwf	??i1_do_I2C_RX
 14477  02E4  0870               	movf	??i1_do_I2C_RX,w
 14478  02E5  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
 14479  02E6                     i1l7309:	
 14480                           
 14481                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 14482  02E6  3001               	movlw	1
 14483  02E7  02A3               	subwf	(_i2c_status^(0+128)+3),f
 14484  02E8  3000               	movlw	0
 14485  02E9  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 14486  02EA  0823               	movf	(_i2c_status^(0+128)+3),w
 14487  02EB  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 14488  02EC  1903               	btfsc	3,2
 14489  02ED  2AEF               	goto	u579_21
 14490  02EE  2AF0               	goto	u579_20
 14491  02EF                     u579_21:	
 14492  02EF  2AF5               	goto	i1l173
 14493  02F0                     u579_20:	
 14494  02F0                     i1l7311:	
 14495                           
 14496                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c_driver_sendACK();
 14497  02F0  3194  247B  3182   	fcall	i1_i2c_driver_sendACK
 14498  02F3                     i1l7313:	
 14499                           
 14500                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 14501  02F3  3005               	movlw	5
 14502  02F4  2B22               	goto	i1l174
 14503  02F5                     i1l173:	
 14504                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 14505                           
 14506                           
 14507                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 14508  02F5  1520               	bsf	_i2c_status^(0+128),2
 14509                           
 14510                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14511  02F6  2AFF               	goto	i1l7329
 14512  02F7                     i1l7319:	
 14513                           
 14514                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 14515  02F7  3194  24BB  3182   	fcall	i1_do_I2C_DO_NACK_RESTART
 14516  02FA  2B22               	goto	i1l174
 14517  02FB                     i1l7323:	
 14518                           
 14519                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 14520  02FB  3194  24B6  3182   	fcall	i1_do_I2C_DO_NACK_STOP
 14521  02FE  2B22               	goto	i1l174
 14522  02FF                     i1l7329:	
 14523  02FF  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 14524  0300  00F0               	movwf	??i1_do_I2C_RX
 14525  0301  0870               	movf	??i1_do_I2C_RX,w
 14526  0302  0020               	movlb	0	; select bank0
 14527  0303  00D6               	movwf	i1wr1RegCompleteHandler@p
 14528  0304  300B               	movlw	11
 14529  0305  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14530  0306  0086               	movwf	6
 14531  0307  0187               	clrf	7
 14532  0308  3F41               	moviw [1]fsr1
 14533  0309  008A               	movwf	10
 14534  030A  3F40               	moviw [0]fsr1
 14535  030B  000A               	callw
 14536  030C  3182               	pagesel	$
 14537  030D  00F1               	movwf	??i1_do_I2C_RX+1
 14538  030E  01F2               	clrf	??i1_do_I2C_RX+2
 14539                           
 14540                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14541                           ; Switch size 1, requested type "simple"
 14542                           ; Number of cases is 1, Range of values is 0 to 0
 14543                           ; switch strategies available:
 14544                           ; Name         Instructions Cycles
 14545                           ; simple_byte            4     3 (average)
 14546                           ; direct_byte            8     6 (fixed)
 14547                           ; jumptable            260     6 (fixed)
 14548                           ;	Chosen strategy is simple_byte
 14549  030F  0872               	movf	??i1_do_I2C_RX+2,w
 14550  0310  3A00               	xorlw	0	; case 0
 14551  0311  1903               	skipnz
 14552  0312  2B14               	goto	i1l8701
 14553  0313  2AFB               	goto	i1l7323
 14554  0314                     i1l8701:	
 14555                           
 14556                           ; Switch size 1, requested type "simple"
 14557                           ; Number of cases is 4, Range of values is 1 to 4
 14558                           ; switch strategies available:
 14559                           ; Name         Instructions Cycles
 14560                           ; simple_byte           13     7 (average)
 14561                           ; direct_byte           17     9 (fixed)
 14562                           ; jumptable            263     9 (fixed)
 14563                           ;	Chosen strategy is simple_byte
 14564  0314  0871               	movf	??i1_do_I2C_RX+1,w
 14565  0315  3A01               	xorlw	1	; case 1
 14566  0316  1903               	skipnz
 14567  0317  2AFB               	goto	i1l7323
 14568  0318  3A03               	xorlw	3	; case 2
 14569  0319  1903               	skipnz
 14570  031A  2AF7               	goto	i1l7319
 14571  031B  3A01               	xorlw	1	; case 3
 14572  031C  1903               	skipnz
 14573  031D  2AF7               	goto	i1l7319
 14574  031E  3A07               	xorlw	7	; case 4
 14575  031F  1903               	skipnz
 14576  0320  2AFB               	goto	i1l7323
 14577  0321  2AFB               	goto	i1l7323
 14578  0322                     i1l174:	
 14579  0322  0008               	return
 14580  0323                     __end_ofi1_do_I2C_RX:	
 14581                           
 14582                           	psect	text94
 14583  01DF                     __ptext94:	
 14584 ;; *************** function i1_do_I2C_TX *****************
 14585 ;; Defined at:
 14586 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;		None
 14589 ;; Auto vars:     Size  Location     Type
 14590 ;;		None
 14591 ;; Return value:  Size  Location     Type
 14592 ;;                  1    wreg      enum E3411
 14593 ;; Registers used:
 14594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14595 ;; Tracked objects:
 14596 ;;		On entry : 0/0
 14597 ;;		On exit  : 0/0
 14598 ;;		Unchanged: 0/0
 14599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;Total ram usage:        3 bytes
 14605 ;; Hardware stack levels used:    1
 14606 ;; Hardware stack levels required when called:    3
 14607 ;; This function calls:
 14608 ;;		Absolute function
 14609 ;;		i1_do_I2C_SEND_RESTART_READ
 14610 ;;		i1_do_I2C_SEND_RESTART_WRITE
 14611 ;;		i1_do_I2C_SEND_STOP
 14612 ;;		i1_i2c_driver_TXData
 14613 ;;		i1_i2c_driver_isNACK
 14614 ;;		i1_i2c_restartWrite
 14615 ;;		i1_rd1RegCompleteHandler
 14616 ;;		i1_rd2RegCompleteHandler
 14617 ;;		i1_rdBlkRegCompleteHandler
 14618 ;;		i1_returnReset
 14619 ;;		i1_returnStop
 14620 ;;		i1_wr1RegCompleteHandler
 14621 ;;		i1_wr2RegCompleteHandler
 14622 ;; This function is called by:
 14623 ;; This function uses a non-reentrant model
 14624 ;;
 14625                           
 14626                           
 14627                           ;psect for function i1_do_I2C_TX
 14628  01DF                     i1_do_I2C_TX:	
 14629  01DF                     i1l7271:	
 14630                           ;incstack = 0
 14631                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14632                           
 14633                           
 14634                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c_driver_isNACK())
 14635  01DF  3195  2504  3181   	fcall	i1_i2c_driver_isNACK
 14636  01E2  1C03               	btfss	3,0
 14637  01E3  29E5               	goto	u577_21
 14638  01E4  29E6               	goto	u577_20
 14639  01E5                     u577_21:	
 14640  01E5  2A17               	goto	i1l157
 14641  01E6                     u577_20:	
 14642  01E6  29F3               	goto	i1l7289
 14643  01E7                     i1l7275:	
 14644                           
 14645                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 14646  01E7  3194  249D  3181   	fcall	i1_do_I2C_SEND_RESTART_READ
 14647  01EA  2A33               	goto	i1l160
 14648  01EB                     i1l7279:	
 14649                           
 14650                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 14651  01EB  3194  24A2  3181   	fcall	i1_do_I2C_SEND_RESTART_WRITE
 14652  01EE  2A33               	goto	i1l160
 14653  01EF                     i1l7283:	
 14654                           
 14655                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 14656  01EF  3194  24AC  3181   	fcall	i1_do_I2C_SEND_STOP
 14657  01F2  2A33               	goto	i1l160
 14658  01F3                     i1l7289:	
 14659  01F3  0021               	movlb	1	; select bank1
 14660  01F4  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
 14661  01F5  00F0               	movwf	??i1_do_I2C_TX
 14662  01F6  0870               	movf	??i1_do_I2C_TX,w
 14663  01F7  0020               	movlb	0	; select bank0
 14664  01F8  00D6               	movwf	i1wr1RegCompleteHandler@p
 14665  01F9  3011               	movlw	17
 14666  01FA  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14667  01FB  0086               	movwf	6
 14668  01FC  0187               	clrf	7
 14669  01FD  3F41               	moviw [1]fsr1
 14670  01FE  008A               	movwf	10
 14671  01FF  3F40               	moviw [0]fsr1
 14672  0200  000A               	callw
 14673  0201  3181               	pagesel	$
 14674  0202  00F1               	movwf	??i1_do_I2C_TX+1
 14675  0203  01F2               	clrf	??i1_do_I2C_TX+2
 14676                           
 14677                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14678                           ; Switch size 1, requested type "simple"
 14679                           ; Number of cases is 1, Range of values is 0 to 0
 14680                           ; switch strategies available:
 14681                           ; Name         Instructions Cycles
 14682                           ; simple_byte            4     3 (average)
 14683                           ; direct_byte            8     6 (fixed)
 14684                           ; jumptable            260     6 (fixed)
 14685                           ;	Chosen strategy is simple_byte
 14686  0204  0872               	movf	??i1_do_I2C_TX+2,w
 14687  0205  3A00               	xorlw	0	; case 0
 14688  0206  1903               	skipnz
 14689  0207  2A09               	goto	i1l8703
 14690  0208  29EF               	goto	i1l7283
 14691  0209                     i1l8703:	
 14692                           
 14693                           ; Switch size 1, requested type "simple"
 14694                           ; Number of cases is 4, Range of values is 1 to 4
 14695                           ; switch strategies available:
 14696                           ; Name         Instructions Cycles
 14697                           ; simple_byte           13     7 (average)
 14698                           ; direct_byte           17     9 (fixed)
 14699                           ; jumptable            263     9 (fixed)
 14700                           ;	Chosen strategy is simple_byte
 14701  0209  0871               	movf	??i1_do_I2C_TX+1,w
 14702  020A  3A01               	xorlw	1	; case 1
 14703  020B  1903               	skipnz
 14704  020C  29EF               	goto	i1l7283
 14705  020D  3A03               	xorlw	3	; case 2
 14706  020E  1903               	skipnz
 14707  020F  29E7               	goto	i1l7275
 14708  0210  3A01               	xorlw	1	; case 3
 14709  0211  1903               	skipnz
 14710  0212  29EB               	goto	i1l7279
 14711  0213  3A07               	xorlw	7	; case 4
 14712  0214  1903               	skipnz
 14713  0215  29EF               	goto	i1l7283
 14714  0216  29EF               	goto	i1l7283
 14715  0217                     i1l157:	
 14716                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 14717                           
 14718                           
 14719                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 14720  0217  0021               	movlb	1	; select bank1
 14721  0218  11A0               	bcf	_i2c_status^(0+128),3
 14722  0219                     i1l7291:	
 14723                           
 14724                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c_driver_TXData(*i2c_status.da
      +                          ta_ptr++);
 14725  0219  3002               	movlw	2
 14726  021A  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14727  021B  0086               	movwf	6
 14728  021C  0187               	clrf	7
 14729  021D  3F40               	moviw [0]fsr1
 14730  021E  0084               	movwf	4
 14731  021F  0185               	clrf	5
 14732  0220  0A81               	incf	1,f
 14733  0221  0800               	movf	0,w
 14734  0222  3194  2493  3181   	fcall	i1_i2c_driver_TXData
 14735  0225                     i1l7293:	
 14736                           
 14737                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 14738  0225  3001               	movlw	1
 14739  0226  0021               	movlb	1	; select bank1
 14740  0227  02A3               	subwf	(_i2c_status^(0+128)+3),f
 14741  0228  3000               	movlw	0
 14742  0229  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 14743  022A  0823               	movf	(_i2c_status^(0+128)+3),w
 14744  022B  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 14745  022C  1D03               	btfss	3,2
 14746  022D  2A2F               	goto	u578_21
 14747  022E  2A30               	goto	u578_20
 14748  022F                     u578_21:	
 14749  022F  2A32               	goto	i1l7297
 14750  0230                     u578_20:	
 14751  0230                     i1l7295:	
 14752  0230  3006               	movlw	6
 14753  0231  2A33               	goto	i1l160
 14754  0232                     i1l7297:	
 14755  0232  3003               	movlw	3
 14756  0233                     i1l160:	
 14757  0233  0008               	return
 14758  0234                     __end_ofi1_do_I2C_TX:	
 14759                           
 14760                           	psect	text95
 14761  05C5                     __ptext95:	
 14762 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 14763 ;; Defined at:
 14764 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 14765 ;; Parameters:    Size  Location     Type
 14766 ;;		None
 14767 ;; Auto vars:     Size  Location     Type
 14768 ;;		None
 14769 ;; Return value:  Size  Location     Type
 14770 ;;                  1    wreg      enum E3411
 14771 ;; Registers used:
 14772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14773 ;; Tracked objects:
 14774 ;;		On entry : 0/0
 14775 ;;		On exit  : 0/0
 14776 ;;		Unchanged: 0/0
 14777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14780 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14781 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;Total ram usage:        3 bytes
 14783 ;; Hardware stack levels used:    1
 14784 ;; Hardware stack levels required when called:    3
 14785 ;; This function calls:
 14786 ;;		Absolute function
 14787 ;;		i1_do_I2C_SEND_RESTART
 14788 ;;		i1_do_I2C_SEND_STOP
 14789 ;;		i1_i2c_restartWrite
 14790 ;;		i1_rd1RegCompleteHandler
 14791 ;;		i1_rd2RegCompleteHandler
 14792 ;;		i1_rdBlkRegCompleteHandler
 14793 ;;		i1_returnReset
 14794 ;;		i1_returnStop
 14795 ;;		i1_wr1RegCompleteHandler
 14796 ;;		i1_wr2RegCompleteHandler
 14797 ;; This function is called by:
 14798 ;; This function uses a non-reentrant model
 14799 ;;
 14800                           
 14801                           
 14802                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 14803  05C5                     i1_do_I2C_DO_ADDRESS_NACK:	
 14804  05C5                     i1l7249:	
 14805                           ;incstack = 0
 14806                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14807                           
 14808                           
 14809                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 14810  05C5  0021               	movlb	1	; select bank1
 14811  05C6  11A0               	bcf	_i2c_status^(0+128),3
 14812  05C7                     i1l7251:	
 14813                           
 14814                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 14815  05C7  3002               	movlw	2
 14816  05C8  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 14817  05C9  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 14818  05CA  00AA               	movwf	(_i2c_status^(0+128)+10)
 14819                           
 14820                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 14821  05CB  2DD4               	goto	i1l7263
 14822  05CC                     i1l7253:	
 14823                           
 14824                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 14825  05CC  3194  24A7  3185   	fcall	i1_do_I2C_SEND_RESTART
 14826  05CF  2DF1               	goto	i1l152
 14827  05D0                     i1l7257:	
 14828                           
 14829                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 14830  05D0  3194  24AC  3185   	fcall	i1_do_I2C_SEND_STOP
 14831  05D3  2DF1               	goto	i1l152
 14832  05D4                     i1l7263:	
 14833  05D4  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
 14834  05D5  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 14835  05D6  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 14836  05D7  0020               	movlb	0	; select bank0
 14837  05D8  00D6               	movwf	i1wr1RegCompleteHandler@p
 14838  05D9  300F               	movlw	15
 14839  05DA  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14840  05DB  0086               	movwf	6
 14841  05DC  0187               	clrf	7
 14842  05DD  3F41               	moviw [1]fsr1
 14843  05DE  008A               	movwf	10
 14844  05DF  3F40               	moviw [0]fsr1
 14845  05E0  000A               	callw
 14846  05E1  3185               	pagesel	$
 14847  05E2  00F1               	movwf	??i1_do_I2C_DO_ADDRESS_NACK+1
 14848  05E3  01F2               	clrf	??i1_do_I2C_DO_ADDRESS_NACK+2
 14849                           
 14850                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14851                           ; Switch size 1, requested type "simple"
 14852                           ; Number of cases is 1, Range of values is 0 to 0
 14853                           ; switch strategies available:
 14854                           ; Name         Instructions Cycles
 14855                           ; simple_byte            4     3 (average)
 14856                           ; direct_byte            8     6 (fixed)
 14857                           ; jumptable            260     6 (fixed)
 14858                           ;	Chosen strategy is simple_byte
 14859  05E4  0872               	movf	??i1_do_I2C_DO_ADDRESS_NACK+2,w
 14860  05E5  3A00               	xorlw	0	; case 0
 14861  05E6  1903               	skipnz
 14862  05E7  2DE9               	goto	i1l8705
 14863  05E8  2DD0               	goto	i1l7257
 14864  05E9                     i1l8705:	
 14865                           
 14866                           ; Switch size 1, requested type "simple"
 14867                           ; Number of cases is 2, Range of values is 2 to 3
 14868                           ; switch strategies available:
 14869                           ; Name         Instructions Cycles
 14870                           ; simple_byte            7     4 (average)
 14871                           ; direct_byte           13     9 (fixed)
 14872                           ; jumptable            263     9 (fixed)
 14873                           ;	Chosen strategy is simple_byte
 14874  05E9  0871               	movf	??i1_do_I2C_DO_ADDRESS_NACK+1,w
 14875  05EA  3A02               	xorlw	2	; case 2
 14876  05EB  1903               	skipnz
 14877  05EC  2DCC               	goto	i1l7253
 14878  05ED  3A01               	xorlw	1	; case 3
 14879  05EE  1903               	skipnz
 14880  05EF  2DCC               	goto	i1l7253
 14881  05F0  2DD0               	goto	i1l7257
 14882  05F1                     i1l152:	
 14883  05F1  0008               	return
 14884  05F2                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 14885                           
 14886                           	psect	text96
 14887  14BB                     __ptext96:	
 14888 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 14889 ;; Defined at:
 14890 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;		None
 14893 ;; Auto vars:     Size  Location     Type
 14894 ;;		None
 14895 ;; Return value:  Size  Location     Type
 14896 ;;                  1    wreg      enum E3411
 14897 ;; Registers used:
 14898 ;;		wreg, status,2, status,0, pclath, cstack
 14899 ;; Tracked objects:
 14900 ;;		On entry : 0/0
 14901 ;;		On exit  : 0/0
 14902 ;;		Unchanged: 0/0
 14903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;Total ram usage:        0 bytes
 14909 ;; Hardware stack levels used:    1
 14910 ;; Hardware stack levels required when called:    1
 14911 ;; This function calls:
 14912 ;;		i1_i2c_driver_sendNACK
 14913 ;; This function is called by:
 14914 ;;		i1_do_I2C_RX
 14915 ;; This function uses a non-reentrant model
 14916 ;;
 14917                           
 14918                           
 14919                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 14920  14BB                     i1_do_I2C_DO_NACK_RESTART:	
 14921  14BB                     i1l4881:	
 14922                           ;incstack = 0
 14923                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14924                           
 14925                           
 14926                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c_driver_sendNACK();
 14927  14BB  3194  247F  3194   	fcall	i1_i2c_driver_sendNACK
 14928  14BE                     i1l4883:	
 14929                           
 14930                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 14931  14BE  3009               	movlw	9
 14932  14BF                     i1l146:	
 14933  14BF  0008               	return
 14934  14C0                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 14935                           
 14936                           	psect	text97
 14937  14B6                     __ptext97:	
 14938 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 14939 ;; Defined at:
 14940 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 14941 ;; Parameters:    Size  Location     Type
 14942 ;;		None
 14943 ;; Auto vars:     Size  Location     Type
 14944 ;;		None
 14945 ;; Return value:  Size  Location     Type
 14946 ;;                  1    wreg      enum E3411
 14947 ;; Registers used:
 14948 ;;		wreg, status,2, status,0, pclath, cstack
 14949 ;; Tracked objects:
 14950 ;;		On entry : 0/0
 14951 ;;		On exit  : 0/0
 14952 ;;		Unchanged: 0/0
 14953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;Total ram usage:        0 bytes
 14959 ;; Hardware stack levels used:    1
 14960 ;; Hardware stack levels required when called:    1
 14961 ;; This function calls:
 14962 ;;		i1_i2c_driver_sendNACK
 14963 ;; This function is called by:
 14964 ;;		i1_do_I2C_RX
 14965 ;; This function uses a non-reentrant model
 14966 ;;
 14967                           
 14968                           
 14969                           ;psect for function i1_do_I2C_DO_NACK_STOP
 14970  14B6                     i1_do_I2C_DO_NACK_STOP:	
 14971  14B6                     i1l4875:	
 14972                           ;incstack = 0
 14973                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 14974                           
 14975                           
 14976                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c_driver_sendNACK();
 14977  14B6  3194  247F  3194   	fcall	i1_i2c_driver_sendNACK
 14978  14B9                     i1l4877:	
 14979                           
 14980                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 14981  14B9  300A               	movlw	10
 14982  14BA                     i1l143:	
 14983  14BA  0008               	return
 14984  14BB                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 14985                           
 14986                           	psect	text98
 14987  14B1                     __ptext98:	
 14988 ;; *************** function i1_do_I2C_DO_ACK *****************
 14989 ;; Defined at:
 14990 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 14991 ;; Parameters:    Size  Location     Type
 14992 ;;		None
 14993 ;; Auto vars:     Size  Location     Type
 14994 ;;		None
 14995 ;; Return value:  Size  Location     Type
 14996 ;;                  1    wreg      enum E3411
 14997 ;; Registers used:
 14998 ;;		wreg, status,2, status,0, pclath, cstack
 14999 ;; Tracked objects:
 15000 ;;		On entry : 0/0
 15001 ;;		On exit  : 0/0
 15002 ;;		Unchanged: 0/0
 15003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15008 ;;Total ram usage:        0 bytes
 15009 ;; Hardware stack levels used:    1
 15010 ;; Hardware stack levels required when called:    1
 15011 ;; This function calls:
 15012 ;;		i1_i2c_driver_sendACK
 15013 ;; This function is called by:
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           
 15018                           ;psect for function i1_do_I2C_DO_ACK
 15019  14B1                     i1_do_I2C_DO_ACK:	
 15020  14B1                     i1l5153:	
 15021                           ;incstack = 0
 15022                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 15023                           
 15024                           
 15025                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c_driver_sendACK();
 15026  14B1  3194  247B  3194   	fcall	i1_i2c_driver_sendACK
 15027  14B4                     i1l5155:	
 15028                           
 15029                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 15030  14B4  3005               	movlw	5
 15031  14B5                     i1l140:	
 15032  14B5  0008               	return
 15033  14B6                     __end_ofi1_do_I2C_DO_ACK:	
 15034                           
 15035                           	psect	text99
 15036  14F5                     __ptext99:	
 15037 ;; *************** function i1_do_I2C_RCEN *****************
 15038 ;; Defined at:
 15039 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;		None
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;		None
 15044 ;; Return value:  Size  Location     Type
 15045 ;;                  1    wreg      enum E3411
 15046 ;; Registers used:
 15047 ;;		wreg, status,2, status,0, pclath, cstack
 15048 ;; Tracked objects:
 15049 ;;		On entry : 0/0
 15050 ;;		On exit  : 0/0
 15051 ;;		Unchanged: 0/0
 15052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15057 ;;Total ram usage:        0 bytes
 15058 ;; Hardware stack levels used:    1
 15059 ;; Hardware stack levels required when called:    1
 15060 ;; This function calls:
 15061 ;;		i1_i2c_driver_startRX
 15062 ;; This function is called by:
 15063 ;; This function uses a non-reentrant model
 15064 ;;
 15065                           
 15066                           
 15067                           ;psect for function i1_do_I2C_RCEN
 15068  14F5                     i1_do_I2C_RCEN:	
 15069  14F5                     i1l5145:	
 15070                           ;incstack = 0
 15071                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 15072                           
 15073                           
 15074                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 15075  14F5  0021               	movlb	1	; select bank1
 15076  14F6  11A0               	bcf	_i2c_status^(0+128),3
 15077  14F7                     i1l5147:	
 15078                           
 15079                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c_driver_startRX();
 15080  14F7  3194  2453  3194   	fcall	i1_i2c_driver_startRX
 15081  14FA                     i1l5149:	
 15082                           
 15083                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 15084  14FA  3004               	movlw	4
 15085  14FB                     i1l137:	
 15086  14FB  0008               	return
 15087  14FC                     __end_ofi1_do_I2C_RCEN:	
 15088                           
 15089                           	psect	text100
 15090  1514                     __ptext100:	
 15091 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 15092 ;; Defined at:
 15093 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15094 ;; Parameters:    Size  Location     Type
 15095 ;;		None
 15096 ;; Auto vars:     Size  Location     Type
 15097 ;;		None
 15098 ;; Return value:  Size  Location     Type
 15099 ;;                  1    wreg      enum E3411
 15100 ;; Registers used:
 15101 ;;		wreg, status,2, status,0, pclath, cstack
 15102 ;; Tracked objects:
 15103 ;;		On entry : 0/0
 15104 ;;		On exit  : 0/0
 15105 ;;		Unchanged: 0/0
 15106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15111 ;;Total ram usage:        0 bytes
 15112 ;; Hardware stack levels used:    1
 15113 ;; Hardware stack levels required when called:    1
 15114 ;; This function calls:
 15115 ;;		i1_i2c_driver_TXData
 15116 ;; This function is called by:
 15117 ;; This function uses a non-reentrant model
 15118 ;;
 15119                           
 15120                           
 15121                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 15122  1514                     i1_do_I2C_SEND_ADR_WRITE:	
 15123  1514                     i1l5137:	
 15124                           ;incstack = 0
 15125                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15126                           
 15127                           
 15128                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 15129  1514  0021               	movlb	1	; select bank1
 15130  1515  15A0               	bsf	_i2c_status^(0+128),3
 15131  1516                     i1l5139:	
 15132                           
 15133                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c_driver_TXData(i2c_status.address
      +                           << 1);
 15134  1516  3521               	lslf	(_i2c_status^(0+128)+1),w
 15135  1517  3194  2493  3195   	fcall	i1_i2c_driver_TXData
 15136  151A                     i1l5141:	
 15137                           
 15138                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 15139  151A  3003               	movlw	3
 15140  151B                     i1l134:	
 15141  151B  0008               	return
 15142  151C                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 15143                           
 15144                           	psect	text101
 15145  1525                     __ptext101:	
 15146 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 15147 ;; Defined at:
 15148 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 15149 ;; Parameters:    Size  Location     Type
 15150 ;;		None
 15151 ;; Auto vars:     Size  Location     Type
 15152 ;;		None
 15153 ;; Return value:  Size  Location     Type
 15154 ;;                  1    wreg      enum E3411
 15155 ;; Registers used:
 15156 ;;		wreg, status,2, status,0, pclath, cstack
 15157 ;; Tracked objects:
 15158 ;;		On entry : 0/0
 15159 ;;		On exit  : 0/0
 15160 ;;		Unchanged: 0/0
 15161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;Total ram usage:        0 bytes
 15167 ;; Hardware stack levels used:    1
 15168 ;; Hardware stack levels required when called:    1
 15169 ;; This function calls:
 15170 ;;		i1_i2c_driver_TXData
 15171 ;; This function is called by:
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           
 15176                           ;psect for function i1_do_I2C_SEND_ADR_READ
 15177  1525                     i1_do_I2C_SEND_ADR_READ:	
 15178  1525                     i1l5129:	
 15179                           ;incstack = 0
 15180                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 15181                           
 15182                           
 15183                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 15184  1525  0021               	movlb	1	; select bank1
 15185  1526  15A0               	bsf	_i2c_status^(0+128),3
 15186  1527                     i1l5131:	
 15187                           
 15188                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c_driver_TXData(i2c_status.address
      +                           << 1 | 1);
 15189  1527  1403               	setc
 15190  1528  0D21               	rlf	(_i2c_status^(0+128)+1),w
 15191  1529  3194  2493  3195   	fcall	i1_i2c_driver_TXData
 15192  152C                     i1l5133:	
 15193                           
 15194                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 15195  152C  3005               	movlw	5
 15196  152D                     i1l131:	
 15197  152D  0008               	return
 15198  152E                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 15199                           
 15200                           	psect	text102
 15201  14AC                     __ptext102:	
 15202 ;; *************** function i1_do_I2C_SEND_STOP *****************
 15203 ;; Defined at:
 15204 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;		None
 15209 ;; Return value:  Size  Location     Type
 15210 ;;                  1    wreg      enum E3411
 15211 ;; Registers used:
 15212 ;;		wreg, status,2, status,0, pclath, cstack
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;Total ram usage:        0 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    1
 15225 ;; This function calls:
 15226 ;;		i1_i2c_driver_stop
 15227 ;; This function is called by:
 15228 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15229 ;;		i1_do_I2C_TX
 15230 ;;		i1_do_I2C_TX_EMPTY
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234                           
 15235                           ;psect for function i1_do_I2C_SEND_STOP
 15236  14AC                     i1_do_I2C_SEND_STOP:	
 15237  14AC                     i1l4869:	
 15238                           ;incstack = 0
 15239                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 15240                           
 15241                           
 15242                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c_driver_stop();
 15243  14AC  3194  2450  3194   	fcall	i1_i2c_driver_stop
 15244  14AF                     i1l4871:	
 15245                           
 15246                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 15247  14AF  3000               	movlw	0
 15248  14B0                     i1l128:	
 15249  14B0  0008               	return
 15250  14B1                     __end_ofi1_do_I2C_SEND_STOP:	
 15251                           
 15252                           	psect	text103
 15253  14A7                     __ptext103:	
 15254 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 15255 ;; Defined at:
 15256 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 15257 ;; Parameters:    Size  Location     Type
 15258 ;;		None
 15259 ;; Auto vars:     Size  Location     Type
 15260 ;;		None
 15261 ;; Return value:  Size  Location     Type
 15262 ;;                  1    wreg      enum E3411
 15263 ;; Registers used:
 15264 ;;		wreg, status,2, status,0, pclath, cstack
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;Total ram usage:        0 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; Hardware stack levels required when called:    1
 15277 ;; This function calls:
 15278 ;;		i1_i2c_driver_restart
 15279 ;; This function is called by:
 15280 ;;		i1_do_I2C_DO_ADDRESS_NACK
 15281 ;;		i1_do_I2C_TX_EMPTY
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           
 15286                           ;psect for function i1_do_I2C_SEND_RESTART
 15287  14A7                     i1_do_I2C_SEND_RESTART:	
 15288  14A7                     i1l4863:	
 15289                           ;incstack = 0
 15290                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15291                           
 15292                           
 15293                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c_driver_restart();
 15294  14A7  3194  244D  3194   	fcall	i1_i2c_driver_restart
 15295  14AA                     i1l4865:	
 15296                           
 15297                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 15298  14AA  3001               	movlw	1
 15299  14AB                     i1l125:	
 15300  14AB  0008               	return
 15301  14AC                     __end_ofi1_do_I2C_SEND_RESTART:	
 15302                           
 15303                           	psect	text104
 15304  14A2                     __ptext104:	
 15305 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 15306 ;; Defined at:
 15307 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 15308 ;; Parameters:    Size  Location     Type
 15309 ;;		None
 15310 ;; Auto vars:     Size  Location     Type
 15311 ;;		None
 15312 ;; Return value:  Size  Location     Type
 15313 ;;                  1    wreg      enum E3411
 15314 ;; Registers used:
 15315 ;;		wreg, status,2, status,0, pclath, cstack
 15316 ;; Tracked objects:
 15317 ;;		On entry : 0/0
 15318 ;;		On exit  : 0/0
 15319 ;;		Unchanged: 0/0
 15320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;Total ram usage:        0 bytes
 15326 ;; Hardware stack levels used:    1
 15327 ;; Hardware stack levels required when called:    1
 15328 ;; This function calls:
 15329 ;;		i1_i2c_driver_restart
 15330 ;; This function is called by:
 15331 ;;		i1_do_I2C_TX
 15332 ;; This function uses a non-reentrant model
 15333 ;;
 15334                           
 15335                           
 15336                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 15337  14A2                     i1_do_I2C_SEND_RESTART_WRITE:	
 15338  14A2                     i1l4857:	
 15339                           ;incstack = 0
 15340                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15341                           
 15342                           
 15343                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c_driver_restart();
 15344  14A2  3194  244D  3194   	fcall	i1_i2c_driver_restart
 15345  14A5                     i1l4859:	
 15346                           
 15347                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 15348  14A5  3002               	movlw	2
 15349  14A6                     i1l122:	
 15350  14A6  0008               	return
 15351  14A7                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 15352                           
 15353                           	psect	text105
 15354  149D                     __ptext105:	
 15355 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 15356 ;; Defined at:
 15357 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 15358 ;; Parameters:    Size  Location     Type
 15359 ;;		None
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;		None
 15362 ;; Return value:  Size  Location     Type
 15363 ;;                  1    wreg      enum E3411
 15364 ;; Registers used:
 15365 ;;		wreg, status,2, status,0, pclath, cstack
 15366 ;; Tracked objects:
 15367 ;;		On entry : 0/0
 15368 ;;		On exit  : 0/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;Total ram usage:        0 bytes
 15376 ;; Hardware stack levels used:    1
 15377 ;; Hardware stack levels required when called:    1
 15378 ;; This function calls:
 15379 ;;		i1_i2c_driver_restart
 15380 ;; This function is called by:
 15381 ;;		i1_do_I2C_TX
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 15387  149D                     i1_do_I2C_SEND_RESTART_READ:	
 15388  149D                     i1l4851:	
 15389                           ;incstack = 0
 15390                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 15391                           
 15392                           
 15393                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c_driver_restart();
 15394  149D  3194  244D  3194   	fcall	i1_i2c_driver_restart
 15395  14A0                     i1l4853:	
 15396                           
 15397                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 15398  14A0  3001               	movlw	1
 15399  14A1                     i1l119:	
 15400  14A1  0008               	return
 15401  14A2                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 15402                           
 15403                           	psect	text106
 15404  1498                     __ptext106:	
 15405 ;; *************** function i1_do_I2C_IDLE *****************
 15406 ;; Defined at:
 15407 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 15408 ;; Parameters:    Size  Location     Type
 15409 ;;		None
 15410 ;; Auto vars:     Size  Location     Type
 15411 ;;		None
 15412 ;; Return value:  Size  Location     Type
 15413 ;;                  1    wreg      enum E3411
 15414 ;; Registers used:
 15415 ;;		wreg, status,2
 15416 ;; Tracked objects:
 15417 ;;		On entry : 0/0
 15418 ;;		On exit  : 0/0
 15419 ;;		Unchanged: 0/0
 15420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15425 ;;Total ram usage:        0 bytes
 15426 ;; Hardware stack levels used:    1
 15427 ;; This function calls:
 15428 ;;		Nothing
 15429 ;; This function is called by:
 15430 ;; This function uses a non-reentrant model
 15431 ;;
 15432                           
 15433                           
 15434                           ;psect for function i1_do_I2C_IDLE
 15435  1498                     i1_do_I2C_IDLE:	
 15436  1498                     i1l5121:	
 15437                           ;incstack = 0
 15438                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 15439                           
 15440                           
 15441                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 15442  1498  0021               	movlb	1	; select bank1
 15443  1499  1020               	bcf	_i2c_status^(0+128),0
 15444  149A                     i1l5123:	
 15445                           
 15446                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 15447  149A  01AA               	clrf	(_i2c_status^(0+128)+10)
 15448  149B                     i1l5125:	
 15449                           
 15450                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 15451  149B  300E               	movlw	14
 15452  149C                     i1l116:	
 15453  149C  0008               	return
 15454  149D                     __end_ofi1_do_I2C_IDLE:	
 15455                           
 15456                           	psect	text107
 15457  150C                     __ptext107:	
 15458 ;; *************** function i1_do_I2C_RESET *****************
 15459 ;; Defined at:
 15460 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 15461 ;; Parameters:    Size  Location     Type
 15462 ;;		None
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;		None
 15465 ;; Return value:  Size  Location     Type
 15466 ;;                  1    wreg      enum E3411
 15467 ;; Registers used:
 15468 ;;		wreg, status,2, status,0, pclath, cstack
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;Total ram usage:        0 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:    1
 15481 ;; This function calls:
 15482 ;;		i1_i2c_driver_resetBus
 15483 ;; This function is called by:
 15484 ;; This function uses a non-reentrant model
 15485 ;;
 15486                           
 15487                           
 15488                           ;psect for function i1_do_I2C_RESET
 15489  150C                     i1_do_I2C_RESET:	
 15490  150C                     i1l5111:	
 15491                           ;incstack = 0
 15492                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 15493                           
 15494                           
 15495                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c_driver_resetBus();
 15496  150C  3194  2444  3195   	fcall	i1_i2c_driver_resetBus
 15497  150F                     i1l5113:	
 15498                           
 15499                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 15500  150F  0021               	movlb	1	; select bank1
 15501  1510  1020               	bcf	_i2c_status^(0+128),0
 15502  1511                     i1l5115:	
 15503                           
 15504                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 15505  1511  01AA               	clrf	(_i2c_status^(0+128)+10)
 15506  1512                     i1l5117:	
 15507                           
 15508                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 15509  1512  300E               	movlw	14
 15510  1513                     i1l113:	
 15511  1513  0008               	return
 15512  1514                     __end_ofi1_do_I2C_RESET:	
 15513                           
 15514                           	psect	text108
 15515  0533                     __ptext108:	
 15516 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 15517 ;; Defined at:
 15518 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 15519 ;; Parameters:    Size  Location     Type
 15520 ;;		None
 15521 ;; Auto vars:     Size  Location     Type
 15522 ;;		None
 15523 ;; Return value:  Size  Location     Type
 15524 ;;                  1    wreg      enum E3411
 15525 ;; Registers used:
 15526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15527 ;; Tracked objects:
 15528 ;;		On entry : 0/0
 15529 ;;		On exit  : 0/0
 15530 ;;		Unchanged: 0/0
 15531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;Total ram usage:        3 bytes
 15537 ;; Hardware stack levels used:    1
 15538 ;; Hardware stack levels required when called:    3
 15539 ;; This function calls:
 15540 ;;		Absolute function
 15541 ;;		i1_do_I2C_SEND_RESTART
 15542 ;;		i1_do_I2C_SEND_STOP
 15543 ;;		i1_i2c_restartWrite
 15544 ;;		i1_mssp_setIRQ
 15545 ;;		i1_rd1RegCompleteHandler
 15546 ;;		i1_rd2RegCompleteHandler
 15547 ;;		i1_rdBlkRegCompleteHandler
 15548 ;;		i1_returnReset
 15549 ;;		i1_returnStop
 15550 ;;		i1_wr1RegCompleteHandler
 15551 ;;		i1_wr2RegCompleteHandler
 15552 ;; This function is called by:
 15553 ;; This function uses a non-reentrant model
 15554 ;;
 15555                           
 15556                           
 15557                           ;psect for function i1_do_I2C_TX_EMPTY
 15558  0533                     i1_do_I2C_TX_EMPTY:	
 15559  0533                     i1l7337:	
 15560                           ;incstack = 0
 15561                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15562                           
 15563                           
 15564                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 15565  0533  0021               	movlb	1	; select bank1
 15566  0534  1520               	bsf	_i2c_status^(0+128),2
 15567                           
 15568                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 15569  0535  2D43               	goto	i1l7355
 15570  0536                     i1l7339:	
 15571                           
 15572                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 15573  0536  3194  24A7  3185   	fcall	i1_do_I2C_SEND_RESTART
 15574  0539  2D66               	goto	i1l188
 15575  053A                     i1l7343:	
 15576                           
 15577                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp_setIRQ();
 15578  053A  3194  2459  3185   	fcall	i1_mssp_setIRQ
 15579  053D                     i1l7345:	
 15580                           
 15581                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 15582  053D  3003               	movlw	3
 15583  053E  2D66               	goto	i1l188
 15584  053F                     i1l7349:	
 15585                           
 15586                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 15587  053F  3194  24AC  3185   	fcall	i1_do_I2C_SEND_STOP
 15588  0542  2D66               	goto	i1l188
 15589  0543                     i1l7355:	
 15590  0543  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 15591  0544  00F0               	movwf	??i1_do_I2C_TX_EMPTY
 15592  0545  0870               	movf	??i1_do_I2C_TX_EMPTY,w
 15593  0546  0020               	movlb	0	; select bank0
 15594  0547  00D6               	movwf	i1wr1RegCompleteHandler@p
 15595  0548  300B               	movlw	11
 15596  0549  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 15597  054A  0086               	movwf	6
 15598  054B  0187               	clrf	7
 15599  054C  3F41               	moviw [1]fsr1
 15600  054D  008A               	movwf	10
 15601  054E  3F40               	moviw [0]fsr1
 15602  054F  000A               	callw
 15603  0550  3185               	pagesel	$
 15604  0551  00F1               	movwf	??i1_do_I2C_TX_EMPTY+1
 15605  0552  01F2               	clrf	??i1_do_I2C_TX_EMPTY+2
 15606                           
 15607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15608                           ; Switch size 1, requested type "simple"
 15609                           ; Number of cases is 1, Range of values is 0 to 0
 15610                           ; switch strategies available:
 15611                           ; Name         Instructions Cycles
 15612                           ; simple_byte            4     3 (average)
 15613                           ; direct_byte            8     6 (fixed)
 15614                           ; jumptable            260     6 (fixed)
 15615                           ;	Chosen strategy is simple_byte
 15616  0553  0872               	movf	??i1_do_I2C_TX_EMPTY+2,w
 15617  0554  3A00               	xorlw	0	; case 0
 15618  0555  1903               	skipnz
 15619  0556  2D58               	goto	i1l8707
 15620  0557  2D3F               	goto	i1l7349
 15621  0558                     i1l8707:	
 15622                           
 15623                           ; Switch size 1, requested type "simple"
 15624                           ; Number of cases is 4, Range of values is 1 to 4
 15625                           ; switch strategies available:
 15626                           ; Name         Instructions Cycles
 15627                           ; simple_byte           13     7 (average)
 15628                           ; direct_byte           17     9 (fixed)
 15629                           ; jumptable            263     9 (fixed)
 15630                           ;	Chosen strategy is simple_byte
 15631  0558  0871               	movf	??i1_do_I2C_TX_EMPTY+1,w
 15632  0559  3A01               	xorlw	1	; case 1
 15633  055A  1903               	skipnz
 15634  055B  2D3F               	goto	i1l7349
 15635  055C  3A03               	xorlw	3	; case 2
 15636  055D  1903               	skipnz
 15637  055E  2D36               	goto	i1l7339
 15638  055F  3A01               	xorlw	1	; case 3
 15639  0560  1903               	skipnz
 15640  0561  2D36               	goto	i1l7339
 15641  0562  3A07               	xorlw	7	; case 4
 15642  0563  1903               	skipnz
 15643  0564  2D3A               	goto	i1l7343
 15644  0565  2D3F               	goto	i1l7349
 15645  0566                     i1l188:	
 15646  0566  0008               	return
 15647  0567                     __end_ofi1_do_I2C_TX_EMPTY:	
 15648                           
 15649                           	psect	text109
 15650  1459                     __ptext109:	
 15651 ;; *************** function i1_mssp_setIRQ *****************
 15652 ;; Defined at:
 15653 ;;		line 59 in file "mcc_generated_files/i2c_driver.c"
 15654 ;; Parameters:    Size  Location     Type
 15655 ;;		None
 15656 ;; Auto vars:     Size  Location     Type
 15657 ;;		None
 15658 ;; Return value:  Size  Location     Type
 15659 ;;                  1    wreg      void 
 15660 ;; Registers used:
 15661 ;;		None
 15662 ;; Tracked objects:
 15663 ;;		On entry : 0/0
 15664 ;;		On exit  : 0/0
 15665 ;;		Unchanged: 0/0
 15666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;Total ram usage:        0 bytes
 15672 ;; Hardware stack levels used:    1
 15673 ;; This function calls:
 15674 ;;		Nothing
 15675 ;; This function is called by:
 15676 ;;		i1_do_I2C_TX_EMPTY
 15677 ;; This function uses a non-reentrant model
 15678 ;;
 15679                           
 15680                           
 15681                           ;psect for function i1_mssp_setIRQ
 15682  1459                     i1_mssp_setIRQ:	
 15683  1459                     i1l4937:	
 15684                           ;incstack = 0
 15685                           ; Regs used in i1_mssp_setIRQ: []
 15686                           
 15687                           
 15688                           ;mcc_generated_files/i2c_driver.c: 61:     else
 15689  1459  0020               	movlb	0	; select bank0
 15690  145A  1591               	bsf	17,3	;volatile
 15691  145B                     i1l602:	
 15692  145B  0008               	return
 15693  145C                     __end_ofi1_mssp_setIRQ:	
 15694                           
 15695                           	psect	text110
 15696  1504                     __ptext110:	
 15697 ;; *************** function i1_i2c_driver_isNACK *****************
 15698 ;; Defined at:
 15699 ;;		line 162 in file "mcc_generated_files/i2c_driver.c"
 15700 ;; Parameters:    Size  Location     Type
 15701 ;;		None
 15702 ;; Auto vars:     Size  Location     Type
 15703 ;;		None
 15704 ;; Return value:  Size  Location     Type
 15705 ;;		None               void
 15706 ;; Registers used:
 15707 ;;		wreg, status,2, status,0
 15708 ;; Tracked objects:
 15709 ;;		On entry : 0/0
 15710 ;;		On exit  : 0/0
 15711 ;;		Unchanged: 0/0
 15712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;Total ram usage:        1 bytes
 15718 ;; Hardware stack levels used:    1
 15719 ;; This function calls:
 15720 ;;		Nothing
 15721 ;; This function is called by:
 15722 ;;		i1_do_I2C_TX
 15723 ;;		i1_i2c_ISR
 15724 ;; This function uses a non-reentrant model
 15725 ;;
 15726                           
 15727                           
 15728                           ;psect for function i1_i2c_driver_isNACK
 15729  1504                     i1_i2c_driver_isNACK:	
 15730  1504                     i1l4939:	
 15731                           ;incstack = 0
 15732                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 15733                           
 15734                           
 15735                           ;mcc_generated_files/i2c_driver.c: 164:     return SSPCON2bits.ACKSTAT;
 15736  1504  0024               	movlb	4	; select bank4
 15737  1505  0E16               	swapf	22,w	;volatile
 15738  1506  0C89               	rrf	9,f
 15739  1507  0C89               	rrf	9,f
 15740  1508  3901               	andlw	1
 15741  1509  00F0               	movwf	??i1_i2c_driver_isNACK
 15742  150A  0C70               	rrf	??i1_i2c_driver_isNACK,w
 15743  150B                     i1l637:	
 15744  150B  0008               	return
 15745  150C                     __end_ofi1_i2c_driver_isNACK:	
 15746                           
 15747                           	psect	text111
 15748  1493                     __ptext111:	
 15749 ;; *************** function i1_i2c_driver_TXData *****************
 15750 ;; Defined at:
 15751 ;;		line 187 in file "mcc_generated_files/i2c_driver.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;  d               1    wreg     unsigned char 
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;  d               1    0[COMMON] unsigned char 
 15756 ;; Return value:  Size  Location     Type
 15757 ;;                  1    wreg      void 
 15758 ;; Registers used:
 15759 ;;		wreg
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;Total ram usage:        1 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; This function calls:
 15772 ;;		Nothing
 15773 ;; This function is called by:
 15774 ;;		i1_do_I2C_SEND_ADR_READ
 15775 ;;		i1_do_I2C_SEND_ADR_WRITE
 15776 ;;		i1_do_I2C_TX
 15777 ;; This function uses a non-reentrant model
 15778 ;;
 15779                           
 15780                           
 15781                           ;psect for function i1_i2c_driver_TXData
 15782  1493                     i1_i2c_driver_TXData:	
 15783                           
 15784                           ;incstack = 0
 15785                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 15786                           ;i1i2c_driver_TXData@d stored from wreg
 15787  1493  00F0               	movwf	i1i2c_driver_TXData@d
 15788  1494                     i1l4949:	
 15789                           
 15790                           ;mcc_generated_files/i2c_driver.c: 187: __attribute__((inline)) void i2c_driver_TXData(c
      +                          har d);mcc_generated_files/i2c_driver.c: 188: {;mcc_generated_files/i2c_driver.c: 189:  
      +                             SSPBUF = d;
 15791  1494  0870               	movf	i1i2c_driver_TXData@d,w
 15792  1495  0024               	movlb	4	; select bank4
 15793  1496  0091               	movwf	17	;volatile
 15794  1497                     i1l652:	
 15795  1497  0008               	return
 15796  1498                     __end_ofi1_i2c_driver_TXData:	
 15797                           
 15798                           	psect	text112
 15799  1456                     __ptext112:	
 15800 ;; *************** function i1_i2c_driver_getRXData *****************
 15801 ;; Defined at:
 15802 ;;		line 172 in file "mcc_generated_files/i2c_driver.c"
 15803 ;; Parameters:    Size  Location     Type
 15804 ;;		None
 15805 ;; Auto vars:     Size  Location     Type
 15806 ;;		None
 15807 ;; Return value:  Size  Location     Type
 15808 ;;                  1    wreg      unsigned char 
 15809 ;; Registers used:
 15810 ;;		wreg
 15811 ;; Tracked objects:
 15812 ;;		On entry : 0/0
 15813 ;;		On exit  : 0/0
 15814 ;;		Unchanged: 0/0
 15815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15820 ;;Total ram usage:        0 bytes
 15821 ;; Hardware stack levels used:    1
 15822 ;; This function calls:
 15823 ;;		Nothing
 15824 ;; This function is called by:
 15825 ;;		i1_do_I2C_RX
 15826 ;; This function uses a non-reentrant model
 15827 ;;
 15828                           
 15829                           
 15830                           ;psect for function i1_i2c_driver_getRXData
 15831  1456                     i1_i2c_driver_getRXData:	
 15832  1456                     i1l4945:	
 15833                           ;incstack = 0
 15834                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 15835                           
 15836                           
 15837                           ;mcc_generated_files/i2c_driver.c: 174:     return SSPBUF;
 15838  1456  0024               	movlb	4	; select bank4
 15839  1457  0811               	movf	17,w	;volatile
 15840  1458                     i1l643:	
 15841  1458  0008               	return
 15842  1459                     __end_ofi1_i2c_driver_getRXData:	
 15843                           
 15844                           	psect	text113
 15845  147F                     __ptext113:	
 15846 ;; *************** function i1_i2c_driver_sendNACK *****************
 15847 ;; Defined at:
 15848 ;;		line 203 in file "mcc_generated_files/i2c_driver.c"
 15849 ;; Parameters:    Size  Location     Type
 15850 ;;		None
 15851 ;; Auto vars:     Size  Location     Type
 15852 ;;		None
 15853 ;; Return value:  Size  Location     Type
 15854 ;;                  1    wreg      void 
 15855 ;; Registers used:
 15856 ;;		None
 15857 ;; Tracked objects:
 15858 ;;		On entry : 0/0
 15859 ;;		On exit  : 0/0
 15860 ;;		Unchanged: 0/0
 15861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15866 ;;Total ram usage:        0 bytes
 15867 ;; Hardware stack levels used:    1
 15868 ;; This function calls:
 15869 ;;		Nothing
 15870 ;; This function is called by:
 15871 ;;		i1_do_I2C_DO_NACK_STOP
 15872 ;;		i1_do_I2C_DO_NACK_RESTART
 15873 ;; This function uses a non-reentrant model
 15874 ;;
 15875                           
 15876                           
 15877                           ;psect for function i1_i2c_driver_sendNACK
 15878  147F                     i1_i2c_driver_sendNACK:	
 15879  147F                     i1l4735:	
 15880                           ;incstack = 0
 15881                           ; Regs used in i1_i2c_driver_sendNACK: []
 15882                           
 15883                           
 15884                           ;mcc_generated_files/i2c_driver.c: 205:     SSPCON2bits.ACKDT = 1;
 15885  147F  0024               	movlb	4	; select bank4
 15886  1480  1696               	bsf	22,5	;volatile
 15887                           
 15888                           ;mcc_generated_files/i2c_driver.c: 206:     SSPCON2bits.ACKEN = 1;
 15889  1481  1616               	bsf	22,4	;volatile
 15890  1482                     i1l661:	
 15891  1482  0008               	return
 15892  1483                     __end_ofi1_i2c_driver_sendNACK:	
 15893                           
 15894                           	psect	text114
 15895  1444                     __ptext114:	
 15896 ;; *************** function i1_i2c_driver_resetBus *****************
 15897 ;; Defined at:
 15898 ;;		line 142 in file "mcc_generated_files/i2c_driver.c"
 15899 ;; Parameters:    Size  Location     Type
 15900 ;;		None
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;		None
 15903 ;; Return value:  Size  Location     Type
 15904 ;;                  1    wreg      void 
 15905 ;; Registers used:
 15906 ;;		None
 15907 ;; Tracked objects:
 15908 ;;		On entry : 0/0
 15909 ;;		On exit  : 0/0
 15910 ;;		Unchanged: 0/0
 15911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;Total ram usage:        0 bytes
 15917 ;; Hardware stack levels used:    1
 15918 ;; This function calls:
 15919 ;;		Nothing
 15920 ;; This function is called by:
 15921 ;;		i1_do_I2C_RESET
 15922 ;; This function uses a non-reentrant model
 15923 ;;
 15924                           
 15925                           
 15926                           ;psect for function i1_i2c_driver_resetBus
 15927  1444                     i1_i2c_driver_resetBus:	
 15928  1444                     i1l625:	
 15929                           ;incstack = 0
 15930                           ; Regs used in i1_i2c_driver_resetBus: []
 15931                           
 15932  1444  0008               	return
 15933  1445                     __end_ofi1_i2c_driver_resetBus:	
 15934                           
 15935                           	psect	text115
 15936  1453                     __ptext115:	
 15937 ;; *************** function i1_i2c_driver_startRX *****************
 15938 ;; Defined at:
 15939 ;;		line 167 in file "mcc_generated_files/i2c_driver.c"
 15940 ;; Parameters:    Size  Location     Type
 15941 ;;		None
 15942 ;; Auto vars:     Size  Location     Type
 15943 ;;		None
 15944 ;; Return value:  Size  Location     Type
 15945 ;;                  1    wreg      void 
 15946 ;; Registers used:
 15947 ;;		None
 15948 ;; Tracked objects:
 15949 ;;		On entry : 0/0
 15950 ;;		On exit  : 0/0
 15951 ;;		Unchanged: 0/0
 15952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;Total ram usage:        0 bytes
 15958 ;; Hardware stack levels used:    1
 15959 ;; This function calls:
 15960 ;;		Nothing
 15961 ;; This function is called by:
 15962 ;;		i1_do_I2C_RCEN
 15963 ;; This function uses a non-reentrant model
 15964 ;;
 15965                           
 15966                           
 15967                           ;psect for function i1_i2c_driver_startRX
 15968  1453                     i1_i2c_driver_startRX:	
 15969  1453                     i1l4943:	
 15970                           ;incstack = 0
 15971                           ; Regs used in i1_i2c_driver_startRX: []
 15972                           
 15973                           
 15974                           ;mcc_generated_files/i2c_driver.c: 169:     SSPCON2bits.RCEN = 1;
 15975  1453  0024               	movlb	4	; select bank4
 15976  1454  1596               	bsf	22,3	;volatile
 15977  1455                     i1l640:	
 15978  1455  0008               	return
 15979  1456                     __end_ofi1_i2c_driver_startRX:	
 15980                           
 15981                           	psect	text116
 15982  0002                     __ptext116:	
 15983 ;; *************** function i1_i2c_restartWrite *****************
 15984 ;; Defined at:
 15985 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 15986 ;; Parameters:    Size  Location     Type
 15987 ;;  p               1    0[BANK0 ] PTR void 
 15988 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15989 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15990 ;; Auto vars:     Size  Location     Type
 15991 ;;		None
 15992 ;; Return value:  Size  Location     Type
 15993 ;;                  1    wreg      enum E358
 15994 ;; Registers used:
 15995 ;;		wreg
 15996 ;; Tracked objects:
 15997 ;;		On entry : 0/0
 15998 ;;		On exit  : 0/0
 15999 ;;		Unchanged: 0/0
 16000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16001 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;Total ram usage:        1 bytes
 16006 ;; Hardware stack levels used:    1
 16007 ;; This function calls:
 16008 ;;		Nothing
 16009 ;; This function is called by:
 16010 ;;		_do_I2C_DO_ADDRESS_NACK
 16011 ;;		_do_I2C_TX
 16012 ;;		_do_I2C_RX
 16013 ;;		_do_I2C_TX_EMPTY
 16014 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16015 ;;		i1_do_I2C_TX
 16016 ;;		i1_do_I2C_RX
 16017 ;;		i1_do_I2C_TX_EMPTY
 16018 ;; This function uses a non-reentrant model
 16019 ;;
 16020                           
 16021                           
 16022                           ;psect for function i1_i2c_restartWrite
 16023  0002                     i1_i2c_restartWrite:	
 16024  0002                     i1l7099:	
 16025                           ;incstack = 0
 16026                           ; Regs used in i1_i2c_restartWrite: [wreg]
 16027                           
 16028                           
 16029                           ;mcc_generated_files/drivers/i2c_types.c: 35: i2c_operations_t i2c_restartWrite(void *p)
      +                          ;mcc_generated_files/drivers/i2c_types.c: 36: {;mcc_generated_files/drivers/i2c_types.c:
      +                           37:     return i2c_restart_write;
 16030  0002  3003               	movlw	3
 16031  0003                     i1l318:	
 16032  0003  0008               	return
 16033  0004                     __end_ofi1_i2c_restartWrite:	
 16034                           
 16035                           	psect	text117
 16036  17C9                     __ptext117:	
 16037 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 16038 ;; Defined at:
 16039 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 16040 ;; Parameters:    Size  Location     Type
 16041 ;;  p               1    0[BANK0 ] PTR void 
 16042 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16043 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16044 ;; Auto vars:     Size  Location     Type
 16045 ;;		None
 16046 ;; Return value:  Size  Location     Type
 16047 ;;                  1    wreg      enum E358
 16048 ;; Registers used:
 16049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16050 ;; Tracked objects:
 16051 ;;		On entry : 0/0
 16052 ;;		On exit  : 0/0
 16053 ;;		Unchanged: 0/0
 16054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16055 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16058 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16059 ;;Total ram usage:        1 bytes
 16060 ;; Hardware stack levels used:    1
 16061 ;; Hardware stack levels required when called:    2
 16062 ;; This function calls:
 16063 ;;		i1_i2c_setBuffer
 16064 ;;		i1_i2c_setDataCompleteCallback
 16065 ;; This function is called by:
 16066 ;;		_do_I2C_DO_ADDRESS_NACK
 16067 ;;		_do_I2C_TX
 16068 ;;		_do_I2C_RX
 16069 ;;		_do_I2C_TX_EMPTY
 16070 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16071 ;;		i1_do_I2C_TX
 16072 ;;		i1_do_I2C_RX
 16073 ;;		i1_do_I2C_TX_EMPTY
 16074 ;; This function uses a non-reentrant model
 16075 ;;
 16076                           
 16077                           
 16078                           ;psect for function i1_rdBlkRegCompleteHandler
 16079  17C9                     i1_rdBlkRegCompleteHandler:	
 16080  17C9                     i1l7093:	
 16081                           ;incstack = 0
 16082                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16083                           
 16084                           
 16085                           ;mcc_generated_files/drivers/i2c_simple_master.c: 134: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 135: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 136:     i2c_setBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 16086  17C9  0020               	movlb	0	; select bank0
 16087  17CA  0856               	movf	i1rdBlkRegCompleteHandler@p,w
 16088  17CB  0086               	movwf	6
 16089  17CC  0187               	clrf	7
 16090  17CD  3F40               	moviw [0]fsr1
 16091  17CE  00F0               	movwf	i1i2c_setBuffer@bufferSize
 16092  17CF  3F41               	moviw [1]fsr1
 16093  17D0  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 16094  17D1  0856               	movf	i1rdBlkRegCompleteHandler@p,w
 16095  17D2  3E02               	addlw	2
 16096  17D3  0086               	movwf	6
 16097  17D4  0187               	clrf	7
 16098  17D5  0801               	movf	1,w
 16099  17D6  3196  2654  3197   	fcall	i1_i2c_setBuffer
 16100                           
 16101                           ;mcc_generated_files/drivers/i2c_simple_master.c: 137:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 16102  17D9  3000               	movlw	0
 16103  17DA  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 16104  17DB  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 16105  17DC  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 16106  17DD  3195  25F4  3197   	fcall	i1_i2c_setDataCompleteCallback
 16107  17E0                     i1l7095:	
 16108                           
 16109                           ;mcc_generated_files/drivers/i2c_simple_master.c: 138:     return i2c_restart_read;
 16110  17E0  3002               	movlw	2
 16111  17E1                     i1l291:	
 16112  17E1  0008               	return
 16113  17E2                     __end_ofi1_rdBlkRegCompleteHandler:	
 16114                           
 16115                           	psect	text118
 16116  16AB                     __ptext118:	
 16117 ;; *************** function i1_rd2RegCompleteHandler *****************
 16118 ;; Defined at:
 16119 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 16120 ;; Parameters:    Size  Location     Type
 16121 ;;  p               1    0[BANK0 ] PTR void 
 16122 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16123 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16124 ;; Auto vars:     Size  Location     Type
 16125 ;;		None
 16126 ;; Return value:  Size  Location     Type
 16127 ;;                  1    wreg      enum E358
 16128 ;; Registers used:
 16129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16130 ;; Tracked objects:
 16131 ;;		On entry : 0/0
 16132 ;;		On exit  : 0/0
 16133 ;;		Unchanged: 0/0
 16134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;Total ram usage:        1 bytes
 16140 ;; Hardware stack levels used:    1
 16141 ;; Hardware stack levels required when called:    2
 16142 ;; This function calls:
 16143 ;;		i1_i2c_setBuffer
 16144 ;;		i1_i2c_setDataCompleteCallback
 16145 ;; This function is called by:
 16146 ;;		_do_I2C_DO_ADDRESS_NACK
 16147 ;;		_do_I2C_TX
 16148 ;;		_do_I2C_RX
 16149 ;;		_do_I2C_TX_EMPTY
 16150 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16151 ;;		i1_do_I2C_TX
 16152 ;;		i1_do_I2C_RX
 16153 ;;		i1_do_I2C_TX_EMPTY
 16154 ;; This function uses a non-reentrant model
 16155 ;;
 16156                           
 16157                           
 16158                           ;psect for function i1_rd2RegCompleteHandler
 16159  16AB                     i1_rd2RegCompleteHandler:	
 16160  16AB                     i1l7077:	
 16161                           ;incstack = 0
 16162                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16163                           
 16164                           
 16165                           ;mcc_generated_files/drivers/i2c_simple_master.c: 87: static i2c_operations_t rd2RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 88: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 89:     i2c_setBuffer(p,2);
 16166  16AB  3002               	movlw	2
 16167  16AC  00F0               	movwf	i1i2c_setBuffer@bufferSize
 16168  16AD  3000               	movlw	0
 16169  16AE  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 16170  16AF  0020               	movlb	0	; select bank0
 16171  16B0  0856               	movf	i1rd2RegCompleteHandler@p,w
 16172  16B1  3196  2654  3196   	fcall	i1_i2c_setBuffer
 16173  16B4                     i1l7079:	
 16174                           
 16175                           ;mcc_generated_files/drivers/i2c_simple_master.c: 90:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 16176  16B4  3000               	movlw	0
 16177  16B5  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 16178  16B6  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 16179  16B7  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 16180  16B8  3195  25F4  3196   	fcall	i1_i2c_setDataCompleteCallback
 16181  16BB                     i1l7081:	
 16182                           
 16183                           ;mcc_generated_files/drivers/i2c_simple_master.c: 91:     return i2c_restart_read;
 16184  16BB  3002               	movlw	2
 16185  16BC                     i1l267:	
 16186  16BC  0008               	return
 16187  16BD                     __end_ofi1_rd2RegCompleteHandler:	
 16188                           
 16189                           	psect	text119
 16190  1699                     __ptext119:	
 16191 ;; *************** function i1_rd1RegCompleteHandler *****************
 16192 ;; Defined at:
 16193 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 16194 ;; Parameters:    Size  Location     Type
 16195 ;;  p               1    0[BANK0 ] PTR void 
 16196 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16197 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16198 ;; Auto vars:     Size  Location     Type
 16199 ;;		None
 16200 ;; Return value:  Size  Location     Type
 16201 ;;                  1    wreg      enum E358
 16202 ;; Registers used:
 16203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16204 ;; Tracked objects:
 16205 ;;		On entry : 0/0
 16206 ;;		On exit  : 0/0
 16207 ;;		Unchanged: 0/0
 16208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16209 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;Total ram usage:        1 bytes
 16214 ;; Hardware stack levels used:    1
 16215 ;; Hardware stack levels required when called:    2
 16216 ;; This function calls:
 16217 ;;		i1_i2c_setBuffer
 16218 ;;		i1_i2c_setDataCompleteCallback
 16219 ;; This function is called by:
 16220 ;;		_do_I2C_DO_ADDRESS_NACK
 16221 ;;		_do_I2C_TX
 16222 ;;		_do_I2C_RX
 16223 ;;		_do_I2C_TX_EMPTY
 16224 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16225 ;;		i1_do_I2C_TX
 16226 ;;		i1_do_I2C_RX
 16227 ;;		i1_do_I2C_TX_EMPTY
 16228 ;; This function uses a non-reentrant model
 16229 ;;
 16230                           
 16231                           
 16232                           ;psect for function i1_rd1RegCompleteHandler
 16233  1699                     i1_rd1RegCompleteHandler:	
 16234  1699                     i1l7069:	
 16235                           ;incstack = 0
 16236                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16237                           
 16238                           
 16239                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 59: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 60:     i2c_setBuffer(p,1);
 16240  1699  3001               	movlw	1
 16241  169A  00F0               	movwf	i1i2c_setBuffer@bufferSize
 16242  169B  3000               	movlw	0
 16243  169C  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 16244  169D  0020               	movlb	0	; select bank0
 16245  169E  0856               	movf	i1rd1RegCompleteHandler@p,w
 16246  169F  3196  2654  3196   	fcall	i1_i2c_setBuffer
 16247  16A2                     i1l7071:	
 16248                           
 16249                           ;mcc_generated_files/drivers/i2c_simple_master.c: 61:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 16250  16A2  3000               	movlw	0
 16251  16A3  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 16252  16A4  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 16253  16A5  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 16254  16A6  3195  25F4  3196   	fcall	i1_i2c_setDataCompleteCallback
 16255  16A9                     i1l7073:	
 16256                           
 16257                           ;mcc_generated_files/drivers/i2c_simple_master.c: 62:     return i2c_restart_read;
 16258  16A9  3002               	movlw	2
 16259  16AA                     i1l252:	
 16260  16AA  0008               	return
 16261  16AB                     __end_ofi1_rd1RegCompleteHandler:	
 16262                           
 16263                           	psect	text120
 16264  1687                     __ptext120:	
 16265 ;; *************** function i1_wr1RegCompleteHandler *****************
 16266 ;; Defined at:
 16267 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 16268 ;; Parameters:    Size  Location     Type
 16269 ;;  p               1    0[BANK0 ] PTR void 
 16270 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16271 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16272 ;; Auto vars:     Size  Location     Type
 16273 ;;		None
 16274 ;; Return value:  Size  Location     Type
 16275 ;;                  1    wreg      enum E358
 16276 ;; Registers used:
 16277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16278 ;; Tracked objects:
 16279 ;;		On entry : 0/0
 16280 ;;		On exit  : 0/0
 16281 ;;		Unchanged: 0/0
 16282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16283 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16287 ;;Total ram usage:        1 bytes
 16288 ;; Hardware stack levels used:    1
 16289 ;; Hardware stack levels required when called:    2
 16290 ;; This function calls:
 16291 ;;		i1_i2c_setBuffer
 16292 ;;		i1_i2c_setDataCompleteCallback
 16293 ;; This function is called by:
 16294 ;;		_do_I2C_DO_ADDRESS_NACK
 16295 ;;		_do_I2C_TX
 16296 ;;		_do_I2C_RX
 16297 ;;		_do_I2C_TX_EMPTY
 16298 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16299 ;;		i1_do_I2C_TX
 16300 ;;		i1_do_I2C_RX
 16301 ;;		i1_do_I2C_TX_EMPTY
 16302 ;; This function uses a non-reentrant model
 16303 ;;
 16304                           
 16305                           
 16306                           ;psect for function i1_wr1RegCompleteHandler
 16307  1687                     i1_wr1RegCompleteHandler:	
 16308  1687                     i1l7061:	
 16309                           ;incstack = 0
 16310                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16311                           
 16312                           
 16313                           ;mcc_generated_files/drivers/i2c_simple_master.c: 31: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 32: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 33:     i2c_setBuffer(p,1);
 16314  1687  3001               	movlw	1
 16315  1688  00F0               	movwf	i1i2c_setBuffer@bufferSize
 16316  1689  3000               	movlw	0
 16317  168A  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 16318  168B  0020               	movlb	0	; select bank0
 16319  168C  0856               	movf	i1wr1RegCompleteHandler@p,w
 16320  168D  3196  2654  3196   	fcall	i1_i2c_setBuffer
 16321  1690                     i1l7063:	
 16322                           
 16323                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34:     i2c_setDataCompleteCallback(((
      +                          void*)0),((void*)0));
 16324  1690  3000               	movlw	0
 16325  1691  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 16326  1692  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 16327  1693  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 16328  1694  3195  25F4  3196   	fcall	i1_i2c_setDataCompleteCallback
 16329  1697                     i1l7065:	
 16330                           
 16331                           ;mcc_generated_files/drivers/i2c_simple_master.c: 35:     return i2c_continue;
 16332  1697  3004               	movlw	4
 16333  1698                     i1l231:	
 16334  1698  0008               	return
 16335  1699                     __end_ofi1_wr1RegCompleteHandler:	
 16336                           
 16337                           	psect	text121
 16338  1448                     __ptext121:	
 16339 ;; *************** function i1_returnReset *****************
 16340 ;; Defined at:
 16341 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 16342 ;; Parameters:    Size  Location     Type
 16343 ;;  p               1    0[BANK0 ] PTR void 
 16344 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16345 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16346 ;; Auto vars:     Size  Location     Type
 16347 ;;		None
 16348 ;; Return value:  Size  Location     Type
 16349 ;;                  1    wreg      enum E3257
 16350 ;; Registers used:
 16351 ;;		wreg
 16352 ;; Tracked objects:
 16353 ;;		On entry : 0/0
 16354 ;;		On exit  : 0/0
 16355 ;;		Unchanged: 0/0
 16356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16357 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16361 ;;Total ram usage:        1 bytes
 16362 ;; Hardware stack levels used:    1
 16363 ;; This function calls:
 16364 ;;		Nothing
 16365 ;; This function is called by:
 16366 ;;		_do_I2C_DO_ADDRESS_NACK
 16367 ;;		_do_I2C_TX
 16368 ;;		_do_I2C_RX
 16369 ;;		_do_I2C_TX_EMPTY
 16370 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16371 ;;		i1_do_I2C_TX
 16372 ;;		i1_do_I2C_RX
 16373 ;;		i1_do_I2C_TX_EMPTY
 16374 ;; This function uses a non-reentrant model
 16375 ;;
 16376                           
 16377                           
 16378                           ;psect for function i1_returnReset
 16379  1448                     i1_returnReset:	
 16380  1448                     i1l7057:	
 16381                           ;incstack = 0
 16382                           ; Regs used in i1_returnReset: [wreg]
 16383                           
 16384                           
 16385                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 16386  1448  3005               	movlw	5
 16387  1449                     i1l207:	
 16388  1449  0008               	return
 16389  144A                     __end_ofi1_returnReset:	
 16390                           
 16391                           	psect	text122
 16392  1446                     __ptext122:	
 16393 ;; *************** function i1_returnStop *****************
 16394 ;; Defined at:
 16395 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;  p               1    0[BANK0 ] PTR void 
 16398 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16399 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16400 ;; Auto vars:     Size  Location     Type
 16401 ;;		None
 16402 ;; Return value:  Size  Location     Type
 16403 ;;                  1    wreg      enum E3257
 16404 ;; Registers used:
 16405 ;;		wreg
 16406 ;; Tracked objects:
 16407 ;;		On entry : 0/0
 16408 ;;		On exit  : 0/0
 16409 ;;		Unchanged: 0/0
 16410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16411 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16415 ;;Total ram usage:        1 bytes
 16416 ;; Hardware stack levels used:    1
 16417 ;; This function calls:
 16418 ;;		Nothing
 16419 ;; This function is called by:
 16420 ;;		i1_setCallBack
 16421 ;;		_do_I2C_DO_ADDRESS_NACK
 16422 ;;		_do_I2C_TX
 16423 ;;		_do_I2C_RX
 16424 ;;		_do_I2C_TX_EMPTY
 16425 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16426 ;;		i1_do_I2C_TX
 16427 ;;		i1_do_I2C_RX
 16428 ;;		i1_do_I2C_TX_EMPTY
 16429 ;; This function uses a non-reentrant model
 16430 ;;
 16431                           
 16432                           
 16433                           ;psect for function i1_returnStop
 16434  1446                     i1_returnStop:	
 16435  1446                     i1l7053:	
 16436                           ;incstack = 0
 16437                           ; Regs used in i1_returnStop: [wreg]
 16438                           
 16439                           
 16440                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 16441  1446  3001               	movlw	1
 16442  1447                     i1l204:	
 16443  1447  0008               	return
 16444  1448                     __end_ofi1_returnStop:	
 16445                           
 16446                           	psect	text123
 16447  1675                     __ptext123:	
 16448 ;; *************** function i1_wr2RegCompleteHandler *****************
 16449 ;; Defined at:
 16450 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 16451 ;; Parameters:    Size  Location     Type
 16452 ;;  p               1    0[BANK0 ] PTR void 
 16453 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16454 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16455 ;; Auto vars:     Size  Location     Type
 16456 ;;		None
 16457 ;; Return value:  Size  Location     Type
 16458 ;;                  1    wreg      enum E358
 16459 ;; Registers used:
 16460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16461 ;; Tracked objects:
 16462 ;;		On entry : 0/0
 16463 ;;		On exit  : 0/0
 16464 ;;		Unchanged: 0/0
 16465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16466 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16469 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16470 ;;Total ram usage:        1 bytes
 16471 ;; Hardware stack levels used:    1
 16472 ;; Hardware stack levels required when called:    2
 16473 ;; This function calls:
 16474 ;;		i1_i2c_setBuffer
 16475 ;;		i1_i2c_setDataCompleteCallback
 16476 ;; This function is called by:
 16477 ;;		_do_I2C_DO_ADDRESS_NACK
 16478 ;;		_do_I2C_TX
 16479 ;;		_do_I2C_RX
 16480 ;;		_do_I2C_TX_EMPTY
 16481 ;;		i1_do_I2C_DO_ADDRESS_NACK
 16482 ;;		i1_do_I2C_TX
 16483 ;;		i1_do_I2C_RX
 16484 ;;		i1_do_I2C_TX_EMPTY
 16485 ;; This function uses a non-reentrant model
 16486 ;;
 16487                           
 16488                           
 16489                           ;psect for function i1_wr2RegCompleteHandler
 16490  1675                     i1_wr2RegCompleteHandler:	
 16491  1675                     i1l7085:	
 16492                           ;incstack = 0
 16493                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16494                           
 16495                           
 16496                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 111: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 112:     i2c_setBuffer(p,2);
 16497  1675  3002               	movlw	2
 16498  1676  00F0               	movwf	i1i2c_setBuffer@bufferSize
 16499  1677  3000               	movlw	0
 16500  1678  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 16501  1679  0020               	movlb	0	; select bank0
 16502  167A  0856               	movf	i1wr2RegCompleteHandler@p,w
 16503  167B  3196  2654  3196   	fcall	i1_i2c_setBuffer
 16504  167E                     i1l7087:	
 16505                           
 16506                           ;mcc_generated_files/drivers/i2c_simple_master.c: 113:     i2c_setDataCompleteCallback((
      +                          (void*)0),((void*)0));
 16507  167E  3000               	movlw	0
 16508  167F  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 16509  1680  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 16510  1681  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 16511  1682  3195  25F4  3196   	fcall	i1_i2c_setDataCompleteCallback
 16512  1685                     i1l7089:	
 16513                           
 16514                           ;mcc_generated_files/drivers/i2c_simple_master.c: 114:     return i2c_continue;
 16515  1685  3004               	movlw	4
 16516  1686                     i1l279:	
 16517  1686  0008               	return
 16518  1687                     __end_ofi1_wr2RegCompleteHandler:	
 16519                           
 16520                           	psect	text124
 16521  15F4                     __ptext124:	
 16522 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 16523 ;; Defined at:
 16524 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 16525 ;; Parameters:    Size  Location     Type
 16526 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 16527 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 16528 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 16529 ;;  p               1    7[COMMON] PTR void 
 16530 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16531 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16532 ;; Auto vars:     Size  Location     Type
 16533 ;;		None
 16534 ;; Return value:  Size  Location     Type
 16535 ;;                  1    wreg      void 
 16536 ;; Registers used:
 16537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16538 ;; Tracked objects:
 16539 ;;		On entry : 0/0
 16540 ;;		On exit  : 0/0
 16541 ;;		Unchanged: 0/0
 16542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16543 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;Total ram usage:        4 bytes
 16548 ;; Hardware stack levels used:    1
 16549 ;; Hardware stack levels required when called:    1
 16550 ;; This function calls:
 16551 ;;		i1_setCallBack
 16552 ;; This function is called by:
 16553 ;;		i1_wr1RegCompleteHandler
 16554 ;;		i1_rd1RegCompleteHandler
 16555 ;;		i1_rd2RegCompleteHandler
 16556 ;;		i1_wr2RegCompleteHandler
 16557 ;;		i1_rdBlkRegCompleteHandler
 16558 ;; This function uses a non-reentrant model
 16559 ;;
 16560                           
 16561                           
 16562                           ;psect for function i1_i2c_setDataCompleteCallback
 16563  15F4                     i1_i2c_setDataCompleteCallback:	
 16564  15F4                     i1l6987:	
 16565                           ;incstack = 0
 16566                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 16567                           
 16568                           
 16569                           ;mcc_generated_files/drivers/i2c_master.c: 89: void i2c_setDataCompleteCallback(i2c_call
      +                          back cb, void *p);mcc_generated_files/drivers/i2c_master.c: 90: {;mcc_generated_files/dr
      +                          ivers/i2c_master.c: 91:     setCallBack(i2c_dataComplete,cb,p);
 16570  15F4  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 16571  15F5  00F1               	movwf	i1setCallBack@cb+1
 16572  15F6  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 16573  15F7  00F0               	movwf	i1setCallBack@cb
 16574  15F8  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 16575  15F9  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 16576  15FA  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 16577  15FB  00F2               	movwf	i1setCallBack@p
 16578  15FC  3000               	movlw	0
 16579  15FD  3186  26E7  3195   	fcall	i1_setCallBack
 16580  1600                     i1l61:	
 16581  1600  0008               	return
 16582  1601                     __end_ofi1_i2c_setDataCompleteCallback:	
 16583                           
 16584                           	psect	text125
 16585  06E7                     __ptext125:	
 16586 ;; *************** function i1_setCallBack *****************
 16587 ;; Defined at:
 16588 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 16589 ;; Parameters:    Size  Location     Type
 16590 ;;  idx             1    wreg     enum E3429
 16591 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 16592 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 16593 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 16594 ;;  p               1    2[COMMON] PTR void 
 16595 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16596 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;  idx             1    4[COMMON] enum E3429
 16599 ;; Return value:  Size  Location     Type
 16600 ;;                  1    wreg      void 
 16601 ;; Registers used:
 16602 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16608 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;Total ram usage:        5 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; This function calls:
 16615 ;;		Nothing
 16616 ;; This function is called by:
 16617 ;;		i1_i2c_setDataCompleteCallback
 16618 ;; This function uses a non-reentrant model
 16619 ;;
 16620                           
 16621                           
 16622                           ;psect for function i1_setCallBack
 16623  06E7                     i1_setCallBack:	
 16624                           
 16625                           ;incstack = 0
 16626                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 16627                           ;i1setCallBack@idx stored from wreg
 16628  06E7  00F4               	movwf	i1setCallBack@idx
 16629  06E8                     i1l6943:	
 16630                           
 16631                           ;mcc_generated_files/drivers/i2c_master.c: 453: static void setCallBack(i2c_callbackInde
      +                          x idx, i2c_callback cb, void *p);mcc_generated_files/drivers/i2c_master.c: 454: {;mcc_ge
      +                          nerated_files/drivers/i2c_master.c: 455:     if(cb)
 16632  06E8  0870               	movf	i1setCallBack@cb,w
 16633  06E9  0471               	iorwf	i1setCallBack@cb+1,w
 16634  06EA  1903               	btfsc	3,2
 16635  06EB  2EED               	goto	u552_21
 16636  06EC  2EEE               	goto	u552_20
 16637  06ED                     u552_21:	
 16638  06ED  2EFF               	goto	i1l6947
 16639  06EE                     u552_20:	
 16640  06EE                     i1l6945:	
 16641                           
 16642                           ;mcc_generated_files/drivers/i2c_master.c: 456:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 457:         i2c_status.callbackTable[idx] = cb;
 16643  06EE  3574               	lslf	i1setCallBack@idx,w
 16644  06EF  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 16645  06F0  0086               	movwf	6
 16646  06F1  0187               	clrf	7
 16647  06F2  0870               	movf	i1setCallBack@cb,w
 16648  06F3  3FC0               	movwi [0]fsr1
 16649  06F4  0871               	movf	i1setCallBack@cb+1,w
 16650  06F5  3FC1               	movwi [1]fsr1
 16651                           
 16652                           ;mcc_generated_files/drivers/i2c_master.c: 458:         i2c_status.callbackPayload[idx] 
      +                          = p;
 16653  06F6  0872               	movf	i1setCallBack@p,w
 16654  06F7  00F3               	movwf	??i1_setCallBack
 16655  06F8  0874               	movf	i1setCallBack@idx,w
 16656  06F9  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 16657  06FA  0086               	movwf	6
 16658  06FB  0187               	clrf	7
 16659  06FC  0873               	movf	??i1_setCallBack,w
 16660  06FD  0081               	movwf	1
 16661                           
 16662                           ;mcc_generated_files/drivers/i2c_master.c: 459:     }
 16663  06FE  2F0C               	goto	i1l212
 16664  06FF                     i1l6947:	
 16665                           
 16666                           ;mcc_generated_files/drivers/i2c_master.c: 461:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 462:         i2c_status.callbackTable[idx] = returnStop;
 16667  06FF  3574               	lslf	i1setCallBack@idx,w
 16668  0700  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 16669  0701  0086               	movwf	6
 16670  0702  0187               	clrf	7
 16671  0703  30CB               	movlw	low _returnStop
 16672  0704  3FC0               	movwi [0]fsr1
 16673  0705  3014               	movlw	high _returnStop
 16674  0706  3FC1               	movwi [1]fsr1
 16675                           
 16676                           ;mcc_generated_files/drivers/i2c_master.c: 463:         i2c_status.callbackPayload[idx] 
      +                          = ((void*)0);
 16677  0707  0874               	movf	i1setCallBack@idx,w
 16678  0708  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 16679  0709  0086               	movwf	6
 16680  070A  0187               	clrf	7
 16681  070B  0181               	clrf	1
 16682  070C                     i1l212:	
 16683  070C  0008               	return
 16684  070D                     __end_ofi1_setCallBack:	
 16685                           
 16686                           	psect	text126
 16687  1654                     __ptext126:	
 16688 ;; *************** function i1_i2c_setBuffer *****************
 16689 ;; Defined at:
 16690 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;  buffer          1    wreg     PTR void 
 16693 ;;		 -> clearAlarmFlag@rData(2), rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), 
 16694 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
 16695 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
 16696 ;;		 -> NULL(0), 
 16697 ;;  bufferSize      2    0[COMMON] unsigned int 
 16698 ;; Auto vars:     Size  Location     Type
 16699 ;;  buffer          1    3[COMMON] PTR void 
 16700 ;;		 -> clearAlarmFlag@rData(2), rtcData(20), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), 
 16701 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
 16702 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
 16703 ;;		 -> NULL(0), 
 16704 ;; Return value:  Size  Location     Type
 16705 ;;                  1    wreg      void 
 16706 ;; Registers used:
 16707 ;;		wreg
 16708 ;; Tracked objects:
 16709 ;;		On entry : 0/0
 16710 ;;		On exit  : 0/0
 16711 ;;		Unchanged: 0/0
 16712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16716 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16717 ;;Total ram usage:        4 bytes
 16718 ;; Hardware stack levels used:    1
 16719 ;; This function calls:
 16720 ;;		Nothing
 16721 ;; This function is called by:
 16722 ;;		i1_wr1RegCompleteHandler
 16723 ;;		i1_rd1RegCompleteHandler
 16724 ;;		i1_rd2RegCompleteHandler
 16725 ;;		i1_wr2RegCompleteHandler
 16726 ;;		i1_rdBlkRegCompleteHandler
 16727 ;; This function uses a non-reentrant model
 16728 ;;
 16729                           
 16730                           
 16731                           ;psect for function i1_i2c_setBuffer
 16732  1654                     i1_i2c_setBuffer:	
 16733                           
 16734                           ;incstack = 0
 16735                           ; Regs used in i1_i2c_setBuffer: [wreg]
 16736                           ;i1i2c_setBuffer@buffer stored from wreg
 16737  1654  00F3               	movwf	i1i2c_setBuffer@buffer
 16738  1655                     i1l4725:	
 16739                           
 16740                           ;mcc_generated_files/drivers/i2c_master.c: 184: void i2c_setBuffer(void *buffer, size_t 
      +                          bufferSize);mcc_generated_files/drivers/i2c_master.c: 185: {;mcc_generated_files/drivers
      +                          /i2c_master.c: 186:     if(i2c_status.bufferFree)
 16741  1655  0021               	movlb	1	; select bank1
 16742  1656  1D20               	btfss	_i2c_status^(0+128),2
 16743  1657  2E59               	goto	u292_21
 16744  1658  2E5A               	goto	u292_20
 16745  1659                     u292_21:	
 16746  1659  2E63               	goto	i1l91
 16747  165A                     u292_20:	
 16748  165A                     i1l4727:	
 16749                           
 16750                           ;mcc_generated_files/drivers/i2c_master.c: 187:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 188:         i2c_status.data_ptr = buffer;
 16751  165A  0873               	movf	i1i2c_setBuffer@buffer,w
 16752  165B  00F2               	movwf	??i1_i2c_setBuffer
 16753  165C  0872               	movf	??i1_i2c_setBuffer,w
 16754  165D  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 16755                           
 16756                           ;mcc_generated_files/drivers/i2c_master.c: 189:         i2c_status.data_length = bufferS
      +                          ize;
 16757  165E  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 16758  165F  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
 16759  1660  0870               	movf	i1i2c_setBuffer@bufferSize,w
 16760  1661  00A3               	movwf	(_i2c_status^(0+128)+3)
 16761  1662                     i1l4729:	
 16762                           
 16763                           ;mcc_generated_files/drivers/i2c_master.c: 190:         i2c_status.bufferFree = 0;
 16764  1662  1120               	bcf	_i2c_status^(0+128),2
 16765  1663                     i1l91:	
 16766  1663  0008               	return
 16767  1664                     __end_ofi1_i2c_setBuffer:	
 16768                           
 16769                           	psect	text127
 16770  1450                     __ptext127:	
 16771 ;; *************** function i1_i2c_driver_stop *****************
 16772 ;; Defined at:
 16773 ;;		line 157 in file "mcc_generated_files/i2c_driver.c"
 16774 ;; Parameters:    Size  Location     Type
 16775 ;;		None
 16776 ;; Auto vars:     Size  Location     Type
 16777 ;;		None
 16778 ;; Return value:  Size  Location     Type
 16779 ;;                  1    wreg      void 
 16780 ;; Registers used:
 16781 ;;		None
 16782 ;; Tracked objects:
 16783 ;;		On entry : 0/0
 16784 ;;		On exit  : 0/0
 16785 ;;		Unchanged: 0/0
 16786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16791 ;;Total ram usage:        0 bytes
 16792 ;; Hardware stack levels used:    1
 16793 ;; This function calls:
 16794 ;;		Nothing
 16795 ;; This function is called by:
 16796 ;;		i1_do_I2C_SEND_STOP
 16797 ;; This function uses a non-reentrant model
 16798 ;;
 16799                           
 16800                           
 16801                           ;psect for function i1_i2c_driver_stop
 16802  1450                     i1_i2c_driver_stop:	
 16803  1450                     i1l4733:	
 16804                           ;incstack = 0
 16805                           ; Regs used in i1_i2c_driver_stop: []
 16806                           
 16807                           
 16808                           ;mcc_generated_files/i2c_driver.c: 159:     SSPCON2bits.PEN = 1;
 16809  1450  0024               	movlb	4	; select bank4
 16810  1451  1516               	bsf	22,2	;volatile
 16811  1452                     i1l634:	
 16812  1452  0008               	return
 16813  1453                     __end_ofi1_i2c_driver_stop:	
 16814                           
 16815                           	psect	text128
 16816  144D                     __ptext128:	
 16817 ;; *************** function i1_i2c_driver_restart *****************
 16818 ;; Defined at:
 16819 ;;		line 152 in file "mcc_generated_files/i2c_driver.c"
 16820 ;; Parameters:    Size  Location     Type
 16821 ;;		None
 16822 ;; Auto vars:     Size  Location     Type
 16823 ;;		None
 16824 ;; Return value:  Size  Location     Type
 16825 ;;                  1    wreg      void 
 16826 ;; Registers used:
 16827 ;;		None
 16828 ;; Tracked objects:
 16829 ;;		On entry : 0/0
 16830 ;;		On exit  : 0/0
 16831 ;;		Unchanged: 0/0
 16832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;Total ram usage:        0 bytes
 16838 ;; Hardware stack levels used:    1
 16839 ;; This function calls:
 16840 ;;		Nothing
 16841 ;; This function is called by:
 16842 ;;		i1_do_I2C_SEND_RESTART_READ
 16843 ;;		i1_do_I2C_SEND_RESTART_WRITE
 16844 ;;		i1_do_I2C_SEND_RESTART
 16845 ;; This function uses a non-reentrant model
 16846 ;;
 16847                           
 16848                           
 16849                           ;psect for function i1_i2c_driver_restart
 16850  144D                     i1_i2c_driver_restart:	
 16851  144D                     i1l4731:	
 16852                           ;incstack = 0
 16853                           ; Regs used in i1_i2c_driver_restart: []
 16854                           
 16855                           
 16856                           ;mcc_generated_files/i2c_driver.c: 154:     SSPCON2bits.RSEN = 1;
 16857  144D  0024               	movlb	4	; select bank4
 16858  144E  1496               	bsf	22,1	;volatile
 16859  144F                     i1l631:	
 16860  144F  0008               	return
 16861  1450                     __end_ofi1_i2c_driver_restart:	
 16862                           
 16863                           	psect	text129
 16864  147B                     __ptext129:	
 16865 ;; *************** function i1_i2c_driver_sendACK *****************
 16866 ;; Defined at:
 16867 ;;		line 197 in file "mcc_generated_files/i2c_driver.c"
 16868 ;; Parameters:    Size  Location     Type
 16869 ;;		None
 16870 ;; Auto vars:     Size  Location     Type
 16871 ;;		None
 16872 ;; Return value:  Size  Location     Type
 16873 ;;                  1    wreg      void 
 16874 ;; Registers used:
 16875 ;;		None
 16876 ;; Tracked objects:
 16877 ;;		On entry : 0/0
 16878 ;;		On exit  : 0/0
 16879 ;;		Unchanged: 0/0
 16880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;Total ram usage:        0 bytes
 16886 ;; Hardware stack levels used:    1
 16887 ;; This function calls:
 16888 ;;		Nothing
 16889 ;; This function is called by:
 16890 ;;		i1_do_I2C_DO_ACK
 16891 ;;		i1_do_I2C_RX
 16892 ;; This function uses a non-reentrant model
 16893 ;;
 16894                           
 16895                           
 16896                           ;psect for function i1_i2c_driver_sendACK
 16897  147B                     i1_i2c_driver_sendACK:	
 16898  147B                     i1l4951:	
 16899                           ;incstack = 0
 16900                           ; Regs used in i1_i2c_driver_sendACK: []
 16901                           
 16902                           
 16903                           ;mcc_generated_files/i2c_driver.c: 199:     SSPCON2bits.ACKDT = 0;
 16904  147B  0024               	movlb	4	; select bank4
 16905  147C  1296               	bcf	22,5	;volatile
 16906                           
 16907                           ;mcc_generated_files/i2c_driver.c: 200:     SSPCON2bits.ACKEN = 1;
 16908  147D  1616               	bsf	22,4	;volatile
 16909  147E                     i1l658:	
 16910  147E  0008               	return
 16911  147F                     __end_ofi1_i2c_driver_sendACK:	
 16912                           
 16913                           	psect	text130
 16914  1477                     __ptext130:	
 16915 ;; *************** function _i2c_busCollisionISR *****************
 16916 ;; Defined at:
 16917 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 16918 ;; Parameters:    Size  Location     Type
 16919 ;;		None
 16920 ;; Auto vars:     Size  Location     Type
 16921 ;;		None
 16922 ;; Return value:  Size  Location     Type
 16923 ;;                  1    wreg      void 
 16924 ;; Registers used:
 16925 ;;		status,2, status,0, pclath, cstack
 16926 ;; Tracked objects:
 16927 ;;		On entry : 0/0
 16928 ;;		On exit  : 0/0
 16929 ;;		Unchanged: 0/0
 16930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;Total ram usage:        0 bytes
 16936 ;; Hardware stack levels used:    1
 16937 ;; Hardware stack levels required when called:    1
 16938 ;; This function calls:
 16939 ;;		_i2c_driver_clearBusCollision
 16940 ;; This function is called by:
 16941 ;;		_i2c_open
 16942 ;;		_INTERRUPT_InterruptManager
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           
 16947                           ;psect for function _i2c_busCollisionISR
 16948  1477                     _i2c_busCollisionISR:	
 16949  1477                     i1l5279:	
 16950                           ;incstack = 0
 16951                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 16952                           
 16953                           
 16954                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c_driver_clearBusCollision();
 16955  1477  3194  244A  3194   	fcall	_i2c_driver_clearBusCollision
 16956  147A                     i1l201:	
 16957  147A  0008               	return
 16958  147B                     __end_of_i2c_busCollisionISR:	
 16959                           
 16960                           	psect	text131
 16961  144A                     __ptext131:	
 16962 ;; *************** function _i2c_driver_clearBusCollision *****************
 16963 ;; Defined at:
 16964 ;;		line 254 in file "mcc_generated_files/i2c_driver.c"
 16965 ;; Parameters:    Size  Location     Type
 16966 ;;		None
 16967 ;; Auto vars:     Size  Location     Type
 16968 ;;		None
 16969 ;; Return value:  Size  Location     Type
 16970 ;;                  1    wreg      void 
 16971 ;; Registers used:
 16972 ;;		None
 16973 ;; Tracked objects:
 16974 ;;		On entry : 0/0
 16975 ;;		On exit  : 0/0
 16976 ;;		Unchanged: 0/0
 16977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;Total ram usage:        0 bytes
 16983 ;; Hardware stack levels used:    1
 16984 ;; This function calls:
 16985 ;;		Nothing
 16986 ;; This function is called by:
 16987 ;;		_i2c_busCollisionISR
 16988 ;; This function uses a non-reentrant model
 16989 ;;
 16990                           
 16991                           
 16992                           ;psect for function _i2c_driver_clearBusCollision
 16993  144A                     _i2c_driver_clearBusCollision:	
 16994  144A                     i1l4953:	
 16995                           ;incstack = 0
 16996                           ; Regs used in _i2c_driver_clearBusCollision: []
 16997                           
 16998                           
 16999                           ;mcc_generated_files/i2c_driver.c: 256:     PIR2bits.BCLIF = 0;
 17000  144A  0020               	movlb	0	; select bank0
 17001  144B  1192               	bcf	18,3	;volatile
 17002  144C                     i1l695:	
 17003  144C  0008               	return
 17004  144D                     __end_of_i2c_driver_clearBusCollision:	
 17005                           
 17006                           	psect	text132
 17007  14FC                     __ptext132:	
 17008 ;; *************** function _TMR0_ISR *****************
 17009 ;; Defined at:
 17010 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 17011 ;; Parameters:    Size  Location     Type
 17012 ;;		None
 17013 ;; Auto vars:     Size  Location     Type
 17014 ;;		None
 17015 ;; Return value:  Size  Location     Type
 17016 ;;                  1    wreg      void 
 17017 ;; Registers used:
 17018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17019 ;; Tracked objects:
 17020 ;;		On entry : 0/0
 17021 ;;		On exit  : 0/0
 17022 ;;		Unchanged: 0/0
 17023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;Total ram usage:        0 bytes
 17029 ;; Hardware stack levels used:    1
 17030 ;; Hardware stack levels required when called:    2
 17031 ;; This function calls:
 17032 ;;		_TMR0_CallBack
 17033 ;; This function is called by:
 17034 ;;		_INTERRUPT_InterruptManager
 17035 ;; This function uses a non-reentrant model
 17036 ;;
 17037                           
 17038                           
 17039                           ;psect for function _TMR0_ISR
 17040  14FC                     _TMR0_ISR:	
 17041  14FC                     i1l5315:	
 17042                           ;incstack = 0
 17043                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17044                           
 17045                           
 17046                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 17047  14FC  110B               	bcf	11,2	;volatile
 17048  14FD                     i1l5317:	
 17049                           
 17050                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 17051  14FD  087D               	movf	_timer0ReloadVal,w	;volatile
 17052  14FE  0020               	movlb	0	; select bank0
 17053  14FF  0095               	movwf	21	;volatile
 17054  1500                     i1l5319:	
 17055                           
 17056                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
 17057  1500  3195  25B8  3194   	fcall	_TMR0_CallBack
 17058  1503                     i1l544:	
 17059  1503  0008               	return
 17060  1504                     __end_of_TMR0_ISR:	
 17061                           
 17062                           	psect	text133
 17063  15B8                     __ptext133:	
 17064 ;; *************** function _TMR0_CallBack *****************
 17065 ;; Defined at:
 17066 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 17067 ;; Parameters:    Size  Location     Type
 17068 ;;		None
 17069 ;; Auto vars:     Size  Location     Type
 17070 ;;		None
 17071 ;; Return value:  Size  Location     Type
 17072 ;;                  1    wreg      void 
 17073 ;; Registers used:
 17074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17075 ;; Tracked objects:
 17076 ;;		On entry : 0/0
 17077 ;;		On exit  : 0/0
 17078 ;;		Unchanged: 0/0
 17079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17084 ;;Total ram usage:        0 bytes
 17085 ;; Hardware stack levels used:    1
 17086 ;; Hardware stack levels required when called:    1
 17087 ;; This function calls:
 17088 ;;		Absolute function
 17089 ;;		_TMR0_DefaultInterruptHandler
 17090 ;;		_displayRefreshISR
 17091 ;; This function is called by:
 17092 ;;		_TMR0_ISR
 17093 ;; This function uses a non-reentrant model
 17094 ;;
 17095                           
 17096                           
 17097                           ;psect for function _TMR0_CallBack
 17098  15B8                     _TMR0_CallBack:	
 17099  15B8                     i1l5059:	
 17100                           ;incstack = 0
 17101                           ; Regs used in _TMR0_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17102                           
 17103                           
 17104                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
 17105  15B8  0879               	movf	_TMR0_InterruptHandler,w
 17106  15B9  047A               	iorwf	_TMR0_InterruptHandler+1,w
 17107  15BA  1903               	btfsc	3,2
 17108  15BB  2DBD               	goto	u317_21
 17109  15BC  2DBE               	goto	u317_20
 17110  15BD                     u317_21:	
 17111  15BD  2DC3               	goto	i1l548
 17112  15BE                     u317_20:	
 17113  15BE                     i1l5061:	
 17114                           
 17115                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
 17116  15BE  087A               	movf	_TMR0_InterruptHandler+1,w
 17117  15BF  008A               	movwf	10
 17118  15C0  0879               	movf	_TMR0_InterruptHandler,w
 17119  15C1  000A               	callw
 17120  15C2  3195               	pagesel	$
 17121  15C3                     i1l548:	
 17122  15C3  0008               	return
 17123  15C4                     __end_of_TMR0_CallBack:	
 17124                           
 17125                           	psect	text134
 17126  1443                     __ptext134:	
 17127 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17128 ;; Defined at:
 17129 ;;		line 137 in file "mcc_generated_files/tmr0.c"
 17130 ;; Parameters:    Size  Location     Type
 17131 ;;		None
 17132 ;; Auto vars:     Size  Location     Type
 17133 ;;		None
 17134 ;; Return value:  Size  Location     Type
 17135 ;;                  1    wreg      void 
 17136 ;; Registers used:
 17137 ;;		None
 17138 ;; Tracked objects:
 17139 ;;		On entry : 0/0
 17140 ;;		On exit  : 0/0
 17141 ;;		Unchanged: 0/0
 17142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;Total ram usage:        0 bytes
 17148 ;; Hardware stack levels used:    1
 17149 ;; This function calls:
 17150 ;;		Nothing
 17151 ;; This function is called by:
 17152 ;;		_TMR0_Initialize
 17153 ;;		_TMR0_CallBack
 17154 ;; This function uses a non-reentrant model
 17155 ;;
 17156                           
 17157                           
 17158                           ;psect for function _TMR0_DefaultInterruptHandler
 17159  1443                     _TMR0_DefaultInterruptHandler:	
 17160  1443                     i1l554:	
 17161                           ;incstack = 0
 17162                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 17163                           
 17164  1443  0008               	return
 17165  1444                     __end_of_TMR0_DefaultInterruptHandler:	
 17166                           
 17167                           	psect	text135
 17168  005F                     __ptext135:	
 17169 ;; *************** function _displayRefreshISR *****************
 17170 ;; Defined at:
 17171 ;;		line 896 in file "main.c"
 17172 ;; Parameters:    Size  Location     Type
 17173 ;;		None
 17174 ;; Auto vars:     Size  Location     Type
 17175 ;;		None
 17176 ;; Return value:  Size  Location     Type
 17177 ;;                  1    wreg      void 
 17178 ;; Registers used:
 17179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 17180 ;; Tracked objects:
 17181 ;;		On entry : 0/0
 17182 ;;		On exit  : 0/0
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;Total ram usage:        2 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; This function calls:
 17192 ;;		Nothing
 17193 ;; This function is called by:
 17194 ;;		_main
 17195 ;;		_TMR0_CallBack
 17196 ;; This function uses a non-reentrant model
 17197 ;;
 17198                           
 17199                           
 17200                           ;psect for function _displayRefreshISR
 17201  005F                     _displayRefreshISR:	
 17202  005F                     i1l4821:	
 17203                           ;incstack = 0
 17204                           ; Regs used in _displayRefreshISR: [wreg-fsr1h+status,2+status,0]
 17205                           
 17206                           
 17207                           ;main.c: 897:     static uint8_t i;;main.c: 898:     i &= 0x03;
 17208  005F  3003               	movlw	3
 17209  0060  00F0               	movwf	??_displayRefreshISR
 17210  0061  0870               	movf	??_displayRefreshISR,w
 17211  0062  05FB               	andwf	displayRefreshISR@i,f
 17212  0063                     i1l4823:	
 17213                           
 17214                           ;main.c: 899:     LATD = displayBuff[i];
 17215  0063  087B               	movf	displayRefreshISR@i,w
 17216  0064  3E28               	addlw	(low (_displayBuff| 0))& (0+255)
 17217  0065  0086               	movwf	6
 17218  0066  0187               	clrf	7
 17219  0067  0801               	movf	1,w
 17220  0068  0022               	movlb	2	; select bank2
 17221  0069  008F               	movwf	15	;volatile
 17222                           
 17223                           ;main.c: 900:     switch(i){
 17224  006A  2877               	goto	i1l4827
 17225  006B                     i1l1255:	
 17226                           ;main.c: 902:             do { LATAbits.LATA3 = 0; } while(0);
 17227                           
 17228  006B  118C               	bcf	12,3	;volatile
 17229  006C                     i1l1257:	
 17230                           ;main.c: 903:             do { LATEbits.LATE1 = 1; } while(0);
 17231                           
 17232  006C  1490               	bsf	16,1	;volatile
 17233  006D  288D               	goto	i1l4829
 17234  006E                     i1l1261:	
 17235                           ;main.c: 906:             do { LATEbits.LATE1 = 0; } while(0);
 17236                           
 17237  006E  1090               	bcf	16,1	;volatile
 17238  006F                     i1l1263:	
 17239                           ;main.c: 907:             do { LATCbits.LATC1 = 1; } while(0);
 17240                           
 17241  006F  148E               	bsf	14,1	;volatile
 17242  0070  288D               	goto	i1l4829
 17243  0071                     i1l1266:	
 17244                           ;main.c: 910:             do { LATCbits.LATC1 = 0; } while(0);
 17245                           
 17246  0071  108E               	bcf	14,1	;volatile
 17247  0072                     i1l1268:	
 17248                           ;main.c: 911:             do { LATAbits.LATA4 = 1; } while(0);
 17249                           
 17250  0072  160C               	bsf	12,4	;volatile
 17251  0073  288D               	goto	i1l4829
 17252  0074                     i1l1271:	
 17253                           ;main.c: 914:             do { LATAbits.LATA4 = 0; } while(0);
 17254                           
 17255  0074  120C               	bcf	12,4	;volatile
 17256  0075                     i1l1273:	
 17257                           ;main.c: 915:             do { LATAbits.LATA3 = 1; } while(0);
 17258                           
 17259  0075  158C               	bsf	12,3	;volatile
 17260  0076  288D               	goto	i1l4829
 17261  0077                     i1l4827:	
 17262  0077  087B               	movf	displayRefreshISR@i,w
 17263  0078  00F0               	movwf	??_displayRefreshISR
 17264  0079  01F1               	clrf	??_displayRefreshISR+1
 17265                           
 17266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17267                           ; Switch size 1, requested type "simple"
 17268                           ; Number of cases is 1, Range of values is 0 to 0
 17269                           ; switch strategies available:
 17270                           ; Name         Instructions Cycles
 17271                           ; simple_byte            4     3 (average)
 17272                           ; direct_byte            8     6 (fixed)
 17273                           ; jumptable            260     6 (fixed)
 17274                           ;	Chosen strategy is simple_byte
 17275  007A  0871               	movf	??_displayRefreshISR+1,w
 17276  007B  3A00               	xorlw	0	; case 0
 17277  007C  1903               	skipnz
 17278  007D  287F               	goto	i1l8709
 17279  007E  288D               	goto	i1l4829
 17280  007F                     i1l8709:	
 17281                           
 17282                           ; Switch size 1, requested type "simple"
 17283                           ; Number of cases is 4, Range of values is 0 to 3
 17284                           ; switch strategies available:
 17285                           ; Name         Instructions Cycles
 17286                           ; simple_byte           13     7 (average)
 17287                           ; direct_byte           14     6 (fixed)
 17288                           ; jumptable            260     6 (fixed)
 17289                           ;	Chosen strategy is simple_byte
 17290  007F  0870               	movf	??_displayRefreshISR,w
 17291  0080  3A00               	xorlw	0	; case 0
 17292  0081  1903               	skipnz
 17293  0082  286B               	goto	i1l1255
 17294  0083  3A01               	xorlw	1	; case 1
 17295  0084  1903               	skipnz
 17296  0085  286E               	goto	i1l1261
 17297  0086  3A03               	xorlw	3	; case 2
 17298  0087  1903               	skipnz
 17299  0088  2871               	goto	i1l1266
 17300  0089  3A01               	xorlw	1	; case 3
 17301  008A  1903               	skipnz
 17302  008B  2874               	goto	i1l1271
 17303  008C  288D               	goto	i1l4829
 17304  008D                     i1l4829:	
 17305                           
 17306                           ;main.c: 919:     i++;
 17307  008D  3001               	movlw	1
 17308  008E  00F0               	movwf	??_displayRefreshISR
 17309  008F  0870               	movf	??_displayRefreshISR,w
 17310  0090  07FB               	addwf	displayRefreshISR@i,f
 17311                           
 17312                           ;main.c: 922:     if(flag_button_press_count[0] != 0){
 17313  0091  0020               	movlb	0	; select bank0
 17314  0092  0824               	movf	_flag_button_press_count,w
 17315  0093  1903               	btfsc	3,2
 17316  0094  2896               	goto	u303_21
 17317  0095  2897               	goto	u303_20
 17318  0096                     u303_21:	
 17319  0096  28A1               	goto	i1l1275
 17320  0097                     u303_20:	
 17321  0097                     i1l4831:	
 17322                           
 17323                           ;main.c: 923:   if(button_press_count[0] < 200) button_press_count[0]++;
 17324  0097  30C8               	movlw	200
 17325  0098  0220               	subwf	_button_press_count,w
 17326  0099  1803               	skipnc
 17327  009A  289C               	goto	u304_21
 17328  009B  289D               	goto	u304_20
 17329  009C                     u304_21:	
 17330  009C  28A1               	goto	i1l1275
 17331  009D                     u304_20:	
 17332  009D                     i1l4833:	
 17333  009D  3001               	movlw	1
 17334  009E  00F0               	movwf	??_displayRefreshISR
 17335  009F  0870               	movf	??_displayRefreshISR,w
 17336  00A0  07A0               	addwf	_button_press_count,f
 17337  00A1                     i1l1275:	
 17338                           ;main.c: 924:  }
 17339                           
 17340                           
 17341                           ;main.c: 925:     if(flag_button_press_count[1] != 0){
 17342  00A1  0825               	movf	_flag_button_press_count+1,w
 17343  00A2  1903               	btfsc	3,2
 17344  00A3  28A5               	goto	u305_21
 17345  00A4  28A6               	goto	u305_20
 17346  00A5                     u305_21:	
 17347  00A5  28B0               	goto	i1l1277
 17348  00A6                     u305_20:	
 17349  00A6                     i1l4835:	
 17350                           
 17351                           ;main.c: 926:   if(button_press_count[1] < 200) button_press_count[1]++;
 17352  00A6  30C8               	movlw	200
 17353  00A7  0221               	subwf	_button_press_count+1,w
 17354  00A8  1803               	skipnc
 17355  00A9  28AB               	goto	u306_21
 17356  00AA  28AC               	goto	u306_20
 17357  00AB                     u306_21:	
 17358  00AB  28B0               	goto	i1l1277
 17359  00AC                     u306_20:	
 17360  00AC                     i1l4837:	
 17361  00AC  3001               	movlw	1
 17362  00AD  00F0               	movwf	??_displayRefreshISR
 17363  00AE  0870               	movf	??_displayRefreshISR,w
 17364  00AF  07A1               	addwf	_button_press_count+1,f
 17365  00B0                     i1l1277:	
 17366                           ;main.c: 927:  }
 17367                           
 17368                           
 17369                           ;main.c: 928:     if(flag_button_press_count[2] != 0){
 17370  00B0  0826               	movf	_flag_button_press_count+2,w
 17371  00B1  1903               	btfsc	3,2
 17372  00B2  28B4               	goto	u307_21
 17373  00B3  28B5               	goto	u307_20
 17374  00B4                     u307_21:	
 17375  00B4  28BF               	goto	i1l1279
 17376  00B5                     u307_20:	
 17377  00B5                     i1l4839:	
 17378                           
 17379                           ;main.c: 929:   if(button_press_count[2] < 200) button_press_count[2]++;
 17380  00B5  30C8               	movlw	200
 17381  00B6  0222               	subwf	_button_press_count+2,w
 17382  00B7  1803               	skipnc
 17383  00B8  28BA               	goto	u308_21
 17384  00B9  28BB               	goto	u308_20
 17385  00BA                     u308_21:	
 17386  00BA  28BF               	goto	i1l1279
 17387  00BB                     u308_20:	
 17388  00BB                     i1l4841:	
 17389  00BB  3001               	movlw	1
 17390  00BC  00F0               	movwf	??_displayRefreshISR
 17391  00BD  0870               	movf	??_displayRefreshISR,w
 17392  00BE  07A2               	addwf	_button_press_count+2,f
 17393  00BF                     i1l1279:	
 17394                           ;main.c: 930:  }
 17395                           
 17396                           
 17397                           ;main.c: 931:     if(flag_button_press_count[3] != 0){
 17398  00BF  0827               	movf	_flag_button_press_count+3,w
 17399  00C0  1903               	btfsc	3,2
 17400  00C1  28C3               	goto	u309_21
 17401  00C2  28C4               	goto	u309_20
 17402  00C3                     u309_21:	
 17403  00C3  28CE               	goto	i1l1283
 17404  00C4                     u309_20:	
 17405  00C4                     i1l4843:	
 17406                           
 17407                           ;main.c: 932:   if(button_press_count[3] < 200) button_press_count[3]++;
 17408  00C4  30C8               	movlw	200
 17409  00C5  0223               	subwf	_button_press_count+3,w
 17410  00C6  1803               	skipnc
 17411  00C7  28C9               	goto	u310_21
 17412  00C8  28CA               	goto	u310_20
 17413  00C9                     u310_21:	
 17414  00C9  28CE               	goto	i1l1283
 17415  00CA                     u310_20:	
 17416  00CA                     i1l4845:	
 17417  00CA  3001               	movlw	1
 17418  00CB  00F0               	movwf	??_displayRefreshISR
 17419  00CC  0870               	movf	??_displayRefreshISR,w
 17420  00CD  07A3               	addwf	_button_press_count+3,f
 17421  00CE                     i1l1283:	
 17422  00CE  0008               	return
 17423  00CF                     __end_of_displayRefreshISR:	
 17424                           
 17425                           	psect	text136
 17426  151C                     __ptext136:	
 17427 ;; *************** function _PIN_MANAGER_IOC *****************
 17428 ;; Defined at:
 17429 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 17430 ;; Parameters:    Size  Location     Type
 17431 ;;		None
 17432 ;; Auto vars:     Size  Location     Type
 17433 ;;		None
 17434 ;; Return value:  Size  Location     Type
 17435 ;;                  1    wreg      void 
 17436 ;; Registers used:
 17437 ;;		wreg, status,2, status,0, pclath, cstack
 17438 ;; Tracked objects:
 17439 ;;		On entry : 0/0
 17440 ;;		On exit  : 0/0
 17441 ;;		Unchanged: 0/0
 17442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17447 ;;Total ram usage:        0 bytes
 17448 ;; Hardware stack levels used:    1
 17449 ;; Hardware stack levels required when called:    2
 17450 ;; This function calls:
 17451 ;;		_IOCBF4_ISR
 17452 ;; This function is called by:
 17453 ;;		_INTERRUPT_InterruptManager
 17454 ;; This function uses a non-reentrant model
 17455 ;;
 17456                           
 17457                           
 17458                           ;psect for function _PIN_MANAGER_IOC
 17459  151C                     _PIN_MANAGER_IOC:	
 17460  151C                     i1l5321:	
 17461                           ;incstack = 0
 17462                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 17463                           
 17464                           
 17465                           ;mcc_generated_files/pin_manager.c: 121:     if(IOCBFbits.IOCBF4 == 1)
 17466  151C  0027               	movlb	7	; select bank7
 17467  151D  1E16               	btfss	22,4	;volatile
 17468  151E  2D20               	goto	u335_21
 17469  151F  2D21               	goto	u335_20
 17470  1520                     u335_21:	
 17471  1520  2D24               	goto	i1l503
 17472  1521                     u335_20:	
 17473  1521                     i1l5323:	
 17474                           
 17475                           ;mcc_generated_files/pin_manager.c: 122:     {;mcc_generated_files/pin_manager.c: 123:  
      +                                 IOCBF4_ISR();
 17476  1521  3196  2645  3195   	fcall	_IOCBF4_ISR
 17477  1524                     i1l503:	
 17478  1524  0008               	return
 17479  1525                     __end_of_PIN_MANAGER_IOC:	
 17480                           
 17481                           	psect	text137
 17482  1645                     __ptext137:	
 17483 ;; *************** function _IOCBF4_ISR *****************
 17484 ;; Defined at:
 17485 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
 17486 ;; Parameters:    Size  Location     Type
 17487 ;;		None
 17488 ;; Auto vars:     Size  Location     Type
 17489 ;;		None
 17490 ;; Return value:  Size  Location     Type
 17491 ;;                  1    wreg      void 
 17492 ;; Registers used:
 17493 ;;		wreg, status,2, status,0, pclath, cstack
 17494 ;; Tracked objects:
 17495 ;;		On entry : 0/0
 17496 ;;		On exit  : 0/0
 17497 ;;		Unchanged: 0/0
 17498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;Total ram usage:        0 bytes
 17504 ;; Hardware stack levels used:    1
 17505 ;; Hardware stack levels required when called:    1
 17506 ;; This function calls:
 17507 ;;		Absolute function
 17508 ;;		_IOCBF4_DefaultInterruptHandler
 17509 ;;		_secondISR
 17510 ;; This function is called by:
 17511 ;;		_PIN_MANAGER_IOC
 17512 ;; This function uses a non-reentrant model
 17513 ;;
 17514                           
 17515                           
 17516                           ;psect for function _IOCBF4_ISR
 17517  1645                     _IOCBF4_ISR:	
 17518  1645                     i1l5053:	
 17519                           ;incstack = 0
 17520                           ; Regs used in _IOCBF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 17521                           
 17522                           
 17523                           ;mcc_generated_files/pin_manager.c: 135:     if(IOCBF4_InterruptHandler)
 17524  1645  0021               	movlb	1	; select bank1
 17525  1646  0857               	movf	_IOCBF4_InterruptHandler^(0+128),w
 17526  1647  0458               	iorwf	(_IOCBF4_InterruptHandler+1)^(0+128),w
 17527  1648  1903               	btfsc	3,2
 17528  1649  2E4B               	goto	u316_21
 17529  164A  2E4C               	goto	u316_20
 17530  164B                     u316_21:	
 17531  164B  2E51               	goto	i1l5057
 17532  164C                     u316_20:	
 17533  164C                     i1l5055:	
 17534                           
 17535                           ;mcc_generated_files/pin_manager.c: 136:     {;mcc_generated_files/pin_manager.c: 137:  
      +                                 IOCBF4_InterruptHandler();
 17536  164C  0858               	movf	(_IOCBF4_InterruptHandler+1)^(0+128),w
 17537  164D  008A               	movwf	10
 17538  164E  0857               	movf	_IOCBF4_InterruptHandler^(0+128),w
 17539  164F  000A               	callw
 17540  1650  3196               	pagesel	$
 17541  1651                     i1l5057:	
 17542                           
 17543                           ;mcc_generated_files/pin_manager.c: 139:     IOCBFbits.IOCBF4 = 0;
 17544  1651  0027               	movlb	7	; select bank7
 17545  1652  1216               	bcf	22,4	;volatile
 17546  1653                     i1l507:	
 17547  1653  0008               	return
 17548  1654                     __end_of_IOCBF4_ISR:	
 17549                           
 17550                           	psect	text138
 17551  1442                     __ptext138:	
 17552 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 17553 ;; Defined at:
 17554 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 17555 ;; Parameters:    Size  Location     Type
 17556 ;;		None
 17557 ;; Auto vars:     Size  Location     Type
 17558 ;;		None
 17559 ;; Return value:  Size  Location     Type
 17560 ;;                  1    wreg      void 
 17561 ;; Registers used:
 17562 ;;		None
 17563 ;; Tracked objects:
 17564 ;;		On entry : 0/0
 17565 ;;		On exit  : 0/0
 17566 ;;		Unchanged: 0/0
 17567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;Total ram usage:        0 bytes
 17573 ;; Hardware stack levels used:    1
 17574 ;; This function calls:
 17575 ;;		Nothing
 17576 ;; This function is called by:
 17577 ;;		_PIN_MANAGER_Initialize
 17578 ;;		_IOCBF4_ISR
 17579 ;; This function uses a non-reentrant model
 17580 ;;
 17581                           
 17582                           
 17583                           ;psect for function _IOCBF4_DefaultInterruptHandler
 17584  1442                     _IOCBF4_DefaultInterruptHandler:	
 17585  1442                     i1l513:	
 17586                           ;incstack = 0
 17587                           ; Regs used in _IOCBF4_DefaultInterruptHandler: []
 17588                           
 17589  1442  0008               	return
 17590  1443                     __end_of_IOCBF4_DefaultInterruptHandler:	
 17591                           
 17592                           	psect	text139
 17593  03E5                     __ptext139:	
 17594 ;; *************** function _secondISR *****************
 17595 ;; Defined at:
 17596 ;;		line 873 in file "main.c"
 17597 ;; Parameters:    Size  Location     Type
 17598 ;;		None
 17599 ;; Auto vars:     Size  Location     Type
 17600 ;;		None
 17601 ;; Return value:  Size  Location     Type
 17602 ;;                  1    wreg      void 
 17603 ;; Registers used:
 17604 ;;		wreg, status,2, status,0
 17605 ;; Tracked objects:
 17606 ;;		On entry : 0/0
 17607 ;;		On exit  : 0/0
 17608 ;;		Unchanged: 0/0
 17609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17614 ;;Total ram usage:        0 bytes
 17615 ;; Hardware stack levels used:    1
 17616 ;; This function calls:
 17617 ;;		Nothing
 17618 ;; This function is called by:
 17619 ;;		_main
 17620 ;;		_IOCBF4_ISR
 17621 ;; This function uses a non-reentrant model
 17622 ;;
 17623                           
 17624                           
 17625                           ;psect for function _secondISR
 17626  03E5                     _secondISR:	
 17627  03E5                     i1l4801:	
 17628                           ;incstack = 0
 17629                           ; Regs used in _secondISR: [wreg+status,2+status,0]
 17630                           
 17631                           
 17632                           ;main.c: 875:     if(mode == MODE_NORMAL){
 17633  03E5  0020               	movlb	0	; select bank0
 17634  03E6  083F               	movf	_mode,w	;volatile
 17635  03E7  1D03               	btfss	3,2
 17636  03E8  2BEA               	goto	u295_21
 17637  03E9  2BEB               	goto	u295_20
 17638  03EA                     u295_21:	
 17639  03EA  2BF8               	goto	i1l4805
 17640  03EB                     u295_20:	
 17641  03EB                     i1l4803:	
 17642  03EB  1003               	clrc
 17643  03EC  0022               	movlb	2	; select bank2
 17644  03ED  1F8C               	btfss	12,7	;volatile
 17645  03EE  1403               	setc
 17646  03EF  1803               	btfsc	3,0
 17647  03F0  2BF2               	goto	u296_21
 17648  03F1  2BF5               	goto	u296_20
 17649  03F2                     u296_21:	
 17650  03F2  0022               	movlb	2	; select bank2
 17651  03F3  178C               	bsf	12,7	;volatile
 17652  03F4  2BF7               	goto	u297_24
 17653  03F5                     u296_20:	
 17654  03F5  0022               	movlb	2	; select bank2
 17655  03F6  138C               	bcf	12,7	;volatile
 17656  03F7                     u297_24:	
 17657  03F7  2C01               	goto	i1l1241
 17658  03F8                     i1l4805:	
 17659                           
 17660                           ;main.c: 878:         if(flag_dot_blink) flag_dot_blink = 0;
 17661  03F8  0840               	movf	_flag_dot_blink,w
 17662  03F9  1903               	btfsc	3,2
 17663  03FA  2BFC               	goto	u298_21
 17664  03FB  2BFD               	goto	u298_20
 17665  03FC                     u298_21:	
 17666  03FC  2BFF               	goto	i1l1242
 17667  03FD                     u298_20:	
 17668  03FD                     i1l4807:	
 17669  03FD  01C0               	clrf	_flag_dot_blink
 17670  03FE  2C01               	goto	i1l1241
 17671  03FF                     i1l1242:	
 17672                           ;main.c: 879:         else flag_dot_blink = 1;
 17673                           
 17674  03FF  01C0               	clrf	_flag_dot_blink
 17675  0400  0AC0               	incf	_flag_dot_blink,f
 17676  0401                     i1l1241:	
 17677                           ;main.c: 880:     }
 17678                           
 17679                           
 17680                           ;main.c: 882:     flag_time_display_update = 1;
 17681  0401  0020               	movlb	0	; select bank0
 17682  0402  01C1               	clrf	_flag_time_display_update
 17683  0403  0AC1               	incf	_flag_time_display_update,f
 17684  0404                     i1l4809:	
 17685                           
 17686                           ;main.c: 884:     if(mode_timeout_count) {
 17687  0404  083E               	movf	_mode_timeout_count,w	;volatile
 17688  0405  1903               	btfsc	3,2
 17689  0406  2C08               	goto	u299_21
 17690  0407  2C09               	goto	u299_20
 17691  0408                     u299_21:	
 17692  0408  2C11               	goto	i1l4815
 17693  0409                     u299_20:	
 17694  0409                     i1l4811:	
 17695                           
 17696                           ;main.c: 885:         mode_timeout_count--;
 17697  0409  3001               	movlw	1
 17698  040A  02BE               	subwf	_mode_timeout_count,f	;volatile
 17699                           
 17700                           ;main.c: 886:         if(mode_timeout_count == 0){
 17701  040B  083E               	movf	_mode_timeout_count,w	;volatile
 17702  040C  1D03               	btfss	3,2
 17703  040D  2C0F               	goto	u300_21
 17704  040E  2C10               	goto	u300_20
 17705  040F                     u300_21:	
 17706  040F  2C11               	goto	i1l4815
 17707  0410                     u300_20:	
 17708  0410                     i1l4813:	
 17709                           
 17710                           ;main.c: 887:             mode = MODE_NORMAL;
 17711  0410  01BF               	clrf	_mode	;volatile
 17712  0411                     i1l4815:	
 17713                           
 17714                           ;main.c: 891:     if(mode_flash_count) mode_flash_count--;
 17715  0411  083D               	movf	_mode_flash_count,w	;volatile
 17716  0412  1903               	btfsc	3,2
 17717  0413  2C15               	goto	u301_21
 17718  0414  2C16               	goto	u301_20
 17719  0415                     u301_21:	
 17720  0415  2C18               	goto	i1l1246
 17721  0416                     u301_20:	
 17722  0416                     i1l4817:	
 17723  0416  3001               	movlw	1
 17724  0417  02BD               	subwf	_mode_flash_count,f	;volatile
 17725  0418                     i1l1246:	
 17726                           
 17727                           ;main.c: 893:     if(buzz_timeout) buzz_timeout--;
 17728  0418  0838               	movf	_buzz_timeout,w
 17729  0419  1903               	btfsc	3,2
 17730  041A  2C1C               	goto	u302_21
 17731  041B  2C1D               	goto	u302_20
 17732  041C                     u302_21:	
 17733  041C  2C1F               	goto	i1l1248
 17734  041D                     u302_20:	
 17735  041D                     i1l4819:	
 17736  041D  3001               	movlw	1
 17737  041E  02B8               	subwf	_buzz_timeout,f
 17738  041F                     i1l1248:	
 17739  041F  0008               	return
 17740  0420                     __end_of_secondISR:	
 17741  007E                     btemp	set	126	;btemp
 17742  007E                     int$flags	set	126
 17743  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    42
    Data        0
    BSS         114
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     26      80
    BANK1            80      0      57
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    do_I2C_TX$2635$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$2641	const PTR FTN()enum E3411 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX$2640	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$2635	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned short  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    i2c_driver_setI2cISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_setBusCollisionISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> displayRefreshISR(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), IOCBF4_DefaultInterruptHandler(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> secondISR(), IOCBF4_DefaultInterruptHandler(), Absolute function(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i1_i2c_ISR(), Absolute function(), i2c_ISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    i2c_readDataBlock@data	PTR void  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    d.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    S373$data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 20
		 -> rtcData(BANK0[20]), 

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 20
		 -> clearAlarmFlag@rData(BANK0[2]), rtcData(BANK0[20]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E3411[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 20
		 -> clearAlarmFlag@rData(BANK0[2]), rtcData(BANK0[20]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), 
		 -> i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), 
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E3257 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E3257[6] size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_i2c_restartWrite(), i1_rd1RegCompleteHandler(), i1_rd2RegCompleteHandler(), 
		 -> i1_wr2RegCompleteHandler(), i1_rdBlkRegCompleteHandler(), i1_returnReset(), i1_returnStop(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 20
		 -> clearAlarmFlag@rData(BANK0[2]), rtcData(BANK0[20]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), 
		 -> i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), 
		 -> NULL(NULL[0]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 20
		 -> clearAlarmFlag@rData(BANK0[2]), rtcData(BANK0[20]), i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[3]), 
		 -> i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_DO_ADDRESS_NACK
    i1_i2c_ISR->i1_do_I2C_RX
    i1_i2c_ISR->i1_do_I2C_TX
    i1_i2c_ISR->i1_do_I2C_TX_EMPTY
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _TMR0_CallBack->_displayRefreshISR

Critical Paths under _main in BANK0

    _main->_initRTC
    _updateRTC->_i2c_writeNBytes
    _updateMonth->_i2c_writeNBytes
    _updateDate->_i2c_writeNBytes
    _updateAlarm2->_i2c_writeNBytes
    _updateAlarm1->_i2c_writeNBytes
    _intToBCD->___lwdiv
    _initRTC->_i2c_readDataBlock
    _clearAlarmFlag->_i2c_writeNBytes
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c_driver_TXData
    _do_I2C_TX->_i2c_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _FIR_filter->_ADC_GetConversion

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  900617
                                             21 BANK0      5     5      0
                  _ADC_GetConversion
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                         _FIR_filter
         _IOCBF4_SetInterruptHandler
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                        _bcdDateDecr
                        _bcdDateIncr
                        _bcdHourDecr
                        _bcdHourIncr
                      _bcdMinuteDecr
                      _bcdMinuteIncr
                       _bcdMonthDecr
                       _bcdMonthIncr
                     _clearAlarmFlag
                  _i2c_readDataBlock
                            _initRTC
                           _intToBCD
                       _updateAlarm1
                       _updateAlarm2
                         _updateDate
                        _updateMonth
                          _updateRTC
 ---------------------------------------------------------------------------------
 (1) _updateRTC                                            3     2      1   99285
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateMonth                                          2     2      0   99164
                                             14 BANK0      2     2      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateDate                                           2     2      0   99164
                                             14 BANK0      2     2      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateAlarm2                                         3     2      1   99347
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _updateAlarm1                                         3     2      1   99347
                                             14 BANK0      3     2      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _intToBCD                                             9     7      2    1183
                                              8 BANK0      9     7      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              2     2      0  200135
                                             19 BANK0      2     2      0
                  _i2c_readDataBlock
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_readDataBlock                                    9     5      4  101002
                                             10 BANK0      9     5      4
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (1) _clearAlarmFlag                                       3     3      0   99222
                                             14 BANK0      3     3      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   99133
                                             10 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    2259
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     310
                                              2 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   93060
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   93060
                                              7 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   92992
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              3     3      0   92937
                                              4 BANK0      3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   23242
                                              1 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               3     3      0   23211
                                              0 BANK0      3     3      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    4692
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1      32
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4735
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    4584
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2979
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3    1117
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1574
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      37
                                              0 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bcdMonthIncr                                         1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdMonthDecr                                         1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteIncr                                        2     2      0     220
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdMinuteDecr                                        2     2      0     220
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourIncr                                          2     2      0     127
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdHourDecr                                          2     2      0     127
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _bcdDateIncr                                          1     1      0     155
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcdDateDecr                                          1     1      0     155
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     785
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     211
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     363
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FIR_filter                                           8     6      2     120
                                              4 BANK0      8     6      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     189
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0   18830
                   Absolute function *
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           3     3      0   18830
                                              3 COMMON     3     3      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         3     3      0    4713
                                              0 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            3     3      0    4691
                                              0 COMMON     3     3      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_wr2RegCompleteHandler                             1     0      1     904
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_wr1RegCompleteHandler                             1     0      1    1044
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_rdBlkRegCompleteHandler                           1     0      1     935
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd2RegCompleteHandler                             1     0      1     904
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd1RegCompleteHandler                             1     0      1     904
                                              0 BANK0      1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setDataCompleteCallback                       4     1      3     699
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (16) i1_setCallBack                                       5     2      3     287
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) i1_i2c_restartWrite                                  1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                  _displayRefreshISR *
 ---------------------------------------------------------------------------------
 (14) _displayRefreshISR                                   2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF4_DefaultInterruptHandler *
                          _secondISR *
 ---------------------------------------------------------------------------------
 (14) _secondISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _FIR_filter
     _ADC_GetConversion (ARG)
   _IOCBF4_SetInterruptHandler
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _bcdDateDecr
   _bcdDateIncr
   _bcdHourDecr
   _bcdHourIncr
   _bcdMinuteDecr
   _bcdMinuteIncr
   _bcdMonthDecr
   _bcdMonthIncr
   _clearAlarmFlag
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _i2c_readDataBlock
     _i2c_close
       _mssp_clearIRQ
       _mssp_disableIRQ
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_DO_NACK_RESTART *
               _i2c_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c_driver_startRX
             _do_I2C_RESET *
               _i2c_driver_resetBus
             _do_I2C_RX *
               Absolute function(Fake) *
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _i2c_driver_getRXData *
               _i2c_driver_sendACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_SEND_ADR_READ *
               _i2c_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c_driver_restart
             _do_I2C_SEND_STOP *
               _i2c_driver_stop
             _do_I2C_TX *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_driver_TXData *
               _i2c_driver_isNACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_TX_EMPTY *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _mssp_setIRQ *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _i2c_driver_isNACK *
             _mssp_clearIRQ *
           _mssp_waitForEvent
         _mssp_IRQisEnabled
     _i2c_open
       _i2c_driver_open
       _i2c_driver_setBusCollisionISR
       _i2c_driver_setI2cISR
       _mssp_clearIRQ
     _i2c_setAddressNACKCallback
       _setCallBack
     _i2c_setBuffer
     _i2c_setDataCompleteCallback
       _setCallBack
   _initRTC
     _i2c_readDataBlock
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
       _i2c_setDataCompleteCallback
         _setCallBack
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _intToBCD
     ___lwdiv
     ___lwmod
   _updateAlarm1
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateAlarm2
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateDate
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateMonth
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _updateRTC
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCBF4_ISR
       Absolute function(Fake) *
       _IOCBF4_DefaultInterruptHandler *
       _secondISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _displayRefreshISR *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      39       7       71.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      94      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      94      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jul 21 15:26:02 2020

                   __end_of_i2c_driver_restart 146B                            i1_i2c_driver_isNACK 1504  
                                 returnReset@p 005F                                     __CFG_CP$ON 0000  
                   __end_of_i2c_driver_startRX 1471                         __size_of_bcdMinuteDecr 0038  
                _do_I2C_SEND_RESTART$intlevel0 157A                                    _SSPSTATbits 0214  
                       __size_of_bcdMinuteIncr 0039                                             l61 1628  
                                           l83 17FD                                             l91 173C  
                                           l67 1644                                             l84 17FF  
                                           l76 02D5                                             l77 02D7  
                        __size_of_bcdMonthDecr 0015                                             l98 0645  
                              i1_mssp_clearIRQ 145C                          __size_of_bcdMonthIncr 0015  
                         __size_of_do_I2C_IDLE 0009                         __end_of_FVR_Initialize 1487  
                          _do_I2C_SEND_RESTART 1576                           __size_of_do_I2C_RCEN 000B  
                              _timer0ReloadVal 007D                           __end_ofi1_returnStop 1448  
                         ?i1_i2c_driver_TXData 0070                                    i1_do_I2C_RX 02D8  
                                  i1_do_I2C_TX 01DF                                    __CFG_LVP$ON 0000  
                         i1_i2c_driver_sendACK 147B                                            l110 1636  
                                          l104 14C4                                            l113 15DB  
                                          l122 1575                                            l131 161A  
                                          l212 06E6                                            l204 14D0  
                                          l116 1563                                            l140 1590  
                                          l300 03A7                                            l125 157E  
                                          l134 15E7                                            l207 14D6  
                                          l231 176A                                            l119 156C  
                                          l143 1599                                            l128 1587  
                                          l152 0532                                            l160 0185  
                                          l137 15B7                                            l146 15A2  
                                          l252 1781                                            l157 0169  
                                          l173 0258                                            l510 1551  
                                          l318 14DC                                            l174 0286  
                                          l441 15CF                                            l249 061B  
                                          l602 1476                                            l371 160D  
                                          l435 1725                                            l267 1798  
                                          l291 0825                                            l532 170F  
                                          l444 148A                                            l188 0458  
                                          l365 0794                                            l613 1674  
                                          l701 14EE                                            l438 15CA  
                                          l198 0597                                            l367 0798  
                                          l551 14CA                                            l631 146A  
                                          l279 1753                                            l368 079F  
                                          l640 1470                                            l625 1445  
                                          l609 1669                                            l617 15F3  
                                          l634 146D                                            l643 1473  
                                          l708 1486                                            l628 1467  
                                          l652 14E2                                            l661 1492  
                                          l637 155A                                            l743 07B7  
                                          l831 153F                                            l744 07B6  
                                          l728 0807                                            l920 07FF  
                                          l593 15AC                                            l746 07C3  
                                          l834 1548                                            l658 148E  
                                          l914 01C9                                            l499 05C4  
                                          l931 0689                                            l596 1464  
                                          l932 0697                                            l837 1536  
                                          l917 01DE                                            l925 06B1  
                                          l941 17B0                                            l926 06BF  
                                          l599 1461                                            l935 16CF  
                                          l792 077B                                            l952 07E4  
                                          l944 17C8                                            l698 14E8  
                                          l964 0491                                            l973 04C9  
                                          l958 0845                                            l982 16F9  
                                          l992 0731                                            l987 16E4  
                                          l999 0756                                   __CFG_CPD$OFF 0000  
                     i1_do_I2C_DO_NACK_RESTART 14BB                                 bcdMonthDecr@mo 0056  
                 __size_of_i2c_masterOperation 002A                           _returnStop$intlevel0 14CF  
                                  ?_FIR_filter 005A                 ?_EUSART_SetFramingErrorHandler 0056  
                         i1_i2c_driver_restart 144D                  i2c_setDataCompleteCallback@cb 005B  
                     ?i1_rd2RegCompleteHandler 0056                          __size_of_do_I2C_RESET 000C  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                           i1_i2c_driver_startRX 1453  
                        __end_ofi1_returnReset 144A             __end_of_IOCBF4_SetInterruptHandler 1552  
                   _IOCBF4_SetInterruptHandler 1549                           ?i1_i2c_driver_isNACK 0070  
                     ?i1_wr2RegCompleteHandler 0056                                 bcdMonthIncr@mo 0056  
              ??i1_i2c_setDataCompleteCallback 0078                         i1_i2c_driver_getRXData 1456  
                        __end_ofi1_mssp_setIRQ 145C                                           l1110 0AFC  
                                         l1008 0369                                           l1032 0875  
                                         l1033 087E                                           l1018 012B  
                                         l1042 093D                                           l1123 0B25  
                                         l1035 0885                                           l1204 0EC3  
                                         l1036 0B03                        ??_rd2RegCompleteHandler 0060  
                                         l1213 0F24                                           l1037 088C  
                                         l1207 0ED4                                           l1153 0C62  
                        i1_i2c_driver_sendNACK 147F                                           l1146 0BFB  
                                         l1074 09E0                                           l1219 0F74  
                                         l1228 0FD7                                           l1172 0D54  
                                         l1181 0DB8                                           l1165 0CFE  
                                         l1094 0A80                                           l1191 0E1E  
                                         l1175 0D68                                           l1159 0CAD  
                                         l1188 0E0D                                           l1197 0E6E  
                                         l1713 03E4                                           l1723 04FE  
                                i1returnStop@p 0056                                           l7001 02A3  
                                         l7011 02B7                                           l7003 02A8  
                                         l7021 02CB                                           l7013 02B8  
                                         l7005 02A9                                           l7031 17EB  
                                         l7023 02D3                                           l7015 02BD  
                                         l7007 02AE                                           l7111 0610  
                                         l7103 05F4                                           l7033 17F1  
                                         l7017 02C0                                           l7009 02B2  
                                         l7113 0613                                           l7105 05F4  
                                         l7121 038A                                           l7201 03A8  
                                         l7051 152E                                           l7043 1549  
                                         l7131 059E                                           l7035 17F4  
                                         l7027 17E2                                           l7019 02C3  
                                         l7107 05FE                                           l7123 0393  
                                         l7115 036C                                           l7211 03BD  
                                         l7203 03AB                                           l8011 0992  
                                         l8003 0983                                           l7141 05AC  
                                         l7133 05A1                                           l7045 14C5  
                                         l7029 17EA                                           l7109 0607  
                                         l7125 039C                                           l7117 0374  
                                         l7221 03DA                                           l7213 03C1  
                                         l7205 03B1                                           l8021 09A7  
                                         l8013 0998                                           l8005 0989  
                                         l7047 1537                                           l7151 05B5  
                                         l7143 05AE                                           l7135 05A3  
                                         l7039 14C0                                           l7127 039F  
                                         l7119 037E                                           l7215 03D0  
                                         l7207 03B4                                           l7223 03E0  
                                         l7231 04D4                                           l7049 1540  
                                         l7161 05C3                                           l7153 05B7  
                                         l7145 05B0                                           l7137 05A5  
                                         l7129 0598                                           l7401 1710  
                                         l7217 03D4                                           l7209 03B9  
                                         l7241 04EF                                           l7233 04D9  
                                         l8201 0B23                                           l8121 0A63  
                                         l8113 0A54                                           l8105 0A45  
                                         l7411 07BC                                           l7403 07A2  
                                         l7171 1483                                           l7163 15C4  
                                         l7155 05B9                                           l7147 05B2  
                                         l7139 05AA                                           l7219 03D5  
                                         l7243 04F4                                           l7235 04DD  
                                         l7227 04CA                                           l8203 0B29  
                                         l8211 0B38                                           l8131 0A78  
                                         l8123 0A69                                           l8115 0A5A  
                                         l8107 0A4B                                           l8043 09CE  
                                         l8035 09BF                                           l8027 09B0  
                                         l8019 09A1                                           l7405 07AE  
                                         l5661 00CF                                           l7173 0800  
                                         l7165 15C7                                           l7157 05BA  
                                         l7149 05B3                                           l7181 16FF  
                                         l7421 01A5                                           l7237 04E1  
                                         l7229 04D1                                           l7245 04FA  
                                         l7501 17BC                                           l8301 0CCE  
                                         l8221 0B59                                           l8213 0B3E  
                                         l8205 0B2B                                           l8133 0A7D  
                                         l8141 0A81                                           l8061 09E8  
                                         l8045 09D4                                           l8037 09C5  
                                         l8029 09B6                                           l8053 09E0  
                                         l7407 07AF                                           l5663 00ED  
                                         l7175 0805                                           l7191 0757  
                                         l7167 15C8                                           l7159 05BB  
                                         l7183 1702                                           l7511 07D2  
                                         l7503 07C6                                           l6703 1474  
                                         l7431 01B3                                           l7423 01A9  
                                         l7415 0186                                           l7239 04EB  
                                         l8311 0CF9                                           l8303 0CEC  
                                         l8231 0B77                                           l8223 0B5F  
                                         l8215 0B44                                           l8207 0B30  
                                         l8151 0A94                                           l8143 0A82  
                                         l8071 0A06                                           l8063 09EE  
                                         l8047 09DE                                           l8055 09E1  
                                         l7409 07B3                                           l5665 00F8  
                                         l7177 0806                                           l7193 0762  
                                         l7185 1706                                           l7169 1487  
                                         l7513 07D8                                           l7505 07CA  
                                         l7601 049F                                           l6641 1728  
                                         l6633 06C2                                           l6705 14CF  
                                         l6713 1758                                           l6721 176F  
                                         l6801 158F                                           l7441 01B8  
                                         l7433 01B4                                           l7425 01AB  
                                         l7417 0192                                           l8401 0EB3  
                                         l8321 0D42                                           l8313 0D00  
                                         l8305 0CF1                                           l8225 0B65  
                                         l8233 0B7D                                           l8217 0B4A  
                                         l8209 0B35                                           l8161 0AB4  
                                         l8153 0A9A                                           l8129 0A72  
                                         l8081 0A18                                           l8073 0A09  
                                         l8065 09F4                                           l8145 0A83  
                                         l8057 09E2                                           l7371 0781  
                                         l5667 010E                                           l7195 076A  
                                         l7187 1707                                           l7179 16FA  
                                         l7531 0831                                           l7523 07E2  
                                         l7507 07D0                                           l7603 04A5  
                                         l6643 172D                                           l6635 06C8  
                                         l6715 1761                                           l6723 1778  
                                         l6731 178F                                           l6651 148F  
                                         l7451 01CD                                           l7443 01B9  
                                         l7435 01B5                                           l7427 01AD  
                                         l7419 01A0                                           l8411 0ECF  
                                         l8403 0EB9                                           l8331 0D56  
                                         l8315 0D13                                           l8251 0BC0  
                                         l8243 0B99                                           l8227 0B6B  
                                         l8235 0B86                                           l8219 0B53  
                                         l8171 0AD4                                           l8163 0ABA  
                                         l8155 0AA0                                           l8147 0A88  
                                         l8091 0A2D                                           l8083 0A1E  
                                         l8075 0A0F                                           l8139 0A80  
                                         l8067 09FA                                           l8059 09E3  
                                         l7381 078D                                           l7373 0785  
                                         l5669 0110                                           l7197 0772  
                                         l7189 1708                                           l7701 073C  
                                         l7541 083B                                           l7517 07DA  
                                         l7621 04BD                                           l7613 04AF  
                                         l6645 173B                                           l6637 06D9  
                                         l6741 1752                                           l6709 14D5  
                                         l6717 1769                                           l6725 1780  
                                         l6733 1797                                           l6901 0430  
                                         l6653 1568                                           l6661 1574  
                                         l6813 0510                                           l6805 0503  
                                         l7453 01D1                                           l7445 01BA  
                                         l7437 01B6                                           l7429 01AF  
                                         l7461 07EE                                           l8413 0ED6  
                                         l8405 0EBE                                           l8333 0D6A  
                                         l8317 0D1F                                           l8325 0D44  
                                         l8309 0CF3                                           l8261 0BF6  
                                         l8253 0BCC                                           l8245 0B9F  
                                         l8237 0B8C                                           l8229 0B71  
                                         l8181 0AF3                                           l8173 0ADA  
                                         l8165 0ABF                                           l8157 0AA9  
                                         l8149 0A8E                                           l8069 0A02  
                                         l7391 1607                                           l7383 0793  
                                         l7375 0786                                           l7367 077E  
                                         l7199 077A                                           l7703 0742  
                                         l7543 0841                                           l7535 0833  
                                         l7527 0828                                           l7519 07E0  
                                         l7631 04C7                                           l7615 04B5  
                                         l7607 04A7                                           l7551 045B  
                                         l6647 1468                                           l6639 161B  
                                         l6751 14DB                                           l6655 156B  
                                         l6671 1583                                           l6807 0505  
                                         l7455 01D2                                           l7447 01BB  
                                         l7439 01B7                                           l7471 06AC  
                                         l7463 07F3                                           l8431 0F39  
                                         l8415 0EE9                                           l8407 0EC5  
                                         l8351 0DCD                                           l8335 0D7D  
                                         l8327 0D4A                                           l8319 0D3D  
                                         l8271 0C4B                                           l8263 0BFD  
                                         l8255 0BEA                                           l8247 0BA5  
                                         l8239 0B92                                           l8175 0AE0  
                                         l8167 0AC5                                           l8159 0AAF  
                                         l8183 0AFC                                           l8191 0B03  
                                         l7393 1608                                           l7385 0799  
                                         l7377 0787                                           l7369 077E  
                                         l7713 074C                                           l7537 0839  
                                         l7529 082C                                           l7625 04BF  
                                         l7609 04AD                                           l7561 046D  
                                         l7553 045F                                           l7641 16EF  
                                         l6681 148B                                           l6649 146B  
                                         l6737 1741                                           l6729 1786  
                                         l6745 080C                                           l6761 15D9  
                                         l6665 157A                                           l6673 1586  
                                         l6809 050C                                           l6833 013C  
                                         l6825 0130                                           l6921 056E  
                                         l6913 1664                                           l7449 01BC  
                                         l7473 06B3                                           l7465 069A  
                                         l7481 0684                                           l7457 07E7  
                                         l8433 0F45                                           l8441 0F69  
                                         l8417 0EF5                                           l8409 0ECE  
                                         l8425 0F19                                           l8353 0DD9  
                                         l8361 0DFD                                           l8337 0D89  
                                         l8329 0D4F                                           l8345 0DAD  
                                         l8281 0C5D                                           l8265 0C0A  
                                         l8249 0BAE                                           l8193 0B08  
                                         l8257 0BEC                                           l8185 0AFE  
                                         l8177 0AE9                                           l8169 0ACB  
                                         l8097 0A36                                           l8089 0A27  
                                         l7395 1609                                           l7387 1603  
                                         l7379 0788                                           l7715 0752  
                                         l7707 0744                                           l7547 0843  
                                         l7627 04C5                                           l7619 04B7  
                                         l7571 0477                                           l7555 0465  
                                         l7651 16D2                                           l7643 16F5  
                                         l7635 16E7                                           l6755 145F  
                                         l6739 174A                                           l6747 0824  
                                         l6907 0434                                           l6763 15DA  
                                         l6771 1562                                           l6659 1571  
                                         l6667 157D                                           l6683 1595  
                                         l6691 15A1                                           l6819 0514  
                                         l6851 0184                                           l6843 0144  
                                         l6923 0573                                           l6931 15A3  
                                         l7731 035F                                           l7723 0323  
                                         l7467 06A2                                           l7483 068B  
                                         l7475 0672                                           l7491 179B  
                                         l7459 07E9                                           l8451 0F8E  
                                         l8443 0F6F                                           l8435 0F63  
                                         l8427 0F1F                                           l8419 0F13  
                                         l8371 0E19                                           l8363 0E03  
                                         l8355 0DF7                                           l8347 0DB3  
                                         l8339 0DA7                                           l8283 0C64  
                                         l8267 0C21                                           l8275 0C50  
                                         l8259 0BF1                                           l8195 0B0D  
                                         l8179 0AEF                                           l8187 0B00  
                                         l8099 0A3C                                           l7397 160A  
                                         l7389 1606                                           l7709 074A  
                                         l7573 047D                                           l7565 046F  
                                         l7653 16D8                                           l7637 16ED  
                                         l6677 14DF                                           l6757 15D4  
                                         l6685 1598                                           l6845 016B  
                                         l6837 0140                                           l6829 0138  
                                         l6861 0244                                           l6925 057A  
                                         l6917 166F                                           l6941 1631  
                                         l7485 16BD                                           l7733 0365  
                                         l7725 0329                                           l7469 06A7  
                                         l7477 067A                                           l7493 179F  
                                         l8461 0FBE                                           l8453 0FA7  
                                         l8445 0F76                                           l8429 0F26  
                                         l8373 0E20                                           l8365 0E08  
                                         l8349 0DBA                                           l8285 0C77  
                                         l8293 0CA2                                           l8269 0C3B  
                                         l8277 0C52                                           l8197 0B11  
                                         l8189 0B01                                           l7901 0876  
                                         l7719 0754                                           l7583 0487  
                                         l7567 0475                                           l7559 0467  
                                         l7663 16E2                                           l7647 16F7  
                                         l6679 146E                                           l6695 1552  
                                         l6759 15D7                                           l6767 155F  
                                         l6775 1612                                           l6783 15E0  
                                         l6791 15B1                                           l6847 0177  
                                         l6863 0249                                           l6927 0580  
                                         l6919 056B                                           l6935 1629  
                                         l6951 15ED                                           l7487 16C2  
                                         l7727 034B                                           l7479 067F  
                                         l7495 17A4                                           l8471 0FCF  
                                         l8463 0FC2                                           l8447 0F89  
                                         l8391 0E83                                           l8375 0E33  
                                         l8367 0E0F                                           l8295 0CA8  
                                         l8287 0C83                                           l8279 0C58  
                                         l8199 0B1E                                           l7911 0893  
                                         l7903 087B                                           l7681 0725  
                                         l7673 0717                                           l7593 0494  
                                         l7585 048D                                           l7577 047F  
                                         l7657 16DA                                           l6929 1465  
                                         l6769 1561                                           l6777 1614  
                                         l6785 15E2                                           l6793 15B3  
                                         l6689 159E                                           l6849 0182  
                                         l6873 025A                                           l6865 0253  
                                         l6937 162A                                           l6953 15EE  
                                         l6961 14E3                                           l7489 16C3  
                                         l7729 034F                                           l7497 17B3  
                                         l8481 0FEC                                           l8473 0FD1  
                                         l8465 0FC4                                           l8449 0F8D  
                                         l8393 0E8F                                           l8377 0E3F  
                                         l8369 0E18                                           l8385 0E63  
                                         l8297 0CAF                                           l8457 0FB8  
                                         l7921 08B1                                           l7913 0898  
                                         l7905 0882                                           l7691 072F  
                                         l7675 071D                                           l7667 070F  
                                         l7595 0498                                           l7579 0485  
                                         l7659 16E0                                           l6699 1471  
                                         l6891 0427                                           l6779 1619  
                                         l6787 15E6                                           l6795 15B6  
                                         l6883 0262                                           l6867 0256  
                                         l6859 0238                                           l6939 162E  
                                         l6971 0626                                           l6955 15F0  
                                         l6963 14E9                                           l7499 17B7  
                                         l8475 0FD9                                           l8467 0FCA  
                                         l8459 0FBD                                           l8395 0EAD  
                                         l8387 0E69                                           l8379 0E5D  
                                         l8299 0CC2                                           l7931 08C9  
                                         l7923 08B4                                           l7915 089E  
                                         l7907 0889                                           l7685 0727  
                                         l7669 0715                                           l7597 049D  
                                         l7589 048F                                           l6965 1462  
                                         l6877 025E                                           l6981 0640  
                                         l6973 0628                                           l6949 15E8  
                                         l8477 0FE0                                           l8469 0FCB  
                                         l8389 0E70                                           l7941 08E5  
                                         l7925 08BA                                           l7917 08A4  
                                         l7909 0890                                           l7695 0734  
                                         l7687 072D                                           l7679 071F  
                                         l6895 042B                                           l6799 158C  
                                         l6975 062D                                           l6983 0643  
                                         l6967 061E                                           l6991 0289  
                                         l8479 0FE6                                           l7943 08EB  
                                         l7935 08D6                                           l7919 08A9  
                                         l7871 0849                                           l7697 073A  
                                         l6897 042E                                           l6889 0424  
                                         l6977 0631                                           l6969 0625  
                                         l6993 0290                                           l7961 0920  
                                         l7953 0907                                           l7937 08DC  
                                         l7929 08C3                                           l7881 0850  
                                         l7873 084B                                           l6979 0636  
                                         l6995 0296                                           l7971 093C  
                                         l7955 090D                                           l7947 08F8  
                                         l7891 0861                                           l7883 0851  
                                         l7875 084C                                           l8693 0278  
                                         l6997 0297                                           l6989 1637  
                                         l7981 0956                                           l7965 0929  
                                         l7949 08FE                                           l7973 093F  
                                         l7893 0868                                           l7885 0852  
                                         l7877 084D                                           l7869 0846  
                                         l8695 015B                                           l6999 0298  
                                         l7983 095E                                           l7975 0944  
                                         l7967 092F                                           l7959 091A  
                                         l7895 0870                                           l7887 085A  
                                         l7879 084E                                           l8697 052A  
                                         l7985 0962                                           l7977 094A  
                                         l7897 0871                                           l7889 0860  
                                         l8699 044A                                           l7995 0974  
                                         l7987 0965                                           l7979 0950  
                                         l7899 0872                                           l7997 097A  
                                         l7989 096B                                   __CFG_WDTE$ON 0000  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           _LATD 010F  
                                         _LATE 0110                                           u6000 049D  
                                         u6001 049C                                           u6010 04A5  
                                         u6011 04A4                                           u6100 0715  
                                         u6020 04AD                                           u6101 0714  
                                         u6021 04AC                                           u6110 071D  
                                         u6030 04B5                                           u6111 071C  
                                         u6031 04B4                                           u6120 0725  
                                         u6040 04BD                                           u6200 0365  
                                         u7000 0B08                                           u6121 0724  
                                         u6041 04BC                                           u6201 0364  
                                         u7001 0B07                                           u6130 072D  
                                         u6050 04C5                                           u7010 0B0D  
                                         u6131 072C                                           u6051 04C4  
                                         u7011 0B0C                                           u6140 073A  
                                         u6060 16ED                                           u5420 06C8  
                                         u5500 057A                                           u7100 0B59  
                                         u7020 0B11                                           u6141 0739  
                                         u6061 16EC                                           u5421 06C7  
                                         u5501 0579                                           u7101 0B58  
                                         u7021 0B10                                           u6150 0742  
                                         u6070 16F5                                           u5430 172D  
                                         u5510 1636                                           u7110 0B5F  
                                         u7030 0B23                                           u6151 0741  
                                         u6071 16F4                                           u5431 172C  
                                         u5511 1635                                           u7111 0B5E  
                                         u7031 0B22                                           u3760 010E  
                                         u6160 074A                                           u6080 16D8  
                                         u5440 0137                                           u5600 061B  
                                         u7200 0B9F                                           u7120 0B65  
                                         u7040 0B29                                           u3761 010D  
                                         u6161 0749                                           u6081 16D7  
                                         u5441 0136                                           u5601 061A  
                                         u7201 0B9E                                           u7121 0B64  
                                         u7041 0B28                                           u3770 0125  
                                         u6170 0752                                           u6090 16E0  
                                         u5450 0182                                           u5530 15ED  
                                         u5610 037E                                           u7210 0BA5  
                                         u7130 0B6B                                           u7050 0B30  
                                         u6171 0751                                           u6091 16DF  
                                         u5451 0181                                           u5531 15EC  
                                         u5611 037D                                           u7211 0BA4  
                                         u7131 0B6A                                           u7051 0B2F  
                                         u5460 0253                                           u5540 0625  
                                         u5620 03A7                                           u5700 03E0  
                                         u7300 0C62                                           u7140 0B71  
                                         u7060 0B35                                           u6500 0898  
                                         i1l61 1600                                           u5461 0252  
                                         u5541 0624                                           u5621 03A6  
                                         u5701 03DF                                           u7301 0C61  
                                         u7141 0B70                                           u7061 0B34  
                                         u6501 0897                                           u5630 15CF  
                                         u5470 1669                                           u5550 062D  
                                         u5710 04D1                                           u7150 0B77  
                                         u7070 0B3E                                           u6510 089E  
                                         u3775 0121                                           u5631 15CE  
                                         u5471 1668                                           u5551 062C  
                                         u5711 04D0                                           u7151 0B76  
                                         u7071 0B3D                                           u6511 089D  
                                         u5800 0798                                           u5480 166E  
                                         u5560 0640                                           u5640 03B1  
                                         u7240 0BF1                                           u7160 0B7D  
                                         u7080 0B44                                           u6600 0920  
                                         u6520 08A4                                           u5801 0797  
                                         u5481 166D                                           u5561 063F  
                                         u5641 03B0                                           u6185 033C  
                                         u7241 0BF0                                           u7225 0BB1  
                                         u7161 0B7C                                           u7081 0B43  
                                         u6601 091F                                           u6521 08A3  
                                         u5810 07BC                                           u5490 0573  
                                         u5570 0290                                           u5730 04E1  
                                         u6194 0345                                           u7330 0CA8  
                                         u7250 0BF6                                           u7170 0B8C  
                                         u7090 0B4A                                           u6610 092F  
                                         u6530 08A9                                           u6450 0860  
                                         i1l91 1663                                           u5811 07BB  
                                         u5491 0572                                           u5571 028F  
                                         u5731 04E0                                           u6195 0343  
                                         u7331 0CA7                                           u7315 0C68  
                                         u7251 0BF5                                           u7235 0BCF  
                                         u7171 0B8B                                           u7091 0B49  
                                         u6611 092E                                           u6531 08A8  
                                         u6451 085F                                           u5900 07E0  
                                         u5580 17EA                                           u5820 01A5  
                                         u5660 03C1                                           u5740 04EB  
                                         u7500 0DB8                                           u7420 0D42  
                                         u7340 0CAD                                           u7260 0BFB  
                                         u7180 0B92                                           u6700 09A7  
                                         u6620 0944                                           u6540 08BA  
                                         u6460 087B                                           u5901 07DF  
                                         u5581 17E9                                           u5821 01A4  
                                         u5661 03C0                                           u5741 04EA  
                                         u5725 04D5                                           u7501 0DB7  
                                         u7421 0D41                                           u7405 0D04  
                                         u7341 0CAC                                           u7325 0C86  
                                         u7261 0BFA                                           u7181 0B91  
                                         u6701 09A6                                           u6621 0943  
                                         u6541 08B9                                           u6461 087A  
                                         u5910 0831                                           u5590 05FE  
                                         u5830 01CD                                           u7430 0D4A  
                                         u7190 0B98                                           u6710 09B6  
                                         u6630 094A                                           u6550 08C9  
                                         u6470 0882                                           u5911 0830  
                                         u5591 05FD                                           u5831 01CC  
                                         u5655 03B5                                           u7431 0D49  
                                         u7415 0D22                                           u7191 0B97  
                                         u6711 09B5                                           u6631 0949  
                                         u6551 08C8                                           u6471 0881  
                                         u5920 0839                                           u5680 03D0  
                                         u5760 04FA                                           u5840 06AC  
                                         u7600 0E69                                           u7440 0D4F  
                                         u7280 0C58                                           u6800 0A1E  
                                         u6720 09C5                                           u6640 0950  
                                         u6560 08DC                                           u6480 0889  
                                         u5921 0838                                           u5681 03CF  
                                         u5761 04F9                                           u5745 04E7  
                                         u5841 06AB                                           u7601 0E68  
                                         u7441 0D4E                                           u7281 0C57  
                                         u6801 0A1D                                           u6721 09C4  
                                         u6641 094F                                           u6561 08DB  
                                         u6481 0888                                           u5930 0841  
                                         u5850 06B1                                           u7610 0E6E  
                                         u7530 0DFC                                           u7450 0D54  
                                         u7370 0CF1                                           u7290 0C5D  
                                         u6810 0A2D                                           u6730 09D4  
                                         u6650 0956                                           u6570 08EB  
                                         u6490 0890                                           u5931 0840  
                                         u5675 03C2                                           u5755 04F0  
                                         u5851 06B0                                           u7611 0E6D  
                                         u7531 0DFB                                           u7515 0DBE  
                                         u7451 0D53                                           u7371 0CF0  
                                         u7355 0CB3                                           u7291 0C5C  
                                         u7275 0C26                                           u6811 0A2C  
                                         u6731 09D3                                           u6651 0955  
                                         u6571 08EA                                           u6491 088F  
                                         u5940 0465                                           u5860 0684  
                                         u7700 0F18                                           u7540 0E03  
                                         u7380 0CF9                                           u6900 0A94  
                                         u6820 0A3C                                           u6740 09DE  
                                         u6660 096B                                           u6580 08FE  
                                         u5941 0464                                           u5685 03CC  
                                         u5861 0683                                           u7701 0F17  
                                         u7541 0E02                                           u7525 0DDC  
                                         u7381 0CF8                                           u7365 0CD1  
                                         u6901 0A93                                           u6821 0A3B  
                                         u6741 09DD                                           u6661 096A  
                                         u6581 08FD                                           u5950 046D  
                                         u5870 0689                                           u7710 0F1F  
                                         u7550 0E08                                           u7390 0CFE  
                                         u6910 0A9A                                           u6830 0A4B  
                                         u6750 09E8                                           u6670 097A  
                                         u6590 090D                           ?_do_I2C_SEND_RESTART 0070  
                                         u5951 046C                                           u5695 03D6  
                                         u5871 0688                                           u7711 0F1E  
                                         u7551 0E07                                           u7391 0CFD  
                                         u6911 0A99                                           u6831 0A4A  
                                         u6751 09E7                                           u6671 0979  
                                         u6591 090C                                           u5880 07D0  
                                         u5960 0475                                           u7800 0FCA  
                                         u7720 0F24                                           u7640 0EB2  
                                         u7560 0E0D                                           u7480 0DAC  
                                         u6920 0AA0                                           u6840 0A5A  
                                         u6760 09EE                                           u6680 0989  
                                         u5881 07CF                                           u5961 0474  
                                         u7801 0FC9                                           u7721 0F23  
                                         u7641 0EB1                                           u7625 0E74  
                                         u7561 0E0C                                           u7481 0DAB  
                                         u7465 0D6E                                           u6921 0A9F  
                                         u6841 0A59                                           u6761 09ED  
                                         u6681 0988                                           u5890 07D8  
                                         u5970 047D                                           u7810 0FD7  
                                         u7650 0EB9                                           u7490 0DB3  
                                         u6930 0AAF                                           u6850 0A69  
                                         u6770 09F4                                           u6690 0998  
                                         u5891 07D7                                           u5971 047C  
                                         u7811 0FD6                                           u7651 0EB8  
                                         u7635 0E92                                           u7491 0DB2  
                                         u7475 0D8C                                           u6931 0AAE  
                                         u6851 0A68                                           u6771 09F3  
                                         u6691 0997                                           u5980 0485  
                                         u7820 0FE0                                           u7660 0EBE  
                                         u6940 0ABA                                           u6860 0A78  
                                         u6780 09FA                                           u5981 0484  
                                         u7821 0FDF                                           u7661 0EBD  
                                         u6941 0AB9                                           u6861 0A77  
                                         u6781 09F9                                           u5990 048D  
                                         u7830 0FE6                                           u7750 0F68  
                                         u7670 0EC3                                           u7590 0E62  
                                         u6950 0AC5                                           u6870 0A7D  
                                         u6790 0A0F                                           u5991 048C  
                                         u7831 0FE5                                           u7751 0F67  
                                         u7735 0F2A                                           u7671 0EC2  
                                         u7591 0E61                                           u7575 0E24  
                                         u6951 0AC4                                           u6871 0A7C  
                                         u6791 0A0E                                           u7840 0FEC  
                                         u7760 0F6F                                           u6960 0ACB  
                                         u6880 0A88                                           u7841 0FEB  
                                         u7761 0F6E                                           u7745 0F48  
                                         u7585 0E42                                           u6961 0ACA  
                                         u6881 0A87                                           u7770 0F74  
                                         u6970 0ADA                                           u6890 0A8E  
                                         u7771 0F73                                           u6971 0AD9  
                                         u6891 0A8D                                           u6980 0AE0  
                                         u7685 0EDA                                           u6981 0ADF  
                                         u7790 0FBD                                           u6990 0AEF  
                                         u7791 0FBC                                           u7695 0EF8  
                                         u6991 0AEE                                           u7857 018C  
                                         u7785 0F93                                           _PLLR 04D6  
                                         u7867 1670                                           u7877 07B0  
                                         _TMR0 0015                                           _WPUB 020D  
                                         _WPUE 0210                        ??_wr2RegCompleteHandler 0060  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                        i1_i2c_driver_resetBus 1444              __size_of_do_I2C_SEND_RESTART_READ 0009  
                    ?_do_I2C_SEND_RESTART_READ 0070                                ??_mssp_clearIRQ 0056  
                                         _main 0846                                           _mode 003F  
                    __size_of_do_I2C_SEND_STOP 0009                         __size_of_do_I2C_DO_ACK 0009  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ??i1_do_I2C_DO_ACK 0070  
                                __CFG_BOREN$ON 0000                          ?_do_I2C_SEND_ADR_READ 0070  
                     __size_of_i2c_writeNBytes 002A                                           start 0044  
                                 _bcdMonthDecr 16D0                                   _bcdMonthIncr 16E5  
                                _i2c_setBuffer 1726                                  __CFG_MCLRE$ON 0000  
                              __end_of_i2c_ISR 0598               __size_of_rdBlkRegCompleteHandler 001E  
                     ??_do_I2C_DO_NACK_RESTART 0056                                  i1_do_I2C_IDLE 1498  
                                i1_do_I2C_RCEN 14F5                      __size_of_DATAEE_WriteByte 0024  
                      __end_of_TMR0_Initialize 1710                                   _do_I2C_RESET 15D0  
                               i1returnReset@p 0056                                  __CFG_PLLEN$ON 0000  
               ??_TMR0_DefaultInterruptHandler 0070                                ?_FVR_Initialize 0070  
               __size_of_OSCILLATOR_Initialize 000C                    i2c_setAddressNACKCallback@p 005D  
                        ??i1_i2c_driver_TXData 0070                  __end_of_OSCILLATOR_Initialize 15D0  
                          __size_of_IOCBF4_ISR 000F                          ?i1_i2c_driver_sendACK 0070  
                                        ?_main 0070                       __size_of_mssp_disableIRQ 0003  
                  i2c_driver_setI2cISR@handler 0056                                __end_of___lwdiv 03E5  
                                        i1l201 147A                                          i1l113 1513  
                                        i1l122 14A6                                          i1l131 152D  
                                        i1l212 070C                                          i1l204 1447  
                                        i1l116 149C                                          i1l140 14B5  
                                        i1l125 14AB                                          i1l134 151B  
                                        i1l207 1449                                          i1l231 1698  
                                        i1l119 14A1                                          i1l143 14BA  
                                        i1l128 14B0                                          i1l152 05F1  
                                        i1l160 0233                                          i1l137 14FB  
                                        i1l146 14BF                                          i1l403 0042  
                                        i1l252 16AA                                          i1l404 0042  
                                        i1l157 0217                                          i1l173 02F5  
                                        i1l318 0003                                          i1l174 0322  
                                        i1l503 1524                                          i1l513 1442  
                              __end_of___lwmod 04FF                                          i1l602 145B  
                                        i1l507 1653                                          i1l267 16BC  
                                        i1l291 17E1                                          i1l188 0566  
                                        i1l198 066F                                          i1l631 144F  
                                        i1l279 1686                                          i1l544 1503  
                                        i1l640 1455                                          i1l625 1444  
                                        i1l554 1443                                          i1l634 1452  
                                        i1l394 0012                                          i1l643 1458  
                                        i1l548 15C3                                          i1l652 1497  
                                        i1l396 001E                                          i1l661 1482  
                                        i1l637 150B                                          i1l399 0032  
                                        i1l658 147E                                          i1l695 144C  
                                        i1l599 145E                                          _RCREG 0199  
                        ?i1_i2c_driver_restart 0070                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _TRISD 008F  
                                        _TRISE 0090                                          _TXREG 019A  
                                        _TXSTA 019E                          ?i1_i2c_driver_startRX 0070  
            __size_of_TMR0_SetInterruptHandler 0006                      ?_TMR0_SetInterruptHandler 0056  
                                __CFG_PWRTE$ON 0000                          ??i1_i2c_driver_isNACK 0070  
                                  i2c_open@ret 005A                               __end_of_TMR0_ISR 1504  
                           __size_ofi1_i2c_ISR 002A                                _DATAEE_ReadByte 1601  
                              __end_of_initRTC 01DF                        __end_of_PIN_MANAGER_IOC 1525  
                               _WDT_Initialize 1487                                  _bcdMinuteDecr 0492  
                         _i2c_driver_getRXData 1471                   ?i1_do_I2C_SEND_RESTART_WRITE 0070  
                   ?_do_I2C_SEND_RESTART_WRITE 0070                                  _bcdMinuteIncr 0459  
                        ??_do_I2C_SEND_RESTART 0056                                          pclath 000A  
                   _i2c_driver_busCollisionISR 0036                         ?_do_I2C_SEND_ADR_WRITE 0070  
                                        status 0003                                          wtemp0 007E  
                           i2c_driver_TXData@d 0056                      __size_of_i2c_driver_start 0003  
                               ?_i2c_setBuffer 0056                                   ?_setCallBack 0056  
                          updateAlarm1@bcdHour 0066                        __end_ofi1_mssp_clearIRQ 145F  
                          __size_of_FIR_filter 005D                            updateAlarm2@bcdHour 0066  
                                _fsmStateTable 1000                                __initialization 0046  
                             _mode_flash_count 003D                 __size_ofi1_do_I2C_SEND_RESTART 0005  
                                   _i2c_poller 1629                  __end_ofi1_do_I2C_SEND_RESTART 14AC  
                                   _i2c_status 00A0                                 ?i1_do_I2C_IDLE 0070  
                                 __end_of_main 1000                                 ?i1_do_I2C_RCEN 0070  
                   __end_ofi1_do_I2C_SEND_STOP 14B1                               __end_of_i2c_open 02D8  
                         _i2c_driver_setI2cISR 14E9                    ?_INTERRUPT_InterruptManager 0070  
              __end_ofi1_rd2RegCompleteHandler 16BD                                  setCallBack@cb 0056  
                               i1_do_I2C_RESET 150C                                  _do_I2C_DO_ACK 1588  
                                       ??_main 006B                              ?_i2c_restartWrite 005F  
              __end_ofi1_wr2RegCompleteHandler 1687                                   i2c_close@ret 0057  
                              _i2c_driver_open 15E8                             ??_i2c_restartWrite 0060  
                              _i2c_driver_stop 146B                         __end_of_WDT_Initialize 148B  
                      ?_do_I2C_DO_ADDRESS_NACK 0070                         ?i1_i2c_driver_sendNACK 0070  
            _EUSART_DefaultFramingErrorHandler 0000                                 ?_bcdMinuteDecr 0070  
                                       _ADCON0 009D                                         _ADCON1 009E  
                        ?_i2c_driver_getRXData 0070                                 ?_bcdMinuteIncr 0070  
                   _EUSART_OverrunErrorHandler 00D3                                         _ADRESH 009C  
                                       _EEADRH 0192                                         _ADRESL 009B  
                                       _EEADRL 0191                                         _EEDATH 0194  
                                       _EEDATL 0193                                         _EECON2 0196  
                                       _APFCON 011D                i1i2c_setDataCompleteCallback@cb 0075  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELD 018F                                         _ANSELE 0190  
                                       _BORCON 0116                        ?i1_do_I2C_SEND_ADR_READ 0070  
                       ?i1_i2c_driver_resetBus 0070                                         i1l1241 0401  
                                       i1l1242 03FF                                         i1l1261 006E  
                                       i1l1246 0418                                         i1l1271 0074  
                                       i1l1263 006F                                         i1l1255 006B  
                                       i1l1248 041F                                         i1l1273 0075  
                                       i1l1257 006C                                         i1l1266 0071  
                                       i1l1283 00CE                                         i1l1275 00A1  
                                       i1l1268 0072                                         i1l1277 00B0  
                                       i1l1279 00BF                                         i1l5111 150C  
                                       i1l5113 150F                                         i1l5121 1498  
                                       i1l5115 1511                                         i1l5123 149A  
                                       i1l5131 1527                                         i1l5053 1645  
                                       i1l5061 15BE                                         i1l5117 1512  
                                       i1l5125 149B                                         i1l5133 152C  
                                       i1l5141 151A                                         i1l5055 164C  
                                       i1l5057 1651                                         i1l5321 151C  
                                       i1l5129 1525                                         i1l5137 1514  
                                       i1l5145 14F5                                         i1l5153 14B1  
                                       i1l5323 1521                                         i1l5059 15B8  
                                       i1l5315 14FC                                         i1l5139 1516  
                                       i1l5147 14F7                                         i1l5155 14B4  
                                       i1l5317 14FD                                         i1l5149 14FA  
                                       i1l5319 1500                                         u300_20 0410  
                                       u300_21 040F                                         i1l4801 03E5  
                                       i1l5273 145C                                         i1l4811 0409  
                                       i1l4803 03EB                                         i1l4731 144D  
                                       i1l4813 0410                                         i1l4805 03F8  
                                       i1l4821 005F                                         i1l4733 1450  
                                       i1l4725 1655                                         i1l7053 1446  
                                       i1l7061 1687                                         i1l4815 0411  
                                       i1l4807 03FD                                         i1l4831 0097  
                                       i1l4823 0063                                         i1l5279 1477  
                                       i1l4727 165A                                         i1l7063 1690  
                                       i1l7071 16A2                                         i1l4735 147F  
                                       i1l7311 02F0                                         u301_20 0416  
                                       i1l4817 0416                                         u301_21 0415  
                                       i1l4809 0404                                         i1l4841 00BB  
                                       i1l4833 009D                                         i1l4729 1662  
                                       i1l7057 1448                                         i1l7065 1697  
                                       i1l7073 16A9                                         i1l7081 16BB  
                                       i1l7313 02F3                                         i1l7305 02D8  
                                       i1l4819 041D                                         i1l4843 00C4  
                                       i1l4835 00A6                                         i1l4827 0077  
                                       i1l4851 149D                                         i1l7251 05C7  
                                       i1l7323 02FB                                         i1l7307 02E2  
                                       i1l4845 00CA                                         i1l4837 00AC  
                                       i1l4829 008D                                         i1l7085 1675  
                                       i1l7069 1699                                         i1l7077 16AB  
                                       i1l7093 17C9                                         i1l4853 14A0  
                                       i1l7253 05CC                                         i1l7309 02E6  
                                       i1l4839 00B5                                         i1l4951 147B  
                                       i1l7087 167E                                         i1l7079 16B4  
                                       i1l7095 17E0                                         i1l4943 1453  
                                       i1l7343 053A                                         i1l4863 14A7  
                                       i1l4871 14AF                                         i1l7263 05D4  
                                       i1l7271 01DF                                         i1l7319 02F7  
                                       u302_20 041D                                         u310_20 00CA  
                                       u302_21 041C                                         u310_21 00C9  
                                       i1l4953 144A                                         i1l7089 1685  
                                       i1l4945 1456                                         i1l4937 1459  
                                       i1l7345 053D                                         i1l7337 0533  
                                       i1l4857 14A2                                         i1l4865 14AA  
                                       i1l4881 14BB                                         i1l7257 05D0  
                                       i1l7249 05C5                                         i1l7329 02FF  
                                       i1l7099 0002                                         i1l4939 1504  
                                       i1l7339 0536                                         i1l7355 0543  
                                       i1l4859 14A5                                         i1l4875 14B6  
                                       i1l4883 14BE                                         i1l7291 0219  
                                       i1l7283 01EF                                         i1l7275 01E7  
                                       i1l4949 1494                                         i1l7349 053F  
                                       i1l4869 14AC                                         i1l4877 14B9  
                                       i1l7293 0225                                         i1l7295 0230  
                                       i1l7279 01EB                                         u303_20 0097  
                                       u303_21 0096                                         i1l7297 0232  
                                       i1l7289 01F3                                         i1l8701 0314  
                                       i1l7741 064E                                         i1l6943 06E8  
                                       i1l8703 0209                                         i1l7743 0655  
                                       u304_20 009D                                         u304_21 009C  
                                       i1l6945 06EE                                         i1l8705 05E9  
                                       i1l7745 065A                                         i1l7737 0646  
                                       i1l7841 000E                                         i1l6947 06FF  
                                       i1l8707 0558                                         i1l7739 0649  
                                       i1l7851 002C                                         i1l7843 0016  
                                       i1l8709 007F                                         i1l7853 0037  
                                       i1l7845 001A                                         i1l7837 0006  
                                       i1l7855 003C                                         i1l7847 0022  
                                       i1l7839 000A                                         u305_20 00A6  
                                       u305_21 00A5                                         i1l7849 0027  
                                       i1l6987 15F4                                         u306_20 00AC  
                                       u306_21 00AB                                         u307_20 00B5  
                                       _FVRCON 0117                                         u307_21 00B4  
                                       u316_20 164C                                         u308_20 00BB  
                                       u316_21 164B                                         u308_21 00BA  
                                       u309_20 00C4                                         u317_20 15BE  
                                       u309_21 00C3                                         u317_21 15BD  
                                       u335_20 1521                                         u335_21 1520  
                ??i1_do_I2C_SEND_RESTART_WRITE 0070                                         u292_20 165A  
                                       u292_21 1659                                         u621_20 064E  
                                       u621_21 064D                                         u622_20 0655  
                                       u622_21 0654                                         u295_20 03EB  
                                       u295_21 03EA                                         u296_20 03F5  
                                       u552_20 06EE                                         u640_20 0027  
                                       u296_21 03F2                                         u552_21 06ED  
                                       u640_21 0026                                         u641_20 002C  
                           __size_of_i2c_close 001E                                         u641_21 002B  
                                       u297_24 03F7                                         u298_20 03FD  
                                       u642_20 0037                                         _OSCCON 0099  
                                       u298_21 03FC                                         u642_21 0036  
                                       u299_20 0409                                         u643_20 003C  
                                       u635_20 000A                                         u299_21 0408  
                                       u643_21 003B                                         u635_21 0009  
                                       u636_20 000E                                         u636_21 000D  
                                       u637_20 0016                                         u637_21 0015  
                                       u638_20 001A                                         u638_21 0019  
                                       u639_20 0022                                         u639_21 0021  
                                       u577_20 01E6                                         u577_21 01E5  
                                       u578_20 0230                                         u578_21 022F  
                      i1_rd1RegCompleteHandler 1699                                         u579_20 02F0  
                                       u579_21 02EF                                         _SPBRGH 019C  
                                       _SPBRGL 019B                         ??_do_I2C_SEND_ADR_READ 0056  
                                       _WDTCON 0097                                         _SSPADD 0212  
                                       _SSPBUF 0211                       rdBlkRegCompleteHandler@p 005F  
                                       _SSPMSK 0213                                      ??_i2c_ISR 005A  
                      i1_wr1RegCompleteHandler 1687                    ??i1_rdBlkRegCompleteHandler 0079  
                               _clearAlarmFlag 16BD                            _do_I2C_RX$intlevel0 0238  
                        __size_ofi1_returnStop 0002                    __end_of_do_I2C_DO_NACK_STOP 159A  
                            __end_ofi1_i2c_ISR 0670            __end_of_i2c_setDataCompleteCallback 1629  
                  _i2c_setDataCompleteCallback 161B                                _i2c_masterWrite 14C0  
                               __CFG_STVREN$ON 0000                               __end_of_intToBCD 036A  
              __size_of_do_I2C_DO_NACK_RESTART 0009                          ?_i2c_driver_setI2cISR 0056  
                                    ??___lwdiv 005A                              ??_i2c_writeNBytes 0063  
                                    ??___lwmod 005A                         __end_ofi1_do_I2C_RESET 1514  
                              i1_i2c_setBuffer 1654                         ??i1_i2c_driver_sendACK 0070  
                             ?_TMR0_Initialize 0070                                  bcdDateDecr@dt 0056  
                               ?_do_I2C_DO_ACK 0070                    __size_ofi1_i2c_restartWrite 0002  
                       ??i1_i2c_driver_restart 0070                        __end_of_DATAEE_ReadByte 160E  
                       ??i1_i2c_driver_startRX 0070                                      ??_initRTC 0069  
                                bcdDateIncr@dt 0056                 __end_of_do_I2C_DO_ADDRESS_NACK 0533  
                  ?_i2c_setAddressNACKCallback 005B                                ?_WDT_Initialize 0070  
                                 ?_returnReset 005F                  _do_I2C_DO_NACK_STOP$intlevel0 1595  
                     ADC_GetConversion@channel 0059                     i1rdBlkRegCompleteHandler@p 0056  
                        __end_of_TMR0_CallBack 15C4              __size_ofi1_do_I2C_DO_ADDRESS_NACK 002D  
                                 ?_mssp_setIRQ 0070                 __end_ofi1_do_I2C_SEND_ADR_READ 152E  
                            ??_mssp_disableIRQ 0056       TMR0_SetInterruptHandler@InterruptHandler 0056  
   IOCBF4_SetInterruptHandler@InterruptHandler 0056                      ?i1_do_I2C_DO_ADDRESS_NACK 0070  
                             ?_PIN_MANAGER_IOC 0070                                   ??_IOCBF4_ISR 0070  
                            i1_do_I2C_TX_EMPTY 0533                              _SYSTEM_Initialize 1710  
                      __end_of__initialization 005B                                ??_i2c_setBuffer 0058  
                       __end_of_clearAlarmFlag 16D0                 _do_I2C_SEND_ADR_READ$intlevel0 1612  
                             _do_I2C_SEND_STOP 157F                                   i1_returnStop 1446  
                        i1_do_I2C_DO_NACK_STOP 14B6                             __size_of_do_I2C_RX 0053  
                           __size_of_do_I2C_TX 005A                             ?i1_do_I2C_TX_EMPTY 0070  
                           ?_SYSTEM_Initialize 0070              _rdBlkRegCompleteHandler$intlevel0 080C  
                          _i2c_masterOperation 061C                       __size_of_do_I2C_TX_EMPTY 0039  
                             ?i1_mssp_clearIRQ 0070                                ??i1_do_I2C_IDLE 0070  
                                 ?_updateMonth 0070                                ??i1_do_I2C_RCEN 0070  
                      _rdBlkRegCompleteHandler 0808                                    ?_i2c_poller 0070  
                               __pcstackCOMMON 0070                     ??i1_do_I2C_DO_NACK_RESTART 0070  
                          _do_I2C_TX$intlevel0 0130                            ??i1_do_I2C_TX_EMPTY 0070  
                          ??_SYSTEM_Initialize 0059                                      ?_TMR0_ISR 0070  
                             _DATAEE_WriteByte 077C                                ?i1_do_I2C_RESET 0070  
                      __end_of_i2c_driver_open 15F4                        __end_of_i2c_driver_stop 146E  
                            __end_of_i2c_close 1800                                   ?i1_do_I2C_RX 0070  
                                 ?i1_do_I2C_TX 0070                             __end_of_IOCBF4_ISR 1654  
                          i1i2c_restartWrite@p 0056                             _i2c_driver_sendACK 148B  
                    i1_rdBlkRegCompleteHandler 17C9                                  ??_bcdDateDecr 0056  
                         ?_i2c_masterOperation 0070                                  ??_bcdDateIncr 0056  
                                 ??_FIR_filter 005C                 i1i2c_setDataCompleteCallback@p 0077  
                      ?i1_i2c_driver_getRXData 0070                                 _OPTION_REGbits 0095  
                 ??i1_do_I2C_SEND_RESTART_READ 0070                             _i2c_driver_restart 1468  
                              ??_bcdMinuteDecr 0056                                ??_bcdMinuteIncr 0056  
                       __size_ofi1_setCallBack 0026                             _i2c_driver_startRX 146E  
                       ??_i2c_driver_getRXData 0056                                i1setCallBack@cb 0070  
                     i1rd1RegCompleteHandler@p 0056                                i1_do_I2C_DO_ACK 14B1  
              ??_EUSART_SetOverrunErrorHandler 0058                    ?_IOCBF4_SetInterruptHandler 0056  
                          ?_i2c_driver_sendACK 0070                                 setCallBack@idx 005A  
                    __end_ofi1_do_I2C_TX_EMPTY 0567                         _do_I2C_DO_NACK_RESTART 159A  
                    __end_of_SYSTEM_Initialize 1726                      ??i1_rd1RegCompleteHandler 0079  
                          ?_i2c_driver_restart 0070                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                      ??i1_wr1RegCompleteHandler 0079  
                          ?_i2c_driver_startRX 0070                 __size_of_rd2RegCompleteHandler 0017  
                                    ?_i2c_open 0070                  __end_of_rd2RegCompleteHandler 1799  
                                ??_bcdHourDecr 0056                                  ??_bcdHourIncr 0056  
                              ?_clearAlarmFlag 0070                                __CFG_VCAPEN$RA0 0000  
               __size_of_wr2RegCompleteHandler 0017               __size_ofi1_rd2RegCompleteHandler 0012  
                __end_of_wr2RegCompleteHandler 1754                        __end_of_i2c_masterWrite 14C5  
                     i1wr1RegCompleteHandler@p 0056                               _i2c_driver_start 1465  
                        _rd1RegCompleteHandler 176B                        __end_ofi1_i2c_setBuffer 1664  
             __size_ofi1_wr2RegCompleteHandler 0012                          _do_I2C_IDLE$intlevel0 155F  
                        _wr1RegCompleteHandler 1754                   __size_of_i2c_busCollisionISR 0004  
                             ??_FVR_Initialize 0056                _wr1RegCompleteHandler$intlevel0 1758  
              _rd1RegCompleteHandler$intlevel0 176F                                     __pmaintext 0846  
                                ??_do_I2C_IDLE 0056                             __end_of_FIR_filter 012C  
                         __size_of_setCallBack 0027                                  ??_do_I2C_RCEN 0056  
                         ??_i2c_driver_sendACK 0056                         ??_i2c_driver_setI2cISR 0058  
             __end_of_TMR0_SetInterruptHandler 14CB                             __size_of_secondISR 003B  
                                   ??_TMR0_ISR 0072                                ??_do_I2C_DO_ACK 0056  
                                   __pintentry 0004                           ??_i2c_driver_restart 0056  
                 __size_of_i2c_driver_sendNACK 0004                                        _BAUDCON 019F  
                         ??_i2c_driver_startRX 0056                            intToBCD@binaryInput 005E  
             ??_IOCBF4_DefaultInterruptHandler 0070                ?_IOCBF4_DefaultInterruptHandler 0070  
                          i2c_setBuffer@buffer 0059                   __size_of_i2c_driver_resetBus 0001  
               __end_ofi1_i2c_driver_getRXData 1459                 ?_i2c_driver_setBusCollisionISR 0056  
                      __size_of_ADC_Initialize 0008                          ??_i2c_masterOperation 005D  
                             ?_DATAEE_ReadByte 0070                              __end_of_do_I2C_RX 0287  
                            __end_of_do_I2C_TX 0186                          i2c_readDataBlock@data 0061  
                     ?i1_do_I2C_SEND_ADR_WRITE 0070                             __size_of_updateRTC 001B  
                                      _OSCTUNE 0098                                     _displayNum 1800  
                     ??_EUSART_SetErrorHandler 0058                            __size_of_i2c_poller 000E  
                                      _SSPCON1 0215                                        _SSPCON2 0216  
                      ??_do_I2C_SEND_ADR_WRITE 0057            _do_I2C_SEND_RESTART_WRITE$intlevel0 1571  
                                      _SSPSTAT 0214                            __end_of_bcdDateDecr 0757  
                  ??_do_I2C_SEND_RESTART_WRITE 0056                            __end_of_bcdDateIncr 0732  
                                    ?_intToBCD 005E                         ?i1_do_I2C_DO_NACK_STOP 0070  
                            _mssp_IRQisEnabled 15A3                                     ??_i2c_open 0058  
                         DATAEE_WriteByte@bAdd 0057                                        _i2c_ISR 0567  
                    ??_rdBlkRegCompleteHandler 0060                              _mssp_waitForEvent 1664  
                           ?_mssp_IRQisEnabled 0070                          __end_of_mssp_clearIRQ 1462  
                         _ADC_InterruptHandler 0032                          _returnReset$intlevel0 14D5  
                        _do_I2C_RCEN$intlevel0 15B1                                  i1_setCallBack 06E7  
                           ?_mssp_waitForEvent 0070                              _temp_display_mode 0039  
             _do_I2C_DO_ADDRESS_NACK$intlevel0 0503                    __end_ofi1_i2c_driver_TXData 1498  
                          __end_of_bcdHourDecr 0846                            __end_of_bcdHourIncr 07E5  
          __size_of_i2c_setAddressNACKCallback 000E                         __size_ofi1_returnReset 0002  
                          ??_mssp_IRQisEnabled 0056                                        ___lwdiv 03A8  
                                      ___lwmod 04CA                         __size_ofi1_mssp_setIRQ 0003  
                            ??_do_I2C_TX_EMPTY 0056                               ?_i2c_driver_open 0070  
                          ??_mssp_waitForEvent 0056                               ?_i2c_driver_stop 0070  
                       i2c_writeNBytes@address 0063                    __end_ofi1_i2c_driver_isNACK 150C  
                      __end_ofi1_do_I2C_DO_ACK 14B6                                        __ptext1 07E5  
                                      __ptext2 17B1                                        __ptext3 1799  
                                      __ptext4 0670                                        __ptext5 0698  
                                      __ptext6 0323                                        __ptext7 04CA  
                                      __ptext8 03A8                                        __ptext9 0186  
                           i2c_readDataBlock@d 0066                            __end_of_do_I2C_IDLE 1564  
                          __end_of_do_I2C_RCEN 15B8                                        _initRTC 0186  
                        _OSCILLATOR_Initialize 15C4                        ??i1_i2c_driver_sendNACK 0070  
                  __end_of_do_I2C_SEND_RESTART 157F                       ??_PIN_MANAGER_Initialize 0058  
                                      _rtcData 0042                                      _IOCBFbits 0396  
                                bcdHourDecr@hr 0057                         i2c_masterOperation@ret 005F  
                                    _IOCBNbits 0395                        ??i1_i2c_driver_resetBus 0070  
                                    _IOCBPbits 0394                             i1_do_I2C_SEND_STOP 14AC  
                   _do_I2C_SEND_STOP$intlevel0 1583                     __size_ofi1_do_I2C_TX_EMPTY 0034  
                     _do_I2C_SEND_RESTART_READ 1564                     __size_of_SYSTEM_Initialize 0016  
                                      clrloop0 14F0                      __end_of_mssp_IRQisEnabled 15AD  
                            __end_of_secondISR 0420                                  bcdHourIncr@hr 0057  
                         __size_of_returnReset 0006                           end_of_initialization 005B  
                         __size_of_mssp_setIRQ 0003                                     ??_intToBCD 0060  
                    __end_of_mssp_waitForEvent 1675          __end_of_EUSART_SetOverrunErrorHandler 1549  
       __size_of_EUSART_SetOverrunErrorHandler 0009                  _EUSART_SetOverrunErrorHandler 1540  
                    __size_of_i2c_restartWrite 0006                            ?i1_do_I2C_SEND_STOP 0070  
                       ?_rd1RegCompleteHandler 005F                                _i2c_writeNBytes 05F2  
                             ?_i2c_masterWrite 0070                              _EUSART_Initialize 0757  
                       ?_wr1RegCompleteHandler 005F                                 ?i1_setCallBack 0070  
                             ?i1_i2c_setBuffer 0070                             ?_EUSART_Initialize 0070  
                            __end_of_updateRTC 0800                                      _RCSTAbits 019D  
                    _do_I2C_SEND_RESTART_WRITE 156D                           __size_of_updateMonth 0018  
                        i1_do_I2C_SEND_RESTART 14A7               __end_ofi1_do_I2C_DO_ADDRESS_NACK 05F2  
                           _button_press_count 0020                __end_ofi1_do_I2C_SEND_ADR_WRITE 151C  
                              _mssp_disableIRQ 1462                            ??_EUSART_Initialize 0058  
                             ??_WDT_Initialize 0056                                      i1_i2c_ISR 0646  
                         ??i1_do_I2C_SEND_STOP 0070                                     _returnStop 14CB  
                     _TMR0_SetInterruptHandler 14C5                                      _PORTBbits 000D  
              __end_of_rdBlkRegCompleteHandler 0826                       __end_of_do_I2C_SEND_STOP 1588  
           __end_ofi1_do_I2C_SEND_RESTART_READ 14A2                     i1_do_I2C_SEND_RESTART_READ 149D  
                                 _display_mode 003A                                    _bcdDateDecr 0732  
                                  _bcdDateIncr 070D                               __CFG_FOSC$INTOSC 0000  
                         __size_ofi1_do_I2C_RX 004B                           __size_ofi1_do_I2C_TX 0055  
                                   _updateDate 1799           __size_of_i2c_setDataCompleteCallback 000E  
                                i1_returnReset 1448                                    returnStop@p 005F  
              __size_of_EUSART_SetErrorHandler 0009                                  i1_mssp_setIRQ 1459  
                     __end_of_DATAEE_WriteByte 07A0                          updateAlarm1@bcdMinute 0064  
           __size_ofi1_rdBlkRegCompleteHandler 0019                   i2c_setDataCompleteCallback@p 005D  
                    __end_of_EUSART_Initialize 077C                        i1_rd2RegCompleteHandler 16AB  
                                ?_updateAlarm1 0064                                  ?_updateAlarm2 0064  
                                  _bcdHourDecr 0826                                    _bcdHourIncr 07C4  
                                    _TXSTAbits 019E                            updateMonth@bcdMonth 0065  
                      i1_wr2RegCompleteHandler 1675                              updateDate@bcdDate 0065  
                __size_of_do_I2C_SEND_ADR_READ 000D                          updateAlarm2@bcdMinute 0064  
                             ??i1_do_I2C_RESET 0070                       _flag_time_display_update 0041  
                                 ??_i2c_poller 005D                                    _do_I2C_IDLE 155B  
                                  _do_I2C_RCEN 15AD                     __end_ofi1_i2c_restartWrite 0004  
                                intToBCD@shift 0065                     _EUSART_DefaultErrorHandler 0000  
         __end_of_i2c_driver_clearBusCollision 144D          __size_of_i2c_driver_clearBusCollision 0003  
                 _i2c_driver_clearBusCollision 144A                             _mode_timeout_count 003E  
                            __size_of_TMR0_ISR 0008                                     ?i1_i2c_ISR 0070  
                               _ADC_Initialize 0800                               ?i1_do_I2C_DO_ACK 0070  
                       ?_OSCILLATOR_Initialize 0070                  __size_ofi1_i2c_driver_sendACK 0004  
                            intToBCD@bcdResult 0063                   __size_of_do_I2C_DO_NACK_STOP 0009  
                     __end_of_i2c_driver_start 1468                  __size_ofi1_i2c_driver_restart 0003  
                      ?_do_I2C_DO_NACK_RESTART 0070                            start_initialization 0046  
                           updateRTC@bcdMinute 0064                                      _i2c_close 17E2  
                __size_ofi1_i2c_driver_startRX 0003                            _i2c_busCollisionISR 1477  
                     __size_of_TMR0_Initialize 0016                __size_of_PIN_MANAGER_Initialize 002D  
                               ?i1_returnReset 0056                               FIR_filter@buffer 00BD  
                      __end_of_i2c_writeNBytes 061C            __end_ofi1_do_I2C_SEND_RESTART_WRITE 14A7  
                  i1_do_I2C_SEND_RESTART_WRITE 14A2                               ??_clearAlarmFlag 0064  
                               ?i1_mssp_setIRQ 0070                                 _flag_dot_blink 0040  
                                FIR_filter@sum 00CD                     __size_of_mssp_IRQisEnabled 000A  
                             FIR_filter@oldest 002C                               FIR_filter@sample 005A  
                                 setCallBack@p 0058                             __end_of_i2c_poller 1637  
                            _displayRefreshISR 005F                            _i2c_driver_sendNACK 148F  
                              i2c_open@address 0059                        i2c_setBuffer@bufferSize 0056  
                   __size_of_mssp_waitForEvent 0011                                 ??_updateAlarm1 0065  
                               ??_updateAlarm2 0065                         rd1RegCompleteHandler@p 005F  
                           ?_displayRefreshISR 0070                            _i2c_driver_resetBus 1445  
                              ??i1_setCallBack 0073                        _flag_button_press_count 0024  
                          DATAEE_ReadByte@bAdd 0056                                  ?_bcdMonthDecr 0070  
                        __end_of_i2c_setBuffer 173D                              __size_of_i2c_open 0051  
                     __size_of_PIN_MANAGER_IOC 0009                                  ?_bcdMonthIncr 0070  
        __end_ofi1_i2c_setDataCompleteCallback 1601         __size_ofi1_i2c_setDataCompleteCallback 000D  
                i1_i2c_setDataCompleteCallback 15F4                 ?_EUSART_SetOverrunErrorHandler 0056  
                         ?_i2c_busCollisionISR 0070                        __end_of_mssp_disableIRQ 1465  
                             i1setCallBack@idx 0074                            ??_displayRefreshISR 0070  
                   _EUSART_FramingErrorHandler 00D5                          __end_ofi1_do_I2C_IDLE 149D  
                        __end_ofi1_do_I2C_RCEN 14FC                      i1i2c_setBuffer@bufferSize 0070  
                       ?i1_do_I2C_SEND_RESTART 0070                         _EUSART_SetErrorHandler 152E  
                       wr1RegCompleteHandler@p 005F                         __size_of_TMR0_CallBack 000C  
                       __end_of_ADC_Initialize 0808                           ?_i2c_driver_sendNACK 0070  
                                ?_do_I2C_RESET 0070                      _do_I2C_TX_EMPTY$intlevel0 0424  
                     __size_ofi1_mssp_clearIRQ 0003                                    ?_returnStop 005F  
                         ?_i2c_driver_resetBus 0070                              _i2c_driver_TXData 14DD  
               __end_of_do_I2C_DO_NACK_RESTART 15A3                  ?_i2c_driver_clearBusCollision 0070  
                            _i2c_driver_i2cISR 0034                       i1_do_I2C_DO_ADDRESS_NACK 05C5  
                           ?_i2c_driver_TXData 0070                                    __pbssCOMMON 0079  
                                  ?_updateDate 0070                                     ?_i2c_close 0070  
                                    ___latbits 0003                                  __pcstackBANK0 0056  
            __size_ofi1_do_I2C_DO_NACK_RESTART 0005                       i1rd2RegCompleteHandler@p 0056  
                                    _do_I2C_RX 0234                      ?i1_do_I2C_DO_NACK_RESTART 0070  
                                    _do_I2C_TX 012C                      __end_of_displayRefreshISR 00CF  
                            _i2c_driver_isNACK 1552                          __end_of_bcdMinuteDecr 04CA  
                      ??i1_do_I2C_DO_NACK_STOP 0070                          __end_of_bcdMinuteIncr 0492  
                             updateRTC@bcdHour 0066                      ??i1_rd2RegCompleteHandler 0079  
                __size_of_i2c_driver_getRXData 0003         __end_of_IOCBF4_DefaultInterruptHandler 1443  
      __size_of_IOCBF4_DefaultInterruptHandler 0001                 _IOCBF4_DefaultInterruptHandler 1442  
                           ?_i2c_driver_isNACK 0070                            ??_i2c_driver_TXData 0056  
               __size_of_do_I2C_SEND_ADR_WRITE 000C                      ??i1_wr2RegCompleteHandler 0079  
                __end_of_do_I2C_SEND_ADR_WRITE 15E8                ??_i2c_driver_setBusCollisionISR 0058  
                               i1setCallBack@p 0072                               _i2c_restartWrite 14D7  
                   __size_of_EUSART_Initialize 0025                     _i2c_restartWrite$intlevel0 14DB  
                                     ?_i2c_ISR 0070                _do_I2C_SEND_ADR_WRITE$intlevel0 15E0  
             __size_ofi1_do_I2C_SEND_ADR_WRITE 0008                                 ??_bcdMonthDecr 0056  
                              _do_I2C_TX_EMPTY 0420                                 ??_bcdMonthIncr 0056  
                        _TMR0_InterruptHandler 0079                              __size_of_intToBCD 0047  
                                ??_setCallBack 0059                                      __pnvBANK1 00D7  
                     i1wr2RegCompleteHandler@p 0056                          _rd2RegCompleteHandler 1782  
                          ??_i2c_driver_isNACK 0056                          ??_i2c_busCollisionISR 0070  
                        __end_of_fsmStateTable 1020                               ___lwdiv@dividend 0058  
                       _PIN_MANAGER_Initialize 0598                          _wr2RegCompleteHandler 173D  
                          clearAlarmFlag@rData 0065                    __size_of_i2c_driver_sendACK 0004  
                               ??_do_I2C_RESET 0056                                      __ptext100 1514  
                                    __ptext101 1525                                      __ptext110 1504  
                                    __ptext102 14AC                                      __ptext111 1493  
                                    __ptext103 14A7                                      __ptext120 1687  
                                    __ptext112 1456                                      __ptext104 14A2  
                                    __ptext121 1448                                      __ptext113 147F  
                                    __ptext105 149D                                      __ptext130 1477  
                                    __ptext122 1446                                      __ptext114 1444  
                                    __ptext106 1498                                      __ptext131 144A  
                                    __ptext123 1675                                      __ptext115 1453  
                                    __ptext107 150C                                      __ptext132 14FC  
                                    __ptext124 15F4                                      __ptext116 0002  
                                    __ptext108 0533                          ??_i2c_driver_sendNACK 0056  
                                    __ptext133 15B8                                      __ptext125 06E7  
                                    __ptext117 17C9                                      __ptext109 1459  
                                    __ptext134 1443                                      __ptext126 1654  
                                    __ptext118 16AB                                      __ptext135 005F  
                                    __ptext127 1450                                      __ptext119 1699  
                                    __ptext136 151C                                      __ptext128 144D  
                                    __ptext137 1645                                      __ptext129 147B  
                                    __ptext138 1442                                      __ptext139 03E5  
                  __end_of_i2c_masterOperation 0646                                       ?___lwdiv 0056  
                     ??_do_I2C_DO_ADDRESS_NACK 0056                                       ?___lwmod 0056  
                              ?_ADC_Initialize 0070                  __size_of_i2c_driver_setI2cISR 0006  
                  __size_of_i2c_driver_restart 0003                           i2c_readDataBlock@len 0062  
                    __end_of_i2c_driver_TXData 14E3                           i2c_readDataBlock@reg 0060  
                        __end_of_do_I2C_DO_ACK 1591                          ??_i2c_driver_resetBus 0056  
                  __size_of_i2c_driver_startRX 0003                                    ??i1_i2c_ISR 0073  
                 ??_INTERRUPT_InterruptManager 0076                     ??_do_I2C_SEND_RESTART_READ 0056  
                     ??i1_do_I2C_SEND_ADR_READ 0070                                       ?_initRTC 0070  
                                  _flag_alarm1 003C                                    _flag_alarm2 003B  
                              ??i1_returnReset 0079                              _i2c_readDataBlock 036A  
                    __end_of_i2c_driver_isNACK 155B                       ?i1_rd1RegCompleteHandler 0056  
           __size_of_do_I2C_SEND_RESTART_WRITE 0009                                ??i1_mssp_setIRQ 0070  
               __size_ofi1_i2c_driver_sendNACK 0004                  __end_ofi1_i2c_driver_sendNACK 1483  
                     ?i1_wr1RegCompleteHandler 0056                                     ?_do_I2C_RX 0070  
                                   ?_do_I2C_TX 0070                             ?_i2c_readDataBlock 0060  
                             ___lwdiv@quotient 005C                               ?_i2c_writeNBytes 0060  
               __size_ofi1_i2c_driver_resetBus 0001                                  _TMR0_CallBack 15B8  
                __end_ofi1_i2c_driver_resetBus 1445                       __size_of_DATAEE_ReadByte 000D  
                      ??_rd1RegCompleteHandler 0060                              _i2c_ISR$intlevel0 056B  
                      ??_wr1RegCompleteHandler 0060                                   _buzz_timeout 0038  
                            ??_TMR0_Initialize 0058                            ??_i2c_readDataBlock 0064  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 0056  
                                     _LATBbits 010D                                      _secondISR 03E5  
                                     _LATCbits 010E                                       _LATEbits 0110  
                          __size_of_returnStop 0006                                      clear_ram0 14EF  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 007C            __size_of_INTERRUPT_InterruptManager 0040  
                   ??_TMR0_SetInterruptHandler 0058                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0058                                       _PIR2bits 0012  
                             ?_mssp_disableIRQ 0070                            __size_of_updateDate 0018  
                                     _TMR0_ISR 14FC              _EUSART_DefaultOverrunErrorHandler 0000  
                 ?_i2c_setDataCompleteCallback 005B                 ?i1_i2c_setDataCompleteCallback 0075  
                                  _displayBuff 0028                            __end_of_setCallBack 06E7  
                            ??_PIN_MANAGER_IOC 0070                                      _updateRTC 07E5  
                         __end_of_updateAlarm1 06C0                           __end_of_updateAlarm2 0698  
                                   _ADCON0bits 009D                      __end_of_i2c_readDataBlock 03A8  
                 __size_ofi1_i2c_driver_TXData 0005                              i1_i2c_driver_stop 1450  
                 i2c_setAddressNACKCallback@cb 005B                                    _filter_temp 002E  
                            ?_do_I2C_SEND_STOP 0070                    ?i1_do_I2C_SEND_RESTART_READ 0070  
                      __size_of_FVR_Initialize 0004                                   ?_bcdDateDecr 0070  
                                 ?_bcdDateIncr 0070                             ?i1_i2c_driver_stop 0070  
                                  ??_i2c_close 0056                                  ??_returnReset 0060  
                           ??_do_I2C_SEND_STOP 0056                         __size_of_mssp_clearIRQ 0003  
                     __size_of_i2c_driver_open 000C                          DATAEE_WriteByte@bData 0056  
                            ??i1_mssp_clearIRQ 0070                   ??_i2c_setAddressNACKCallback 005E  
                     __size_of_i2c_driver_stop 0003                     __size_of_displayRefreshISR 0070  
            __end_of_do_I2C_SEND_RESTART_WRITE 1576                   __size_ofi1_i2c_driver_isNACK 0008  
                                ??_mssp_setIRQ 0056                 ??_i2c_driver_clearBusCollision 0070  
                               ?_TMR0_CallBack 0070                        __end_of_do_I2C_TX_EMPTY 0459  
                     ?_rdBlkRegCompleteHandler 005F                            ??i1_i2c_driver_stop 0070  
                            ?_DATAEE_WriteByte 0056                   __size_of_do_I2C_SEND_RESTART 0009  
                      _do_I2C_DO_ACK$intlevel0 158C                                       _i2c_open 0287  
                                ?i1_returnStop 0056                                   ?_bcdHourDecr 0070  
                       ?_rd2RegCompleteHandler 005F                                     ?_secondISR 0070  
                                 ?_bcdHourIncr 0070                             ??_DATAEE_WriteByte 0057  
                          _do_I2C_DO_NACK_STOP 1591                                     _EECON1bits 0195  
                             __size_of_i2c_ISR 0031                         ?_wr2RegCompleteHandler 005F  
              _wr2RegCompleteHandler$intlevel0 1741                _rd2RegCompleteHandler$intlevel0 1786  
                                ??_updateMonth 0064          __end_of_i2c_driver_setBusCollisionISR 14E9  
       __size_of_i2c_driver_setBusCollisionISR 0006                  _i2c_driver_setBusCollisionISR 14E3  
                            _ADC_GetConversion 07A0                            i2c_writeNBytes@data 0060  
                                 ?_do_I2C_IDLE 0070                       ??i1_i2c_driver_getRXData 0070  
                                 ?_do_I2C_RCEN 0070                        ??_OSCILLATOR_Initialize 0056  
                          _EUSART_ErrorHandler 00D1                             ?_ADC_GetConversion 0056  
                     __size_of_i2c_masterWrite 0005                     __size_of_i2c_driver_TXData 0006  
              __size_of_do_I2C_DO_ADDRESS_NACK 0034                      __end_ofi1_i2c_driver_stop 1453  
                           __end_of_displayNum 180A                          i1i2c_setBuffer@buffer 0073  
                             __size_of___lwdiv 003D                                     ?_updateRTC 0064  
                             __size_of___lwmod 0035                  ??_i2c_setDataCompleteCallback 005E  
              __end_ofi1_rd1RegCompleteHandler 16AB                       __size_ofi1_i2c_setBuffer 0010  
                                ??i1_do_I2C_RX 0070                                  ??i1_do_I2C_TX 0070  
           _do_I2C_SEND_RESTART_READ$intlevel0 1568                    __size_ofi1_do_I2C_SEND_STOP 0005  
                                     _bcd_temp 0030                __end_ofi1_wr1RegCompleteHandler 1699  
                         ?_do_I2C_DO_NACK_STOP 0070                   __end_of_do_I2C_SEND_ADR_READ 161B  
                          ??_ADC_GetConversion 0058                __size_ofi1_do_I2C_SEND_ADR_READ 0009  
                         __end_of_bcdMonthDecr 16E5                           __end_of_bcdMonthIncr 16FA  
                   __size_of_i2c_driver_isNACK 0009                        _IOCBF4_InterruptHandler 00D7  
                            ?_i2c_driver_start 0070                               __size_of_initRTC 0059  
                           i1_i2c_restartWrite 0002                                ___lwdiv@divisor 0056  
                                  ??_do_I2C_RX 0056                                    ??_do_I2C_TX 0057  
                              ___lwdiv@counter 005B                             ??_i2c_driver_start 0056  
                                     __ptext10 036A                                       __ptext11 16BD  
                                     __ptext20 15A3                                       __ptext12 05F2  
                                     __ptext21 1629                                       __ptext13 1637  
                                     __ptext30 15AD                                       __ptext22 1664  
                                     __ptext14 0287                                       __ptext31 15DC  
                                     __ptext23 0567                                       __ptext15 14E9  
                                     __ptext40 1474                                       __ptext32 160E  
                                     __ptext24 0234                                       __ptext16 14E3  
                                     __ptext41 1552                                       __ptext33 157F  
                                     __ptext25 012C                                       __ptext17 15E8  
                                     __ptext50 1754                                       __ptext42 14DD  
                                     __ptext34 1576                                       __ptext26 04FF  
                                     __ptext18 14C0                                       __ptext51 14D7  
                                     __ptext43 1471                                       __ptext35 156D  
                                     __ptext27 159A                                       __ptext19 061C  
                                     __ptext60 148B                                       __ptext52 14D1  
                                     __ptext44 148F                                       __ptext36 1564  
                                     __ptext28 1591                                       __ptext61 1465  
                                     __ptext53 14CB                                       __ptext45 1445  
                                     __ptext37 155B                                       __ptext29 1588  
                                     __ptext70 0826                                       __ptext62 17E2  
                                     __ptext54 173D                                       __ptext46 146E  
                                     __ptext38 15D0                                       __ptext71 070D  
                                     __ptext63 1462                                       __ptext55 161B  
                                     __ptext47 0808                                       __ptext39 0420  
                                     __ptext80 1483                                       __ptext72 0732  
                                     __ptext64 145F                                       __ptext56 06C0  
                                     __ptext48 1782                                       __ptext81 0757  
                                     __ptext73 1710                                       __ptext65 16E5  
                                     __ptext57 1726                                       __ptext49 176B  
                                     __ptext82 1540                                       __ptext74 1487  
                                     __ptext66 16D0                                       __ptext58 146B  
                                     __ptext91 0646                                       __ptext83 1537  
                                     __ptext75 16FA                                       __ptext67 0459  
                                     __ptext59 1468                                       __ptext92 145C  
                                     __ptext84 152E                                       __ptext76 14C5  
                                     __ptext68 0492                                       __ptext93 02D8  
                                     __ptext85 0800                                       __ptext77 0598  
                                     __ptext69 07C4                                       __ptext94 01DF  
                                     __ptext86 00CF                                       __ptext78 1549  
                                     __ptext95 05C5                                       __ptext87 077C  
                                     __ptext79 15C4                                       __ptext96 14BB  
                                     __ptext88 1601                                       __ptext97 14B6  
                                     __ptext89 07A0                                       __ptext98 14B1  
                                     __ptext99 14F5                   ??_IOCBF4_SetInterruptHandler 0058  
                         __end_of_do_I2C_RESET 15DC                                     _IOCBF4_ISR 1645  
                  DATAEE_WriteByte@GIEBitValue 0058                                 ??i1_returnStop 0079  
                                     _intToBCD 0323                        i1_do_I2C_SEND_ADR_WRITE 1514  
                          ?i1_i2c_restartWrite 0056                   __end_ofi1_i2c_driver_sendACK 147F  
                          __end_of_returnReset 14D7                                  __size_of_main 07BA  
                          __end_of_mssp_setIRQ 1477                   __end_ofi1_i2c_driver_restart 1450  
                         i1i2c_driver_TXData@d 0070           __end_of_TMR0_DefaultInterruptHandler 1444  
        __size_of_TMR0_DefaultInterruptHandler 0001                   _TMR0_DefaultInterruptHandler 1443  
                            ??_DATAEE_ReadByte 0056                      __end_of_ADC_GetConversion 07C4  
                 __end_ofi1_i2c_driver_startRX 1456                       i2c_readDataBlock@address 0065  
                                  _setCallBack 06C0                        ??i1_do_I2C_SEND_RESTART 0070  
                      ?_EUSART_SetErrorHandler 0056                                  _mssp_clearIRQ 145F  
                      i2c_masterOperation@read 005E           __size_ofi1_do_I2C_SEND_RESTART_WRITE 0005  
EUSART_SetOverrunErrorHandler@interruptHandler 0056                                       int$flags 007E  
                   ??i1_do_I2C_DO_ADDRESS_NACK 0070               __end_ofi1_do_I2C_DO_NACK_RESTART 14C0  
           __end_of_INTERRUPT_InterruptManager 0044                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 1540         __size_of_EUSART_SetFramingErrorHandler 0009  
                _EUSART_SetFramingErrorHandler 1537                            __end_of_updateMonth 17C9  
                         ??i1_i2c_restartWrite 0079               __end_of_do_I2C_SEND_RESTART_READ 156D  
                                 ??_returnStop 0060                       __end_of_i2c_restartWrite 14DD  
                        ??_do_I2C_DO_NACK_STOP 0056                     __size_of_i2c_readDataBlock 003E  
                     mssp_waitForEvent@timeout 0056            __size_of_IOCBF4_SetInterruptHandler 0009  
         i2c_driver_setBusCollisionISR@handler 0056                                     _FIR_filter 00CF  
                                   _INTCONbits 000B                                   ??_updateDate 0064  
                              ??_TMR0_CallBack 0072                                     _FVRCONbits 0117  
                           i2c_writeNBytes@len 0061                            __end_ofi1_do_I2C_RX 0323  
                          __end_ofi1_do_I2C_TX 0234                       __size_ofi1_do_I2C_DO_ACK 0005  
                             ?_do_I2C_TX_EMPTY 0070                        __size_of_WDT_Initialize 0004  
                       _do_I2C_DO_ADDRESS_NACK 04FF                 __size_ofi1_do_I2C_DO_NACK_STOP 0005  
                                     intlevel1 0000                  __end_ofi1_do_I2C_DO_NACK_STOP 14BB  
                       _do_I2C_RESET$intlevel0 15D4                         rd2RegCompleteHandler@p 005F  
                            ??_i2c_driver_open 0056                               ___lwmod@dividend 0058  
                            ??_i2c_driver_stop 0056                        ?_PIN_MANAGER_Initialize 0070  
                                  ??_secondISR 0070                              i2c_restartWrite@p 005F  
               __end_of_EUSART_SetErrorHandler 1537                         i1_do_I2C_SEND_ADR_READ 1525  
                            __CFG_CLKOUTEN$OFF 0000                     ?i1_rdBlkRegCompleteHandler 0056  
                           __end_of_returnStop 14D1                                 ?_mssp_clearIRQ 0070  
                        __end_ofi1_setCallBack 070D                               ??_ADC_Initialize 0056  
          __size_ofi1_do_I2C_SEND_RESTART_READ 0005                  ?_TMR0_DefaultInterruptHandler 0070  
                 __end_of_i2c_driver_getRXData 1474                             __end_of_updateDate 17B1  
                        __size_of_updateAlarm1 0028                          __size_of_updateAlarm2 0028  
              __size_ofi1_i2c_driver_getRXData 0003                         wr2RegCompleteHandler@p 005F  
EUSART_SetFramingErrorHandler@interruptHandler 0056                                bcdMinuteDecr@mn 0057  
                   __size_ofi1_i2c_driver_stop 0003                                    ??_updateRTC 0065  
                           displayRefreshISR@i 007B                                  __pstringtext1 1000  
                                __pstringtext2 1800                                bcdMinuteIncr@mn 0057  
                               _FVR_Initialize 1483                        __size_ofi1_do_I2C_RESET 0008  
                                   _OPTION_REG 0095                                ___lwmod@divisor 0056  
                              _TMR0_Initialize 16FA                              ??_i2c_masterWrite 0060  
           __end_of_i2c_setAddressNACKCallback 1645                     _i2c_setAddressNACKCallback 1637  
                              ___lwmod@counter 005B                         __size_of_i2c_setBuffer 0017  
                            ??i1_i2c_setBuffer 0072                                    _returnReset 14D1  
             _do_I2C_DO_NACK_RESTART$intlevel0 159E                           __size_of_bcdDateDecr 0025  
                                  _SSPCON1bits 0215                                    _SSPCON2bits 0216  
                         __size_of_bcdDateIncr 0025                                    _mssp_setIRQ 1474  
                    ??i1_do_I2C_SEND_ADR_WRITE 0070                   __end_of_i2c_driver_setI2cISR 14EF  
                       __size_ofi1_do_I2C_IDLE 0005                         __size_ofi1_do_I2C_RCEN 0007  
                                  ?_IOCBF4_ISR 0070                 __end_of_PIN_MANAGER_Initialize 05C5  
                  __end_of_i2c_busCollisionISR 147B                 __size_of_rd1RegCompleteHandler 0017  
                __end_of_rd1RegCompleteHandler 1782                            i1_i2c_driver_TXData 1493  
                              _PIN_MANAGER_IOC 151C                                   _updateAlarm1 0698  
                                 _updateAlarm2 0670                 __size_of_wr1RegCompleteHandler 0017  
             __size_ofi1_rd1RegCompleteHandler 0012                  __end_of_wr1RegCompleteHandler 176B  
                        _do_I2C_SEND_ADR_WRITE 15DC                    __end_of_i2c_driver_sendNACK 1493  
                   __size_of_ADC_GetConversion 0024                           _do_I2C_SEND_ADR_READ 160E  
            __end_ofi1_rdBlkRegCompleteHandler 17E2               __size_ofi1_wr1RegCompleteHandler 0012  
                   __end_of_i2c_driver_sendACK 148F                           __size_of_bcdHourDecr 0020  
                      __size_of_clearAlarmFlag 0013                           __size_of_bcdHourIncr 0021  
                                  _updateMonth 17B1                    __end_of_i2c_driver_resetBus 1446  
